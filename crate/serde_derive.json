{"root":"0:0:1665","crate_version":"1.0.158","includes_private":false,"index":{"2:11833:34772":{"id":"2:11833:34772","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11838:25677":{"id":"2:11838:25677","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48675:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48673:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9706:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9706:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5288:2012":{"id":"5:5288:2012","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:4404":{"id":"2:11945:4404","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5303:35444":{"id":"5:5303:35444","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:1835","`String`":"5:7157:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1835","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:4419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11865:2521":{"id":"2:11865:2521","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48675:176","prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48673:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:928:1659":{"id":"0:928:1659","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11932:34789":{"id":"2:11932:34789","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11545:14045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:34778":{"id":"2:11894:34778","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48673:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5305:2293":{"id":"5:5305:2293","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11945:4404"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11850:8034":{"id":"2:11850:8034","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50650:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:34777":{"id":"2:11885:34777","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11525:14047","str::split":"2:11873:25711","prim@char":"1:11864:410","str::split_terminator":"2:11882:34776"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50732:8123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11545:14045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11862:25722":{"id":"2:11862:25722","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11545:14045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11825:2086":{"id":"2:11825:2086","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11846:25703":{"id":"2:11846:25703","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11847:25704"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:34790":{"id":"2:11935:34790","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11844:34773":{"id":"2:11844:34773","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11870:1369","str::slice_mut_unchecked":"2:11845:34774","crate::ops::Index":"2:2993:2252"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11849:2296":{"id":"2:11849:2296","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50640:8117","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11845:34774":{"id":"2:11845:34774","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11870:1369","crate::ops::IndexMut":"2:2997:3213","str::slice_unchecked":"2:11844:34773"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:34785":{"id":"2:11916:34785","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5306:2292":{"id":"5:5306:2292","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11946:4405"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1766":{"id":"0:8:1766","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:11855:34144":{"id":"2:11855:34144","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50956:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11829:34771":{"id":"2:11829:34771","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11827:34770"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11897:34779":{"id":"2:11897:34779","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48673:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11545:14045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1665":{"id":"0:0:1665","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[110,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.158\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:927:1650","0:928:1659"],"is_stripped":false}},"2:11949:3364":{"id":"2:11949:3364","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4503:3364"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50972:3365","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11842:25679":{"id":"2:11842:25679","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9706:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9706:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:62:341":{"id":"0:62:341","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1778,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:84-0:956:1862"],"is_stripped":false}},"0:981:1865":{"id":"0:981:1865","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"2:11834:310":{"id":"2:11834:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11835:25680","`u8`":"1:11881:1465"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:34782":{"id":"2:11909:34782","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11525:14047","`DoubleEndedIterator`":"2:7129:120","prim@char":"1:11864:410","str::match_indices":"2:11906:34781"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50832:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11545:14045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:1858":{"id":"2:11941:1858","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11487:126","`FromStr`":"2:11486:3230"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48817:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11486:3230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11486:3230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:33005":{"id":"2:11851:33005","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11852:33000"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50938:8135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11848:2302":{"id":"2:11848:2302","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50634:8116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5291:35441":{"id":"5:5291:35441","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:25723":{"id":"2:11926:25723","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48673:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:25717":{"id":"2:11888:25717","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11525:14047","str::rsplitn":"2:11891:25719"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50768:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:927:1650":{"id":"0:927:1650","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11853:31648":{"id":"2:11853:31648","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50918:8133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:25713":{"id":"2:11876:25713","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11349:8044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:34781":{"id":"2:11906:34781","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11525:14047","`DoubleEndedIterator`":"2:7129:120","prim@char":"1:11864:410","str::rmatch_indices":"2:11909:34782"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50814:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:34787":{"id":"2:11919:34787","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:1897":{"id":"2:11923:1897","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:4402":{"id":"2:11943:4402","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:323-0:952:1768":{"id":"0:323-0:952:1768","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:952:1768","glob":false}},"2:11856:1915":{"id":"2:11856:1915","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5294:35442":{"id":"5:5294:35442","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11854:34775":{"id":"2:11854:34775","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50928:8134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11826:34769":{"id":"2:11826:34769","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11912:34783":{"id":"2:11912:34783","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11950:34793":{"id":"2:11950:34793","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4500:34793"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50981:8074","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:25719":{"id":"2:11891:25719","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11864:410","str::splitn":"2:11888:25717","self::pattern":"2:11525:14047"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50786:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11545:14045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11859:25721":{"id":"2:11859:25721","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11836:1878":{"id":"2:11836:1878","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48675:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48673:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9706:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9706:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:4403":{"id":"2:11944:4403","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11832:2712":{"id":"2:11832:2712","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11093:14048"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11947:34792":{"id":"2:11947:34792","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4502:34792"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50963:8080","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:33000":{"id":"2:11852:33000","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11851:33005"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50947:8136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5286":{"id":"5:5286","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5197:1369","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5287:35440","5:5288:2012","5:5291:35441","5:5294:35442","5:5302:35443","5:5303:35444","5:5304:3258","5:5305:2293","5:5306:2292"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:372-0:348:1769":{"id":"0:372-0:348:1769","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:348:1769","glob":false}},"2:11824:797":{"id":"2:11824:797","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11864:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84-0:956:1862":{"id":"0:84-0:956:1862","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:956:1862","glob":false}},"2:11840:25678":{"id":"2:11840:25678","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9706:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9706:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:35440":{"id":"5:5287:35440","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1835","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:4419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1835","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:4419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:3054":{"id":"2:11900:3054","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11525:14047","`DoubleEndedIterator`":"2:7129:120","prim@char":"1:11864:410","str::matches":"2:11900:3054"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50868:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11879:25715":{"id":"2:11879:25715","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11525:14047","`DoubleEndedIterator`":"2:7129:120","prim@char":"1:11864:410","str::split":"2:11873:25711"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50682:8045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11545:14045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:34788":{"id":"2:11920:34788","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11550:14043","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:4079":{"id":"2:11869:4079","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48675:176","prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48673:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11545:14045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:4405":{"id":"2:11946:4405","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:25724":{"id":"2:11929:25724","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48673:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11545:14045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5304:3258":{"id":"5:5304:3258","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5302:35443":{"id":"5:5302:35443","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11835:25680":{"id":"2:11835:25680","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11881:1465"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11827:34770":{"id":"2:11827:34770","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11847:25704":{"id":"2:11847:25704","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11846:25703"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:25711":{"id":"2:11873:25711","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11525:14047","`DoubleEndedIterator`":"2:7129:120","prim@char":"1:11864:410","str::split_whitespace":"2:11851:33005","str::rsplit":"2:11879:25715"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50664:8042","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:34784":{"id":"2:11914:34784","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:34786":{"id":"2:11918:34786","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11823":{"id":"2:11823","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11088:1369","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11824:797","2:11825:2086","2:11826:34769","2:11827:34770","2:11829:34771","2:11832:2712","2:11833:34772","2:11834:310","2:11835:25680","2:11836:1878","2:11838:25677","2:11840:25678","2:11842:25679","2:11844:34773","2:11845:34774","2:11846:25703","2:11847:25704","2:11848:2302","2:11849:2296","2:11850:8034","2:11851:33005","2:11852:33000","2:11853:31648","2:11854:34775","2:11855:34144","2:11856:1915","2:11859:25721","2:11862:25722","2:11865:2521","2:11869:4079","2:11873:25711","2:11876:25713","2:11879:25715","2:11882:34776","2:11885:34777","2:11888:25717","2:11891:25719","2:11894:34778","2:11897:34779","2:11900:3054","2:11903:34780","2:11906:34781","2:11909:34782","2:11912:34783","2:11914:34784","2:11916:34785","2:11918:34786","2:11919:34787","2:11920:34788","2:11923:1897","2:11926:25723","2:11929:25724","2:11932:34789","2:11935:34790","2:11938:34791","2:11941:1858","2:11943:4402","2:11944:4403","2:11945:4404","2:11946:4405","2:11947:34792","2:11949:3364","2:11950:34793"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11903:34780":{"id":"2:11903:34780","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11525:14047","`DoubleEndedIterator`":"2:7129:120","prim@char":"1:11864:410","str::matches":"2:11900:3054"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50886:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11545:14045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:34791":{"id":"2:11938:34791","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11525:14047"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11545:14045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:34776":{"id":"2:11882:34776","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11525:14047","str::split":"2:11873:25711","prim@char":"1:11864:410","`DoubleEndedIterator`":"2:7129:120","str::rsplit_terminator":"2:11885:34777"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50714:8122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11530:14044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"16:7211:6140":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:51383:8162":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:8926:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:2685:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"18:538:5026":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:50814:8128":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:4422:3476":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"9:827:19725":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:7064:3245":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:2341:5954":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:22269:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:6917:3203":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"24:4937:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"24:4780:3125":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:54581:7621":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:47395:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:5494:20711":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:5490:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:2300:5947":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:48800:4425":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:46821:8068":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12361:5540":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:10704:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:54525:7619":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:6359:3255":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"24:5159:3171":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"2:2993:2252":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:13340:5864":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:3238:8758":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:9738:7833":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:47668:3293":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:7980:20733":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:47635:3301":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:10944:4884":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:962:8655":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7603:6157":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:4183:3459":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"1:11468:7729":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:3455:8746":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:3240:8759":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:1487:3216":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"17:11199:5303":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"9:863:19633":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10296:20932":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:8701:5132":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:11867:1030":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:3153:1825":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:3923:8787":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13436:5898":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:10654:8191":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5520:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:9250:20812":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:54715:7631":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:9283:20828":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:52306:7521":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"24:5303:2154":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:46940:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"24:5028:2426":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"1:7522:4877":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:11017:7707":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:5411:5983":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"24:1736:8582":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"24:4853:2120":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"5:2880:3418":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4544:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:7847:6193":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:6940:4793":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10270:20934":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:47341:8080":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6059:36337":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:36:6328":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:7943:27686":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10233:20957":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:4296:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:52975:7551":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:3245:4507":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:20386:33152":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:47475:4831":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:47594:3288":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:12550:5593":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:50608:7509":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10159:5196":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:11251:8204":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:2686:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4241:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7435:6146":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:22071:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:7688:8671":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:554:6467":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:9885:20924":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6137:7927":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4210:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13126:5793":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"22:706:1852":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"5:4103:3204":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:7117:36369":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4371:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:9751:7835":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"0:0:1665":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"1:7792:4692":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:4224:3332":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:6475:8891":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13059:5774":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:4262:6013":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:3689:6008":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:6496:20719":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:2800:4998":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"9:19:8263":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:5851:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6362:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:914:4507":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:2934:2188":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:22767:7396":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:5996:8245":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:50714:8122":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:47752:3299":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4814:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:48482:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:10849:27591":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"24:4879:3147":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:2923:3347":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:6298:7936":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"14:31:8553":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4499:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7567:20729":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:6735:20720":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:11885:1461":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6829:7977":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:7948:8303":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:3379:14065":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:13071:5775":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5845:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:52282:7520":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:2371:8723":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:5670:7091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8493:3204":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"22:867:1852":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"24:2751:3406":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"2:48809:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"24:4159:3457":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"9:920:19635":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"13:0:2943":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:5737:7894":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:7091:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:3127:8013":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"22:912:2166":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"2:2863:5005":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:8145:3689":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:9553:5146":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"12:646:3208":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:7872:7994":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"18:727:5044":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10583:20803":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"24:2530:3398":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:11238:8119":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:3125:20892":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:2359:8717":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4561:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"22:716:1777":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"2:12141:34110":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:891:8012":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:3439:31944":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7044:36371":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12022:5481":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:5438:3185":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"5:7097:8029":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:6564:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10497:20962":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:49230:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:21730:7394":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:2824:4986":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:49705:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:48659:7491":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:599:4987":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:57004:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11835:8645":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"21:2573:7813":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"24:1601:3313":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"16:3402:6004":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:8561:5128":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:8814:3203":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:2859:5002":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:9020:2245":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"20:504:3980":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:3642:3203":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:3119:8015":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:4689:6026":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10973:5265":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:9234:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"24:4224:3462":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"1:1847:4582":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:5703:7888":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2411:5957":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4427:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"24:3823:3435":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"24:4911:3155":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"6:4277:6739":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:4921:6033":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"12:1518:19789":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11886:775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5482:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:3120:30052":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"12:861:8655":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:54129:7613":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:22335:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"24:5059:2424":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"17:12768:5703":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:153:4768":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:4525:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"1:8762:7706":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:1376:3208":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:7832:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:8274:8845":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:5347:8868":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1601:6549":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4356:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"24:2598:3402":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:48791:3688":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"24:4569:1994":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"17:13158:5801":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:4064:29087":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"24:5169:3172":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"17:12211:5516":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:8510:5126":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:355:4183":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:2487:5960":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"24:826:3312":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:1065:8656":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"12:853:8654":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:8959:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:10385:7847":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:4318:8810":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:11074:7727":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:48724:1836":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"24:5469:3194":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"9:956:19636":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:1432:8649":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:4671:8802":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:7873:3326":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"24:5450:2195":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"24:5421:3182":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"18:582:4062":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4385:6017":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"20:10:3092":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"5:1228:8657":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6052:8244":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:9458:20851":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:49070:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"24:2870:3411":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"24:5313:2235":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"2:49985:8110":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:6600:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:881:3204":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:505:4164":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"24:4241:3463":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"5:1071:35930":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"21:1201:193":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"6:4575:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:7797:8709":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4222:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:51403:8167":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12609:5645":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:5060:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:2142:35908":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:6644:4820":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4608:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"22:790:36553":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"24:3857:3437":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"17:11893:5441":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:13176:5805":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:10139:5146":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11997:5477":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"24:1909:3202":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"16:2433:5958":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"21:1396:1865":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"6:7176:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:386:20781":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"24:4171:3458":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"6:123:14533":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"12:2178:1777":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"24:2989:3416":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"6:6339:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:755:7832":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:11846:27573":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5682:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:1568:6527":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:20388:33157":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12198:5515":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:7601:4168":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:6399:4872":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4726:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"24:1953:3204":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:49994:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:7473:1865":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:5313:8866":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:3153:14136":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:52352:7523":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:361:4184":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:4166:8815":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"24:5039:2810":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"17:8666:5131":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6510:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:893:36784":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:12322:5530":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:4545:6021":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"24:5318:3175":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"16:6619:6086":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:11391:8777":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"12:2069:8656":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"12:1138:8559":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:6999:3203":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:8494:5125":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:51228:8150":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:11884:1464":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:3699:4782":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:4565:1992":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"6:5730:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12748:5697":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:46735:14083":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:8110:20768":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:12359:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:9248:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:1531:6504":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"24:4364:3472":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:2308:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"24:4883:3148":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"16:2367:5955":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47428:8087":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"11:44:6329":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:10867:7708":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:47978:3259":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:47949:3253":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:7034:29088":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:4632:8820":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:1649:6585":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"24:94:4134":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"17:8162:20784":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:20341:4062":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6434:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"24:5267:2418":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:46962:3238":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4708:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"24:1961:3206":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"24:2717:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"10:0:2947":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:52476:7528":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:3132:35776":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10403:5235":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:9014:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:2465:5959":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"20:407:3866":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"2:4346:3340":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:6241:7934":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:11751:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"24:4381:3473":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"17:9873:20923":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:4568:7227":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:21694:32559":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:8185:8771":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:7329:5993":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:8596:5129":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:632:8560":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:9063:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6676:5987":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:11550:14043":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5605:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8234:8817":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"24:4067:3451":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"6:4339:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4327:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:11887:1518":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:2605:5965":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:4566:7225":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:10796:5237":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"22:692:3222":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"6:4693:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"14:202:2289":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6963:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"12:1845:4507":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:10245:20958":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"9:111:8266":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"24:917:3162":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"12:834:8653":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47717:3297":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9293:20826":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11576:5398":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"14:7:8553":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:8339:20789":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:6970:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:6075:4851":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:474:1778":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2792:5007":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"22:776:230":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:48990:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11343:5344":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5551:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"24:3159:2501":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"2:1638:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:4721:6027":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"9:33:8265":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:2674:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:53521:7576":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:39773:6325":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:7249:20725":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"17:13039:5767":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11828:5435":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11247:5315":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:1674:6604":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:47534:3284":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:5163:6035":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:11037:7513":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:3991:32159":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:2632:1835":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"6:532:6455":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12087:5489":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:9539:20836":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4807:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:47242:32560":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:0:2944":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:1771:20840":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:9303:5140":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:11875:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"24:2227:7777":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:11063:14203":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10490:5212":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:2941:3383":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:2855:5004":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:52951:7550":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"24:3920:3441":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"2:2156:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:50938:8135":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:3716:6009":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"24:5463:3192":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"1:7865:8572":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"24:4776:3124":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"24:3397:244":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:21723:8060":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:6868:3254":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9433:20820":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:48733:3204":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:3457:5051":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:54563:7620":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4234:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:9941:8044":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:8991:36390":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:54601:7623":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:6991:7330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1511:6496":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4747:6924":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:50391:34137":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:53597:7578":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:5743:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:51415:8170":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:4565:14095":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:5328:3178":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"2:46852:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:558:4173":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:10950:4885":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:5916:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:13374:5876":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:11518:8206":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5514:7007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:5679:8886":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:52436:7526":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:13327:5858":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"21:2677:3372":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"17:12485:5542":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"24:3057:3420":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:47963:3255":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:6303:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:2539:4855":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"24:1489:1859":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"9:896:19634":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"18:644:5022":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:2345:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:1612:4782":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:10692:14032":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10997:1788":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:6287:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:6440:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"24:3006:3417":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:2506:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"24:1623:2024":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"6:595:6490":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:47727:3281":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"12:751:4509":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:50491:7507":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12103:5491":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:48758:3687":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:5792:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"24:5121:3167":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"16:7557:7989":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"24:4887:3149":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"6:6425:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:9031:36402":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11617:5402":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:10091:14035":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12896:5730":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:2993:5999":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:10001:29086":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:51253:8151":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11748:5424":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:8272:20787":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11288:5325":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"20:281:1861":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"6:4788:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:12107:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:6123:8302":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4257:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"24:4915:3156":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"21:2616:3203":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"24:3329:3428":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"16:4888:6032":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:11093:14048":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"21:1028:3373":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"9:592:19652":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:53361:7574":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:7276:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7267:7983":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:54317:7615":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"24:4521:1844":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"16:534:7857":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:699:7823":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6865:7981":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:273:4782":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:6091:4868":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:53207:7556":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:2282:5945":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"21:2022:4535":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"24:2080:2391":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"24:5117:3166":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"17:10608:5100":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:47215:3365":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:9805:5219":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"19:0:1012":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6210:7932":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:9909:5158":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:3193:33062":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:10121:5194":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"12:2053:7982":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:4297:4811":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12349:5533":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"24:5445:3188":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"21:966:4549":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"1:933:8651":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:7343:5994":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4663:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:4574:6022":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13506:5913":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:48522:7483":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:6200:7931":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:54685:7629":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:11871:1447":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:2615:3403":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"12:2080:8657":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:7230:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"24:4823:3135":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"1:2345:8714":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"12:387:36323":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:57017:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12514:5562":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"24:2683:107":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"17:11559:5395":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:22005:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:10708:7855":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:47012:7472":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12265:5522":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11356:5345":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:2771:5972":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:5549:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"24:2887:3412":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"18:113:24592":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:4978:2434":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:49809:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:7819:8179":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:7152:3270":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:11882:1462":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:1568:3203":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12307:5526":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"12:320:4772":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:10630:8847":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:11174:5301":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:1422:8648":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:11005:7706":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:11029:27581":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:5453:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7278:5991":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:2361:8718":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:836:4788":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"6:6279:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:2705:5969":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:939:8652":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"18:690:7822":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:1921:4414":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"12:1836:3203":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:1257:8559":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:929:8650":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:5388:5981":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"21:650:3378":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:9849:3204":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:10828:6398":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"24:3091:3339":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"1:0:1361":{"crate_id":1,"path":["std"],"kind":"module"},"1:9092:7719":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:9111:8188":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:2065:8017":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:487:20782":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:1597:1825":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:8871:20794":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"24:4393:3474":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"6:4284:6742":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:6512:4515":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:4441:6019":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:8137:20783":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8138:3284":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:1674:1068":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:7637:7990":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:1517:6499":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"24:4316:3468":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"17:9118:36400":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:6385:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6034:1818":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:4844:8844":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:2657:5967":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:2770:4994":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:6978:8028":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12739:5696":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:12120:14112":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:3872:4509":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11125:5292":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:2094:8019":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"24:3108:209":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:10174:14036":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:30013:32558":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:4229:3333":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:4730:34231":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:21223:7373":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"21:107:4551":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"6:4639:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"9:586:6330":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"24:2768:3407":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"17:11259:5316":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:21640:7382":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"21:2760:1788":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"1:5556:4861":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:47302:14101":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:12118:5495":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:2825:5974":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:8798:3204":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12797:5711":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6654:6090":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:21235:33014":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:3346:4808":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:11233:8345":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11412:8779":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:6419:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10420:5207":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4736:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11853:5437":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:5761:20713":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"12:1120:19788":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4086:8811":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:562:6472":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:4756:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"22:728:2454":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"6:4602:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:8951:36389":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"24:1035:1788":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"2:2780:4996":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"24:4960:2191":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:47272:8072":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"22:939:2454":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"2:2231:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:4907:3154":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"24:3176:1803":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"16:2894:19853":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"24:53:1860":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:29941:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"24:4919:3157":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"17:11271:5317":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:10724:27585":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7942:20732":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:47282:8073":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:2873:2023":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13007:5758":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5723:7116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"24:1068:1861":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"21:2603:230":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"5:7111:32566":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2938:2105":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"24:4511:3109":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"1:9387:4881":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:574:5022":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"20:235:3984":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"12:1832:3204":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:7157:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2738:3382":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:48950:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8248:8776":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:1728:6628":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:2688:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:1564:3204":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:50634:8116":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:50868:8131":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:573:6477":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:11539:7825":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:1701:6617":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:8368:20790":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4631:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:5702:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:646:8643":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11684:5415":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:579:6480":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"22:343:3222":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"24:3869:3438":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:11349:8044":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:6548:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:2808:5000":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"24:4014:3447":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:1827:3349":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"24:5055:3161":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:9873:3208":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:2580:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"18:564:5028":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"24:4507:3108":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"6:1720:6624":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"22:722:1788":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"1:11870:1369":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13492:5906":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:47972:3257":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10854:20806":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:47655:3279":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"21:369:4540":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"17:13580:5928":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6270:5980":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:51099:8146":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:8806:8894":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:10088:5192":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:47505:3274":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13518:5915":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:10182:5197":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:52807:7545":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:10824:8567":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"21:2699:1853":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:49270:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"7:32:19620":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"24:4863:3144":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:50928:8134":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:7087:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"9:977:6401":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:9068:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:51407:8168":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"24:4212:3461":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:47230:8071":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"15:0:2951":{"crate_id":15,"path":["addr2line"],"kind":"module"},"22:888:1777":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"12:1065:36324":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"24:2564:3400":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:47035:3339":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:50224:8113":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:4709:8646":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:50832:8129":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:3902:4782":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11330:5340":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:56965:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:4328:3469":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"24:2210:2456":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:8441:20793":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:1762:4457":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"9:622:19653":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:9487:4841":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:48505:7481":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"24:4875:2046":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"1:8790:7708":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"12:98:8004":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:8981:20796":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:4817:6030":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:50622:8115":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:7319:7988":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:50664:8042":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:52577:7532":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:1413:8012":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:11079:8564":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:3915:8786":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:2234:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11813:5432":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8105:7683":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8089:3252":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:10894:5244":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:49453:3362":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:2500:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:1692:6611":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"24:4452:3601":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"17:13091:5782":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:1575:4507":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:10434:7849":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10921:5245":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5871:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"12:697:8650":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:1903:20870":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"24:4856:3142":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"1:4893:3679":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:9778:7837":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"24:1850:3200":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"2:8573:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4216:6709":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:7541:4879":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"22:873:1853":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"1:1051:7982":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13203:5812":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:50530:14025":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"21:183:4148":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"1:9073:7718":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:13192:5808":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"24:2853:3410":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"24:2649:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"17:10221:20956":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13221:5815":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:3199:8762":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:5374:5978":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:344:36780":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:54700:7630":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:3448:8728":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9339:20822":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7970:8001":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10062:20891":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:6528:8893":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:7596:4158":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"12:353:4774":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"24:877:36783":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"16:2389:5956":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:6178:4861":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:2681:3381":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:51387:8163":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4249:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:49690:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:12934:5744":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"12:2190:36318":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:2339:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:3180:14084":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"24:1140:7776":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"17:10350:5204":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:11093:7718":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:4201:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:12328:4851":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:7093:6122":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:10684:7642":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:11275:8124":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:4662:6025":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11528:5388":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:21071:8963":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:4246:8816":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13214:5813":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:5981:7925":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12836:5720":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"24:5458:3191":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"17:9382:5142":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"24:4101:3453":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"17:11087:5286":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"22:105:7806":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"1:6576:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:8932:4169":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"24:4903:3153":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:2812:5001":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:9504:4842":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:10357:4882":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:1707:6620":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:6669:4827":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:6923:8027":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10822:20805":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:5705:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:4301:3339":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:6519:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"9:0:2946":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:3611:3326":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:2874:35932":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:3249:20908":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:10374:7843":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:2162:8024":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"24:4573:1996":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"1:10416:8760":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:1606:6551":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:47362:14103":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:7080:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:8256:7687":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"15:175:19808":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:3508:4509":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12251:5519":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:8056:6199":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:2817:3455":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:5014:27689":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7483:5996":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6284:5997":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:3963:8789":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:47319:3365":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:7218:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"20:272:1861":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"24:609:3204":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"5:1463:8658":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:1580:8013":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13047:5768":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11974:5476":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5751:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:1571:4509":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"22:968:3203":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"16:6109:6047":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:2839:3468":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:48860:3204":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:48741:3208":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:9061:5146":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:52905:7548":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:51391:8164":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:1366:3204":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:7849:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:46876:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12630:5655":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:50786:8126":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"20:150:3709":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"24:3782:3432":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:51085:8144":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:6017:20716":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:7396:20727":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:21:668":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:7005:3203":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"24:599:3203":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:10721:5234":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:8418:20792":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10682:5233":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"0:927:1652":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"6:7236:7346":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"14:187:19803":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:6884:8576":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6567:7964":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:10018:14038":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:5378:8870":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"24:3074:3421":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"21:2694:3373":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"16:6376:20718":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:21475:8054":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:47987:3261":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:21565:8055":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"24:5308:2234":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"6:506:6435":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:1506:6494":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4195:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:1554:4808":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"24:3840:3436":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:52537:7530":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:48885:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:1586:6537":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:5510:7869":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8967:27728":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6690:5988":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:491:7815":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:53026:7552":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12008:5479":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:9877:8102":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:9024:3362":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:11014:5269":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"24:4002:3446":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"5:2604:7365":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:6502:4514":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:56952:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:48876:3203":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:2594:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:51598:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:5663:33814":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:13536:5921":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:51671:8174":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:7484:8577":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"24:4410:3475":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"1:1592:8015":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:2910:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:4673:8803":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:21549:7376":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:20788:8936":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:10875:5241":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:6476:2576":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"24:2802:3408":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"6:7299:7360":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:96:24591":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:52328:7522":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:6926:4875":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:8056:8726":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:11889:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:878:8011":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:51276:8159":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:3142:3423":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"6:482:6424":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"24:5127:3164":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:3990:3445":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:50918:8133":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:54239:7614":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:11869:1339":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:7521:32074":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:21329:8800":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"24:5342:3176":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"17:9475:20839":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5184:19826":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:53781:7580":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:0:2952":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:62:14478":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:3865:8784":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:6747:8933":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:2503:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"24:3312:3427":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"1:11864:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:8868:8896":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6842:7980":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6316:7944":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:9001:27572":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:50451:8047":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:5635:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4471:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9712:5155":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:3854:6010":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:21744:8063":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:51471:14246":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:52929:7549":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:8333:3680":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"24:4055:3450":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:3163:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"22:498:3222":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"16:3632:6007":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:47575:3286":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:47603:8090":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:50024:8112":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"24:4439:2447":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"24:5125:3168":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"6:526:6452":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:54662:7628":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:6472:6075":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:20409:33154":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"9:382:8272":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"24:4772:3123":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:51070:8138":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:2916:20889":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:50517:3274":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"24:4891:3150":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"2:52559:7531":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:1133:7772":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"17:8881:36395":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:2509:5961":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:869:36785":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"1:6611:27707":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:7426:20728":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:3188:6002":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:12337:5208":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11734:5165":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11500:5381":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:5694:7103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10642:20804":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:53567:7577":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:11267:4888":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"21:0:1056":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"24:4801:3130":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"17:420:5086":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13557:5924":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:47294:8074":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"24:2955:2156":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"24:4478:3106":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:47617:3290":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:47221:8070":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:9223:20811":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"24:925:3163":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"2:48624:8180":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"24:2921:3414":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"2:11314:8130":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:2884:25246":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4755:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"24:3380:3431":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"16:2793:5973":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:3961:3444":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"16:7469:5995":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:9288:8041":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11186:5302":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:1443:8650":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:621:8566":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:10332:20960":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:3263:6003":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:11298:8127":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:3283:8751":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:2829:3987":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:3098:35770":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:54621:7625":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:50442:8046":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:20538:8943":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:12926:5741":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:5712:8298":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:10837:8872":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:56978:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5628:7880":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:9644:20833":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:1849:8682":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:7802:8178":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:9422:20821":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:2260:1777":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:9820:20921":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"18:707:7825":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"24:4299:3467":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"24:4927:1811":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:10360:7839":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11909:5446":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4162:6677":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:9371:20798":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:4152:3328":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"12:0:2949":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"22:108:36561":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"16:6790:6100":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:1713:6621":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:38600:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:950:8653":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7497:5986":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"12:985:7982":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:3943:3208":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:7708:1941":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:7484:3269":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:2631:5966":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:2055:4164":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:6146:7928":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"24:4253:3464":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"1:5549:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13572:5925":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:3680:4507":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:3605:8774":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:21528:7374":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:52707:7542":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:2851:5003":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:4:996":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:4413:6018":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:10694:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"22:765:24612":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:2796:3234":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:10138:8875":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:11706:4893":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:47258:7476":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"24:4793:3128":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"16:6123:5977":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:1898:8568":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:6332:7208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:9831:20922":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:10659:14031":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:52853:7546":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"24:5322:2192":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"1:925:8649":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:4297:6014":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12955:5749":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"12:1852:8013":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"24:4860:3143":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"6:568:6475":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:9193:36385":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:10419:8762":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:5143:14021":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:11350:8778":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:8774:5134":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13478:5904":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12964:5750":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"21:2417:1853":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"17:11485:5377":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"7:79:19627":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"24:4084:3452":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"1:1824:8676":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:8911:36397":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:22236:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:13393:5882":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:8174:8776":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:4519:6020":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:47678:3294":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"24:5042:1920":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"6:1580:6535":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:2213:4447":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6359:7946":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10075:20890":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:1506:3316":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"6:4290:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7909:8000":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"20:148:3710":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"18:736:24603":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:4835:8843":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:11939:5465":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"22:682:7807":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"5:7168:8036":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:6808:3252":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:2725:4054":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:5782:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:1524:6502":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5564:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"12:1840:4509":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"24:4270:3465":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:47646:3292":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"22:862:230":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:22137:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"21:2369:2454":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"24:2836:2105":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"6:4820:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:51419:7513":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:54487:7618":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"21:2739:2166":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"17:9658:20881":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:50981:8074":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:3391:14069":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"24:4539:3122":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"1:8351:7697":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:53987:7612":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10506:5213":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:9631:20834":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:7357:6142":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:8526:5127":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:3090:3229":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:4786:6029":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"9:709:7502":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:22104:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:4669:8799":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:12385:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:11525:14047":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:10455:5211":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:3316:3259":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:7140:8035":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:6827:4888":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"2:47997:3263":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"22:664:3326":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"5:3568:4782":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:10226:30132":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:6593:7965":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:21632:7381":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:49793:14189":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:12695:5691":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"24:5337:3177":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"1:8839:7710":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:51242:14057":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:47355:8082":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:8241:20786":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11436:5352":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:10310:20959":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:8249:14044":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:50732:8123":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:47687:3295":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:12440:4418":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"21:1813:4533":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"24:4555:1793":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"1:5755:4863":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:11147:4886":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:4606:6023":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"12:777:4778":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:7704:8567":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:7809:7642":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:4895:3151":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:20814:8941":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"24:2734:3405":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"2:2460:8800":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5709:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:2975:4412":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"24:5270:2139":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"24:5345:1774":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"1:2343:4430":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"24:2785:1801":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"24:1136:7774":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:11596:14054":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:8475:20769":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:3670:8777":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4621:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"9:649:19654":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:48611:8105":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"24:3363:3430":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"24:4784:3126":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"9:676:19641":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"24:3023:3418":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"17:13168:5804":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:247:36384":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10649:8189":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:50972:3365":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:588:2258":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"13:110:36326":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:9155:20799":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8222:8180":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:515:5025":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:481:7814":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:7953:8756":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"24:3278:1825":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"22:918:1851":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"24:1405:1857":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"6:4771:6931":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:8970:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:6743:20721":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"24:1882:3201":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"17:1021:20827":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:58313:7641":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:9026:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:12134:5496":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:49446:3361":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:2972:2453":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"24:258:8552":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"17:11841:5436":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5886:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:53104:7554":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"21:2550:3377":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"1:11877:729":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:6534:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:864:4790":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:9108:20798":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:5525:7872":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"24:2819:3409":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"1:1927:8693":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:6345:5985":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:2786:4997":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:9722:5156":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:587:6485":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"20:37:2811":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"17:11034:5279":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:14:2591":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:11545:14045":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:10659:8178":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4267:6736":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:0:2948":{"crate_id":11,"path":["adler"],"kind":"module"},"14:221:6275":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"24:3125:3422":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:11530:14044":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:4234:4811":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:4144:6011":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:8744:8871":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:4217:6012":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:8979:1841":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:11106:5291":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4645:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4615:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:20704:7371":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4317:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:9030:3360":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:7585:4185":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:2693:2380":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:10207:20947":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"24:901:36782":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:7129:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8510:8185":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:5172:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:11235:5312":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:6463:7950":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:11761:5425":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:10476:20961":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"24:4867:3145":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"22:818:1788":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:4115:8814":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9947:20926":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:1404:8011":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"24:4840:3139":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:54647:7627":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:3979:32324":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"7:0:1508":{"crate_id":7,"path":["unwind"],"kind":"module"},"12:810:8648":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:47525:3275":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:20369:33016":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:11879:731":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:6330:6052":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:1708:4507":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:2210:8710":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"24:2022:3208":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"17:13031:5766":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"21:435:4766":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"2:48588:32584":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4506:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4125:6649":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:53073:7553":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12860:5725":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13354:5870":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"24:4352:3471":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:48749:3203":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:2683:5968":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:3123:31190":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5508:7004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:11218:8201":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:8960:3358":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:8401:7502":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:3599:6006":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:9382:8709":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:11245:8203":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:5279:2142":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"17:11873:5440":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13148:5798":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"18:624:36407":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:49110:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:47348:8081":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:7650:8638":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:46896:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:9601:5154":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"24:151:1841":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"1:11868:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8278:7212":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:2845:3470":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2217:8711":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:11203:7728":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:3093:8014":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:50572:14033":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:9018:3352":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:9317:20824":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5949:7922":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:2535:5962":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:5095:4782":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11721:5419":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:4818:4808":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:7054:3272":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:7008:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"18:590:5029":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:7275:29198":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"20:164:3076":{"crate_id":20,"path":["quote","__private","ext"],"kind":"module"},"17:11161:5299":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:9627:20845":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"24:2163:8800":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"2:9016:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10321:5199":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:5839:20715":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:1962:20857":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"22:785:7808":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"1:3430:3358":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:7100:3271":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:3346:3429":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"6:7247:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"20:77:1854":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"16:7890:7997":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5615:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7288:7986":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:6948:35772":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:47485:8708":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"24:3193:3424":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:49735:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:52262:7519":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:3501:3208":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"22:809:1777":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"17:8822:36388":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:22302:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:53331:7573":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:920:8648":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:4564:7223":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:1684:6610":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:5615:4509":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:1931:20835":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:5235:6036":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:860:3208":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:21066:8940":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:49150:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:7224:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5578:7040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:51263:8155":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"12:1003:8656":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12638:5656":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4437:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"14:215:8002":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"12:2205:3244":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:12874:5726":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:39809:1941":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:6489:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"24:5484:2193":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"5:6962:3203":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"24:3811:3434":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"1:5432:8872":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:7477:3266":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:119:14532":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:2513:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:53631:7579":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:3026:5047":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"22:827:2454":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"17:9263:20813":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4585:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:534:4171":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:3799:3433":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"17:13459:5899":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:21422:8053":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:6363:8888":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:39813:8067":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:12850:5724":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4345:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:47738:3298":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:5815:20714":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"24:5426:3183":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:54636:7626":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:547:6464":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:51654:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:6483:4513":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:6350:4782":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:11511:8206":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"21:2608:3222":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"16:6668:6092":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:4576:2118":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:54590:7622":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"24:2700:3404":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:2944:3384":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"24:921:2809":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"21:406:36503":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:20663:8939":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:22368:7395":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"22:0:1640":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"24:4955:1796":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:47565:3285":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11070:5284":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"24:2513:3477":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"23:0:3075":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"2:2775:4995":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:50956:8137":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:2461:14108":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:22203:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:56991:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4112:6640":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:2749:5971":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:3623:8659":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"24:4542:1805":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"24:2029:3210":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"16:5460:7867":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:10774:5204":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:4778:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8820:7709":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"24:842:8800":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"1:11881:1465":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:47442:8695":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:46836:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"24:4845:3140":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"2:52883:7547":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12060:5485":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"12:1534:19790":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:47381:7477":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:50886:8132":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:4034:4808":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:21605:8058":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"12:1859:8014":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12781:5708":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13279:5857":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:7265:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:7584:8800":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:3901:8785":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:11830:8305":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"24:550:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"1:9022:7717":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:9519:4846":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:8161:8042":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"24:126:1777":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:12148:5498":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:54379:7616":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:8852:8895":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8483:8182":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"21:1071:1852":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:4291:3338":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:5240:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"12:1872:1825":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"24:673:36570":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"2:50016:8111":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:3488:3204":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13366:5873":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12176:5504":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"9:188:8269":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:12317:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:1660:6593":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:6565:3283":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:7671:7736":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:12168:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:49190:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:5139:14020":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:7289:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7543:5984":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:56939:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:5119:3165":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:51411:8169":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"24:4340:3470":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"1:3973:8790":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:47766:3300":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:20655:8800":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:3937:3442":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"5:7179:8561":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:9183:20800":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11951:5467":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:20407:33156":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:3010:19855":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:48647:7490":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11661:5410":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"24:4287:3466":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"21:480:4767":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"2:50947:8136":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10108:20888":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:11486:3230":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12674:5686":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:51164:8148":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:5741:14452":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:51633:8338":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:2684:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:9021:20797":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"24:4536:3121":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:50543:8050":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4537:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:9362:5146":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10520:5216":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5737:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:54441:7617":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:9577:5152":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8229:8181":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"24:5264:187":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"18:660:24601":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:9844:20887":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:7052:3244":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:681:7819":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6321:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:9696:8800":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11787:5428":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"24:552:7771":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"16:4635:6024":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:47626:3291":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:49030:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"22:696:3373":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:307:1417":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:8096:7682":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:13594:5931":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"12:1866:8015":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:53285:7572":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:3871:8783":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:20354:33016":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:13100:5783":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:1556:6518":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8944:27570":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:904:4509":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:5419:3289":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"24:5115:1986":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"17:13231:5820":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"15:214:8259":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:6161:20717":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:5780:7897":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:2613:8755":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:50552:14034":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10257:20935":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13413:5885":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:21756:8781":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"12:2198:6326":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:4310:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:8884:8897":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:54610:7624":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:2834:4985":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:4026:4411":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:7622:4170":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:49439:3352":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3201:8763":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"18:531:7816":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:5999:4864":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"24:3973:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:20816:7371":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"24:93:8800":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:51438:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:1212:7982":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:967:20825":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4700:984":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:6275:3203":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:51459:8171":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11137:5295":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:5884:3302":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:6322:27707":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:1547:6512":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:47547:3276":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"14:165:19796":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:21617:32591":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11800:5430":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:4629:8846":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"20:45:3093":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"12:632:3204":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:52507:7529":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:4426:8821":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:1387:3203":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:870:3203":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:4654:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6186:5979":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"24:2581:3401":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"2:50963:8080":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:671:24602":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:5122:6034":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6402:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4683:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:10283:20933":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11708:5416":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:52596:7533":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:4749:6028":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:20783:8800":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"12:822:8652":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13404:5883":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:9022:3361":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"0:928:1660":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:11170:8876":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7956:5998":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:500:6432":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:50006:7502":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"24:4043:3449":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"16:5878:19827":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:9274:20814":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"24:1338:36615":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"24:5453:3190":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"5:1973:8659":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6903:7714":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4716:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"24:5123:3169":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"1:9185:4582":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:6704:6095":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"24:4113:3454":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"24:3261:3425":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"2:29955:32569":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:1645:4246":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:5327:8867":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:5664:7886":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"24:5472:3179":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"24:88:1841":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"12:60:36322":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:8212:20785":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:4364:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:38617:4062":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:52614:7534":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:8752:2725":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"12:1029:8657":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:12278:5523":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:652:14889":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:3373:7685":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:9375:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:4939:4815":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:3328:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:3168:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13527:5919":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:5558:20712":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6781:20722":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"15:193:19809":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:8295:20788":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"24:4811:3132":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"1:11327:4890":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"14:40:1788":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:2375:7362":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:609:36411":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12033:5482":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:50768:8125":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:9488:20838":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7659:20730":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"12:274:8005":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"24:4797:3129":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:49696:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:1538:6507":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3051:8765":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:5614:7879":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:49432:2245":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11368:5348":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:20601:8945":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:4554:8788":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:8014:2531":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:1614:6556":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"20:0:1085":{"crate_id":20,"path":["quote"],"kind":"module"},"24:4806:3131":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:50562:8051":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"12:119:4770":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:6542:4873":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10528:20801":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:6252:7935":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"24:909:36786":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:20807:8800":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:8055:20770":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11774:5427":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5472:5982":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"24:4849:3141":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"24:548:207":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:784:4785":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:10053:8045":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"12:762:4507":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4550:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:641:8642":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"24:5254:3173":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"17:12909:5736":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:13024:5765":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:5725:4815":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:7059:3687":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:29913:4250":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"12:738:8012":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:8941:20795":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:12884:5727":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"12:815:8651":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:4675:6889":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"24:498:3214":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"17:10949:5251":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:1083:8559":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"24:5479:3181":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"1:2831:4858":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:9283:14115":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"12:659:3203":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:3159:8760":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:1055:35798":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:6472:8573":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:484:4853":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:51399:8166":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"24:2904:3413":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"1:4750:8798":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:21331:8938":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:10933:4883":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:4498:8836":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:7681:8175":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:1894:15866":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:9691:20859":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"24:5441:3186":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"5:4064:4808":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"24:1936:3203":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"20:34:8800":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"6:4447:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:3208:3346":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:5447:20710":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:488:6427":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:2682:3345":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:7511:6149":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:5541:7874":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:766:24604":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:1786:8665":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:2524:4538":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"24:0:1639":{"crate_id":24,"path":["syn"],"kind":"module"},"24:1332:3330":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"6:4826:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:0:2953":{"crate_id":17,"path":["object"],"kind":"module"},"12:1044:19786":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:1959:3326":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:9791:7838":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:6612:33033":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:48817:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:4149:6667":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:8568:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:5495:8873":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:51641:7516":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:2804:4999":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"24:4549:1642":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"14:0:2950":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:20657:8937":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:49757:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"24:251:8551":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"17:8796:5135":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:2727:5970":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:4404:8820":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11300:5328":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:9501:5140":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:9165:36393":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:6908:4419":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:6088:4820":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:11865:1481":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"24:4836:3138":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"1:8300:7688":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"24:4195:3460":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"2:1476:2190":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:3985:8793":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11217:5311":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:6286:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9681:5020":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:10462:4170":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:541:6461":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12164:5502":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:50640:8117":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:51683:4417":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:11164:8198":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"24:3903:3440":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"17:9446:20829":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4136:6657":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:5203:5125":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:956:8654":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"22:688:230":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"5:7234:4507":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:48005:3265":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8155:2725":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:54738:7632":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:7665:8641":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:4983:27689":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:6932:4509":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:20575:8944":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:10051:2147":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:7929:20731":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:4125:3455":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"2:49969:8107":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:961:4782":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:13114:5790":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:1744:6633":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:11878:730":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:10132:8125":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:3929:8788":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:52759:7544":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:636:5040":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2261:19828":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"12:725:8011":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:56582:8972":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:7207:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:47400:8086":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:9700:20858":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:6517:7951":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:10209:8870":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"22:14:24671":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"16:5219:5126":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:4375:3342":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"24:4899:3152":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:4083:3350":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"12:2184:6323":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:4327:6015":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:5686:8887":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:10672:8197":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:2320:5953":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"21:2494:3376":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"17:9857:20903":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:9898:8042":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:3772:8779":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:219:4422":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:9401:5144":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:1788:8666":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:7388:20726":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6070:6044":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"22:934:1788":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"24:1491:3315":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"21:246:36478":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"16:7309:5992":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:11486:7730":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:39822:4055":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:47021:2531":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:11606:5401":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:2573:8571":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:8143:3691":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:679:8644":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"24:336:3326":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"2:9028:3359":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:2303:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:46994:14137":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7166:20724":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:4355:3341":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:9119:30091":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"1:8907:7713":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:11883:1463":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"24:103:4127":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"1:3161:8761":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:2868:5976":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:52406:7525":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:2557:5963":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:6312:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:48568:1852":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:12948:5747":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5544:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:8499:7705":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:8180:8775":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:11862:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:242:36383":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:8741:8292":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"24:844:4990":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"6:4189:6700":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:1586:8014":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"14:160:8553":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:6659:3249":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:48673:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"24:4815:3133":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"17:9071:36403":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:53127:7555":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:54777:7633":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10752:5235":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:5533:7009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:9052:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:47956:8097":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:3667:8778":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:1739:4458":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7298:7987":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"24:4788:3127":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"1:5492:7133":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:9328:20823":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4485:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"13:226:6322":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:36:4420":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11874:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"24:1089:1861":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"6:4106:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"24:1761:1782":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"17:12972:5752":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12073:5486":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:4849:6031":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:2549:4842":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:5900:4861":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:6156:4509":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4459:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:3227:231":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"1:638:8640":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:8168:8133":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:47042:7473":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11594:5399":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:50460:14029":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:8144:3690":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:562:1865":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:4357:6016":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:50470:8049":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:8736:32073":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:49672:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:4142:3456":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:9526:20837":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:11863:921":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:8393:20791":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:7857:27716":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:5475:3180":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"18:719:5041":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:50209:7506":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:47028:33270":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"24:4516:1802":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"24:5435:3184":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:4401:3343":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:51191:8149":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:8631:5130":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"21:2612:3367":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:51580:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:51116:8147":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:2564:3376":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"1:11880:727":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:9350:5120":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"24:1448:24629":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:52374:7524":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:7050:3273":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:2930:19854":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:2997:3213":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:9671:20852":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:48539:8773":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:12756:5698":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10445:5208":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"21:2714:1777":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"5:5814:4808":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:47412:32566":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:4983:2393":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:4003:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"24:4026:3448":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"21:2319:1788":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"1:8750:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:6202:4782":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10546:20802":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:20626:8935":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:5592:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:29919:4251":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:7253:7351":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:8441:8857":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8974:8301":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:7480:3268":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:21678:32599":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"24:4483:3105":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"21:218:8243":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:47585:3287":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:7259:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4377:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"24:2217:8800":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"1:4727:4859":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"24:4871:3146":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"24:3886:3439":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"2:50228:8114":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"20:239:3986":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"1:8240:8809":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:521:24605":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:4832:3137":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"1:8987:7714":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:4516:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:47325:14102":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"5:4264:4808":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:13134:5796":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"12:300:8008":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:9405:4838":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"24:2666:2233":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:2509:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:7372:36334":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"24:3949:3443":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"2:46774:4413":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"24:5447:3189":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"24:2547:3399":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"2:51048:14052":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6816:7975":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"24:5007:3159":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:51296:8160":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"22:892:3223":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:5496:3278":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13382:5877":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:614:36405":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"21:997:230":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:1533:2734":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"16:5433:7863":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:52661:7535":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:21657:32588":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:0:2954":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:1091:35799":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:2842:5975":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"21:2744:1851":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"1:11056:7719":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:48868:3208":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:10160:14037":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:3244:1774":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:22170:4176":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:49310:8294":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"24:4828:3136":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:2254:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:2476:8754":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:53443:7575":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:6528:7952":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:3086:3204":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:10714:7683":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:2876:7364":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:11315:5334":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:4220:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:4934:2252":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"24:3295:3426":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"24:885:36781":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"17:13141:5797":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:555:4983":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"2:2751:1814":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:13082:5779":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:9980:14030":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:48910:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:5363:8869":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:51395:8165":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"21:2765:2454":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"17:12980:5754":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:11888:1105":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11515:5386":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:3566:6005":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"21:2663:1852":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"17:10466:7851":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:7825:3106":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2579:5964":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:6226:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:4110:3351":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"12:393:36319":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:6003:8974":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:21581:7377":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12237:5518":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:58292:7640":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:288:1835":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:9982:8676":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:10422:8758":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"18:80:24590":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11547:5393":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:6582:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:3126:31201":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:9930:5160":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4304:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:10146:8126":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"22:799:1852":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"2:50650:2725":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"24:3210:2239":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"21:2293:2166":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"24:5466:3193":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"1:847:3204":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"18:507:5022":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:22038:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:9011:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:3934:4808":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11054:5280":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:1074:8657":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:20614:8800":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:4389:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:29879:4249":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"24:5298:2435":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"5:7127:8032":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12046:5484":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:6458:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"8:0:2945":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"9:800:6382":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:50682:8045":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8921:8299":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"20:322:2456":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"16:6171:6049":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:50480:14028":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"24:286:36677":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:51590:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"24:4923:3158":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:25577:7397":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:8776:7707":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:1243:8656":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12730:5692":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:9706:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:1753:7368":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:5033:2429":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"1:8148:3298":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10625:5231":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4591:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5597:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:3174:14085":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"12:1628:4779":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"24:5443:3187":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:2868:5006":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:2765:3233":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:49723:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"24:1616:3325":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"24:1443:24628":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"17:11536:5390":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:5596:6038":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"21:2719:3223":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"5:4630:657":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:6985:7328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12617:5648":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:3977:8791":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:4465:2111":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"24:4990:3160":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:2497:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:1642:6581":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"24:4489:3107":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:47556:3277":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5793:7858":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7237:6141":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:52458:7527":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"21:140:4558":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"18:652:5022":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:4094:8812":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10845:5208":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:3245:3348":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12225:5517":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8117:8729":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11149:5296":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"24:2938:3415":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"1:8424:7700":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5759:7126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"21:2232:3227":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:52737:7543":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:5563:4862":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:11876:732":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11639:5409":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"12:669:8649":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6877:20723":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13184:5807":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"22:759:3227":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"2:46918:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:49977:8109":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"24:3040:3419":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:30119:32575":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:4569:6840":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:10314:8871":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:12193:14113":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:6719:36335":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:4102:8813":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10670:7854":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:7251:4508":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6555:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"24:4819:3134":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:47703:3296":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"24:5154:2156":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"9:505:8283":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"21:53:4539":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"17:12816:5712":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4408:6797":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:5391:4513":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"24:5012:2194":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"1:3391:8727":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:5074:2119":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"12:1555:19791":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:9897:20925":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:494:6430":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:29693:8780":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4669:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:10394:7848":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12291:5524":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7135:36359":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"12:1085:19787":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9764:7836":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:9164:34142":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.8/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.26/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.53/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.10/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}