{"root":"0:0:2401","crate_version":"1.0.203","includes_private":false,"index":{"2:13588:36190":{"id":"2:13588:36190","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13593:2653":{"id":"2:13593:2653","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:394":{"id":"0:63:394","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2620"],"is_stripped":false}}},"2:13590:36192":{"id":"2:13590:36192","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13206:16569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:36889":{"id":"5:5712:36889","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2590","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2590","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13521:34076":{"id":"2:13521:34076","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13522:34144"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44533:9569","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13555:36183":{"id":"2:13555:36183","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13180:4392","str::split":"2:13543:29169","prim@char":"1:12388:476","str::split_terminator":"2:13552:36182"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44327:9557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:16571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13564:29179":{"id":"2:13564:29179","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13491:1008":{"id":"2:13491:1008","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12388:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13579:36186":{"id":"2:13579:36186","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13180:4392","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::match_indices":"2:13576:36185"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44427:9563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:16571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13582:36187":{"id":"2:13582:36187","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13616:28389":{"id":"2:13616:28389","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13526:2846":{"id":"2:13526:2846","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:36891":{"id":"5:5719:36891","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13535:3295":{"id":"2:13535:3295","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42392:191","prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13618:29085":{"id":"2:13618:29085","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:40913"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13509:29140":{"id":"2:13509:29140","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:2978":{"id":"5:5730:2978","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13616:28389"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13515:29167":{"id":"2:13515:29167","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13516:29168"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5731:2977":{"id":"5:5731:2977","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13617:28390"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13502:29141":{"id":"2:13502:29141","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12407:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13615:28388":{"id":"2:13615:28388","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13514:29164":{"id":"2:13514:29164","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13513:3393","str::split_at_mut_checked":"2:13516:29168"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:36889","5:5713:2774","5:5716:36890","5:5719:36891","5:5727:36892","5:5728:36893","5:5729:4043","5:5730:2978","5:5731:2977"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13516:29168":{"id":"2:13516:29168","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13515:29167"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13605:36194":{"id":"2:13605:36194","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:2526":{"id":"0:492-0:1019:2526","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:2526","glob":false}}},"0:493-0:404:2527":{"id":"0:493-0:404:2527","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:2527","glob":false}}},"2:13503:2635":{"id":"2:13503:2635","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42392:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13494:36176":{"id":"2:13494:36176","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13614:29082":{"id":"2:13614:29082","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40291:5148","Self::is_ascii":"2:13613:28386"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40291:5148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13611:2615":{"id":"2:13611:2615","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13141:137","`FromStr`":"2:13140:3998"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13140:3998","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13140:3998","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13499:3505":{"id":"2:13499:3505","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12727:16573"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13507:29139":{"id":"2:13507:29139","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13505:29138":{"id":"2:13505:29138","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42392:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13596:28364":{"id":"2:13596:28364","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:2519":{"id":"0:8:2519","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:13532:29182":{"id":"2:13532:29182","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:16571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13619:29086":{"id":"2:13619:29086","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:40913"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2398":{"id":"0:965:2398","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13493:36175":{"id":"2:13493:36175","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13599:29183":{"id":"2:13599:29183","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:16571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5716:36890":{"id":"5:5716:36890","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13492:2744":{"id":"2:13492:2744","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13573:36184":{"id":"2:13573:36184","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13180:4392","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::matches":"2:13570:2740"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44481:9566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:16571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13567:29180":{"id":"2:13567:29180","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:16571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13511:36179":{"id":"2:13511:36179","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12394:1739","str::slice_mut_unchecked":"2:13512:36180","crate::ops::Index":"2:39936:3150"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13543:29169":{"id":"2:13543:29169","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13180:4392","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::split_whitespace":"2:13521:34076","str::rsplit":"2:13549:29173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44259:9482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13513:3393":{"id":"2:13513:3393","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13515:29167","str::split_at_mut":"2:13514:29164"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:2390":{"id":"0:964:2390","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13584:36188":{"id":"2:13584:36188","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13608:36195":{"id":"2:13608:36195","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:16571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13496:36177":{"id":"2:13496:36177","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13494:36176"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13589:36191":{"id":"2:13589:36191","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13501:336":{"id":"2:13501:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13502:29141","`u8`":"1:12407:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13558:29175":{"id":"2:13558:29175","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:4392","str::rsplitn":"2:13561:29177"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44363:9559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13500:36178":{"id":"2:13500:36178","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13512:36180":{"id":"2:13512:36180","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12394:1739","crate::ops::IndexMut":"2:3490:3986","str::slice_unchecked":"2:13511:36179"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2623":{"id":"0:1023:2623","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:13549:29173":{"id":"2:13549:29173","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13180:4392","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::split":"2:13543:29169"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44277:9485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:16571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13617:28390":{"id":"2:13617:28390","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13520:9471":{"id":"2:13520:9471","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44245:3515","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2401":{"id":"0:0:2401","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.203\")]","#![allow(unexpected_cfgs)]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:2390","0:965:2398"],"is_stripped":false}}},"2:13552:36182":{"id":"2:13552:36182","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13180:4392","str::split":"2:13543:29169","prim@char":"1:12388:476","`DoubleEndedIterator`":"2:8342:130","str::rsplit_terminator":"2:13555:36183"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44309:9556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13561:29177":{"id":"2:13561:29177","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12388:476","str::splitn":"2:13558:29175","self::pattern":"2:13180:4392"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44381:9560","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:16571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2620":{"id":"0:86-0:994:2620","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2620","glob":false}}},"2:13576:36185":{"id":"2:13576:36185","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13180:4392","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::rmatch_indices":"2:13579:36186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44409:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13620:29087":{"id":"2:13620:29087","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:40913"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:36892":{"id":"5:5727:36892","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:2774":{"id":"5:5713:2774","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13602:36193":{"id":"2:13602:36193","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:16571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13518:2987":{"id":"2:13518:2987","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12388:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44229:9550","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13522:34144":{"id":"2:13522:34144","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13521:34076"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44542:9570","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13621:36196":{"id":"2:13621:36196","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5023:36196"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44558:9515","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13519:2981":{"id":"2:13519:2981","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12388:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44235:9551","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13623:11107":{"id":"2:13623:11107","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5024:11107"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44567:9509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13529:29181":{"id":"2:13529:29181","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13586:36189":{"id":"2:13586:36189","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13570:2740":{"id":"2:13570:2740","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13180:4392","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::rmatches":"2:13573:36184"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44463:9565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:36893":{"id":"5:5728:36893","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2590","`String`":"5:7771:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2590","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13525:34093":{"id":"2:13525:34093","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44551:9571","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13539:5157":{"id":"2:13539:5157","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42392:191","prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:16571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13524:36181":{"id":"2:13524:36181","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44523:9568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13523:30976":{"id":"2:13523:30976","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44513:9567","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13624:36197":{"id":"2:13624:36197","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5021:36197"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44576:9514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13490":{"id":"2:13490","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13491:1008","2:13492:2744","2:13493:36175","2:13494:36176","2:13496:36177","2:13499:3505","2:13500:36178","2:13501:336","2:13502:29141","2:13503:2635","2:13505:29138","2:13507:29139","2:13509:29140","2:13511:36179","2:13512:36180","2:13513:3393","2:13514:29164","2:13515:29167","2:13516:29168","2:13518:2987","2:13519:2981","2:13520:9471","2:13521:34076","2:13522:34144","2:13523:30976","2:13524:36181","2:13525:34093","2:13526:2846","2:13529:29181","2:13532:29182","2:13535:3295","2:13539:5157","2:13543:29169","2:13546:29171","2:13549:29173","2:13552:36182","2:13555:36183","2:13558:29175","2:13561:29177","2:13564:29179","2:13567:29180","2:13570:2740","2:13573:36184","2:13576:36185","2:13579:36186","2:13582:36187","2:13584:36188","2:13586:36189","2:13588:36190","2:13589:36191","2:13590:36192","2:13593:2653","2:13596:28364","2:13599:29183","2:13602:36193","2:13605:36194","2:13608:36195","2:13611:2615","2:13613:28386","2:13614:29082","2:13615:28388","2:13616:28389","2:13617:28390","2:13618:29085","2:13619:29086","2:13620:29087","2:13621:36196","2:13623:11107","2:13624:36197"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5729:4043":{"id":"5:5729:4043","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13613:28386":{"id":"2:13613:28386","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13546:29171":{"id":"2:13546:29171","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:4392"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12995:9484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:16570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:32711:2568":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:44056:9486":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:3617:11200":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"21:2746:2542":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"1:902:3973":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:40976:11167":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:47501:9009":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:41389:4084":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13757:6346":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12371:6218":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12749:24172":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:4888:11332":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"24:5061:2547":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"24:5662:3937":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"16:6302:9316":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"21:0:1360":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"6:6770:8352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:4883:4144":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"8:0:3726":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"24:5666:3936":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:13845:4075":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"6:1625:7704":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11114:24015":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:16036:6894":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11958:24071":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:4218:11282":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:7582:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:5186:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:10414:120":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:2684:7130":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"21:2601:4165":{"crate_id":21,"path":["proc_macro","escape","EscapeOptions"],"kind":"struct"},"17:11401:6193":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:506:6121":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"18:0:3735":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13427:6298":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:22933:11490":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:22783:11203":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:1632:7708":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:14327:6470":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"24:5042:3889":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"20:116:37626":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:5094:16608":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:5545:3929":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"24:4619:4281":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"6:6790:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:21973:11203":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:1539:7641":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:45051:9606":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:45234:10346":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:42409:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"24:1085:37781":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:47490:9008":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"24:5071:2757":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"17:11952:10702":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:1564:3973":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"21:2571:9221":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:10420:3143":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"24:4846:4297":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"1:12410:1863":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"24:4747:4290":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"2:43595:9541":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"24:1749:28297":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"2:44993:9602":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"24:6025:3950":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"24:1818:4100":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"17:16798:7106":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:7415:5891":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:15641:6795":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:43095:4129":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"11:0:3729":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:903:37535":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:2751:10633":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:5007:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:5672:114":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:14975:6586":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:1614:10746":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:44481:9566":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:12401:742":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:15769:6824":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:1049:11127":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"24:6022:68":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"24:3172:2922":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:23211:8613":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:9305:116":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:47344:9000":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"24:5985:3954":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"1:923:9446":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:4330:11303":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12983:24201":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:1410:11126":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:2766:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:15549:6776":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:2505:11195":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"21:1992:5600":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"17:2378:24105":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"24:356:4110":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"17:12319:24142":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"20:693:4110":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:13206:16569":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:14460:6492":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"24:5351:3916":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"17:12992:6270":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:8244:128":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:22154:8605":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"24:5406:3901":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:23018:9492":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:30741:11260":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12260:24161":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"16:8179:7321":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:3217:3070":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13398:6297":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:7059:5583":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:5282:7197":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6781:7219":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13385:9285":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:7487:8488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:11752:9640":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5417:7201":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"24:1105:3599":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:3293:5481":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:936:5579":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:3273:6026":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:10368:24005":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:15963:6875":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:43611:9544":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:5441:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:12583:6254":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:46976:8961":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:12816:6263":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:15836:6840":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4896:7832":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:11446:7522":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:47618:9022":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8834:11345":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:14796:6559":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:42505:5502":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:11246:31722":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"24:4730:4289":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"24:267:10611":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"1:3674:11201":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"24:5493:2550":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"11:809:5577":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:11539:6197":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:15090:6606":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:15148:6615":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:6269:9310":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:5079:2801":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:42648:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:12394:1739":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:6900:5794":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3566:5818":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:7358:7155":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"24:5457:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"2:10424:4130":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"24:2379:3974":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"1:2328:5521":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:1727:7756":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:5983:11369":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:11989:9643":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"24:153:2536":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:47423:9003":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6652:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13157:24204":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"24:3631:4249":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:10966:5858":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"6:4921:7848":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11630:6199":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12135:9257":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"20:744:3226":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"17:14335:6472":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:22891:11203":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:10729:6183":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:2486:7121":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:43848:9547":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:46340:8907":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"24:5995:3958":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"6:5381:8015":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5107:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:1639:9448":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:8201:9614":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:45255:35213":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:23296:8625":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:2415:23034":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:45242:8886":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:40105:8711":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:2301:9416":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:6611:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:3671:16596":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5428:8040":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:10843:6186":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:4569:5818":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:6082:5818":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"24:5362:3918":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:5266:438":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:1650:2579":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:33577:6016":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:96:28263":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"24:4995:2741":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"6:5375:8014":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:4929:7186":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:41120:4073":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:15777:6826":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"14:0:3731":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"24:2335:3972":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"6:7332:8430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:16812:7107":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:12695:16714":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:14738:6547":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:44845:9585":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12886:9278":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:15064:6604":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:4861:4143":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:8267:7329":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5217:7947":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:1928:5645":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:3310:33632":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"21:2613:3992":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"24:4689:4286":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"17:13554:6304":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"24:5858:2923":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"2:31003:5436":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:4566:11301":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:12408:1851":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:6419:8188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:532:7585":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11163:6205":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:2182:11130":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"11:2366:22990":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:16385:7002":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"24:4989:3874":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:44977:9598":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12776:24198":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:2640:7128":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"24:5321:3911":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:13962:16622":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"24:3087:4228":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:14312:6468":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"5:2357:37494":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:1507:7625":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:44576:9514":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:6885:5886":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:8014:8560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:9734:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:8585:23945":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:6462:23926":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"24:1109:3933":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"17:11553:24045":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:8353:28640":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:12411:1845":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:15931:6867":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:12995:9484":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:46258:8898":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:21909:35694":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:38588:6023":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11503:6196":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"24:2599:11203":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"17:13306:6294":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:5825:5583":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12537:24129":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:2455:3980":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"2:22848:11497":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:23203:8612":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:4902:7835":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:12403:902":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:8598:23946":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5670:8152":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"24:5991:3956":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:2052:5432":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12976:6269":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"24:1940:2617":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:8069:4039":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:6672:8319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"12:0:3730":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:2610:5515":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:11758:9641":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:45276:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:44363:9559":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"24:4520:4274":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:47373:9001":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"24:3461:2925":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"24:1618:4116":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"6:5019:7893":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:2559:7462":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"14:187:23003":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:9455:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:472:23993":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:5855:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"21:2397:2610":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:4488:5478":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"24:3580:4248":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"6:7391:8464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:16187:6951":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3445:11239":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:11591:16560":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:44783:9583":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46486:8923":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13006:6273":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:15418:6727":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:2265:5352":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:21955:35702":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"24:5329:3895":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"6:8008:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:23411:8629":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:1852:703":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:2081:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"24:1364:9185":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"6:6411:8186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"24:5528:3930":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"11:430:37507":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:45201:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:11066:9108":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:44542:9570":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:3041:124":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"11:2148:11127":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"24:5389:3920":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:42562:3974":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:5641:8141":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:7891:2623":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:7574:3973":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:16399:7005":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:2467:7115":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:14136:5862":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:8105:7318":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:36657:4297":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"24:96:5204":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"2:8293:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13570:24024":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:9763:128":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"24:607:3983":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"5:898:5797":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:8249:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3684:11222":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:40:5490":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11235:9107":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:8196:11198":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:6736:5885":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"23:78:2611":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"17:11124:37600":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10246:24001":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:3729:3978":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:2018:794":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:7058:9380":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:2082:1373":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4346:11305":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12056:6213":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"20:518:3992":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"21:2474:127":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"5:1223:37033":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:4970:7866":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"21:1799:5599":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"1:10998:9084":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:5561:16547":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:8308:8585":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:10979:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:22452:8606":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:4441:35209":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:1106:11127":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"24:1799:4099":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"5:5516:5794":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:32592:3304":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:12044:24094":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:2825:8601":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:14001:6391":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"20:883:2609":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"17:16832:6381":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:44886:9595":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"18:608:37611":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:507:6046":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9151:9106":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"24:5294:3892":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"6:5249:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5139:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:7938:9417":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"24:5976:3953":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"24:5381:3899":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"24:5075:3891":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"2:43331:4118":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:1969:5818":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:14708:6528":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7919:23939":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:14533:6225":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"20:948:2542":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"17:12699:24196":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"24:4701:4287":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"2:13416:120":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:8199:8572":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:10944:9628":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:22677:11493":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:910:9445":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7980:7160":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"24:5342:3915":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"17:12066:6214":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:3308:7112":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:6028:7146":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:2729:5865":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10949:9614":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:13937:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"24:5045:3890":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"24:5452:3903":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"11:1674:5791":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"24:5597:3196":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"11:881:11125":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:2790:11235":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"21:2246:2530":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"18:563:6052":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6064:7151":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"11:2551:37512":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:12400:763":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:12881:9553":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13547:10704":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:46917:8958":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:7282:9399":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15905:6857":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:16283:6978":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:12393:1705":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"24:3614:228":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:41244:4082":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:6010:4733":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:3291:2555":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:41111:4072":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11465:9244":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:10416:129":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:9401:4830":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"17:13322:24022":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:7501:5489":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:3903:268":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"16:7372:7156":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:2860:7138":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:12391:1329":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:13181:24209":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"24:5848:3207":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:11757:9560":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4997:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:2228:9450":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:21975:11411":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:1551:7650":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"24:5414:3923":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"1:8667:8446":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:7093:5585":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:13041:24206":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:44074:16559":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:15876:6849":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:40765:8840":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"24:4346:4263":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"21:2562:127":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"16:6159:9299":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:41161:4086":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11566:24044":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:1564:22987":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:15475:6765":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:2732:113":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:1586:9445":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"9:53:10726":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:1132:5794":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:12371:28334":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:42909:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:7530:5579":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:7448:8471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:21926:35696":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:3987:6087":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:14116:5860":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12570:24127":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"24:3393:4239":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:41060:4070":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:6696:23929":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"24:3648:4250":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"6:1657:7727":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:16198:6956":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:6534:8244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12625:6255":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:16642:7068":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"11:1140:22986":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"20:953:3226":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"17:16668:7074":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:1589:7674":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:40028:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:10516:24010":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7554:23937":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"21:181:5222":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:42483:4114":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"24:5670:3941":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"5:1625:10747":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"9:355:22921":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:306:2590":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:11319:37595":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:23309:9502":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:14832:6564":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:3141:6074":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:8302:8584":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:7578:9114":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13361:6296":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:41627:4046":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:42870:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"11:2420:3973":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:46547:8926":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:5726:11354":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:11309:24018":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"24:4363:4264":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"1:12413:1931":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:44218:9549":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:5025:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:4914:4145":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"11:1105:22985":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:479:7551":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:3455:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"24:5660:2748":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"5:3095:35849":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:12727:16573":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:14405:6483":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:46422:8912":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:0:3733":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:15077:6605":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12962:24200":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:47481:9007":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:5309:5826":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:41379:4083":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:14358:6477":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:6814:10636":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6042:7149":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:43603:9543":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5179:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:1489:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:4365:5818":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:6731:10705":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:5224:7195":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:15887:6853":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:44981:9599":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:47021:8962":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"24:5997:3959":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:40902:9518":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:46888:8957":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:12404:908":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:12386:420":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:5976:11368":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:908:37572":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:16595:6349":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:896:37558":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"11:2440:5579":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:39940:9507":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:6526:8239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:23320:11274":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:4891:11310":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"24:5475:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"17:11358:24031":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:8279:4110":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:4852:4142":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"20:715:252":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:2653:11203":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"2:39277:6025":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:11289:9124":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:13909:6372":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6239:7208":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:41152:4076":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:3014:23061":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"24:95:11203":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"1:4986:5870":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:6871:10756":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:23341:11203":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:40799:9514":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:8395:4055":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:5586:8111":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:4492:11308":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:47595:9021":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"3:0:510":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:3835:4255":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"2:44157:9489":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:628:11106":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:5144:7192":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11337:9125":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:578:7609":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:22425:11203":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:6502:23033":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5282:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:10677:9480":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:33983:6018":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14640:6518":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:44065:9487":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11902:6210":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:23433:8631":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:4810:7182":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12851:9276":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:43088:4121":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:2242:129":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:13822:16624":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:2477:5504":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:8092:11153":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:16341:6995":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:13254:16578":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13983:6383":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13871:6366":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:5357:8004":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:41082:4062":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:44427:9563":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:46826:8955":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:41195:4078":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:6201:5878":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:43620:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7305:7260":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:2704:7131":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:22759:11495":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:12409:1857":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:41603:4040":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:11313:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:44973:9597":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:11886:11257":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"24:5442:2565":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"24:5498:3093":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:47402:9002":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:41618:4044":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"18:643:6046":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4990:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:12414:1435":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:4230:11285":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7838:23938":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:44176:9490":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:46194:8892":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:44855:9589":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6389:23924":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:14750:6549":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:7869:5578":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:40778:9512":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:7168:7248":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:291:5794":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:2880:7139":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:2713:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:41182:4064":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:102:9438":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:1982:10629":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5541:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:545:7591":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"11:740:10747":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:5869:9611":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:1083:9416":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:46436:8913":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:4241:7177":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:9140:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:39936:3150":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:6493:8227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:33365:6015":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:23488:8636":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"24:3665:3274":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"21:1362:2623":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"2:10058:34305":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:10430:4128":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:465:2531":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"0:964:2392":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"17:11457:6195":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:12249:24160":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"9:236:8871":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:14416:6484":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:3285:5479":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:7808:10640":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"24:4561:4277":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"1:10960:9634":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:4652:4112":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:13635:6313":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:3665:28785":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:9300:10752":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:8511:11202":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:40291:5148":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:47315:8999":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:41596:4038":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:14547:6506":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2148:5531":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:12095:9254":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:3848:11254":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:6084:9293":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:505:5863":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"20:719:3992":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"16:6123:7150":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:2715:5866":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"20:723:2609":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"17:5305:24215":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:11536:5900":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"24:5307:3893":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"17:16159:6944":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:8273:8577":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:41589:9531":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"11:2380:3974":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:8151:7164":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:4834:4296":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"1:8731:4731":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"23:235:5064":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"6:6443:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:6977:9478":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:46649:8932":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:4822:8457":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"24:5013:3876":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"17:15679:6801":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7030:7225":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:32622:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:45193:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:2960:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:9473:9118":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:6902:8395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:4930:11293":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13014:24214":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:12355:10762":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:47580:9020":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:14093:116":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"18:735:28272":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:11701:9635":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10141:23998":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"24:659:138":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"1:8796:8871":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:12550:6252":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:3347:9447":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10784:37602":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"18:670:28275":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:10031:23995":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"11:1023:11126":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:43632:8871":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:23071:9493":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12347:24164":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:16264:6973":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:8711:7371":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:4792:7762":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13970:6382":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5450:8056":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:10637:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:13070:6205":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:7590:9465":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"7:32:22893":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5412:1258":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:16026:6889":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:45266:11498":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:11788:24087":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:3433:4149":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:12082:9252":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:16786:7103":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:4604:4152":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:14586:6510":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4984:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:4795:4140":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:8255:9616":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:5482:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11475:24036":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"16:2506:7122":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:570:7604":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:1930:11151":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:34435:5067":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:651:6046":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:15844:6841":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:5797:11355":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:46407:8911":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:16171:6947":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"24:5355:3917":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"1:6696:4040":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:5387:8018":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:5351:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:40939:16699":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:4288:4259":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"16:5172:7193":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11971:24070":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:2304:9454":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7075:23932":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:44558:9515":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11222:24016":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"11:1907:9448":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:4222:11283":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:5814:203":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"24:5550:3096":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"24:89:2536":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"17:10218:24000":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:1645:9449":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"24:3767:4252":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"17:13515:24023":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:23444:8632":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:1633:9447":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:10358:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:10793:6070":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:23422:8630":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:11606:6205":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:2377:9459":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:14055:6397":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:5205:7940":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:3402:5482":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:155:5783":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:46568:8927":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"24:3750:2525":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"5:3097:8600":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10487:24009":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:12918:9558":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:9576:5645":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:42352:8854":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"24:5892:3947":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"6:8284:8581":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13838:6360":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:2084:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:11386:24032":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:42330:9617":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:47270:8998":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:726:6068":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"20:0:2378":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"1:12402:920":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"24:4455:4270":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"2:21897:35694":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:1696:7744":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:4983:7188":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:6982:5602":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"24:3818:4254":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"24:6034:3095":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"1:677:11109":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:1684:7740":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:41645:4050":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:1489:7617":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:14140:6425":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:4873:7184":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"21:2726:2934":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:44756:9582":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:6866:23931":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"24:306:37773":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"17:10977:37588":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:13180:4392":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:41403:4085":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"21:2751:3226":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"17:12897:9279":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:39953:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:4217:3978":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:6217:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"21:2731:2608":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:12711:10625":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:16019:6887":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"20:825:2530":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"5:3373:2579":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:44868:9593":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:8546:9431":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6852:9363":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:13805:35210":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:1339:24051":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"24:3682:2557":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"6:8330:8590":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14560:6507":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:14438:6491":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"24:5717:3943":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"11:1888:5579":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:4722:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:3443:11238":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:5318:7198":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:5635:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:2590:7126":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:44229:9550":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"11:1085:37505":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:41091:4071":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:8296:8583":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:10356:11145":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:4337:5818":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:2435:23060":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:12270:16556":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:6998:9371":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"11:873:11124":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:473:7548":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"24:2091:11051":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"1:8044:5363":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:9491:9625":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:41612:4042":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10669:5896":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:546:9287":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:12225:9264":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"18:613:37608":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"20:775:3995":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"1:961:10747":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:23139:9494":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:3503:24128":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:40709:9510":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12204:9262":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:9185:3974":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12605:6205":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12035:9450":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:8043:37528":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11741:10354":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:41073:4061":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:6970:7148":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11878:6205":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"24:4899:4301":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"1:3307:33631":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:9251:11377":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:11982:9643":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:9287:9113":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"11:1064:22984":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:6823:8369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:7490:33073":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:15106:6608":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12860:9277":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:44708:9581":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:46326:8906":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:15121:6612":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:11785:16564":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:5477:8074":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"21:109:5608":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"1:10743:11242":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:6640:23927":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:3402:11243":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:4826:8461":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:15050:6601":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:12388:476":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:2011:11163":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:6917:8406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:5338:3914":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"24:5614:2881":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"18:635:6064":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12234:6280":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:44381:9560":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:32681:4169":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:42443:4737":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:1794:5794":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"24:657:226":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"17:16613:6359":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:8638:11256":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"24:661:9183":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"1:10939:9626":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:4805:4141":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:5689:7204":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"24:5366:3897":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"1:952:11120":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:45292:9609":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"24:1699:2614":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:10063:10749":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:8884:3974":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:5044:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:43642:9545":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:44309:9556":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11579:24043":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:4184:7176":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:2275:9452":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:9551:16570":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:8233:23943":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:8066:23941":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:9442:5888":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:10443:11358":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:13910:35582":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:4142:5579":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:3094:2783":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:11381:2911":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:1867:3092":{"crate_id":2,"path":["core","mem"],"kind":"module"},"20:732:2530":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:11026:10628":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:43852:9548":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:16084:6931":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"7:79:22900":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:946:5577":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:10959:5857":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"24:1077:37779":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"24:5988:3955":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"6:5334:8001":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:11075:37590":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12163:9259":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:5274:28588":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3052:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:31409:5144":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12673:24186":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:8636:23947":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:8230:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:7539:8528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:5566:3198":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"16:8209:7152":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"11:698:3973":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:3716:3974":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:11713:9132":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:15953:6872":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:39990:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:10564:6178":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:41254:4067":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:45009:8882":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:47470:9006":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:2146:5530":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6462:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6914:9367":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:8901:9622":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"24:3189:117":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"16:2450:7113":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:5305:28588":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:2687:2610":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:2710:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:3053:4226":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"9:500:7525":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"23:513:1413":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"16:2840:7137":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:14807:6561":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:8748:6006":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:6713:2572":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:32588:2697":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:5757:7205":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:14043:6396":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:1604:11120":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:15540:6775":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:8260:4057":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6953:9370":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5676:8154":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:7784:9473":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"21:2682:4161":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:45176:151":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"11:2137:11126":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:1569:7660":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:7720:16699":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:4267:7178":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:11111:5897":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:15036:6600":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"24:5430:3926":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"6:7577:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4914:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:11727:9638":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12931:6266":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:2660:7129":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:4631:4282":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"17:15760:6823":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"24:2362:3973":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"6:1500:7622":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:16209:6957":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:16684:7079":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:3074:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:7350:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"24:6000:3097":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"6:1494:7619":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:8353:8596":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"24:5438:3928":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"1:4928:11291":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:1624:37879":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"17:15852:6842":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:14773:6558":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:2323:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"24:3308:4235":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:32682:5131":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:13798:6349":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:46843:8956":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12122:9256":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:2724:7132":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:5962:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:3288:5480":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:4:1271":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:1584:7672":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:2748:7133":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:7424:23935":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:23466:8634":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"24:2113:37788":{"crate_id":24,"path":["syn","precedence","Precedence"],"kind":"enum"},"17:16494:6332":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:9872:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:44997:9603":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"0:0:2401":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"20:843:3226":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:10672:11207":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:42833:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6408:9327":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:2950:7142":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:12941:9561":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"21:2668:2609":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"17:14917:6577":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"24:1928:4109":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"1:9351:2536":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"24:0:2379":{"crate_id":24,"path":["syn"],"kind":"module"},"17:14127:6424":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:8256:4058":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:45303:5487":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:22797:11496":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:7676:4031":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:23289:9499":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:7401:37529":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:16728:7090":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:10115:23997":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:2957:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"24:1913:4096":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:3420:125":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4929:7850":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5051:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13958:6381":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:2045:678":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:5794:8367":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:7386:7268":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14269:6457":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7337:7264":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:46294:8904":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:10740:11240":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:7192:23933":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"21:1099:208":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:22046:8605":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"24:3070:4227":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"24:5993:3957":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"24:5402:3922":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"6:7361:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:16555:7053":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:8014:7162":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:3039:5869":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:14019:6392":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:2171:11129":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:42318:9539":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"20:834:2542":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:11484:3978":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"24:708:3973":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"24:5418:3924":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"20:908:3994":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"6:7431:8466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:45005:9605":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:2437:24093":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:7853:5577":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"24:5393:3900":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"17:11617:24016":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:16739:7095":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:3860:4110":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:5366:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:12395:1829":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:5820:2903":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"1:8191:5654":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:3587:7171":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"16:5198:7194":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:7350:7266":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:4317:4261":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"21:2279:2934":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"23:504:5060":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:23178:9497":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:4824:8459":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:33153:6014":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:43102:4130":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:6169:16944":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"21:936:4161":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"17:13451:6299":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"21:2548:4162":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:2969:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"24:4648:4283":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"24:3444:4242":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"17:13028:24207":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:1115:10620":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6876:7223":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:11103:5859":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"6:4937:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:1643:7716":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:40703:9509":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:42418:3974":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"24:5802:3944":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"11:2323:11126":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:8319:8589":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:47527:9011":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:44820:9584":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:798:5579":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:3490:3986":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:31035:34090":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:9447:5889":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"21:2707:3994":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:0:568":{"crate_id":2,"path":["core"],"kind":"module"},"17:3720:24131":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"24:1020:11203":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:3438:4020":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:14114:6420":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:5325:11245":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"24:4793:4293":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"17:15286:6621":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:14963:6584":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:14933:6578":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8578:11252":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:12339:10355":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:9346:10754":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:14599:6512":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:22152:11408":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12359:24165":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:4582:5820":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12723:24174":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:4146:11277":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:3889:6079":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:8528:9428":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:4956:7187":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:842:11122":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11706:24064":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:3101:4245":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13662:6319":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:8766:4054":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:8137:7163":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:5184:4727":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"20:815:2609":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"2:7721:4069":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4829:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11432:24034":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"23:272:2619":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"5:221:5492":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11123:5898":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:7548:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:7414:8465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:9437:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2937:16619":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:6392:5877":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"11:351:37502":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"11:2121:9416":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:4359:11306":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:2966:7143":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6507:8237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:42426:3978":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:22583:11203":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:14997:6597":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:42570:3978":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:6424:10755":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"24:5317:3910":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"1:5606:11350":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:3449:3090":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5288:7984":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:16362:6998":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"24:2664:6009":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"17:14346:6475":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"24:4665:4284":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"24:4532:4275":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"2:46776:8953":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:4411:11307":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:5287:35219":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:40750:34104":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:42796:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:46209:8893":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"24:1022:5998":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:44662:9572":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"24:3359:4237":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"17:14821:6563":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:10597:6179":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:1867:11135":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:44084:9488":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:11743:9559":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:16179:6950":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:7618:3973":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:1097:11126":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:16714:7087":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:8267:8576":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"20:806:37625":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"6:5494:8079":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"24:5521:3165":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"1:5117:11331":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:15981:6879":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"11:2566:4030":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:10629:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:8263:28627":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:5346:3896":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"17:14859:6567":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:5570:8106":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:2227:24077":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12524:24130":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:32599:35208":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:10630:6180":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5196:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:9164:9107":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12409:24166":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:9236:11378":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:12280:24162":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:43650:9546":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"24:4822:4295":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"17:14084:6408":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:5533:129":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:8669:3304":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:2495:11190":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:8021:5364":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:384:5376":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"20:687:3996":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"21:590:4163":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"5:6532:11500":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:44834:16585":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3304:31487":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:41143:4075":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"24:4549:4276":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"21:364:4830":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"6:6777:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:7518:8514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"15:306:23016":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:8612:7166":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:41031:4059":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:8298:9424":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7969:9421":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"13:110:37515":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:44691:9580":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:47071:8964":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:8541:4083":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:44985:9600":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11818:24075":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:6055:5872":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:8255:8574":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:3376:4238":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"17:15410:6724":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:46955:8960":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:1754:28298":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"17:12920:9280":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:1533:3974":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:4208:11281":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:9420:5882":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"24:4916:4302":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"16:6738:37548":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:3935:5579":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"14:160:10614":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8819:9100":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:22585:11409":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:1690:7743":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8026:5366":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:10418:4121":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:1838:5335":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:15621:6787":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:4116:11275":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13290:6135":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:3441:7170":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:22905:11489":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"7:0:1921":{"crate_id":7,"path":["unwind"],"kind":"module"},"24:4305:4260":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"17:16218:6959":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:45315:9610":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:12293:24126":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"24:5707:3942":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"6:8031:8571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:497:7559":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"18:491:9226":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:43376:34102":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:33849:4019":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:4152:7175":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11173:37593":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"21:53:5602":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:2222:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13145:24205":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:9193:11380":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13933:6376":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:2771:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:22034:11410":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:7837:4034":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:9134:11356":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:46617:8930":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:12360:11115":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:15997:6882":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"24:5017:3877":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:32624:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:7259:9398":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:11975:28606":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:1898:5577":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:6658:10706":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"24:5303:3909":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"17:16377:6999":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:15739:6819":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:32713:115":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:11007:31719":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"24:4590:4279":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"24:3206:4231":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"18:680:9230":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:3093:11166":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:46678:8933":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:13195:9236":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:41214:4080":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:8223:9423":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12952:9282":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12787:6258":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:14228:5488":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:5742:6177":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:7604:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:6623:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11757:24066":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:14375:6480":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:42484:4113":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"24:5853:2920":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"17:13890:6371":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:2479:11186":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3684:34159":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"14:202:2974":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"24:1938:2381":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"5:7540:5805":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:735:10621":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:586:7613":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10097:23996":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:45062:16754":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:44131:4059":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"18:521:28276":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4842:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:5348:7199":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:16507:6346":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"11:2349:11127":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:5319:7997":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8722:4732":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:42370:8855":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"21:2702:2530":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"11:1158:10620":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:9392:9117":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:44166:16562":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:14507:6498":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:12008:6038":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:3110:7167":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8086:11114":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:6148:5826":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"24:6008:3961":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"17:15557:6777":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:8573:11255":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:6274:5818":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"24:3155:105":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"2:22464:35700":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"24:5829:2906":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:3263:6013":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"23:0:1413":{"crate_id":23,"path":["quote"],"kind":"module"},"1:7901:10643":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"24:5878:3949":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"1:8567:11256":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:40895:9517":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"15:327:10722":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:8890:9105":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"24:3784:2579":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"6:6758:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:8757:150":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:31024:4118":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:2936:11203":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"24:98:4444":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"24:3852:4256":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"2:40048:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:15655:6799":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:7610:3973":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:2594:8598":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"24:4887:4300":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:44567:9509":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:16323:6989":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:23378:8626":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:13169:24238":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:3048:23062":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13945:6379":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:772:9445":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:7469:8477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:5565:16548":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:2406:24072":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:42722:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:8304:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10928:24012":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:6256:9309":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:6368:9324":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"24:3240:4232":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"24:5282:3905":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"14:214:9436":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:11307:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:47225:8997":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:14520:6501":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:4168:11279":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:2343:5484":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:16822:6376":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"18:573:6046":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:42946:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:38533:6022":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:8450:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8644:9088":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:46378:8909":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:6942:9369":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"10:0:3728":{"crate_id":10,"path":["adler"],"kind":"module"},"2:4068:3973":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"24:5577:3600":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"24:4776:4292":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"6:6716:8337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:21887:5144":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:5060:7189":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:4507:16599":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:4875:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:40098:16662":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5311:7993":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:44094:16558":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:42685:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:47050:8963":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:11653:6201":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:45171:8885":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:3581:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12335:24163":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:3258:4018":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:322:37572":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8484:4037":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:46311:8905":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:2966:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:2645:11234":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"11:1880:3974":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:4816:7779":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:7738:28873":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:8107:10628":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12840:9272":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:38698:6024":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:10203:4119":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"24:5571:3201":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"2:46699:8934":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:1548:3978":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"24:3869:4257":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"16:2920:7141":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:5613:2619":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:32623:4168":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:5048:2559":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"17:14299:6466":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:23247:34120":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:3644:16661":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:4766:7181":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:589:6053":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12906:6265":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:6521:8238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:7907:7313":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:12957:9564":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:7384:5890":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:2596:679":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:396:5789":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"9:422:22908":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13082:24016":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:11823:5902":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:9339:28620":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"15:0:3732":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:2900:7140":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13719:6331":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"23:11:4003":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"17:1220:24046":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:0:3725":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:4338:11304":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:11254:8882":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:564:7601":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:44186:16561":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:3072:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"20:781:28283":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"17:15753:6822":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:680:11110":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"14:7:10614":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:3126:23063":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:22862:5515":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:12191:9261":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:3910:11258":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:765:28273":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:23155:8608":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:6599:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15602:6786":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"24:1053:37782":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"16:7789:37564":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:14612:6514":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"11:2545:7459":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:3875:11129":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:5088:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12216:9263":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:14483:6497":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:7735:9469":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"24:3104:4229":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:23951:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:854:11123":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"24:3427:4241":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"18:481:9225":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:15785:6828":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10296:24003":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:1395:11127":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"24:5664:3938":{"crate_id":24,"path":["syn","lit","LitCStr"],"kind":"struct"},"5:6684:5579":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"24:5668:3939":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"18:113:28264":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:44327:9557":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:7454:8473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"24:4467:4271":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"17:10803:3515":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:5255:7196":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12711:24197":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:4015:11259":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:5658:8145":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:15973:6878":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:6730:5794":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:3339:9449":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:5817:3190":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"6:5127:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:982:11123":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5420:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:1530:7635":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13222:24020":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:9432:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:7883:7312":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"20:792:252":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"24:4409:4267":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:42168:8847":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:42130:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"23:148:4758":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:23262:34115":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:44409:9562":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:12398:744":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:11846:11258":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:698:9234":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:3349:11241":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:40923:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"24:3801:4253":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"17:10274:24002":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"24:5971:3952":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"17:12149:9258":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:12387:1188":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:7946:5893":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13119:6276":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:15573:6778":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"11:1900:9447":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:3826:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:5113:7191":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"24:1845:3551":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:15:3368":{"crate_id":2,"path":["core","write"],"kind":"macro"},"24:3733:254":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"5:3352:35880":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:6876:8380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:5656:11353":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:7986:8557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6473:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:4573:4151":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:7731:4737":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"24:5580:2676":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"6:6813:8366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:5674:3935":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"2:40910:8841":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:23499:8637":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:41173:4077":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:41024:11199":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:45183:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:44144:16552":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:15896:6856":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:5603:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"14:40:2542":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:708:10746":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:8663:11333":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:957:10746":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:7510:3973":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"13:0:3724":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:12412:977":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:317:37535":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"21:241:37703":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"21:2621:3973":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"16:2530:7123":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6144:23922":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7416:23934":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:6527:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:5165:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:7316:8418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:9207:9109":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:45027:131":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"11:1601:22989":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4964:7864":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"24:3512:4244":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"24:5895:2525":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"17:11720:9247":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"24:5325:3912":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"24:4945:3219":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"17:14845:6566":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:3665:16597":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10332:24004":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:11805:24076":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"21:420:5782":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"24:6013:3962":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"16:8096:23942":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:43835:8875":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"2:40008:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:5434:3927":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"1:8612:9617":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13205:24019":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:6449:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4881:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:491:7556":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:2533:2530":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:11291:37587":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:3736:4150":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"24:4971:2873":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"24:5369:3919":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"17:14902:6573":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"24:53:2618":{"crate_id":24,"path":["syn","token"],"kind":"module"},"6:1563:7658":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:4805:4294":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"1:12006:5905":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"24:5385:2808":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"1:12174:5907":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:1621:3973":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:9201:3973":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:34117:6020":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:6564:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"24:2308:3971":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"5:4307:5818":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:824:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:965:11121":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4957:7861":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:43397:4118":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:42983:10751":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:42434:3973":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:42611:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13610:6312":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:5230:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:1011:3974":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"21:2617:4160":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:10428:4127":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"24:5887:3948":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"5:7184:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:11303:11203":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7508:9411":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:8630:11300":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:10394:24006":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:15919:6864":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11129:5899":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:23477:8635":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:22811:5515":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:15496:6770":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12762:24171":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:7807:37571":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"24:4508:4273":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"24:2160:11052":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"2:44513:9567":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"11:2466:5577":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:5986:5818":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"11:1920:2579":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:6708:8333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:11864:24073":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:5009:11290":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:14173:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"24:3019:4304":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"2:40822:16614":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:47565:9019":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:553:7596":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:3254:5130":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:6723:8338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:22:826":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:12941:6268":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:23400:8628":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"24:4677:4285":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"14:220:7449":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:11034:11354":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"24:364:37878":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:26351:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:6782:4087":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:44205:8878":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:8342:130":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:16701:7081":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:14652:6519":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11232:24036":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11448:24035":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"24:2646:3229":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"2:41101:134":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12018:24117":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:8250:5657":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:43081:3143":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:2448:3978":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"1:3599:9086":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:7462:23936":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:7368:8446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:1624:5579":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"15:394:23025":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:8548:3515":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:685:11111":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"23:35:11203":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"1:7834:10642":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"17:10418:24007":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:21943:35690":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:8689:9089":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:5709:23920":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:11015:31721":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:667:2623":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11421:24033":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:6731:8339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:10778:24011":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:8502:9084":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:3458:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:40068:4024":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"18:531:9227":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6740:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:15989:6881":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:44533:9569":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"24:4443:4269":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:4726:4132":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:1869:11136":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:1645:11128":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:5649:7203":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:4777:11328":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"23:407:4951":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"1:9415:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"24:1004:4097":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"23:239:5066":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"21:2504:5601":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:47542:9012":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:5620:11351":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"20:982:3973":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"24:5422:3925":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"1:988:11124":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"24:4958:4625":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"16:5727:6176":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:46361:8908":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:15829:6839":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:4377:3974":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:14872:6568":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:15864:6848":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"24:3257:4233":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"17:10938:37589":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:16632:7067":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:47657:9038":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:4677:11310":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:879:3974":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:43321:8860":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:5562:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"24:1093:37780":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"24:4858:4298":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"6:7586:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:40994:5849":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:3223:124":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"5:7083:5584":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:7016:9378":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:22430:11413":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:6205:23923":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:14072:6405":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:15431:6734":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:7257:5845":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13733:6332":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6765:8351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"11:835:11121":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:6188:9304":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:5265:7970":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:10167:23999":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:11733:24065":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"20:113:9222":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:10831:5856":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"16:2570:7125":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:15665:6800":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:6837:10721":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:4160:11278":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:22142:11203":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:6890:7147":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:7232:5842":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"21:919:252":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"2:10422:4129":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:22809:34273":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:573:5358":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:1795:3985":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"24:1061:37783":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"16:7471:7273":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:6016:3963":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"17:15689:6802":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:9741:11198":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:46716:8935":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5117:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"21:902:5615":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"17:13781:2542":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:5648:8144":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"23:38:3604":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"2:7615:3353":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:532:5352":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:42296:34145":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:3212:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"24:3121:4230":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:5367:988":{"crate_id":2,"path":["core","iter"],"kind":"module"},"20:889:2610":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"24:4607:4280":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"2:46503:8924":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:11629:16566":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:1703:7747":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:12415:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:16761:7097":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:7665:4030":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:8165:7154":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:44235:9551":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6337:9318":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:46179:8889":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"9:445:22906":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6631:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:44641:16584":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:8313:4056":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:7691:5368":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:938:5800":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"24:2185:2535":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"6:1597:7679":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"24:5672:3940":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"16:5379:7200":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:5872:3094":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"17:13491:6301":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"11:299:9439":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11592:6160":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:41004:11180":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11515:24056":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:6590:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:5551:8098":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:6942:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:6811:3973":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:13201:16571":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12306:9265":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"24:1797:2616":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"24:2387:3976":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:22028:11407":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:1521:7630":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13471:6263":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"24:1368:9187":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:12341:5527":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:10359:4126":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:8554:9482":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:15024:6599":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:3318:35867":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:3325:4236":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:10823:6185":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:14031:6395":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"24:4759:4291":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"5:7550:9464":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"5:3940:5577":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"11:671:3974":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"9:328:7502":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:41637:4048":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:15531:6771":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:437:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:7308:8413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"14:31:10614":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:3400:11242":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"11:1893:5577":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"9:176:10737":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:821:11261":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:994:11125":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:40966:3515":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:11771:16565":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:5359:2882":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"24:5373:3898":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"2:44463:9565":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11926:6212":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5520:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"24:274:10612":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:34608:6001":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:1628:5577":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:16297:6980":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"11:1005:9416":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"24:5278:3904":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"24:718:3974":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:34262:6002":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:16520:7023":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"18:538:6050":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:31382:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:583:23994":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:3347:11240":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:1101:3932":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"14:165:22996":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:11691:24041":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:6700:11370":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:8290:8582":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:523:7579":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"23:514:3227":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"1:8561:9567":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"24:3886:4258":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"21:2305:2542":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"5:5150:5818":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:39968:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:7495:9409":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"24:6029:3951":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:46938:8959":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:581:5144":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:7786:34220":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10442:24008":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:4172:5794":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:5325:7998":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"9:390:22907":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"24:3410:4240":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"1:2332:11183":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:1259:37031":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:11963:9133":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:4453:35201":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"15:288:23015":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"20:801:9224":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"9:0:3727":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:41129:9524":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:5334:3913":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"1:5465:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:42522:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10663:6181":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:15010:6598":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5255:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:39856:16595":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:7463:8476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:32606:4141":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:11702:16563":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:43435:4120":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10534:6176":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:9266:11379":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"23:322:3229":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:2155:5529":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:3343:4282":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6882:8381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:42390:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:8006:5377":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:2400:3978":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"24:5286:3906":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"16:3695:7172":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:11690:8871":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"6:5057:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:10517:114":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:2796:7135":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:2493:11189":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:12392:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:7563:8536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5533:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"23:281:2619":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"22:0:3858":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"17:5131:24210":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:4890:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:1424:10620":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7159:9384":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"11:830:11120":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4805:7771":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:325:1791":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:21941:35704":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:43414:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:45179:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"0:965:2399":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:7796:10639":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:9359:9114":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:3854:24147":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:6111:9297":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11527:24050":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13349:9284":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:46393:8910":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:12407:1869":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:7044:7153":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:14220:6432":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:3659:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8531:4070":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"23:150:4757":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"18:598:6003":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:6421:9288":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"18:659:28274":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"24:5593:3931":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:2973:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:9428:5818":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:7959:9420":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:4496:4272":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"11:685:3978":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12736:24173":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:718:6065":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:12303:16557":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:378:5375":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:42587:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:6659:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6625:9357":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:2620:7127":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:5449:3150":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"1:8208:9043":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"9:480:22905":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7521:9414":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:15731:6816":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:3699:4148":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:3313:9448":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:994:5802":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:44277:9485":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:6273:4063":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:10377:28632":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:6573:9354":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:16311:6987":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:10426:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:5349:8003":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"24:6003:3960":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"20:927:2934":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"6:5341:8002":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:5395:8023":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"24:5022:2556":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"17:11985:24116":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:13818:6359":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"24:1069:37778":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"16:6588:7213":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"16:8028:7314":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:8358:10760":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12648:6256":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:43360:7343":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"24:4573:4278":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"17:11281:24017":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:3834:7173":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:2551:3740":{"crate_id":1,"path":["std","io"],"kind":"module"},"21:127:5781":{"crate_id":21,"path":["proc_macro","bridge","client","state","set","RestoreOnDrop"],"kind":"struct"},"2:2808:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:3105:28315":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:13140:3998":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6666:8316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:3656:4126":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:3913:11257":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"24:4984:3875":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"17:15812:6832":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:661:10627":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:23227:34081":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:11026:37592":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:4699:11311":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:7716:37537":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6749:7216":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"21:141:5609":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"5:4506:5820":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:597:5360":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5629:8135":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:40861:9516":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:4536:5818":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:34050:6019":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:4844:7183":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:5682:8157":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:32546:7461":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:10411:120":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:10549:6177":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5405:8029":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:7759:5827":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:1667:7733":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:0:1731":{"crate_id":1,"path":["std"],"kind":"module"},"1:3493:11229":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:10626:11356":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:16145:6938":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:4329:4262":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:46600:8929":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"24:4426:4268":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"17:13193:24208":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"13:229:7457":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:44551:9571":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:11777:9250":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:47461:9005":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"24:664:5997":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"6:5507:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:7542:9415":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:31009:5437":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:8058:23940":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:12826:9268":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:42212:2609":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:8218:9615":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:42514:5369":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:16241:6972":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"24:5868:3946":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"24:3529:4245":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"17:12687:24195":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:1675:7734":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:10696:6182":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:9177:9108":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:5462:8065":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:4812:11280":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:40118:8712":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:14947:6580":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"10:44:7465":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"24:3138:2590":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"23:46:4004":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"5:7747:9472":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:12389:1891":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:15439:6735":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:16132:6932":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:10375:28493":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:13592:6309":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"20:933:2608":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"21:2352:3226":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"6:6437:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:6032:5579":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:15939:6870":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:7707:9466":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:1514:7627":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:41230:4081":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"24:5027:2601":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"2:8009:4037":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:16332:6993":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:971:11122":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"21:213:10701":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"17:13537:6266":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:5488:8077":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:7990:9422":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:5103:11330":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:4110:11276":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:4917:811":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:0:1013":{"crate_id":6,"path":["libc"],"kind":"module"},"1:3536:4044":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"24:5082:2880":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:45001:9604":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:46273:8899":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:6551:11501":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:3809:5794":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:515:6049":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6843:9362":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:46518:8925":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:23389:8627":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"5:1239:35854":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:42578:3973":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"24:3716:253":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"17:11851:24074":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:2990:7144":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:7771:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:8261:8575":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:16775:7101":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"20:878:252":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:11831:6197":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:38643:6021":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:16750:7096":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"5:7794:10622":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13095:6275":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"20:358:3992":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"1:10249:9536":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:14284:6461":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12869:6299":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:128:2530":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:11907:11259":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:5036:7901":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:11049:28361":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:623:37607":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:41051:4060":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:11664:9485":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"24:3546:4246":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:40788:9513":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:15946:6871":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:1711:7751":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"11:364:5787":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:9224:9110":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:3465:5577":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:8005:11203":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:4976:7869":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"21:959:2609":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"6:517:7576":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:11509:9482":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:5151:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7223:9386":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:10377:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:10969:9043":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:10534:28490":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"6:5271:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:7820:10641":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:6817:11373":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:5449:7202":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:8760:4053":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13854:6364":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:6544:8251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:14393:6481":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"21:2218:3995":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:33916:6017":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:559:7599":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"24:4928:4303":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"2:44005:34217":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"11:2539:7458":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6984:7165":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:14672:6522":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13921:6375":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:6700:8329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"21:2608:252":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"1:5094:11329":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:6691:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:485:7554":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"24:3597:4141":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:3461:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:9438:4738":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:2963:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:11707:11359":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:9372:28335":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:6808:7145":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"10:36:7464":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:14627:6517":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"24:4479:135":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"17:12176:9260":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"11:434:37508":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:3207:118":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12028:24118":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:12405:914":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:44523:9568":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:9877:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:3306:3974":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:9318:28352":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:4308:33072":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"24:5312:3894":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:11460:3974":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:46226:8896":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13266:24021":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:8363:11236":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"24:5516:3206":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:46632:8931":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:3699:4251":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6440:23925":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:44989:9601":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:9746:5895":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"24:3342:141":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"16:6794:9359":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"6:7341:8436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"24:1294:2619":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:44105:8876":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:2157:4110":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:6479:5878":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:32613:9506":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:23124:8607":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:11552:9484":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:40928:9519":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:21924:35698":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:5640:11352":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"18:80:28262":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:5622:8132":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"24:2506:3163":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"16:5085:7190":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6748:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:4465:110":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:15160:6619":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5593:8113":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:4404:7179":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:8503:7365":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:47148:8996":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:689:9233":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"24:1361:9184":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"24:5863:2924":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"6:6480:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:7518:9463":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:5398:3921":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"6:6381:8161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:2772:7134":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:23455:8633":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"24:3036:4225":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:8804:34309":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:123:5785":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:2802:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"19:0:1306":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:46585:8928":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:5224:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:754:9243":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:8565:9434":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:43389:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:40739:9511":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11678:24042":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4869:7822":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:4902:7185":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:6638:8303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"24:3563:4247":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"1:766:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:4120:7174":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:43348:8869":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:2550:7124":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:42474:4724":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:22721:11494":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:1379:9416":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"24:3274:4234":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:22026:11203":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:5069:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:9311:5357":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:6376:5860":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"24:5426:3902":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"1:4174:11280":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:7765:7295":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:42759:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:6971:4065":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:538:7588":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:1914:9449":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:1595:9446":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:47516:9010":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:14152:6428":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:2612:5516":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:0:3734":{"crate_id":17,"path":["object"],"kind":"module"},"11:328:9442":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:2820:7136":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:8343:8594":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6173:9302":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:8624:11309":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6098:23921":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:5295:7986":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:8000:7161":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"24:4718:4288":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"24:5299:3908":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"16:7212:9385":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:7560:35875":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"11:1884:3973":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:7325:10638":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"24:6019:3964":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"1:892:3978":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:14099:6414":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:15586:6783":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"24:5055:2382":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"24:5290:3907":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"17:16656:7072":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"24:5702:2925":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:34781:4295":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"20:738:2542":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"6:5301:7989":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:12399:747":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:8626:9435":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:11272:9118":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"11:785:9446":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11998:24088":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:2325:11182":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:16008:6886":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8874:9619":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:4375:4265":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:46805:8954":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:47444:9004":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12798:24199":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:4947:7858":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:7170:11405":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:10920:11334":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:8271:10634":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:1617:3974":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"24:2276:3970":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"17:14573:6509":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:44259:9482":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:6300:5873":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:1905:11145":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"18:706:9236":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:1580:22988":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:15714:6811":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"20:709:9223":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"16:8320:23944":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:8483:3875":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:10746:11238":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:42152:8845":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:13186:16570":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"24:5602:2542":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"2:40807:9509":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:4932:11294":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:22938:11488":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:5862:5878":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:5471:8071":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:3205:4147":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:7949:7159":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13692:6323":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:46465:8922":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:11065:24014":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:40954:9520":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5241:7958":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12108:9255":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13055:6197":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:10786:5363":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:44677:9578":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:12406:895":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:15351:6672":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:8493:9083":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:10986:9121":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"24:4870:4299":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"20:904:2530":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"2:3247:5128":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6904:9366":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:8619:9618":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:7720:4068":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"24:3478:3225":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"17:14692:6523":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:4731:4133":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:4694:7180":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:8072:11113":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:12392:6220":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:11222:9106":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:46731:8936":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:6680:8321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:15701:6805":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:6159:4074":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:41205:4079":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:40815:9515":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:39892:5483":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"24:4392:4266":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"2:42184:11253":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:23189:34091":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:44245:3515":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:30971:5435":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:3654:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:46241:8897":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:15315:6641":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11016:24013":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"24:3495:4243":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"17:15136:6266":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14886:6571":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:6822:23930":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:6680:23928":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.36/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.86/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.67/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}