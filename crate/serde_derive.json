{"root":"0:0:1664","crate_version":"1.0.157","includes_private":false,"index":{"2:11945:3388":{"id":"2:11945:3388","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4501:3388"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:51034:3389","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84-0:956:1860":{"id":"0:84-0:956:1860","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:956:1860","glob":false}},"2:11852:1913":{"id":"2:11852:1913","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:28966":{"id":"2:11884:28966","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:14072","str::rsplitn":"2:11887:28968"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50830:8151","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:2546":{"id":"2:11861:2546","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:372-0:348:1767":{"id":"0:372-0:348:1767","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:348:1767","glob":false}},"2:11830:310":{"id":"2:11830:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11831:28931","`u8`":"1:11860:1464"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11844:2300":{"id":"2:11844:2300","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50696:8142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:26736":{"id":"2:11869:26736","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11521:14072","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::split_whitespace":"2:11847:32930","str::rsplit":"2:11875:28964"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50726:8068","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:35861":{"id":"5:5287:35861","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1833","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:4443","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1833","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:4443","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5294:35863":{"id":"5:5294:35863","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:28962":{"id":"2:11872:28962","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11345:8070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11828:2737":{"id":"2:11828:2737","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11089:14073"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11887:28968":{"id":"2:11887:28968","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11843:410","str::splitn":"2:11884:28966","self::pattern":"2:11521:14072"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50848:8152","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:14070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:35208":{"id":"2:11915:35208","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:4428":{"id":"2:11941:4428","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5305:2291":{"id":"5:5305:2291","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11941:4428"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:35201":{"id":"2:11899:35201","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11521:14072","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::matches":"2:11896:3079"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50948:8158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:14070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11855:28525":{"id":"2:11855:28525","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11912:35206":{"id":"2:11912:35206","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11834:28928":{"id":"2:11834:28928","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11825:35192":{"id":"2:11825:35192","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11823:35191"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1664":{"id":"0:0:1664","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[110,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.157\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:927:1649","0:928:1658"],"is_stripped":false}},"0:8:1764":{"id":"0:8:1764","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:11919:1895":{"id":"2:11919:1895","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:35214":{"id":"2:11946:35214","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4498:35214"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:51043:8100","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11847:32930":{"id":"2:11847:32930","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11848:32917"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:51000:8161","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11820:797":{"id":"2:11820:797","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11843:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:35212":{"id":"2:11934:35212","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:14070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11831:28931":{"id":"2:11831:28931","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11860:1464"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11841:35195":{"id":"2:11841:35195","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11849:1368","crate::ops::IndexMut":"2:2995:3237","str::slice_unchecked":"2:11840:35194"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11846:8060":{"id":"2:11846:8060","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50712:2750","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:341":{"id":"0:62:341","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1773,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:84-0:956:1860"],"is_stripped":false}},"0:981:1863":{"id":"0:981:1863","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"2:11849:26737":{"id":"2:11849:26737","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50980:8159","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:35205":{"id":"2:11910:35205","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:4429":{"id":"2:11942:4429","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5303:35865":{"id":"5:5303:35865","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:1833","`String`":"5:7158:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1833","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:4443","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11845:2294":{"id":"2:11845:2294","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50702:8143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:4426":{"id":"2:11939:4426","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11850:35196":{"id":"2:11850:35196","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50990:8160","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11840:35194":{"id":"2:11840:35194","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11849:1368","str::slice_mut_unchecked":"2:11841:35195","crate::ops::Index":"2:2991:2250"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:35198":{"id":"2:11881:35198","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11521:14072","str::split":"2:11869:26736","prim@char":"1:11843:410","str::split_terminator":"2:11878:35197"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50794:8149","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:14070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:35207":{"id":"2:11914:35207","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11838:28930":{"id":"2:11838:28930","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:28964":{"id":"2:11875:28964","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11521:14072","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::split":"2:11869:26736"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50744:8071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:14070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11842:28953":{"id":"2:11842:28953","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11843:28954"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:35203":{"id":"2:11905:35203","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11521:14072","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::match_indices":"2:11902:35202"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50894:8155","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:14070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5288:2010":{"id":"5:5288:2010","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:35210":{"id":"2:11928:35210","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:14070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:35199":{"id":"2:11890:35199","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11829:35193":{"id":"2:11829:35193","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:3079":{"id":"2:11896:3079","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11521:14072","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::matches":"2:11896:3079"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50930:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11821:2084":{"id":"2:11821:2084","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:4427":{"id":"2:11940:4427","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5291:35862":{"id":"5:5291:35862","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5306:2290":{"id":"5:5306:2290","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11942:4429"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11819":{"id":"2:11819","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11084:1368","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11820:797","2:11821:2084","2:11822:35190","2:11823:35191","2:11825:35192","2:11828:2737","2:11829:35193","2:11830:310","2:11831:28931","2:11832:1876","2:11834:28928","2:11836:28929","2:11838:28930","2:11840:35194","2:11841:35195","2:11842:28953","2:11843:28954","2:11844:2300","2:11845:2294","2:11846:8060","2:11847:32930","2:11848:32917","2:11849:26737","2:11850:35196","2:11851:32921","2:11852:1913","2:11855:28525","2:11858:28527","2:11861:2546","2:11865:4103","2:11869:26736","2:11872:28962","2:11875:28964","2:11878:35197","2:11881:35198","2:11884:28966","2:11887:28968","2:11890:35199","2:11893:35200","2:11896:3079","2:11899:35201","2:11902:35202","2:11905:35203","2:11908:35204","2:11910:35205","2:11912:35206","2:11914:35207","2:11915:35208","2:11916:35209","2:11919:1895","2:11922:26424","2:11925:28970","2:11928:35210","2:11931:35211","2:11934:35212","2:11937:1856","2:11939:4426","2:11940:4427","2:11941:4428","2:11942:4429","2:11943:35213","2:11945:3388","2:11946:35214"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11943:35213":{"id":"2:11943:35213","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4500:35213"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:51025:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:927:1649":{"id":"0:927:1649","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"0:928:1658":{"id":"0:928:1658","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11865:4103":{"id":"2:11865:4103","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:14070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11823:35191":{"id":"2:11823:35191","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:26424":{"id":"2:11922:26424","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5286":{"id":"5:5286","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5197:1368","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5287:35861","5:5288:2010","5:5291:35862","5:5294:35863","5:5302:35864","5:5303:35865","5:5304:3282","5:5305:2291","5:5306:2290"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:323-0:952:1766":{"id":"0:323-0:952:1766","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:952:1766","glob":false}},"2:11832:1876":{"id":"2:11832:1876","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:35211":{"id":"2:11931:35211","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5302:35864":{"id":"5:5302:35864","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5304:3282":{"id":"5:5304:3282","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:35197":{"id":"2:11878:35197","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11521:14072","str::split":"2:11869:26736","prim@char":"1:11843:410","`DoubleEndedIterator`":"2:7125:120","str::rsplit_terminator":"2:11881:35198"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50776:8148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:35202":{"id":"2:11902:35202","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11521:14072","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::rmatch_indices":"2:11905:35203"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50876:8154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:28970":{"id":"2:11925:28970","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:14070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11848:32917":{"id":"2:11848:32917","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11847:32930"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:51009:8162","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:35209":{"id":"2:11916:35209","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11546:14068","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11858:28527":{"id":"2:11858:28527","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:14072"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:14070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:35204":{"id":"2:11908:35204","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11836:28929":{"id":"2:11836:28929","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11893:35200":{"id":"2:11893:35200","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:14069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:14070","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:32921":{"id":"2:11851:32921","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:51018:8163","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11822:35190":{"id":"2:11822:35190","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:1856":{"id":"2:11937:1856","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11483:126","`FromStr`":"2:11482:3254"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11482:3254","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11482:3254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11843:28954":{"id":"2:11843:28954","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11842:28953"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"24:5304:2232":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"16:2389:5984":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:7259:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7166:20746":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"24:4544:1641":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:47402:8106":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:554:6493":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"24:151:1839":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:2459:14133":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:2686:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:2727:5998":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:11059:14227":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:369:4564":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"6:4544:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:22102:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"12:1534:19812":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:2229:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:3273:1823":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"21:1813:4557":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"24:286:36630":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"24:5051:3185":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"1:9064:7744":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:11748:5452":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"24:1530:2759":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"6:4615:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6654:6118":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"24:1065:1859":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:51253:8175":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:3689:6036":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5508:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:11011:26427":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4778:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1463:8683":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:47343:8099":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:6114:8328":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"24:3818:3459":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"6:541:6487":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:25641:7423":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:22432:7421":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:6503:4538":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:46913:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"12:697:8675":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:1847:4606":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:20418:33882":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:20433:33882":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:11848:1338":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:12609:5673":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"24:1931:3227":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"24:4050:3474":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"24:4347:3495":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"1:6354:8913":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:5741:14474":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:6963:3227":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:8569:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:47503:8720":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:11330:8803":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:39870:1939":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"24:4883:3173":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"24:2967:2478":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"22:931:1786":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"24:866:36783":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"1:9176:4606":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"12:1518:19811":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11863:1463":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:8295:20810":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"24:3985:3469":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"6:532:6481":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:9071:36399":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:7253:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:1547:6538":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:8245:14069":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:5793:7884":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"24:4568:1994":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"1:8741:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"9:649:19676":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:11345:8070":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"12:2184:6349":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:51457:8191":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:51687:8364":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"9:505:8309":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:3191:32733":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:7426:20750":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:21669:8084":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"24:555:5010":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"2:52490:7552":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:1329:3354":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"24:4979:2418":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"17:13082:5807":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:8494:5153":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:644:5050":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"9:709:7528":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"24:5441:3212":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"16:5878:19849":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6186:6007":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:11315:5362":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"12:1852:8039":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"24:3392:244":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:4344:3364":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:2749:5999":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:22234:4200":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:47566:3298":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:6313:31443":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"20:504:4004":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"5:7169:8062":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:6534:7329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:53575:7602":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"24:2831:2103":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"24:2916:3438":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:4419:8846":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:3402:6032":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:7202:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:10321:5227":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"12:1029:8682":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"24:918:2834":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"1:11842:921":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:1257:8585":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"22:679:7833":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"24:3944:3467":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"17:967:20847":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:870:3227":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:48785:1834":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:9475:20861":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:8096:7709":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:3234:8783":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"22:342:3246":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"1:10819:8897":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:21130:8965":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:52631:7558":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8176:8796":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:4689:6054":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4310:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:2142:36227":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:50830:8151":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:11482:3254":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:6351:4806":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:2476:8779":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:5525:7898":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:48794:3228":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:2282:5973":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:52316:7545":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:6241:7960":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:10915:4910":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"12:393:36320":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:50614:14059":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5682:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:8951:36379":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6704:6123":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"22:108:36566":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"18:599:5015":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:6918:3227":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10822:20827":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:47089:32750":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:4159:8840":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"24:4359:3496":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"6:5615:7080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6345:6013":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"9:956:19658":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:9317:20846":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:10708:7881":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11087:5314":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:3970:8816":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:699:7849":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:51304:14082":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11436:5380":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:21808:8089":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"18:727:5072":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12617:5676":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:4560:1990":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:4108:8839":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:57559:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2680:3369":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5520:7034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:4664:8827":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:904:4533":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"22:782:7834":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"16:6463:7976":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:609:36412":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:47442:7503":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"12:810:8673":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:119:14554":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:355:4207":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4364:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"24:5294:2460":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:52561:7555":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:5422:8897":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:47473:32268":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8324:3704":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6330:6080":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:10159:5224":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:5990:4888":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4277:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:679:8669":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"24:5341:1772":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"17:9488:20860":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:6003:8999":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:49251:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"24:2525:3422":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"1:3342:4832":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:51708:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:11974:5504":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:3195:8787":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:4662:8824":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12514:5590":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"24:4376:3497":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:48734:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:6474:2601":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:7592:4192":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4575:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"22:915:1849":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:1919:4438":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:12355:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"5:7180:8587":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13176:5833":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12349:5561":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12211:5544":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:1927:8718":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:10670:7880":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"24:4801:3155":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:48878:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:11547:5421":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"24:4911:3180":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"16:7288:8012":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:3243:3372":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:558:4197":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"12:659:3227":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:5485:8898":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:1531:6530":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:54655:7649":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"21:435:4790":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:920:8673":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4327:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:7672:8201":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"21:2494:3400":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"17:10476:20983":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:11521:14072":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:4408:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4356:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:5815:20736":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"20:45:3117":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:51009:8162":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:4399:3367":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:4345:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:9885:20946":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:47646:3311":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"24:2205:2481":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"6:6519:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:29980:4275":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:6137:7953":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:8753:7732":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"14:40:1786":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6842:8006":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12909:5764":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:54635:7647":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:49091:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:96:24613":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:6277:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:4447:3625":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"6:1649:6611":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"24:3898:3464":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"24:4120:3479":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"17:12797:5739":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:5996:8271":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:11199:5331":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11639:5437":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:2511:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:2723:4078":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:50532:8075":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:50948:8158":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:47729:3317":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:8830:7736":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:21758:32282":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:6298:7962":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:7695:8593":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:10142:8152":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:2810:5029":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"12:861:8680":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:10182:5225":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:2932:2186":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:21787:8086":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"21:1201:193":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"1:6738:8958":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:7081:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"21:1071:1850":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:10434:7875":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:50980:8159":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:2367:5983":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47276:3389":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:7059:3711":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11536:5418":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1511:6522":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12730:5720":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"24:4933:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"1:6917:4902":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:2613:8780":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13091:5810":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:6390:4899":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"20:0:1084":{"crate_id":20,"path":["quote"],"kind":"module"},"17:12781:5736":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8220:8207":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:7252:4532":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:4297:4835":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:10405:8783":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:7942:20754":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"22:859:230":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"6:4683:6920":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"24:5055:2449":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"12:1138:8585":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"22:885:1775":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:7329:6021":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4296:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:48010:3277":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:50930:8157":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:7848:25958":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11684:5443":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11271:5345":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11300:5356":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4427:6824":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:11721:5447":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4234:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:2843:3494":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:9061:5174":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:4297:6042":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:48971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:8917:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:836:4812":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"17:12033:5510":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"7:32:19642":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:1366:3228":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:5319:8892":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"18:766:24626":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:20768:7397":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:2487:5988":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:7309:6020":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:11853:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"24:5314:3199":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"24:2542:3423":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"9:111:8292":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"24:4895:3176":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"1:3864:8808":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:4227:3357":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:2605:5993":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:4079:8836":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:1959:3350":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"24:3835:3460":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"6:1692:6637":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:2763:3257":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:2825:6002":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:29974:4274":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:5811:4888":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"5:6670:4851":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:1597:1823":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:2930:19876":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8912:8325":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10854:20828":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"24:882:36780":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"21:2714:1775":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:11747:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:11307:4917":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:21395:8963":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:20880:7397":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"24:1335:36613":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"1:8047:8751":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:10932:4912":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:736:24625":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:7265:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8898:7739":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:10444:4194":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:1474:2188":{"crate_id":2,"path":["core","mem"],"kind":"module"},"24:3324:3452":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"1:8159:8159":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:10087:14060":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:1771:20862":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4189:6726":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:4721:6055":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:2094:8045":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:587:6511":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:8965:8327":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:51315:8177":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8859:8921":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10949:5279":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:11825:26298":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"24:2797:3432":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"24:5333:3201":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"20:407:3890":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"16:5614:7905":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13039:5795":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:3236:8784":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:47764:3320":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:574:5050":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:7944:8781":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"22:105:7832":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:12137:32849":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:5482:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:1564:3228":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"9:382:8298":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:7847:6221":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:474:1776":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:7939:8329":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"22:0:1639":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"2:12436:4442":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:1524:6528":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:5839:20737":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"7:0:1507":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:641:8667":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:1642:6607":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:6489:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"24:2610:3427":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:12116:14137":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"21:1396:1863":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"17:9458:20873":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:3716:6037":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10221:20978":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:6052:8270":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11576:5426":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11232:8230":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:22201:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"21:2616:3227":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"18:564:5056":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:50553:7533":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"24:1486:1857":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"21:2550:3401":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:4563:14120":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"20:239:4010":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"16:4662:6053":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"13:108:36325":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:3249:20930":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"21:2663:1850":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"6:5544:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:7872:8020":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:9692:8825":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:614:36410":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"23:0:3099":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"17:13459:5927":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8811:7735":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:6805:3276":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:2371:8748":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:4267:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:22399:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:57585:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3568:4806":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12073:5514":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:49371:8320":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"17:11997:5505":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11859:727":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11856:729":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:11861:1461":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"24:1484:3240":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"6:5886:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:5443:3213":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:49757:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:3922:8813":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:7128:8058":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"24:4388:3498":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"12:822:8677":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"9:188:8295":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:10806:8593":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:49796:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:7278:6019":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:5541:7900":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:0:2969":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:7141:8061":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:10298:8896":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:51147:8170":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11247:5343":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:10721:5262":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:9937:8070":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:5882:3326":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:8941:20817":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:47423:14128":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:1422:8673":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:6865:8007":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:1575:4531":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:50776:8148":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:50067:7528":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13148:5826":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:4137:3480":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:12485:5570":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:9897:20947":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4755:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:50670:7535":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:8475:20791":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:956:8679":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13134:5824":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:51737:4441":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4162:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:1556:6544":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"24:3968:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:22069:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"12:98:8030":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4716:6937":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:54754:7656":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7956:6026":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:8225:8842":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4708:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:1824:8701":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:2842:6003":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"24:4516:1842":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:4844:3165":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"17:11054:5308":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:4574:6050":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:4217:6040":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:47001:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9401:5172":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:11226:8229":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:8958:31442":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:51481:7539":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:39874:8093":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:21742:32288":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:21393:8825":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:9539:20858":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:950:8678":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4125:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"24:1904:3226":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"24:3120:3446":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:51132:8164":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:12860:5753":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"22:689:3246":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:52336:7546":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6385:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"12:853:8679":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13158:5829":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"18:80:24612":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:3119:8041":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:50712:2750":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"24:4879:3172":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:5454:3215":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"1:6082:4895":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:54664:7650":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:6941:4817":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12980:5782":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8781:7734":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"21:2719:3247":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"17:8774:5162":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:48566:7507":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:6656:3273":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:11234:8145":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"24:3956:3468":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"24:4207:3485":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"17:10845:5236":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"24:5431:3208":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"1:8432:8882":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:50513:8073":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13557:5952":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:755:7858":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8970:1839":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:2857:5030":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:646:8668":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4608:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:4891:3175":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:11592:14079":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:3125:20914":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"24:823:3336":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"2:2822:5014":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:11310:8156":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:2343:4454":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:20678:8825":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:1612:4806":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:2705:5997":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:6287:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:53835:7606":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"22:773:230":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"24:2899:3437":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:9702:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"24:5111:1984":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"24:4154:3481":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"2:52959:7574":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:3916:8812":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:5669:8911":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:4849:6059":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:4323:3493":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"24:4502:3132":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"12:1003:8681":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11014:5297":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"21:2765:2479":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"16:7825:3130":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:10014:14063":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"24:4907:3179":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"24:841:5018":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"5:3611:3350":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:12103:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"24:4887:3174":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"2:47608:3300":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:48033:3281":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:3501:3232":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5949:7948":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:54716:7654":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:9515:4870":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"18:481:7840":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:878:8037":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4397:8845":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13024:5793":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"9:33:8291":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:6924:8053":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4525:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:3132:36262":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:6563:3307":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:47595:3308":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:7472:3290":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:690:7848":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:11865:775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:2657:5995":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:50744:8071":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"12:387:36323":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5761:20735":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12265:5550":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:3119:31268":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:5549:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"24:4796:3154":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"17:12756:5726":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:5702:8324":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10497:20984":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:6979:8054":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:11214:8371":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:7125:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:51445:8188":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:7575:8825":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:8735:8896":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9831:20944":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:2849:5031":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:22300:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:49784:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"18:0:2979":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:48720:7517":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12874:5754":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:54371:7641":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"24:2933:3439":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"17:9382:5170":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:5851:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:6610:33370":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:5546:4885":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:7464:1863":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:3188:6030":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:10641:8204":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:5235:6064":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:4707:8671":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"24:4190:3484":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"2:48819:3711":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"21:2608:3246":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:46937:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:515:5053":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4241:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11909:5474":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:50894:8155":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"24:4863:3169":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"21:2319:1786":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"24:4986:3184":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"24:5117:3191":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"5:3680:4531":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:12850:5752":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:8139:3322":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:9010:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:8269:7238":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:1592:8041":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12225:5545":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:7148:3294":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:1684:6636":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:6619:6114":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:54183:7639":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:54617:7646":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:12313:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:11541:14070":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"24:4775:3149":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"1:11864:1460":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:52591:7556":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"20:272:1859":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:50605:8076":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:8484:3228":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:4095:8838":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"24:2559:3424":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:50592:14050":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:2359:8742":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:5605:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:0:2977":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:307:1416":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:8146:2750":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:50726:8068":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:9020:3386":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3956:8814":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8767:7733":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:53621:7603":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:50055:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:12008:5507":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:10402:8787":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:47696:3325":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"24:1756:1780":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:3326:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:8966:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:5233:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:47664:8116":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:3806:3458":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"17:9644:20855":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:2631:5994":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:47380:3389":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:20639:8969":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:4327:6043":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:2921:3371":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"12:1872:1823":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"12:1555:19813":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12291:5552":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:2573:8597":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:1074:8682":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13279:5885":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:9930:5188":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:9012:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:11485:5405":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13071:5803":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:10696:7709":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:11294:8153":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:7840:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:47096:3363":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:7810:8205":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:9401:4862":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"24:4537:1803":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"17:13340:5892":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:48629:1850":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:30180:32281":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:7249:20747":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:4818:4832":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:12251:5547":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"24:4831:3162":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"24:5070:2117":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"17:11951:5495":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:10210:31290":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11034:5307":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:6279:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:2301:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:2861:5033":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"20:77:1852":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"17:9722:5184":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:11844:1480":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:48685:8206":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:47282:8096":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:2806:5028":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:1517:6525":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:2458:8825":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:6985:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"24:922:3187":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"1:11857:730":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"21:2603:230":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"22:936:2479":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"2:50289:8140":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:9764:7862":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"21:2564:3400":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"2:3178:14109":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"24:5003:3183":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"24:4108:3478":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:48649:32256":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"24:4875:3171":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"24:2222:7803":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:3989:32920":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:5411:6011":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:7235:4531":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"20:37:2836":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"2:50848:8152":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"22:719:1786":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:4150:3352":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:9864:8128":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"22:693:3397":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"24:1503:3340":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"24:1877:3225":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"1:6519:8918":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:21287:7399":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:11125:5320":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:12816:5740":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:54644:7648":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"24:2695:3428":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"12:834:8678":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:51178:8173":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:10128:8151":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"12:1044:19808":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:48870:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:21681:32267":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:51521:8197":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:51634:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"24:4534:3146":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"2:50030:8133":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8291:7714":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:7289:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:10636:8217":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:52382:7548":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10445:5236":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:7237:6169":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:7576:4209":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"24:251:8577":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"17:10625:5259":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:10831:26301":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"12:353:4798":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4788:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:3902:4806":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"14:0:2975":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"12:1836:3227":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"24:4531:3145":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"22:864:1850":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"2:50579:3298":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:10894:5272":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"22:806:1775":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"17:11217:5339":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:9279:14140":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:53339:7598":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:2498:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:6466:8916":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:49500:3376":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"24:5155:3195":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"5:6276:3227":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:1601:6575":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"12:632:3228":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"24:3852:3461":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"17:11149:5324":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:1568:6553":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:52861:7571":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:7093:6150":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:8935:26049":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"24:3777:3456":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:14:2616":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:9894:8068":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:1636:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"12:669:8674":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12118:5523":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:621:8592":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:5184:19848":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11787:5456":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"24:4405:3499":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"17:8752:2750":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:2794:3258":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:4792:3153":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"1:1586:8040":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4506:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6676:6015":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:49870:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:49733:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:10310:20981":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"24:1731:8608":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"24:4434:2472":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"1:11248:4915":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:7218:7369":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13518:5943":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"24:914:3186":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"5:6645:4844":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:47386:14127":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"21:2022:4559":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"18:652:5050":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:20878:8966":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11070:5312":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"24:5338:3200":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"2:47055:14161":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8342:7723":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:2837:3492":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:50702:8143":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:2916:20911":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:2995:3237":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:58933:7667":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:2784:5025":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10997:1786":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:11617:5430":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10296:20954":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:671:24624":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:4606:6051":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:336:3350":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"16:5122:6062":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:46979:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:1660:6619":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:4353:3365":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:7000:3227":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:914:4531":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:562:1863":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7211:6168":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:3699:4806":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:0:2978":{"crate_id":17,"path":["object"],"kind":"module"},"12:738:8038":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9820:20943":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:8797:8919":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"22:787:36565":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"17:11813:5460":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"12:2190:36318":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:9364:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"24:5113:3190":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"1:2831:4882":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11288:5353":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11515:5414":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"24:3358:3454":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"24:5318:2190":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"16:6109:6075":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"24:2508:3501":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"5:4264:4832":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12103:5519":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:11075:8590":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:7699:1939":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:5433:7889":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11106:5319":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:11199:8227":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:6270:6008":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:2773:5023":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:2866:5034":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"14:31:8579":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"11:36:6354":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"5:6484:4537":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"20:34:8825":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"17:10546:20824":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12164:5530":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"24:5459:3216":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"24:1445:24651":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"17:10121:5222":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:7047:3297":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3369:7711":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"24:4236:3487":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"17:10062:20913":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"22:661:3350":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"6:5759:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:10654:8223":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:49854:14213":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:54739:7655":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:5705:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"24:1086:1859":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:20602:8968":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:7224:7370":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:1708:4531":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:20690:8960":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:13168:5832":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:3093:8040":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:6601:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:7112:32268":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:10688:14057":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4826:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:7864:3350":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:1228:8682":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:3279:8776":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12836:5748":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:10987:7732":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:10655:14056":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"12:320:4796":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4195:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:6217:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:8805:3227":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4631:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:2345:8739":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:6510:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11500:5409":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:7479:3293":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4585:6874":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:10341:4909":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:1055:35186":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:12768:5731":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12964:5778":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:9110:26306":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"20:164:3100":{"crate_id":20,"path":["quote","__private","ext"],"kind":"module"},"2:9230:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:12189:14138":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"24:3375:3455":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:48543:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:2261:19850":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"24:4956:2189":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"6:6332:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:3157:8785":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:20719:8825":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:8923:4193":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:52650:7559":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:13366:5901":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:652:14911":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:5447:20732":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:7823:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:3908:8811":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10973:5293":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:681:7845":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12237:5546":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:5745:4887":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:2790:5035":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:21629:8081":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:7247:7376":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:3451:8771":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7388:20748":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:11546:14068":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:3312:3283":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:21:668":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:7158:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4317:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:5723:7142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"24:1133:7800":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"5:5814:4832":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:506:6461":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:9031:36403":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"20:150:3733":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:4557:7249":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:6284:6025":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:962:8680":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"24:4783:3151":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:29757:8805":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:13413:5913":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:9026:3384":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:20473:33935":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:676:36621":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"6:1894:15888":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4820:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:10193:8895":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:8393:20813":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:3632:6035":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:47489:8113":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"24:2746:3430":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"24:2158:8825":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"6:4736:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:1713:6647":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13231:5848":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:1051:8008":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:2678:107":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"17:11259:5344":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5578:7066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:2065:8043":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:47456:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:1376:3232":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:2874:36243":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:534:7883":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11866:1517":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:8955:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"24:5446:2193":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"1:3426:3382":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"21:2699:1851":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"17:13478:5932":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"12:815:8676":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"9:863:19655":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"12:777:4802":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:6496:20741":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12148:5526":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"24:5266:2137":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"1:10926:4911":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:2501:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:50038:8135":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:30002:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"21:218:8269":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:54433:7642":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11235:5340":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:51290:8176":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"24:5123:3188":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"2:50077:8137":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:10682:5261":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:47363:14126":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:9376:4908":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"24:2763:3431":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"9:827:19747":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"19:0:1011":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"0:0:1664":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"1:11862:1462":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11465:7756":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:3623:8684":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:9328:20845":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:20405:4086":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:13527:5947":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:8014:2556":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"12:60:36319":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11184:7754":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:21704:7408":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:7053:3268":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:57637:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:3263:6031":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"24:94:4158":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"24:2848:3434":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"21:0:1055":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"5:3127:8039":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:51449:8189":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:3872:4533":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4437:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:8165:8801":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:9022:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"24:3794:3457":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"1:5339:8893":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12046:5512":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:1707:6646":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:1130:7798":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"2:21645:7403":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:4062:3475":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"6:4645:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:5354:8894":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"24:906:36784":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"24:93:8825":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"17:8212:20807":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:48802:3232":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:562:6498":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:11075:7744":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:1083:8585":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"15:214:8285":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"22:762:24634":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"17:8881:36397":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"9:920:19657":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12955:5777":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:51473:8195":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6517:7977":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:2884:25268":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:9054:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:5465:3218":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"16:6719:36333":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"24:4930:2250":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:21721:32248":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:4290:6770":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:9873:20945":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:8561:5156":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"24:890:36782":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:12948:5775":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:52406:7549":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:6555:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:2320:5981":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:11855:732":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:500:6458":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:5737:7920":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:2683:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:8265:8870":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:47416:8108":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:49291:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:673:5011":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"2:12164:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:6903:7740":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:219:4446":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:11089:14073":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:8087:7708":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:4976:31461":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:6865:3278":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"24:103:4151":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:1643:4270":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:53181:7581":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4149:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:3665:8802":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:491:7841":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"24:3307:3451":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"17:1903:20892":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:3125:25964":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:10810:6424":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:47799:3322":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"20:10:3116":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"24:3290:3450":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"6:4669:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:2798:5026":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4216:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"22:713:1775":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:2814:3433":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"6:4485:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:47636:3310":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5453:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:51226:8174":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"24:2593:3426":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:8732:33941":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3389:14094":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:3506:4533":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:6321:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"14:221:6303":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:4:995":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:547:6490":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:3978:8818":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:3854:6038":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"24:2729:3429":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"9:622:19675":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:47617:3301":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"12:1845:4531":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:6567:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"22:870:1851":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:47813:3323":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:5494:3302":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:1672:1067":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13382:5905":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:8510:5154":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:5664:7912":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"22:703:1850":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"2:53029:7577":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:4219:3486":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"5:4034:4832":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:6066:4875":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:6875:8602":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:10170:14061":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"24:4096:3477":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"17:1021:20849":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:7783:4716":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:11841:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:47073:7498":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:4828:8868":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:7856:8598":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:11867:1104":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:11497:8232":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:6252:7961":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:54541:7644":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"21:2677:3396":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"16:5558:20734":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:4491:8861":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:2793:6001":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:9483:4865":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:4639:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:12324:4875":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:11151:8901":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13536:5949":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:22168:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"24:4506:3133":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"17:10332:20982":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:1788:8691":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:53385:7599":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:5676:8912":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:1760:4481":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4561:7253":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:51500:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:7357:6170":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"22:824:2479":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"1:8992:26141":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:1538:6533":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:4357:6044":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:47303:32287":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:8789:3228":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:4786:6057":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11800:5458":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"24:498:3238":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"17:12934:5772":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:4635:6052":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4545:6049":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:1243:8681":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11893:5469":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:48810:3227":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:2749:1812":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:10608:5128":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11939:5493":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:5165:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:9501:5168":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6059:36349":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"21:2369:2479":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"17:12972:5780":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:38661:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:9681:5048":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:9155:20821":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:6781:20744":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"24:5008:2192":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"17:11841:5464":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:51461:8192":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:48937:3227":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:12630:5683":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:9947:20948":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:1586:6563":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:929:8675":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10490:5240":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:11854:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:2539:4879":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"18:538:5054":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:47319:7502":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:4728:33839":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:2876:7390":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:4663:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:9845:3228":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:8796:5163":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"21:2293:2164":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"6:4747:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4537:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"21:480:4791":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"21:2694:3397":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"17:8871:20816":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4561:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6017:20738":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:51465:8193":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:52460:7551":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11559:5423":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"24:1488:3339":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:47788:3305":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:1728:6654":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"24:3052:3444":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:2942:3408":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"24:5471:3204":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"2:49331:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"24:2984:3440":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"1:1786:8690":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"24:3069:3445":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"24:1948:3228":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"17:8991:36395":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:52360:7547":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:47291:8097":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"12:1065:36317":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:1606:6577":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"12:2080:8682":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"24:5449:3214":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"18:660:24623":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:46882:8094":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:50522:14054":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:2604:7391":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6528:7978":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6034:1816":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:50046:8136":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:20847:8825":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12060:5513":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:6582:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:4519:6048":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13327:5886":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:4064:4832":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:7135:36341":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10466:7877":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:5792:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:20871:8825":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:3765:8804":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:1614:6582":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5702:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:7266:26944":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:4103:3228":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:113:24614":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:5250:3197":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"1:8231:8834":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:4057:28496":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:53651:7604":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:2950:2154":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"17:11174:5329":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"24:3205:2237":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"24:3864:3462":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"24:4788:3152":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"16:6146:7954":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"9:676:19663":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:10583:20825":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:8737:8318":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"24:5299:2152":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"1:11490:8232":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"12:119:4794":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:9627:20867":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:1212:8008":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:242:36398":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"24:4550:1791":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"2:2778:5024":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5694:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:9371:8734":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:52512:7553":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:153:4792":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:8441:20815":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:51034:3389":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"24:5437:3210":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"17:9303:5168":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11356:5373":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"24:5121:3192":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"1:925:8674":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:20852:8961":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:12087:5517":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12884:5755":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:3488:3228":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"24:4855:3167":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:9016:2243":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"24:2212:8825":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"1:8415:7726":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:4385:6045":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"12:2069:8681":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"10:0:2972":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:2683:5996":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:5007:31461":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:48852:3712":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:2768:5022":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:3457:5079":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:2993:6027":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8392:7528":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"18:521:24627":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:3599:6034":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:3387:8752":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:52983:7575":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5635:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:7008:7367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:47778:3321":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:8564:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"24:4814:3158":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"15:0:2976":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:11814:8670":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:7117:36357":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"24:4021:3472":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"17:487:20804":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"21:140:4582":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"16:2535:5990":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:2375:7388":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7929:20753":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:9362:5174":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:273:4806":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:48921:3228":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:11858:731":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:9223:20833":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:54831:7659":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:47586:3299":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:2908:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"12:646:3232":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:1432:8674":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:8631:5158":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11761:5453":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:5494:20733":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:9500:4866":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:3010:19877":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"24:3881:3463":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"5:36:4444":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:7276:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7343:6022":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:9350:5148":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:2771:6000":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:595:6516":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:9165:36387":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9250:20834":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:7098:8055":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:48600:8798":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"24:4923:1809":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"24:1137:7802":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"1:6350:3279":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:50285:8139":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"13:0:2968":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:7511:6177":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"14:165:19818":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:9160:32931":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"24:4079:3476":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"1:847:3228":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:6971:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:50684:8141":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:8139:3715":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:288:1833":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"12:2198:6352":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:5981:7951":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:2894:19875":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:47103:7499":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9671:20874":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:47023:3262":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:11056:7753":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"24:5324:3202":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"24:4823:3160":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"17:13572:5953":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:638:8665":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:22333:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:4939:4839":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:5743:7148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:1580:6561":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6593:7991":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"24:3915:3465":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"17:11330:5368":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:51469:8194":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"22:756:3251":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"24:5038:1918":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:3977:32911":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11853:5465":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6735:20742":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:47827:3324":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"24:4867:3170":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"16:6690:6016":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"24:258:8578":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"16:3026:5075":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:22135:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"24:2780:1799":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"6:488:6453":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:5780:7923":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:6991:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:484:4877":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:1751:7394":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4569:6866":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:49131:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"24:5462:3217":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"6:5551:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4389:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"24:4779:3150":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"22:496:3246":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"2:2991:2250":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:13404:5911":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"22:725:2479":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"21:2739:2164":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:3166:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:11526:14069":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:2341:5982":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:53005:7576":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:49818:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:784:4809":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:21299:33886":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"24:3018:3442":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"1:3051:8790":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:1506:6520":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:4625:8845":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:57598:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13594:5959":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:47707:3316":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:52937:7573":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:573:6503":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:9446:20851":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:3197:8788":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"12:725:8037":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:13580:5956":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"15:175:19830":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:7603:6185":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:8822:36388":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:11847:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"12:1832:3228":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:4166:3482":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"1:8875:8922":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:9844:20909":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13203:5840":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"24:3171:1801":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"16:6816:8001":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:49766:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"24:2627:1833":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"17:10394:7874":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"24:5263:2443":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"16:7659:20752":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:4106:6665":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:860:3232":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"24:3997:3470":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:51533:14270":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6567:7990":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:12638:5684":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:6829:8003":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:4038:3473":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"1:4622:8871":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:1404:8037":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:2880:3442":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:4081:3374":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:6949:36221":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"24:4919:3182":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"1:4837:8869":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:4087:8837":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1720:6650":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:1701:6643":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:3662:8803":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6362:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:1737:4482":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:47546:8733":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:11038:7745":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:51695:7542":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:3966:8815":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:7230:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:52761:7568":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:5737:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:47739:3318":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"0:927:1651":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"16:5388:6009":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:48708:7516":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:2682:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:11685:4920":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:52530:7554":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"15:193:19831":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:2868:6004":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:7516:33942":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:719:5069":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:48066:3289":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"24:4859:3168":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"24:3035:3443":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:52613:7557":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:21613:7402":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:8418:20814":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11594:5427":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:3377:14090":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:7788:8734":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"14:202:2287":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:4262:6041":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:9631:20856":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:46796:14108":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"21:2744:1849":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"6:6963:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:48017:8123":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:3088:3253":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:3341:3453":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"1:5482:7159":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:10123:8900":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"18:707:7851":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:12307:5554":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:13141:5825":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11161:5327":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"24:4810:3157":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:9284:8067":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:9293:20848":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:624:36413":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:3256:3449":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"22:796:1850":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"24:1956:3230":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"16:7543:6012":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:10676:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:6316:7970":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:9778:7863":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:9601:5182":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"24:4818:3159":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"24:550:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"17:9712:5183":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:48929:3232":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12550:5621":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"14:7:8579":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5709:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:1849:8707":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7557:8015":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"24:5480:2191":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"1:3444:8753":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"21:2760:1786":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"2:5417:3313":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"9:977:6427":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:939:8677":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:2549:4866":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:2672:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:11370:8802":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"24:5115:3189":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"24:4484:3131":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"6:6312:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:51338:8185":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:4806:3156":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:10257:20957":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"24:2712:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"24:5035:2835":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:9024:3383":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"21:183:4172":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:3103:209":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"5:2055:4188":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:21486:8079":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:20727:8964":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10385:7873":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:50624:8077":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:53497:7601":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"21:1028:3397":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"1:7513:4904":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:7006:3227":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:5907:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:2832:5013":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10233:20979":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13031:5794":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"7:79:19649":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:12674:5714":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:54769:7657":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:8247:7713":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:3151:14160":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:51000:8161":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:568:6501":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:8213:8206":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"24:4178:3483":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"5:1973:8684":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:1091:35187":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:590:5057":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:6458:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"24:5029:2454":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"21:2524:4562":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:48583:7509":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"20:235:4008":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"17:13114:5818":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:8056:6227":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:7044:36343":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:8490:7731":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:1931:20857":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:4749:6056":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:4888:6060":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"24:4009:3471":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"1:5539:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"12:1628:4803":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:11019:7539":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:4886:3703":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:39883:4079":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:10849:7734":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7396:20749":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:6425:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2815:3479":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4591:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:2411:5985":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:2684:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"24:874:36781":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:21592:7400":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"12:985:8008":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:961:4806":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6210:7958":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:7475:8603":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:4921:6061":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"24:3239:1772":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:50794:8149":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:8596:5157":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:49051:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:48861:4449":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:4817:6058":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:51110:14077":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6200:7957":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:5391:4537":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:51725:8200":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:11535:7851":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:7267:8009":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"22:14:24763":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"6:4700:984":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:7088:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:54701:7653":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:47626:3309":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:13007:5786":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5751:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"24:5439:3211":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"24:3137:3447":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"24:2075:2416":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"17:11368:5376":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:6463:8599":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:50453:32909":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"9:19:8289":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:11860:1464":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:13436:5926":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:2213:4471":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:7176:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:11849:1368":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:57202:8997":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10108:20910":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:7656:8666":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"12:1120:19810":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13492:5934":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"12:1859:8040":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"24:4848:2118":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"5:6203:4806":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:10399:8785":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:48048:3285":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:12381:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:20450:33939":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:50634:14058":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:6359:7972":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:5670:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:21135:8988":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:12278:5551":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:52668:7560":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"21:2260:1775":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"1:11447:7755":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:4547:8813":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4726:6943":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:9018:3385":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:52813:7570":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12926:5769":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7980:20755":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:7613:4194":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"20:148:3734":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"1:3159:8786":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:9857:20925":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:9691:20881":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4304:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:21539:8080":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10403:5263":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:4447:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:47082:2556":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:864:4814":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:7084:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:8141:3713":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"9:0:2971":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7483:6024":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:5472:6010":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"21:2232:3251":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"17:9118:36396":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:2973:4436":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:3894:8810":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:1962:20879":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"24:5434:3209":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"17:8110:20790":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:12198:5543":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:11128:4913":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:7637:8016":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"24:4335:3494":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:49514:3386":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11774:5455":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:50876:8154":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:3001:3441":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"24:4899:3177":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"16:6472:6103":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:7025:28488":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:7587:4182":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"21:2417:1851":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"6:4471:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:3435:26255":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:4311:3492":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"2:50270:7532":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:11843:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:386:20803":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:47409:8107":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"24:599:3227":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"1:7641:8663":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"12:1866:8041":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"22:685:230":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:548:207":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:482:6450":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:47678:3314":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:8339:20811":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2507:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"12:751:4533":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:21820:8806":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"24:1440:24650":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"1:7793:8204":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:636:5068":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:2939:3407":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:4720:4883":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5782:7158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:30074:32289":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"22:909:2164":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"2:47536:4855":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:8978:7740":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"24:552:7797":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"16:5203:5153":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5564:7056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:53685:7605":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:9700:20880":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:9791:7864":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:10088:5220":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:53080:7578":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"13:220:6348":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"24:609:3228":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:7097:3295":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"12:1840:4533":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"14:187:19825":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4249:6753":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7497:6014":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:5628:7906":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:2465:5987":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4339:6797":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:1065:8681":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:4373:3366":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10612:8872":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"24:5165:3196":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"24:2644:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"12:2053:8008":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"24:5260:187":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:2592:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:53127:7579":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:7679:8696":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:5219:5154":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:5845:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:1571:4533":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"21:2573:7839":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"5:5139:14045":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6123:6005":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:46835:4437":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"24:4903:3178":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:10156:14062":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:881:3228":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:632:8586":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:21696:7407":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:3601:8799":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:11391:8804":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"24:3086:3363":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"6:579:6506":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6070:6072":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10360:7865":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:534:4195":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"12:2205:3268":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:4743:8823":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:505:4188":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:54690:7652":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:4234:4835":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:10631:8215":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:12739:5724":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:4754:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:29940:4273":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:7475:3292":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"24:5150:2154":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"5:6513:4539":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:4289:3362":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"14:160:8579":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"0:928:1659":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"17:9108:20820":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7909:8026":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9183:20822":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:48039:3283":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:54579:7645":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:54675:7651":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:47655:3312":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:47687:3315":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11186:5330":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"24:1402:1855":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:58912:7666":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:2557:5991":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5490:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"20:281:1859":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:51453:8190":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:53415:7600":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:9968:8701":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:526:6478":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:8272:20809":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12695:5719":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:361:4208":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:1443:8675":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:1552:4832":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:5703:7914":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:6157:4533":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:6933:4533":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11828:5463":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:8108:8754":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:10875:5269":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9658:20903":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5163:6063":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:11145:8224":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12896:5758":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10374:7869":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13126:5821":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:49507:3385":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:4371:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:5510:7895":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13100:5811":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4459:6827":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:2306:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6440:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:51477:8196":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13059:5802":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:8911:36380":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4771:6957":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:8843:8920":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"24:5475:3205":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"24:4974:2459":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"17:9283:20850":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:2827:4011":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:6169:4885":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:3245:4531":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:6161:20739":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:9043:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:6564:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6743:20743":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:2509:5989":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"21:2612:3391":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"16:7435:6174":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:6089:4844":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"11:0:2973":{"crate_id":11,"path":["adler"],"kind":"module"},"24:4571:2116":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"21:53:4563":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"18:507:5050":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"24:4460:2109":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"9:586:6356":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:7800:7668":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:2361:8743":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"24:4478:3129":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"1:0:1360":{"crate_id":1,"path":["std"],"kind":"module"},"17:10520:5244":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:57611:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:21794:7420":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"24:1620:2022":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"17:13214:5841":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:5661:34003":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"24:5024:2451":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"6:4807:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"24:5468:3203":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:8666:5159":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:1413:8038":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"21:107:4575":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:9244:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:13047:5796":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:9987:28492":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:9014:3376":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:10283:20955":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"24:126:1775":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:7532:4906":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:9263:20835":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"9:896:19656":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"22:965:3227":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:10350:5232":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4516:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:9751:7861":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:4299:3363":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:1898:8594":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6790:6128":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:5891:4885":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:50542:14053":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"24:2865:3435":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"16:6376:20740":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:20471:33940":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:53158:7580":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11708:5444":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:5305:8891":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:49171:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:10796:5265":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:8162:20806":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:54792:7658":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:6602:31443":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:51652:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:8055:20792":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5592:7067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:48058:3287":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:8137:20805":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:10752:5263":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:2337:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:47333:8098":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:5374:6006":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"12:2178:1775":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:10999:7733":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"21:966:4573":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"1:5053:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:5730:7144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12322:5558":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:51644:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"24:4951:1794":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"17:10075:20912":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:52791:7569":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3858:8809":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:9013:7743":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:1580:8039":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13354:5898":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:54495:7643":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"24:1613:3349":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"12:0:2974":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:11873:5468":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:4222:3356":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:52428:7550":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:7890:8023":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:3153:1823":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:2162:8050":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:20665:8970":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:8981:20818":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:891:8038":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:20721:8962":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:5553:4886":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"24:4871:2044":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"1:3122:25956":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:2578:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:8171:8800":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:9869:3232":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10506:5241":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"12:300:8034":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:10666:7668":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:13221:5843":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"24:3188:3448":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"17:9422:20843":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:6877:20745":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:11868:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"9:592:19674":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:48672:8131":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"24:1032:1786":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"21:246:36516":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"17:13393:5910":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:49751:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:50504:8072":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"24:4511:1800":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:57572:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2679:3405":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:4767:3147":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"6:4377:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:1071:36242":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:3566:6033":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:10270:20956":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:8140:3714":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:7299:7386":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:2343:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"24:88:1839":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"16:2579:5992":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"24:4564:1992":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"1:11809:8331":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:4024:4435":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:47748:3319":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:51325:8181":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:38678:4086":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:7065:3269":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"24:2882:3436":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"17:9526:20859":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:2252:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:13506:5941":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"22:815:1786":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"16:5460:7893":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:8241:20808":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:8501:8211":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:8701:5160":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:52715:7561":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:7372:36334":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"24:898:36785":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:11271:8150":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:47355:8100":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:48946:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:2210:8735":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:8368:20812":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:6419:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:1568:3227":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:588:2256":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:2504:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6171:6077":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:6339:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"21:997:230":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:12022:5509":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:2232:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12748:5725":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:123:14555":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4136:6683":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"24:4282:3490":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:53261:7582":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:3086:3228":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:39834:6351":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:8956:3382":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:4441:6047":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:22366:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:12337:5236":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"24:344:36786":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"14:215:8028":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:49493:2243":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:62:14500":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:7934:31456":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:52907:7572":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:10420:5235":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:50085:8138":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:4108:3375":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:49011:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:10037:2145":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:30016:32284":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:20452:33937":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"24:2661:2231":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:10049:8071":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:2495:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:3172:14110":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"24:839:8825":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"17:10528:20823":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:2936:2103":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:5596:6066":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4284:6768":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:51018:8163":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:8526:5155":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:5143:14046":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"24:4248:3488":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"24:4827:3161":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"17:9433:20842":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:4666:8828":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:9102:8214":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8129:3308":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:11137:5323":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:22267:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:8474:8208":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:2433:5986":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4621:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9577:5180":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:9083:7745":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13184:5835":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:3098:36258":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:10139:5174":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"24:4915:3181":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:9007:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:8152:8068":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:47716:3303":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"24:2024:3234":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"17:13374:5904":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:5597:7068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:1744:6659":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:531:7842":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:2691:2405":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:2802:5027":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:582:4086":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11343:5372":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:4311:8835":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:5533:7035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4675:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:6818:4915":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"6:4222:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:48024:3279":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"24:4265:3489":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:51358:8186":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:5514:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7319:8014":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4693:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:2217:8736":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:9339:20844":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4210:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:1674:6630":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:9021:20819":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"22:889:3247":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"17:13192:5836":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:6434:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:10706:26425":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:6533:4900":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"24:1845:3224":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"17:9193:36400":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:3206:3370":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:54041:7638":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:7236:7372":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:4835:3163":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:50696:8142":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12361:5568":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:22831:7422":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"24:2017:3232":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"1:4239:8841":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:3640:3227":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:1825:3373":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:9553:5174":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:10686:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"12:762:4531":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"24:3932:3466":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"1:8239:8801":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:11850:1446":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:7469:6023":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:46957:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11528:5416":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:4630:657":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:5095:4806":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"24:4840:3164":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"5:1387:3227":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:47461:8112":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:7051:3296":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:10642:20826":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7567:20751":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10207:20969":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:51161:8172":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2853:5032":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:4201:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:4550:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:4413:6046":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4602:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:4144:6039":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:3943:3232":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:4218:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:9976:14055":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11846:1029":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:6303:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10921:5273":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:51043:8100":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:6668:6120":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:9371:20820":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11606:5429":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:2873:2021":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"21:406:36469":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"6:6548:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"24:5275:2140":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"24:1598:3337":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"24:3222:231":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"8:0:2970":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:2300:5975":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"24:4473:3130":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"17:247:36381":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:49211:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:3161:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:4814:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:7298:8013":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:54293:7640":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"24:4294:3491":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"24:3154:2526":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"6:4654:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9738:7859":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:9909:5186":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:9805:5247":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"24:5422:3207":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"5:6909:4443":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:10455:5239":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"12:1085:19809":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:8080:3276":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:11734:5193":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10774:5232":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:9274:20836":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:2736:3406":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:7662:7762":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"9:800:6408":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:5615:4533":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:57624:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10245:20980":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5871:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:5368:8895":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"24:5119:3193":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:2154:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"24:5309:2233":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"24:2576:3425":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"12:274:8031":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:50990:8160":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:933:8676":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11661:5438":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"24:5417:3206":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"6:4112:6666":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:494:6456":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:46897:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:51025:8106":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:4559:7251":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:3932:4832":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"24:0:1638":{"crate_id":24,"path":["syn"],"kind":"module"},"17:12134:5524":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:6402:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"20:322:2481":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"24:4417:3500":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"24:4771:3148":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"6:4499:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12176:5532":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:4257:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"24:4851:3166":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"21:650:3402":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"11:44:6355":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"24:53:1858":{"crate_id":24,"path":["syn","token"],"kind":"module"},"16:7970:8027":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:5725:4839":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:420:5114":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.8/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.26/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.52/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.2/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}