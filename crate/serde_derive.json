{"root":"0:0:2447","crate_version":"1.0.204","includes_private":false,"index":{"2:13792:34396":{"id":"2:13792:34396","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13793:34397"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45007:9713","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:36521":{"id":"2:13771:36521","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13815:29143":{"id":"2:13815:29143","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13452:4442","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::split":"2:13811:29139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44751:9626","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:16805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:4125":{"id":"5:5727:4125","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13794:33364":{"id":"2:13794:33364","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44987:9711","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13795:36524":{"id":"2:13795:36524","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44997:9712","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13833:2791":{"id":"2:13833:2791","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13452:4442","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::rmatches":"2:13835:36527"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44937:9709","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:36520":{"id":"2:13767:36520","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13765:36519"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13864:36537":{"id":"2:13864:36537","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:29056":{"id":"2:13876:29056","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:41320"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:37252":{"id":"5:5725:37252","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13828:29149":{"id":"2:13828:29149","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:29152":{"id":"2:13801:29152","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:16805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13866:36538":{"id":"2:13866:36538","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:16805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2671":{"id":"0:86-0:994:2671","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2671","glob":false}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:37249","5:5713:2825","5:5715:37250","5:5717:37251","5:5725:37252","5:5726:37253","5:5727:4125","5:5728:3029","5:5729:3028"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:8:2570":{"id":"0:8:2570","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:13763:2795":{"id":"2:13763:2795","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13785:29134":{"id":"2:13785:29134","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13784:3444","str::split_at_mut_checked":"2:13787:29138"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13811:29139":{"id":"2:13811:29139","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13452:4442","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::split_whitespace":"2:13792:34396","str::rsplit":"2:13815:29143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44733:9623","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:28877":{"id":"2:13875:28877","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13835:36527":{"id":"2:13835:36527","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13452:4442","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::matches":"2:13833:2791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44955:9710","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:16805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:29138":{"id":"2:13787:29138","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13786:29137"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13796:34398":{"id":"2:13796:34398","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45025:9715","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13879:36539":{"id":"2:13879:36539","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5068:36539"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45032:9656","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761":{"id":"2:13761","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13762:1027","2:13763:2795","2:13764:36518","2:13765:36519","2:13767:36520","2:13770:3556","2:13771:36521","2:13772:352","2:13773:29111","2:13774:2686","2:13776:29108","2:13778:29109","2:13780:29110","2:13782:36522","2:13783:36523","2:13784:3444","2:13785:29134","2:13786:29137","2:13787:29138","2:13789:3038","2:13790:3032","2:13791:9612","2:13792:34396","2:13793:34397","2:13794:33364","2:13795:36524","2:13796:34398","2:13797:2897","2:13799:29151","2:13801:29152","2:13804:3346","2:13807:5206","2:13811:29139","2:13813:29141","2:13815:29143","2:13818:36525","2:13820:36526","2:13823:29145","2:13825:29147","2:13828:29149","2:13830:29150","2:13833:2791","2:13835:36527","2:13838:36528","2:13840:36529","2:13843:36530","2:13845:36531","2:13847:36532","2:13849:36533","2:13850:36534","2:13851:36535","2:13854:2704","2:13856:28642","2:13858:29153","2:13861:36536","2:13864:36537","2:13866:36538","2:13869:2666","2:13871:28879","2:13872:29053","2:13873:28880","2:13874:28878","2:13875:28877","2:13876:29056","2:13877:29057","2:13878:29058","2:13879:36539","2:13881:11260","2:13882:36540","2:13883:30326"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13778:29109":{"id":"2:13778:29109","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:37249":{"id":"5:5712:37249","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:2641","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:299:2641","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:2825":{"id":"5:5713:2825","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13847:36532":{"id":"2:13847:36532","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:3028":{"id":"5:5729:3028","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13875:28877"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13845:36531":{"id":"2:13845:36531","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13872:29053":{"id":"2:13872:29053","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40629:5197","Self::is_ascii":"2:13871:28879"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40629:5197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2674":{"id":"0:1023:2674","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:13882:36540":{"id":"2:13882:36540","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5066:36540"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45050:9655","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13804:3346":{"id":"2:13804:3346","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42735:203","prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:2436":{"id":"0:964:2436","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13783:36523":{"id":"2:13783:36523","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12648:1771","crate::ops::IndexMut":"2:3628:4038","str::slice_unchecked":"2:13782:36522"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13807:5206":{"id":"2:13807:5206","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42735:203","prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:16805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13818:36525":{"id":"2:13818:36525","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13452:4442","str::split":"2:13811:29139","prim@char":"1:12642:492","`DoubleEndedIterator`":"2:8393:134","str::rsplit_terminator":"2:13820:36526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44783:9700","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:2704":{"id":"2:13854:2704","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13878:29058":{"id":"2:13878:29058","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:41320"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:37250":{"id":"5:5715:37250","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:28880":{"id":"2:13873:28880","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:3029":{"id":"5:5728:3029","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13874:28878"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13856:28642":{"id":"2:13856:28642","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2447":{"id":"0:0:2447","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.204\")]","#![allow(unexpected_cfgs)]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:2436","0:965:2444"],"is_stripped":false}}},"2:13776:29108":{"id":"2:13776:29108","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13820:36526":{"id":"2:13820:36526","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13452:4442","str::split":"2:13811:29139","prim@char":"1:12642:492","str::split_terminator":"2:13818:36525"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44801:9701","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:16805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13843:36530":{"id":"2:13843:36530","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:37253":{"id":"5:5726:37253","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:299:2641","`String`":"5:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:2641","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:410":{"id":"0:63:410","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2671"],"is_stripped":false}}},"2:13858:29153":{"id":"2:13858:29153","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:16805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13793:34397":{"id":"2:13793:34397","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13792:34396"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45016:9714","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13877:29057":{"id":"2:13877:29057","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:41320"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:2577":{"id":"0:492-0:1019:2577","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:2577","glob":false}}},"2:13770:3556":{"id":"2:13770:3556","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12975:16806"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13869:2666":{"id":"2:13869:2666","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13411:149","`FromStr`":"2:13410:4050"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13410:4050","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13410:4050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13780:29110":{"id":"2:13780:29110","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:3444":{"id":"2:13784:3444","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13786:29137","str::split_at_mut":"2:13785:29134"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13823:29145":{"id":"2:13823:29145","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:4442","str::rsplitn":"2:13825:29147"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44837:9703","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13850:36534":{"id":"2:13850:36534","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13840:36529":{"id":"2:13840:36529","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13452:4442","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::match_indices":"2:13838:36528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44901:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:16805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13789:3038":{"id":"2:13789:3038","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44703:9694","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13799:29151":{"id":"2:13799:29151","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:2578":{"id":"0:493-0:404:2578","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:2578","glob":false}}},"2:13797:2897":{"id":"2:13797:2897","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13813:29141":{"id":"2:13813:29141","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13239:9625","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13851:36535":{"id":"2:13851:36535","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13481:16803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13871:28879":{"id":"2:13871:28879","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13830:29150":{"id":"2:13830:29150","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:16805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13861:36536":{"id":"2:13861:36536","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:4442"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:16805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13881:11260":{"id":"2:13881:11260","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5069:11260"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45041:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13849:36533":{"id":"2:13849:36533","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13883:30326":{"id":"2:13883:30326","crate_id":2,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"2:13811:29139","`str::find`":"2:13804:3346"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:40308:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13786:29137":{"id":"2:13786:29137","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13787:29138"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13762:1027":{"id":"2:13762:1027","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12642:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13782:36522":{"id":"2:13782:36522","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12648:1771","str::slice_mut_unchecked":"2:13783:36523","crate::ops::Index":"2:40276:3201"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2444":{"id":"0:965:2444","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13765:36519":{"id":"2:13765:36519","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13874:28878":{"id":"2:13874:28878","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13772:352":{"id":"2:13772:352","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13773:29111","`u8`":"1:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13790:3032":{"id":"2:13790:3032","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44709:9695","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13825:29147":{"id":"2:13825:29147","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12642:492","str::splitn":"2:13823:29145","self::pattern":"2:13452:4442"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44855:9704","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:16805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:37251":{"id":"5:5717:37251","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:36518":{"id":"2:13764:36518","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:9612":{"id":"2:13791:9612","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44719:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:2686":{"id":"2:13774:2686","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:29111":{"id":"2:13773:29111","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13838:36528":{"id":"2:13838:36528","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13452:4442","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::rmatch_indices":"2:13840:36529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44883:9706","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:16804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:8326:8733":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:23141:11643":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:48107:9150":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:909:4030":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:7515:8665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12686:6393":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"21:1995:5727":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"16:3693:7309":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:41041:9650":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:1643:7853":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:16269:7109":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:9675:5772":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:3965:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"24:5268:3961":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"24:5633:3991":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:14388:5995":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:5697:11507":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"24:5868:2974":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"17:16755:7232":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:12990:9423":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:48171:9160":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"24:5303:3966":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"1:8617:4111":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:3874:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6452:8351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:12201:9400":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:5450:8193":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"20:878:266":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:47056:9062":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:4513:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"24:4374:4315":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:10883:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:6438:24170":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:5058:7326":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:7635:3404":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:670:28528":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2898:7277":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:564:7738":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:9570:9258":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"20:116:37955":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"17:14521:6634":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:16191:7081":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:46832:9037":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:11089:9183":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:9552:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"11:2414:5706":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:11576:252":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:41156:9656":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:45041:9650":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"24:1805:4037":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"2:23065:5642":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"16:2658:7266":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:44611:4087":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13892:6501":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:8393:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10283:24247":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:1042:23230":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"24:3086:4278":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"24:3103:2641":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:44096:9688":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"18:651:6180":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"24:1948:2427":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"1:12661:1902":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:47109:9065":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8331:5784":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:43467:10836":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"21:2565:130":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"2:42473:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:6656:10791":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"14:201:3025":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"24:1106:3650":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"24:4444:147":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:3596:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:43586:4182":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:8525:9569":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"24:3358:4287":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:4071:5706":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7041:7290":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:706:9377":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:1639:5706":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:41746:4113":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:8543:9572":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"24:1950:2668":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"16:7518:9555":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11256:6031":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:2493:5631":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"21:2611:266":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"5:1601:10831":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:43899:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:2226:5657":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"24:4311:4311":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"16:6082:9434":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:14307:6594":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:12035:24334":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:11502:9385":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"5:4473:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"24:2467:4032":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"16:6203:24168":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:4185:11429":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"24:3307:153":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"2:45117:16818":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7398:37887":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:42511:8986":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"11:2297:11279":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:33493:6148":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:11127:28726":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:12924:9419":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"24:5399:3979":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"17:13243:24265":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:2877:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:8125:5491":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:16658:7205":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:12076:16798":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13996:6518":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:963:5704":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:45781:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:6954:10841":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:1781:5922":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:33032:2619":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:34189:4071":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:4850:8596":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:6054:11523":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:2548:7261":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:14910:6705":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:4703:11461":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"11:1892:9590":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:23276:9634":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6687:8470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:45681:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:8249:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:11370:9246":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:1866:5706":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:23012:36068":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"10:36:7601":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:6503:10840":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:5265:8107":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:9437:2587":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:23108:11644":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:6737:8487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:11394:28729":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:9373:9253":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:41504:4114":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:41486:4103":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12864:9409":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"11:1001:11279":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:40308:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:1551:4025":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:12618:5654":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:1632:4026":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"24:3375:4288":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"23:78:2662":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"1:919:4025":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:9588:9769":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:3587:3141":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:47739:9136":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:12428:6041":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:4927:7323":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:6296:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:16329:7124":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:41587:4110":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:6669:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:46952:9048":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11757:9388":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:906:37886":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"24:5481:3257":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"21:2355:3277":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"6:5107:8057":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:3139:6208":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:4840:4192":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:3124:23308":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12254:9404":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:31331:5565":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:8706:11451":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6744:8488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"11:2340:23236":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:2228:5658":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:44837:9703":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:10672:4179":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:23094:11354":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:3792:5922":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:4127:5706":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12588:6389":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:4957:7998":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"20:953:3277":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"24:5363:3973":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"16:8708:7508":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:41047:9651":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:16791:7238":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:11939:6347":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:22177:35844":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:47479:9097":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10553:24256":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7505:9552":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:1684:7877":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:12666:996":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6792:9500":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:10571:6313":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:15746:6948":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:1582:9587":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:344:37844":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:8743:8583":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:45698:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10830:6204":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:45747:9026":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:12654:782":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6543:8404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:41088:34318":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:4764:7318":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:5328:24461":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:12344:9406":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"17:12878:9413":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"24:3596:4297":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:39617:6159":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:16417:7142":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:3043:16723":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:6850:9504":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:321:9583":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:10670:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:44080:9685":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:9544:6022":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"24:3018:4274":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"17:10132:24242":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:43579:4181":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:3443:3276":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"17:14021:6520":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:14093:6534":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:5136:16712":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12409:6355":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8434:10845":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"21:2705:2581":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"6:5575:8250":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:2787:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:44541:9627":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6300:9457":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:6610:8439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13328:6272":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12430:6357":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:23628:8769":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"22:0:3909":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:44955:9710":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:3797:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8578:9224":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:45138:9716":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:2507:2581":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8360:4162":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"11:1063:37854":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:1898:2630":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"24:1062:38164":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"6:5462:8202":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:22962:11650":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:4929:7987":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5529:8229":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:8560:4119":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:5558:3983":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"17:15659:6924":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"24:5346:3951":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"16:5142:7329":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:8276:4141":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"20:732:2581":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:5545:2727":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:48014:9143":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"24:3392:4289":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"17:13436:6434":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:79:2587":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"17:13928:6508":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"24:640:150":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"5:7549:5933":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:5623:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"24:3239:4282":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"6:1514:7764":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:4881:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:47367:9093":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6852:8517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:12140:11408":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12229:9402":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:7279:9540":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:4233:11432":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:4890:7967":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:2784:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:47077:9063":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"24:3834:4305":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"20:904:2581":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"17:16613:6486":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:41274:9660":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:42960:226":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"17:12022:24362":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"13:0:3775":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:2663:11387":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"24:3273:4283":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"24:2658:3280":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"2:12546:16790":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:7492:9550":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:44719:3566":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"20:0:2424":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"24:5995:4006":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"20:815:2660":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"7:31:23139":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"24:5277:3946":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"1:11151:10713":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:16288:7110":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8028:6026":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:15771:6956":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"24:3715:2576":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:11563:11354":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8798:4782":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"24:3562:4193":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"17:12761:24420":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"24:5824:215":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"18:589:6187":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:613:37944":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:5271:8110":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13819:2593":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:4654:4334":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"2:41538:4106":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:16013:7016":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:43206:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:5154:11482":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:12959:10710":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:8153:11266":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:5130:11480":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:48186:9161":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11901:24319":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"11:808:11273":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"24:5286:3963":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"24:5036:2808":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"20:738:2593":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"5:1211:37697":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"11:1118:23232":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:10311:24248":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:41472:9665":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"20:744:3277":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"16:155:5911":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"24:4799:4344":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"1:4134:11427":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:47094:9064":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"21:2671:2660":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"24:4538:4326":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"21:595:4212":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"17:16512:6469":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"24:5414:3201":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:41516:4105":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5334:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"24:4864:4349":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"24:4420:4318":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"5:2167:11283":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:8325:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"24:4270:4308":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"2:47861:9138":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:485:7691":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:7990:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:11690:6338":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:8595:24191":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"21:924:266":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"2:31704:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:45530:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:10875:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:12945:16870":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:680:2674":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:11575:9269":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"1:10925:5491":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"5:7098:5711":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:7527:9604":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:1094:38168":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:23639:8770":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"5:7619:4025":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:8688:9761":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:4413:5946":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:34602:6139":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"24:3664:4299":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"24:4724:4339":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"17:16573:7190":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:16177:7075":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:15801:6961":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:12048:9704":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:14094:4103":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"14:31:10699":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7209:9526":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"11:2519:7596":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10880:6323":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:8624:3566":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:10879:11395":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:47290:9074":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"24:5294:3947":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"17:10634:6316":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12787:24418":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:9835:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:13231:24454":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:3334:33129":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:22372:11354":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:14558:6638":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:32914:3355":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:4555:16703":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:3843:4162":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:22787:11354":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"24:5316:3968":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"6:5319:8134":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:2348:11334":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:8977:9766":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12357:24388":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4921:7985":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:9352:11534":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:3322:261":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"24:1807:2667":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"11:983:9557":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:423:37847":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:8102:5492":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:3331:33128":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:12669:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:619:5488":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10733:6319":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:5020:2428":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"16:6806:7282":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:707:11264":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:4901:830":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:11358:5992":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:12103:6351":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:15876:6978":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:14071:16727":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"24:3052:4276":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"1:9445:9254":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:0:3784":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:42851:5629":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:3426:2976":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"24:5044:2852":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"1:6968:6019":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:7946:7296":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:5740:6314":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:1727:7893":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:7872:5705":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:11143:11484":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"6:7562:8685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"11:851:11277":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"9:435:23152":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:41352:11318":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:15971:7007":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:8280:4140":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:11770:24311":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:3069:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"24:1078:38166":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:16315:7117":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:8562:9575":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:4565:5948":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:7559:9605":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:11983:9273":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6419:9429":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11112:37918":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"24:5625:2799":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"24:5403:3980":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"1:5749:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:41946:4122":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:13481:16803":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:10505:28677":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:6121:5946":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:7156:9525":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:6280:6011":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:1996:10714":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:5022:6003":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:2671:697":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:40456:8851":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:7108:5712":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:7857:4116":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:6441:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:23584:8765":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"9:470:23151":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"20:825:2581":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:3517:11382":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:7904:7450":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:3411:6160":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:5803:11510":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"3:1785:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:1535:4030":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:12668:1460":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:940:9587":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:3934:11409":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:13459:16804":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"24:3732:4300":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"17:12575:24375":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11438:6330":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6157:9440":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:4947:7995":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:1919:5460":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:13052:24460":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:15048:6735":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:726:6202":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12958:9421":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:41939:4120":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:6360:8298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"24:3766:4301":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:45272:9727":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"24:4811:4345":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"6:523:7716":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:16538:7160":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:5725:6313":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:3511:4294":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"17:15985:7009":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"21:2507:5728":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:41163:16718":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"24:1054:38163":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:4489:34428":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13630:6446":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:23409:8751":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"24:5010:3942":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"21:2729:2985":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"24:5812:3996":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"2:10664:3194":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:9226:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:45688:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:3063:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"24:4881:4350":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"17:16211:7087":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"18:598:6140":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:2770:7271":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:7668:4076":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:22141:35836":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"24:5282:3962":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"24:6026:4015":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"17:12120:9393":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:15144:6745":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:988:11275":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:5295:8123":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:14054:34451":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"16:2794:7272":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"11:102:9579":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14845:6698":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:41573:4109":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:5349:8140":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"24:3460:4291":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:4928:4196":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:3887:6213":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:15088:6738":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:3697:11352":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:42555:2660":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4970:8003":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:16848:6518":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:6810:4115":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:532:7722":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:47138:9066":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:2422:24318":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5255:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:7251:11560":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:47013:9052":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10756:11512":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"11:2540:4076":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:10150:24243":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:7445:8614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"24:2460:4030":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"5:1122:5922":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6901:9507":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4990:8014":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13983:6516":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:2521:11346":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:9322:11533":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6335:9459":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:901:37885":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:16341:7126":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:15513:6902":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:1100:9557":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:2099:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"24:4408:4317":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"6:7292:8555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:14482:5616":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"24:5395:3978":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:2229:5631":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"17:16241:7094":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15013:6723":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:47567:9101":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:5117:8058":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:2722:7269":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"24:3698:268":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"2:45476:9741":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:15844:6969":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5127:8059":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:5344:28640":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12854:6400":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"11:718:10832":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11814:9391":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:11241:6030":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:14057:6529":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:7308:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:16116:7068":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:2025:11314":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:42829:4166":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"24:5247:3957":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"24:3205:4280":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"16:7551:24182":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:5253:7333":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:8311:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:23331:8746":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:44692:9693":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:299:2641":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:7569:36190":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:44559:16793":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:42830:4165":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:9263:9248":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"24:1005:6132":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"16:5415:7338":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:7302:7397":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12562:24376":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"24:4497:4323":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"6:1589:7811":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:12229:28696":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:42820:4774":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"20:687:4048":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"6:5019:8030":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:0:3776":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"15:0:3783":{"crate_id":15,"path":["addr2line"],"kind":"module"},"24:1086:38167":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:45684:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:32921:34425":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:39038:6158":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:6566:11654":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:3686:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12814:24444":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:6571:9495":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"11:2323:11280":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"24:5531:3249":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"17:14637:6649":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:45348:9729":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3373:11394":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:1558:23234":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:8336:9760":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:45371:9737":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:4701:4164":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11540:6333":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"6:5652:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:7390:8602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:4363:11455":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:5170:7330":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13030:6407":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"21:2734:2659":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"24:5440:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"17:10176:24244":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:41495:4104":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11552:24302":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:15624:6920":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:44751:9626":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:33917:6150":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:4922:11483":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:1643:5704":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:4965:11444":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"24:5387:3977":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"6:6617:8440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5301:8126":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:545:7728":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:7539:8673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:2344:36193":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:6486:8374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"24:1369:9328":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:3199:11317":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"5:4202:4030":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:11920:16800":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12173:9398":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6422:8341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2687:5643":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:538:7725":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:8806:4135":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:7806:35213":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:16395:7136":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11106:9261":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"24:5858:3258":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"1:8720:9228":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"0:964:2438":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"16:7220:9527":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:7468:7410":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12072:9591":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"24:5986:4005":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"1:2772:10718":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"24:4954:3926":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"5:7797:10707":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:2914:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:5083:7327":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11210:37920":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:1521:7767":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:10658:123":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:3080:36311":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:10882:11391":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:702:11263":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"24:2170:11137":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"5:2291:9595":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12385:24410":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:1696:7881":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:6471:6010":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:9864:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:5381:8152":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"24:5371:3953":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"16:3985:6221":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:22674:8745":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4964:8001":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"24:4695:4337":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:10604:4178":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:16005:7015":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5664:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:4322:5946":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:2918:7278":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:8173:11304":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:4893:4351":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"17:11743:24310":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"24:5299:3965":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"6:1563:7795":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11888:24320":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:3481:4330":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:45808:5615":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:6513:8381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:3858:11282":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"15:394:23270":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:47307:9075":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:4954:7324":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:3426:11396":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:46902:9045":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11458:24279":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:6455:5993":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:10840:3566":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:10766:6320":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:16814:7243":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:5707:24165":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:3328:32981":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"24:4787:4343":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"21:2690:2661":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"1:8289:9183":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:23417:8752":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12774:24419":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"24:347:38162":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"24:3545:4296":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"6:1507:7762":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:9250:9247":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:22:845":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:7694:5952":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"24:4526:4325":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:8030:4119":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:322:1823":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:22258:11562":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:14190:6565":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:41243:9659":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:13360:24268":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:40445:8850":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:1539:7778":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"11:820:11275":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:23606:8767":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:8087:11354":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:4992:2652":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"6:5471:8208":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:5375:8151":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:909:11412":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:2129:5562":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:4906:4195":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:43354:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11455:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"24:6032:68":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"6:5249:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:5289:5955":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:1703:7884":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:43844:7480":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:11616:24289":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:6747:7353":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:45323:9728":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:3097:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:44320:9015":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:12608:24373":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:10622:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"0:965:2445":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"17:14598:6644":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:38928:6157":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:9310:9250":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:14365:6607":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"11:859:11278":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"11:663:4030":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:12217:9274":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:41312:3566":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"5:7510:5617":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:11643:6342":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:7424:8608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:8007:8708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:12667:1966":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:13410:4050":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6659:8458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:15159:6749":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:13260:24266":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:42981:224":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"2:33002:4217":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:724:10706":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"24:699:4026":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"24:4630:4332":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:13021:24447":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:7539:9556":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:1520:4026":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:12649:1861":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:8237:8712":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:15963:7004":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:787:5704":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:11483:9265":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:14611:6646":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:11099:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"11:686:10831":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"21:425:5910":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"17:13387:9425":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:2043:5946":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"5:3291:4026":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:3086:4293":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:43430:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:43243:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:5428:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:7835:24183":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:22187:35845":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"21:907:5742":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"6:5512:8223":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"21:218:10786":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"1:10647:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"24:4340:4313":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"1:6775:4122":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:41403:4098":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:8344:28619":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:32868:7598":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13947:6509":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:44855:9704":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:10655:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:14476:6628":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:15928:6993":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:45512:9022":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:14985:6717":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:47546:9100":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:8429:28621":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"24:5407:2616":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:16250:7096":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:34323:6152":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:7580:8688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:15001:6721":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"24:987:4149":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"5:7273:5977":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:7973:2674":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5503:8222":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:4805:7908":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:2142:4162":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:8102:7455":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:9425:28667":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"24:5311:3948":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"1:12652:763":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"17:14730:6660":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:3837:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"23:407:4997":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"17:14585:6643":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:3298:9589":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12318:24408":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:3358:2630":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"24:4982:3929":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"24:5417:3955":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"24:4949:3927":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:41077:9652":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:6878:8532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:7916:10727":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:42639:34323":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"11:1862:4025":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:10666:4181":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:47508:9098":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:11977:11514":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13195:24450":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:31346:4170":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"24:645:6131":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"17:13876:6497":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:45797:9753":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:3719:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"23:239:5112":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"18:538:6184":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"24:4357:4314":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"18:765:28526":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:214:5613":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"18:689:9374":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:888:5925":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:42908:9683":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"17:15884:6979":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:40232:5611":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"24:3681:267":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"23:38:3655":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"24:4978:3928":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"24:5013:2610":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"1:9386:10837":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:11993:16797":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:44569:9629":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:44579:16792":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:9534:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:23014:5642":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"16:2413:23279":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:4776:4185":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"24:5327:3970":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"1:12653:766":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:46800:9033":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12242:9403":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:7983:10728":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:44333:9691":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:4265:7315":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:6756:8490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:44127:9689":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5568:8248":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5357:8141":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"10:0:3779":{"crate_id":10,"path":["adler"],"kind":"module"},"24:6003:4009":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"21:2574:9362":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:13470:9377":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:45706:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:7539:5706":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:23705:8776":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:44622:16786":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:6558:6011":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:4692:7317":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:1885:9589":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"21:0:1384":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:46931:9047":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:6700:5706":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:44783:9700":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13207:24484":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:41434:4099":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:41732:4112":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:5821:5710":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"24:5379:3975":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"24:5422:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"16:2682:7267":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:4247:11434":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4914:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:2984:4352":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"2:41597:4095":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:2251:5479":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:2579:8735":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:1489:7754":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"24:5998:4007":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"1:8714:11407":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:5560:16781":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:2818:7273":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:3877:24393":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:6736:37883":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:9397:5485":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:44937:9709":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"24:5905:2576":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"17:12373:24409":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:12656:939":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:23346:9635":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:16380:7135":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:45007:9713":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12944:6402":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"24:3783:4302":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:3072:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:3628:4038":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:718:6199":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:4984:8011":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"21:2477:130":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"2:23683:8774":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:595:5486":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:3743:24377":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:8294:8726":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12298:24407":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"2:3593:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:47612:9102":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:8654:11403":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:11196:9248":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"24:5712:2976":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"17:12643:6342":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"11:2115:11279":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10431:24252":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:14955:6714":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13183:24451":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:1632:11281":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5630:8281":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:41285:16853":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:436:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:7367:8601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11971:9779":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:33003:5177":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:3303:36304":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"23:148:4808":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"17:11842:24322":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:8206:7289":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:11402:9022":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:41970:4128":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:5940:6011":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:16029:7019":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:8063:24186":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:1352:24297":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"24:6029:4016":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11262:6032":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:22880:11648":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:15469:6871":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:6274:5946":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:5564:16782":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:14322:6598":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"24:3528:4295":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:3364:5176":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:22256:11354":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:4990:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"15:306:23261":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:23221:9633":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"24:1855:3602":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"1:1011:11278":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:11214:5990":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"2:41264:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:6911:9508":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:43874:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:8040:37908":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"21:185:5347":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:3120:105":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"16:5196:7331":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"24:5338:3950":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"1:11164:11510":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"24:5629:3990":{"crate_id":24,"path":["syn","lit","LitCStr"],"kind":"struct"},"6:5477:8211":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:6547:11653":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:41202:9657":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:15937:6994":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:8304:8727":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:2258:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"24:1070:38165":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"6:6631:8451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:4852:8598":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:10821:37914":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:8272:5781":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"14:40:2593":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:581:5193":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4239:7314":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:9404:28666":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:6645:8453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:2364:9600":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:41370:11350":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:11080:9778":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:5521:8224":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:4771:4184":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:3688:32660":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:1858:4026":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:4808:7319":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:1948:3143":{"crate_id":2,"path":["core","mem"],"kind":"module"},"24:3188:127":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"1:9529:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:40293:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10202:24245":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:11118:9224":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:7553:8682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:2528:7260":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:46817:9036":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:14137:6551":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:47027:9053":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:6695:8474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:1573:9586":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:7591:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:3061:6002":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"9:318:7639":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"24:53:2669":{"crate_id":24,"path":["syn","token"],"kind":"module"},"24:6039:4003":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:13201:9708":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:23468:34297":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"24:1003:11354":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"5:6513:5961":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:1005:11277":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:44801:9701":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6142:24167":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:14384:6612":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"24:2320:4023":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"5:2810:8738":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:10668:4182":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6820:24175":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"24:5727:3995":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"24:1016:6133":{"crate_id":24,"path":["syn","fixup","FixupContext"],"kind":"struct"},"17:11346:24264":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:6254:9450":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:42713:8994":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4803:11479":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13423:9426":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5224:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:3560:4126":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:4355:11454":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"20:518:4044":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"2:41955:4124":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:6729:10790":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:44590:9016":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:22203:11354":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:5414:5957":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"20:801:9365":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:13476:16805":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"9:0:3778":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:15477:6872":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"24:1709:2665":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"6:7407:8603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:41932:9672":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:43049:4030":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:10405:24251":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:44997:9712":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:2604:4214":{"crate_id":21,"path":["proc_macro","escape","EscapeOptions"],"kind":"struct"},"2:22133:5193":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12749:24443":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:13489:6436":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:2495:11337":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:7023:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:12447:24412":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:7463:8625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:5151:8061":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:8439:11389":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:650:11259":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:7009:5729":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"24:86:5253":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"18:515:6183":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12979:6405":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"24:1365:9326":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:8334:4139":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:10507:28676":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:32944:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:41140:9655":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:48133:9152":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:34256:6151":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:7762:5956":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"24:3817:4304":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"6:7439:8613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6678:24173":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"16:6981:7302":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:11749:6033":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:7165:7385":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"21:964:2660":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:10295:35607":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:43095:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4842:7936":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:22647:11354":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:12642:492":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:4850:4193":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:31357:34305":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:44105:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:3872:11405":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:5154:24456":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:5036:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"24:3647:2608":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"1:9271:4026":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"20:723:2660":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"1:7902:10726":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"18:680:9371":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7413:24179":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"11:1579:23235":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12825:6395":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:47176:9068":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"21:2685:4210":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"5:7599:9606":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"3:2077:8742":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"2:9483:4785":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:8824:6141":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:1942:5772":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:43132:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"24:4741:4340":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"1:1654:9589":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:12022:9784":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:16403:7139":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6769:8497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"24:5040:3943":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"17:13465:6435":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"2:31325:5182":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:8316:8731":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4792:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:41322:5982":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"2:47529:9099":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:5356:454":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:1500:7759":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:8803:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:14788:6686":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:44652:9631":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:7472:6023":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:11259:24262":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:12614:11268":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"23:0:1437":{"crate_id":23,"path":["quote"],"kind":"module"},"2:43393:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:48061:9146":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:22685:35847":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"20:883:2660":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"17:14883:6703":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:5391:3954":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"17:12093:6350":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:13529:16812":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"24:4253:4307":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:42661:9680":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"14:213:9577":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"24:3851:4306":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"17:16301:7115":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12969:6403":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:8872:9011":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:14971:6715":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"24:2518:3214":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"17:11512:24282":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"24:2665:11354":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"21:145:5736":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"1:1665:2630":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:11069:9758":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:16672:7209":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"24:5307:3967":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:22652:11568":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:3401:6147":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10975:37915":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:465:2582":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:44088:9687":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:46984:9050":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:3108:7304":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:12664:1896":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:6267:9451":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11603:24290":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12263:9405":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:7409:10723":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"6:7962:8694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7383:7405":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:41416:4089":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:5375:11378":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:3640:11351":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:8093:24187":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:4501:34429":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:1083:23231":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:8317:24189":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6186:9445":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:5088:8056":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"24:5007:3941":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:3792:268":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:1632:7845":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:12579:16791":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:9596:16804":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:4621:4200":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:2568:7262":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:45492:9745":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"24:588:4035":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"16:5280:7334":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3423:5607":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:43882:4170":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12907:6436":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:7355:7292":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6749:8489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:47662:9104":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:8162:7291":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:8175:8709":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5325:8135":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12146:9396":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:14940:6710":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:754:9384":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:22789:11564":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:9337:11532":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"11:2525:37843":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"24:1764:28550":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"1:562:5506":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"5:7200:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12187:9399":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"20:843:3277":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"17:14443:6620":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"10:44:7602":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:4150:7312":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:6651:8456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:46917:9046":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:4384:11457":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:43565:3194":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:928:5928":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"24:2374:4025":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"11:763:9587":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:5420:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:16828:7244":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:1623:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:806:37954":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"24:5627:3989":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"16:6939:9510":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:8284:8722":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:23661:8772":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:3524:24374":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"23:514:3278":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"24:3324:4285":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"17:12287:24406":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10255:24246":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:1690:7880":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:5463:3144":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"20:982:4025":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"11:1542:23233":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:14373:6609":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:6406:9468":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:45820:9754":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:3622:9226":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:5515:5922":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"24:1634:38211":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"17:12008:24316":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4875:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"24:4923:4675":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"16:6873:7360":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:11660:7659":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:15389:6809":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:2448:7250":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6590:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:1494:7756":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:41300:9661":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:47159:9067":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:16717:7218":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:7055:9521":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:40330:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"24:4835:4347":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:23515:9643":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"24:5631:3988":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:40280:9648":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"18:573:6180":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:10664:31013":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:6061:11524":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:1530:7772":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11825:24333":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"14:159:10699":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:12028:9785":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"24:5578:2670":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:45032:9656":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:9458:28668":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:2834:5180":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"17:11395:24277":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:16802:7240":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:34948:6138":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:9237:9246":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:4362:4026":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:5640:8282":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"24:2611:11354":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"6:5311:8130":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:8812:4136":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11868:6334":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:8480:3927":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:46998:9051":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:15595:6914":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:12625:28724":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:48118:9151":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:42860:5497":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:7494:8651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:6746:5922":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:6310:4091":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"24:4514:4324":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:7740:4096":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:15198:6756":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:2453:24339":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:2099:9557":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6967:7285":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:2908:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11728:24287":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:12100:11409":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:7524:8668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:1132:10705":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:1114:11279":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"18:80:28516":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:47208:9070":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"24:3256:2606":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"6:5395:8160":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:8278:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:11629:6297":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:3439:7307":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:8011:7299":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:3599:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:586:7750":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"3:0:527":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:3477:4292":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:23361:8747":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6694:24174":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:10918:11358":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:6802:8506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:0:585":{"crate_id":2,"path":["core"],"kind":"module"},"6:7317:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:6171:9443":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:41454:4100":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4829:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:113:2581":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:15733:6942":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"24:4642:4333":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"1:11040:11485":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"5:6030:5706":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:40438:16766":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:1506:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:4171:4025":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:3332:9588":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:14811:6695":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:3075:272":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:6133:6005":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13795:6483":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"14:219:7586":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:5447:7339":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:12034:9703":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:14178:6562":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:9279:11535":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:11997:9782":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5051:8044":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:2878:7276":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:12646:351":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"24:289:38161":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"17:10455:24253":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"11:649:4026":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"24:3001:4273":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"16:6711:2623":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:6096:24166":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:5044:8042":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:42495:8984":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:15713:6938":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"21:1104:220":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"6:6523:8388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:776:5706":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11469:24280":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"24:4328:4312":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"14:164:23241":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:3090:28567":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:15062:6736":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:3469:11392":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:15861:6976":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"11:813:11274":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:7072:24177":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:2638:7265":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11564:24296":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"20:715:266":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"2:45496:9746":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:2858:7275":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:6623:9498":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:16684:7211":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:6500:8375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:1636:4025":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"24:3494:4293":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:22384:8744":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:16650:7204":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"24:1295:2670":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:42926:9684":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:4767:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:16766:7233":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:8607:4098":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:3426:5608":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:2618:7264":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:13239:9625":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:16777:7234":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:14454:6621":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:12236:9787":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:42761:4026":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"23:513:1437":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"1:5874:11511":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:5506:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:15809:6963":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7013:9519":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"24:4391:4316":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"16:2964:7280":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5494:8216":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:8220:9564":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:35121:4343":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:9391:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:2948:7279":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:4140:11426":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:3809:16700":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6416:8338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:8243:8713":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:15:3419":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:3371:11393":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:7774:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:8272:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:2811:11388":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:32935:9647":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"11:1652:5919":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:1871:5704":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:11221:5991":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"24:4572:4328":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"2:3803:16701":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"24:4823:4346":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:22205:11566":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"18:521:28529":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:45508:9749":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:596:24240":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:47434:9096":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:9220:11512":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"24:5888:4001":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"24:3749:2630":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"2:45016:9714":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:8188:10713":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:5683:11506":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:47964:9141":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:1591:11273":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:10662:4173":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:5341:8139":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:40368:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:6121:7287":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:7977:7297":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:608:37947":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11437:9264":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"24:4987:2607":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"16:6586:7350":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2:2810:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:11800:9623":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:7074:5710":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"24:1362:9325":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"17:14665:6654":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13399:6433":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:3357:5174":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6026:7283":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:40408:4083":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:5417:1007":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:2433:23305":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:6460:24171":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:11059:9770":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:6702:8475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:479:7688":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:41548:4107":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:5687:7341":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"3:2062:8741":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"16:8623:9576":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:6792:8503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:519:6258":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:12662:1884":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:9446:4876":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:38873:6156":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:15868:6977":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:22164:35841":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"21:2221:4047":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:3315:277":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:9539:6021":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:2702:7268":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"24:5026:2598":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"2:46785:9032":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:8299:9759":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:40196:16699":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:491:7693":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:832:11276":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:23136:11645":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:13529:6438":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:8960:4026":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"21:131:5909":{"crate_id":21,"path":["proc_macro","bridge","client","state","set","RestoreOnDrop"],"kind":"struct"},"17:13856:6496":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:0:3780":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:11955:9626":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"13:229:7594":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8807:4781":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:5960:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:683:10712":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13000:24446":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:6602:8438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6040:7286":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:2750:5998":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:4869:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:8225:8710":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:537:5479":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:750:9586":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:7880:7449":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:15174:6403":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:23502:8764":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13219:24455":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:11179:28683":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:2988:7281":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:6779:11525":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:8148:7301":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:45337:16819":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:44337:9692":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:4243:11433":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:1711:7888":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:473:7685":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:47906:9139":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5585:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6779:7356":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:1397:11279":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4725:11462":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11064:9772":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5007:8024":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13120:24262":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:10378:9677":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"21:2282:2985":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"17:13673:6450":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:3035:4275":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"24:5334:3971":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"6:5550:8241":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"8:0:3777":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11383:9247":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13592:6441":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"17:15896:6985":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:5346:7336":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:3707:11373":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"24:3154:120":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"5:1227:36310":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:912:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:14368:5993":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:6864:24176":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"20:948:2593":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"5:3079:2834":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:6398:8325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:8282:9758":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"11:2206:9591":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:16051:7024":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:5057:8046":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:1660:9590":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7804:37899":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:3585:7308":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"11:2440:5704":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:5871:8504":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"24:5717:3994":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"6:7430:8610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13014:6406":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:10113:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:32945:251":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:16203:7084":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:42733:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10860:6322":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:13185:9705":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:9847:6028":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:8092:5505":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"24:4485:4322":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"17:15640:6923":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:7878:10724":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"24:4461:4320":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"1:7570:32427":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"24:3069:4277":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"20:113:9363":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"16:7421:24180":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:11751:4026":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"7:78:23146":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"9:412:23154":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:12645:1352":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:12243:9787":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:43169:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:7856:5704":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:6899:11528":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:10586:6314":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:14165:6561":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:4848:8594":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:2820:5179":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:3822:35283":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:15102:6741":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"24:250:10696":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"16:5755:7342":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"11:389:5917":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"24:2391:4026":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"17:16525:6483":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:13093:6334":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:11053:24259":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:13730:6460":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"24:4960:2792":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"24:6018:4013":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"24:5251:3958":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:12663:6392":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:1675:7871":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11989:10787":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:12062:16799":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:6505:8376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:14897:6704":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:4902:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:3079:271":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3467:11391":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"21:2710:4046":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"17:15699:6937":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:12663:1890":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"24:3171:4279":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:14186:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:45238:9726":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:14008:6519":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:7997:7298":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:15919:6990":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"24:4555:4327":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"6:1584:7809":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:43317:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:3558:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:45480:9742":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:32928:4193":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"24:6001:4008":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"24:2399:4028":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"1:3590:5946":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:7502:6024":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:1612:10832":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2736:5999":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"24:5839:2957":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"6:5482:8213":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13509:6400":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"24:1809:4151":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:43832:9009":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:12648:1771":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:23617:8768":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:5658:8291":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:7347:7403":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11318:24263":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:3448:5704":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:4171:11428":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"24:4432:4319":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:31293:5496":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11995:24317":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:6817:6018":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5387:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:7519:4025":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11269:24282":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:47935:9140":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:15074:6737":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"24:642:9324":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"16:8295:9565":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7966:9562":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"14:7:10699":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:8107:5493":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:12643:1924":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:4:1292":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:44135:9690":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"21:2249:2581":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"2:10674:4180":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"24:5458:2601":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:969:11273":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"24:5873:2975":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"16:7956:9561":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5441:8187":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:3431:5609":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:8895:9240":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:8446:4138":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"21:369:4876":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"24:4910:3270":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"1:10486:11296":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:1667:7870":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"21:2749:2593":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"17:15995:7012":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:10062:24241":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:14498:6629":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:31061:11413":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:41961:4126":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:927:9586":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:8587:11353":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13909:6503":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:3782:16765":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:7459:24181":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6237:7345":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:2746:7270":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12397:24411":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:2533:7599":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"0:0:2447":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"16:4402:7316":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:8851:35606":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"23:46:4056":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"1:8966:9245":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:7344:8583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:14859:6700":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:23051:11652":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"20:908:4046":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"16:7334:7401":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:8582:24190":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:6387:24169":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:0:3785":{"crate_id":17,"path":["object"],"kind":"module"},"2:2303:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:15456:6864":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"15:327:10807":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:894:37884":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"11:2275:9557":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:42695:8993":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:984:5930":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:7723:16853":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11151:24261":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:12657:921":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:16838:6513":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:34457:6154":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"24:2288:4022":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"17:2243:24323":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:6197:4102":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"24:5830:2954":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"24:0:2425":{"crate_id":24,"path":["syn"],"kind":"module"},"1:11155:11505":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:41525:4092":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5139:8060":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:5827:3241":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"1:8950:9763":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:41722:4111":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:6995:9512":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:47191:9069":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:7326:8574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:40348:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:5536:3252":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"1:9478:9257":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:9501:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:1411:10705":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"24:4282:4309":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:46969:9049":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:22151:35836":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:3262:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:15534:6907":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:6459:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:42673:9761":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:3012:23306":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:7741:4097":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"20:719:4044":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:43920:4172":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:8266:8719":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10524:24255":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:4436:11458":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:42527:11404":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:6109:9438":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:974:10831":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:8167:11267":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14746:6665":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:12640:436":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:6638:8452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:12975:16806":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:12647:1737":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:4371:11456":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:6088:4783":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:11907:9011":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"2:14426:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:8666:3355":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11855:24321":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:10965:24258":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:3699:4026":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:22162:35839":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:33035:278":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"5:1382:11280":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:3327:3121":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:4199:11431":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:14678:6655":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"11:1878:9588":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:10876:11393":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:42769:4030":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:6727:8480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:377:5503":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:8025:7451":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:10603:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:1625:7841":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:3424:11395":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:7679:4077":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:44733:9623":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:48052:9145":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13304:24267":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:11882:16794":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"24:85:11354":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:46885:9044":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"18:635:6198":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:9506:6015":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:5604:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:5186:8065":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11135:28728":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:6148:5955":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:23433:34295":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12081:24340":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:8260:8718":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:14152:6557":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:9210:11502":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"2:43280:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:22264:11565":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:8630:9623":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:789:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"21:1802:5726":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"16:2484:7258":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"9:49:10811":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:383:5504":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:12665:1878":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:44679:9018":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:1001:4026":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:16700:7216":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:9842:11349":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"24:5637:3992":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:4712:4338":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"6:5217:8084":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40388:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12272:6417":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11161:37919":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:15578:6912":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:48156:9159":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"24:6005:4010":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"17:13344:6431":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"21:941:4210":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"11:676:4025":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14431:6618":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:45050:9655":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"24:5486:3216":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"23:272:2670":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"21:113:5735":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:4653:4201":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"20:889:2661":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"6:4816:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13959:6512":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:5377:7337":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2159:1397":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:497:7696":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"18:507:6180":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:12659:933":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:6841:9503":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:12593:10537":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"24:88:4494":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"24:5255:3959":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"6:7337:8579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:47993:9142":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:12658:927":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"24:1628:4168":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"2:4897:4194":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:3042:11354":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:3095:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"24:5981:4004":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"2:42936:222":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"24:689:4025":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:12935:9420":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:10108:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:693:4162":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:2685:5642":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:33034:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"16:2465:7252":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7256:9539":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:41332:11331":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"2:13687:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:45389:9739":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:9293:9249":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:7627:4025":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:6428:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:14690:6656":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12889:9417":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"20:792:266":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"17:15785:6959":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:22276:8744":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6887:7284":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:45180:9725":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"24:138:2587":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"20:933:2659":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"14:186:23248":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:5323:35051":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"17:10479:24254":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:15691:6936":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:7583:4025":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:48209:9162":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13157:6413":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"21:2400:2661":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"6:5179:8063":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:41988:4132":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"24:2123:38118":{"crate_id":24,"path":["syn","precedence","Precedence"],"kind":"enum"},"9:168:10822":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:42752:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11715:24288":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:15677:6932":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:44662:16795":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:4842:7320":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:1233:24292":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"24:4596:4330":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:5557:8243":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"24:4936:2924":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"2:3066:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"23:322:3280":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"16:7189:24178":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"20:358:4044":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"17:13771:6469":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:8500:7502":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:16744:7227":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:22382:11563":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:578:7746":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"24:2195:2586":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:4536:5606":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:45739:10528":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:11775:4030":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:45167:9724":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"24:5493:3982":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:48248:9178":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:896:4026":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:10440:4171":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:6893:8543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:45153:9722":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:9432:10839":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:41377:4087":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:978:10832":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:292:9580":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:22924:11649":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:44490:34449":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"24:3222:4281":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"5:778:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:8231:8711":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:2513:7595":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:3576:4072":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"9:380:23153":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:4157:5922":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:5134:5946":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:4967:11445":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:16164:7069":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"24:6010:3148":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:34390:6153":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:16631:6496":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"5:7750:9613":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:40629:5197":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:40276:3201":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:953:5706":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:6366:9465":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"21:2620:4209":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:32946:258":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:257:10697":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"1:4517:11459":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:3679:4178":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:6826:4025":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12800:24417":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"24:5358:3952":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"17:15569:6908":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:3396:4070":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:42868:9682":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"24:5320:3969":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"2:48072:9147":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:6035:4002":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"1:8739:11484":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13044:6410":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:4981:7325":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:11083:5989":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2:41116:9653":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:47322:9076":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:13162:9702":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:10660:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:11328:37921":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:787:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:41103:8979":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13575:6403":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:1136:10705":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:47396:9094":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:2235:5656":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11594:2962":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:45358:9733":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:43001:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:8498:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:47641:9103":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"16:7575:9254":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5617:8275":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:4963:11442":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:5367:3974":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"16:4182:7313":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:43071:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:427:37848":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:8264:7466":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:41463:4101":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:15908:6986":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:7027:7362":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"9:345:23167":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:7713:37891":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6950:9511":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:14345:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:5488:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:11102:24260":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8695:9762":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:4118:7311":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"18:735:28525":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:14337:6603":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"17:14069:6532":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:2424:5612":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:6390:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"24:6023:4014":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"16:8230:24188":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:45500:9747":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13108:6342":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"24:1938:4161":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:23395:34293":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"9:226:9011":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"24:6013:4012":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"16:5222:7332":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:2534:11348":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"1:8700:11460":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:2504:7259":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"24:4613:4331":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:45565:16910":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"21:2616:4044":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"1:12609:10847":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:7004:9619":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:16219:7088":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"24:1759:28549":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"17:15587:6913":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"9:490:7662":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:13125:9697":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:45025:9715":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:559:7736":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11576:6334":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11356:37922":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:3712:4030":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:6062:7288":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:5222:4777":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:15611:6915":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:5139:11481":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"11:2126:11280":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:16021:7018":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:517:7713":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4896:7969":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:5111:7328":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"24:5354:3972":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"23:504:5106":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:45554:9750":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:14870:6701":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:33705:6149":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:2341:11333":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:4959:4197":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:6896:10721":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:5647:7340":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:31731:5193":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:11843:9625":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:1883:11288":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"20:781:28535":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:10300:10834":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"24:5882:3145":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"6:553:7733":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:1828:4152":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"5:1366:9557":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"18:531:9368":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:5933:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:16359:7132":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:4292:5946":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:8352:10719":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6638:24172":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:7890:10725":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:8643:11407":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:41444:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:14396:6614":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:1123:11280":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:6379:6006":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:7248:5974":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:15115:6742":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:1597:7816":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:1648:9588":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:2032:813":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"14:0:3782":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12331:24372":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:23547:11354":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"18:563:6186":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:2394:24351":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:14924:6708":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7935:9558":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:2156:11282":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"24:5579:2932":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"6:1551:7787":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:14650:6651":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:41148:9650":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:5241:8095":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"24:5542:3651":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"6:6472:8364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:3137:2973":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"17:13585:10789":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"6:5611:8272":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:2261:9593":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7786:37892":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:544:9428":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"24:5331:3949":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"1:5717:11508":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:5390:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"18:643:6180":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:14081:6533":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:15035:6734":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"24:5635:3993":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"17:13079:24452":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"15:288:23260":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:45504:9748":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:44703:9694":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:8649:11406":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5025:8033":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5230:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:14039:6528":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:12260:6039":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:6835:10806":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:316:37885":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"21:2754:3277":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"2:41425:4090":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"18:623:37945":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:4852:4348":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:48035:9144":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:4039:11410":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:46864:9039":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"24:4666:4335":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"17:12133:9395":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"7:0:1956":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:2394:4025":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:4591:11452":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:4900:7322":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:41394:4088":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:16058:7026":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"24:1102:3984":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"17:12737:24442":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:44987:9711":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:1885:5704":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:481:9366":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:45488:9744":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"13:110:37856":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"24:3630:3325":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"11:2374:4030":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:4255:11436":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:3147:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:47417:9095":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:7369:7293":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:2509:11340":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:999:11276":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"24:638:238":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"2:44883:9706":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:4488:5948":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"24:5350:2859":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"21:2551:4211":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"6:5288:8121":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:1110:3985":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"17:15763:6953":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:6670:8460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:11654:24262":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"12:0:3781":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:15951:7001":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"24:339:4162":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"21:58:5729":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"5:7738:9610":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:8134:7300":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"24:5902:3999":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"24:2347:4024":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"6:5366:8145":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:1027:11280":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:44117:9011":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:3937:11408":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"24:4294:4310":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"17:12836:24445":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:41126:9654":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:43860:34388":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:12660:914":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:4925:11461":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:16068:7031":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:2568:3791":{"crate_id":1,"path":["std","io"],"kind":"module"},"20:927:2985":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"16:7728:4784":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"24:3800:4303":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"1:2096:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10369:24250":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:96:28517":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:5313:28640":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47269:9073":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:43815:4170":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:11014:37916":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:36997:4345":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"11:2354:4026":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:14545:6635":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:10700:6318":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:4193:11430":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:23495:9640":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:13452:4442":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:14571:6362":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:15978:7008":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:3579:240":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"24:6044:3146":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:4770:4342":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"1:0:1763":{"crate_id":1,"path":["std"],"kind":"module"},"6:5539:8235":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10815:24257":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:1919:11296":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"24:4683:4336":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"24:2676:6143":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"1:508:5996":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:23595:8766":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:42789:4784":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:6719:8479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:2344:5648":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:9287:4025":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:41557:4108":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11915:6342":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:14413:6617":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:2122:696":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"18:659:28527":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:14159:35656":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:8325:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:16350:7130":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:41980:4130":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:14350:6605":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:5947:9755":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:24259:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:284:5922":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12898:9418":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:570:7741":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13066:24453":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:16040:7023":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:1944:11302":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8637:9711":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:43041:4026":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:3046:23307":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:5733:11509":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:44550:9628":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"24:5264:3960":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"18:698:9375":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6500:23278":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12711:24432":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:14110:6542":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:47223:9071":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12621:6391":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:321:37886":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:40:5618":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:38983:6155":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:23384:9638":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:12725:24441":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:7987:9563":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"21:246:38023":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"17:10601:6315":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:1569:7797":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:485:24239":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:12077:6036":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"21:2624:4025":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"5:3082:8737":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"24:3613:4298":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"17:13836:6486":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:14211:16728":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"11:357:5915":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7916:24184":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:11420:9258":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"24:5324:2933":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"17:12160:9397":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:3832:7310":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"24:4473:4321":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"1:8569:9223":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:15128:6743":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"24:5510:3981":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"6:4937:7989":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"24:5290:3964":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"1:7820:31062":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:47816:9137":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12055:24363":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:13648:6449":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:6606:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12065:24364":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:10923:9621":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"23:11:4055":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"24:5639:3987":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"1:1885:11289":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:42777:4025":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:5576:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:7284:8550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:8609:7303":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:41251:8980":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:1923:4148":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:44709:9695":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11590:24291":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"24:2101:11136":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"2:3317:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:44642:16796":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:23650:8771":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"24:5243:3956":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:48081:9148":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:6710:8476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:10667:6317":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"20:709:9364":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"6:5205:8077":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11485:24281":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:15353:6778":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:1867:722":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:699:11262":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:45760:34456":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:4838:11431":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"24:5567:2593":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"20:775:4047":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:14122:6545":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:2588:7263":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"24:5897:4000":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"17:11063:37917":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"21:1365:2674":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"23:35:11354":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"6:4976:8006":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:12011:10536":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"23:235:5110":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"17:11667:6336":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:44901:9707":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:15186:6752":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:12641:1208":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:5316:7335":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:45676:9025":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:44633:9630":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:5405:8166":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:3925:5704":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:47240:9072":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:15721:6939":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:9215:11503":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"17:13133:6412":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"20:834:2593":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:34775:5113":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5069:8055":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4997:8017":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:0:3786":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:23672:8773":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"16:4871:7321":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:12655:761":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:8314:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:22986:11354":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"18:491:9367":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"24:5863:2971":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"17:15448:6861":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:16230:7093":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11494:6332":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"24:5562:3247":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"23:281:2670":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:23453:34296":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:46770:9029":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:4584:4329":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"6:1657:7864":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:43572:4173":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"11:123:5913":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:12161:11410":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13553:24269":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:113:28518":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:23694:8775":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:45484:9743":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:1247:37698":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:13757:6468":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:3571:4199":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:3306:7249":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:4333:32426":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14776:6684":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:46849:9038":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:45771:11655":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:8633:24192":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"24:6007:4011":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"17:14624:6647":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:8765:9229":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:7710:9607":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"24:5878:3998":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"16:7762:7432":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"24:5515:3147":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"5:1483:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:26659:283":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"24:3868:284":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"16:8055:24185":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:15792:6960":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:8090:4121":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:8910:11497":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:22175:35842":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:2838:7274":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:15817:6965":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:6998:4093":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:16730:7224":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"23:150:4807":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"17:11200:6342":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:3324:9590":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:3341:4286":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:2872:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:43805:8999":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:6915:5922":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:5045:11441":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6679:8466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:7787:9614":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"24:5272:3945":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"5:6169:17191":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:4552:5946":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"21:2308:2593":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:23526:11411":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:6858:8518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:23000:11651":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:13971:6513":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12045:6172":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13608:24226":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11423:24278":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:48092:9149":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:9514:5946":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"5:4519:5946":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:14258:6569":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"24:5383:3976":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"24:3409:4290":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"1:10800:6029":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:11963:6349":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5165:8062":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11794:24312":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:41236:9658":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:14834:6696":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:43057:4025":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:5282:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:2511:11341":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:32910:2748":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:15324:6758":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"24:5047:2931":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"5:3337:36308":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:3158:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:2339:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:10333:24249":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:12214:9401":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"24:5259:3944":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"24:4758:4341":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"17:13700:6456":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:8176:7458":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:3540:5610":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:7984:8695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:982:11274":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5196:8072":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:14710:6659":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:6578:8426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:8277:11349":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"24:3290:4284":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.36/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.86/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.72/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}