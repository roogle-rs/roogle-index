{"root":"0:0:1604","crate_version":"1.0.137","includes_private":false,"index":{"2:8279:147":{"id":"2:8279:147","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8280:1772","2:8281:3210","2:8282:746"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3341:5008":{"id":"2:3341:5008","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3343:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13215:2258":{"id":"2:13215:2258","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15735:2948"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49115:5360","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5627:4622":{"id":"1:5627:4622","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5628:57353","1:5629:57355","1:5630:57354","1:5631:57356"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13228:58325":{"id":"2:13228:58325","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15735:2948","self::pattern":"2:12826:5109"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:3292":{"id":"2:3411:3292","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3412:526"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3398:112","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8756:5106":{"id":"2:8756:5106","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7803:5107","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12856:5108":{"id":"2:12856:5108","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13304:62185":{"id":"2:13304:62185","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15735:2948","self::pattern":"2:12826:5109"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5693:4621":{"id":"1:5693:4621","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:56879"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3247:3234":{"id":"2:3247:3234","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3249:167","2:3250:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13208:58727":{"id":"2:13208:58727","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:22833:5047":{"id":"2:22833:5047","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23482:5042","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22824:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3085:131":{"id":"2:3085:131","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3087:661"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4539:4636":{"id":"1:4539:4636","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4540:4437","1:4541:58136","1:4543:58137","1:4544:58138","1:4545:4666","1:4546:58139","1:4547:57187","1:4549:58140","1:4550:4057","1:4551:4731","1:4552:2024","1:4554:2152"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2875:6341":{"id":"24:2875:6341","crate_id":24,"name":"Speculative","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2876:63217"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3487:3220":{"id":"2:3487:3220","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3489:732"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3483:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:18:3067":{"id":"20:18:3067","crate_id":20,"name":"TokenStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:19:9176","20:21:63105","20:23:63106","20:26:63107"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:44:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13195:62166":{"id":"2:13195:62166","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15741:2953"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4684:4399":{"id":"2:4684:4399","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4685:1772","2:4686:60563","2:4687:4044"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10127:3302":{"id":"2:10127:3302","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10128:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10119:2207":{"id":"2:10119:2207","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10120:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3422:2153":{"id":"2:3422:2153","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3423:559"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13199:62167":{"id":"2:13199:62167","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5561:4640":{"id":"1:5561:4640","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5562:6267","1:5563:2688"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12273:5525":{"id":"2:12273:5525","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12274:1772","2:12275:2907"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10125:175":{"id":"2:10125:175","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10126:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10117:3297":{"id":"2:10117:3297","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10118:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13315:3311":{"id":"2:13315:3311","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15735:2948"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49447:3312","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8752:5105":{"id":"2:8752:5105","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8474:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3327:3425":{"id":"2:3327:3425","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3329:167","2:3330:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5649:4625":{"id":"1:5649:4625","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5650:8293","1:5651:56879","1:5652:6866","1:5653:59996","1:5654:4923","1:5655:4924","1:5656:59997","1:5657:1275","1:5658:59998","1:5659:59999","1:5660:60000","1:5661:60001","1:5662:60002","1:5663:60003","1:5664:60004","1:5665:60005"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3262:3398":{"id":"2:3262:3398","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3264:167","2:3265:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6767:4595":{"id":"1:6767:4595","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6768:57404"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13220:62169":{"id":"2:13220:62169","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49403:5373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3187:203":{"id":"2:3187:203","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3337:5006":{"id":"2:3337:5006","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:338"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5643:4624":{"id":"1:5643:4624","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5644:6866","1:5645:9180"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13239:57208":{"id":"2:13239:57208","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:8323:116","self::pattern":"2:12826:5109","str::split_whitespace":"1:15741:2953","prim@char":"1:15735:2948","str::rsplit":"1:15741:2953"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49139:4675","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12851:5113":{"id":"2:12851:5113","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12853:4036","2:12854:61377","2:12855:61378"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12845:5112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3294:5031":{"id":"2:3294:5031","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3296:1082"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:772:207":{"id":"5:772:207","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:1966","5:774:1839","5:775:4082"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6698:4589":{"id":"1:6698:4589","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6699:57196"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13301:1837":{"id":"2:13301:1837","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15735:2948","self::pattern":"2:12826:5109"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6593:4625":{"id":"1:6593:4625","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6594:58087","1:6595:8639","1:6596:8640","1:6597:8642","1:6598:8641","1:6599:8643","1:6600:8644","1:6601:8646","1:6602:6907","1:6603:8649","1:6604:8650","1:6605:8651","1:6606:8652","1:6607:8653","1:6608:8654","1:6609:8647","1:6610:8648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3350:4994":{"id":"2:3350:4994","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3352:1208"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10332:142":{"id":"2:10332:142","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10333:632","2:10334:2568","2:10335:57461","2:10336:57462","2:10337:57463","2:10338:57464","2:10339:57465","2:10340:57466","2:10341:57467","2:10342:57468","2:10343:57469","2:10344:57470","2:10345:57471","2:10346:57472","2:10347:57473","2:10348:1498"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13275:62176":{"id":"2:13275:62176","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15735:2948","str::match_indices":"1:15741:2953","self::pattern":"2:12826:5109","`DoubleEndedIterator`":"2:8323:116"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49307:5369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13257:58761":{"id":"2:13257:58761","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15741:2953","prim@char":"1:15735:2948","self::pattern":"2:12826:5109"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49261:5339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2877:170":{"id":"2:2877:170","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2879:976","2:2880:804","2:2881:770","2:2882:693","2:2883:676"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3220:3333":{"id":"2:3220:3333","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3299:4995":{"id":"2:3299:4995","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3300:167","2:3301:931"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8242:5035":{"id":"2:8242:5035","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8244:4074"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3906:68":{"id":"2:3906:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3907:1398"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:5683:4626":{"id":"1:5683:4626","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5684:57560","1:5685:57561","1:5686:57562","1:5687:57563"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2565:123":{"id":"1:2565:123","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:60079","1:2568:2931","1:2569:60078","1:2570:60080"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10108:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10115:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:2628:2438":{"id":"24:2628:2438","crate_id":24,"name":"Spanned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2629:2037"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2836:120":{"id":"2:2836:120","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8275:132":{"id":"2:8275:132","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8277:664"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3092:212":{"id":"2:3092:212","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3094:123","2:3095:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14010:4409":{"id":"2:14010:4409","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14011:58022","2:14012:58023","2:14013:58024","2:14014:58025","2:14015:58026","2:14016:58027","2:14017:4057"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2801:101":{"id":"2:2801:101","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2802:392","2:2803:394"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13212:58747":{"id":"2:13212:58747","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15741:2953"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3191:205":{"id":"2:3191:205","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6367:4592":{"id":"1:6367:4592","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6368:57999","1:6369:8716","1:6370:58000","1:6371:58001","1:6372:58002","1:6373:58003"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13192:62164":{"id":"2:13192:62164","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6089:2254":{"id":"5:6089:2254","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15741:2953"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13280:62178":{"id":"2:13280:62178","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13201:58728":{"id":"2:13201:58728","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15752:2962"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6861:4594":{"id":"1:6861:4594","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:58078"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13938:137":{"id":"2:13938:137","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13939:262","2:13940:501","2:13941:265","2:13942:1058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3640:133":{"id":"2:3640:133","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3642:667"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3014:4990":{"id":"2:3014:4990","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3013:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13225:58323":{"id":"2:13225:58323","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12826:5109","prim@char":"1:15735:2948"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8323:116":{"id":"2:8323:116","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8324:4036","2:8325:4037","2:8326:4038","2:8327:4039","2:8331:4040","2:8334:4041"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8474:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3076:75":{"id":"2:3076:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3078:289"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:12845:5112":{"id":"2:12845:5112","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12847:5131","2:12848:900","2:12849:60520","2:12850:60521"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8238:5033":{"id":"2:8238:5033","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8240:2844"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3428:127":{"id":"2:3428:127","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3430:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3431:128","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3274:5023":{"id":"2:3274:5023","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3275:167","2:3276:891"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13539:134":{"id":"2:13539:134","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13540:167","2:13541:992"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:3083:3262":{"id":"24:3083:3262","crate_id":24,"name":"Parser","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:3084:167","24:3085:2128","24:3086:1793","24:3087:2129"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4899:4606":{"id":"1:4899:4606","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4900:3211","1:4901:59953"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6393:208":{"id":"5:6393:208","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6394:1836"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3157:111":{"id":"2:3157:111","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6065":{"id":"5:6065","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5885:1311","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6066:62821","5:6067:1955","5:6070:62822","5:6073:62823","5:6085:62824","5:6086:62825","5:6087:4696","5:6088:2255","5:6089:2254"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3333:5004":{"id":"2:3333:5004","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3335:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13309:4391":{"id":"2:13309:4391","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6087:4696":{"id":"5:6087:4696","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13191:2033":{"id":"2:13191:2033","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6769:4597":{"id":"1:6769:4597","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6770:57973"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3311:3949":{"id":"2:3311:3949","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3313:167","2:3314:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8749:4400":{"id":"2:8749:4400","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8474:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3345:5010":{"id":"2:3345:5010","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3347:1205"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8288:3335":{"id":"2:8288:3335","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8290:2101","2:8292:4042","2:8293:4043"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13193:62165":{"id":"2:13193:62165","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2779:3236":{"id":"2:2779:3236","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2781:2147"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13210:4726":{"id":"2:13210:4726","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3483:2214","`str`":"1:15741:2953","str::slice_mut_unchecked":"1:15741:2953"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13292:15836":{"id":"2:13292:15836","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12826:5109","prim@char":"1:15735:2948"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13216:4731":{"id":"2:13216:4731","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49125:2701","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13213:58748":{"id":"2:13213:58748","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15741:2953"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:62824":{"id":"5:6085:62824","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1258:1598":{"id":"0:1258:1598","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[98,0],"end":[103,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"5:6070:62822":{"id":"5:6070:62822","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13190:771":{"id":"2:13190:771","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15735:2948"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13310:4392":{"id":"2:13310:4392","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3184:3332":{"id":"2:3184:3332","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2867:163":{"id":"2:2867:163","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:398","2:2869:4030","2:2870:4027","2:2871:4035"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2836:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3483:2214":{"id":"2:3483:2214","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3485:167","2:3486:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"20:63:3068":{"id":"20:63:3068","crate_id":20,"name":"IdentFragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:64:640","20:65:2037"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2126:6342":{"id":"24:2126:6342","crate_id":24,"name":"IdentExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2127:63326","24:2128:63327","24:2129:1835"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2144:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5705:4629":{"id":"1:5705:4629","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:6866"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3286:5027":{"id":"2:3286:5027","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3288:871"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10058:3301":{"id":"2:10058:3301","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10059:1498","2:10060:60368","2:10062:57009"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7686:4763":{"id":"1:7686:4763","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7687:60331"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13316:62187":{"id":"2:13316:62187","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15735:2948"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49456:5378","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6465:4714":{"id":"1:6465:4714","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6466:60043","1:6467:60044"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3088:213":{"id":"2:3088:213","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3090:123","2:3091:1385"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10115:115":{"id":"2:10115:115","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10116:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3425:126":{"id":"2:3425:126","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3427:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3428:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9128:3648":{"id":"2:9128:3648","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13202:1817":{"id":"2:13202:1817","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47181:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4621:4672":{"id":"1:4621:4672","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4622:57204","1:4623:57205","1:4624:57206","1:4626:4671","1:4627:57207","1:4629:57208","1:4630:5822"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:4636","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4614:4669":{"id":"1:4614:4669","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4615:56888","1:4616:40848","1:4617:56889","1:4618:56890"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3321:3423":{"id":"2:3321:3423","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3323:167","2:3324:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:117:1790":{"id":"20:117:1790","crate_id":20,"name":"ToTokens","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:118:2428","20:119:2169","20:120:1812"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3398:112":{"id":"2:3398:112","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3399:206","2:3400:524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3306:4738":{"id":"2:3306:4738","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3308:167","2:3309:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2776:94":{"id":"2:2776:94","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2778:1791"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13222:1855":{"id":"2:13222:1855","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15735:2948","self::pattern":"2:12826:5109"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13211:62168":{"id":"2:13211:62168","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3487:3220","`str`":"1:15741:2953","str::slice_unchecked":"1:15741:2953"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:9129:3647":{"id":"2:9129:3647","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13278:62177":{"id":"2:13278:62177","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13251:62171":{"id":"2:13251:62171","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12826:5109","prim@char":"1:15735:2948","str::split":"1:15741:2953","str::split_terminator":"1:15741:2953"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49207:5365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10129:3303":{"id":"2:10129:3303","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10130:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10121:3304":{"id":"2:10121:3304","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10122:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10367:4737":{"id":"2:10367:4737","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10368:142","2:10369:34525","2:10370:60205"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13260:62172":{"id":"2:13260:62172","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7803:5107":{"id":"2:7803:5107","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7804:61055","2:7805:61056","2:7806:61053","2:7807:61051","2:7808:61057","2:7809:61054","2:7810:61052"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9222:4583":{"id":"1:9222:4583","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9223:60335","1:9224:60336","1:9225:60337","1:9226:60338","1:9227:5405","1:9228:40379","1:9229:60334"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6067:1955":{"id":"5:6067:1955","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13269:62174":{"id":"2:13269:62174","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15741:2953","self::pattern":"2:12826:5109","prim@char":"1:15735:2948","`DoubleEndedIterator`":"2:8323:116"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49361:5372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3188:202":{"id":"2:3188:202","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10123:3305":{"id":"2:10123:3305","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10124:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3282:4835":{"id":"2:3282:4835","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3284:1327"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2969:1794":{"id":"24:2969:1794","crate_id":24,"name":"Parse","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2970:1793"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4596:3301":{"id":"1:4596:3301","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4597:2568","1:4598:57005","1:4600:57006","1:4601:5746","1:4602:57007","1:4603:57008","1:4604:57009","1:4613:4057"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13285:62181":{"id":"2:13285:62181","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13254:58759":{"id":"2:13254:58759","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15735:2948","str::rsplitn":"1:15741:2953","self::pattern":"2:12826:5109"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49243:5338","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13286:62182":{"id":"2:13286:62182","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12826:5109","prim@char":"1:15735:2948"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12856:5108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3465:4402":{"id":"2:3465:4402","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3467:222","2:3468:192","2:3469:61393"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13554:146":{"id":"2:13554:146","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13555:167","2:13556:146","2:13557:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10726:199":{"id":"2:10726:199","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10728:167","2:10729:1817","2:10730:58725","2:10731:58726","2:10732:58727","2:10733:731","2:10734:732"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10717:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13313:62186":{"id":"2:13313:62186","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15735:2948"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49438:5377","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13266:3028":{"id":"2:13266:3028","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12826:5109","`DoubleEndedIterator`":"2:8323:116","str::matches":"1:15741:2953","prim@char":"1:15735:2948"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49343:5371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13200:288":{"id":"2:13200:288","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15752:2962","str::as_mut_ptr":"1:15741:2953"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13221:33230":{"id":"2:13221:33230","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49431:5376","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3646:5096":{"id":"2:3646:5096","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3648:56230"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12765:3232":{"id":"2:12765:3232","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12766:122","2:12767:1930"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13214:2264":{"id":"2:13214:2264","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15735:2948"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49109:5359","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13189":{"id":"2:13189","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12286:1311","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13190:771","2:13191:2033","2:13192:62164","2:13193:62165","2:13195:62166","2:13198:2688","2:13199:62167","2:13200:288","2:13201:58728","2:13202:1817","2:13204:58725","2:13206:58726","2:13208:58727","2:13210:4726","2:13211:62168","2:13212:58747","2:13213:58748","2:13214:2264","2:13215:2258","2:13216:4731","2:13217:33245","2:13218:33235","2:13219:5822","2:13220:62169","2:13221:33230","2:13222:1855","2:13225:58323","2:13228:58325","2:13231:2499","2:13235:4041","2:13239:57208","2:13242:33102","2:13245:58757","2:13248:62170","2:13251:62171","2:13254:58759","2:13257:58761","2:13260:62172","2:13263:62173","2:13266:3028","2:13269:62174","2:13272:62175","2:13275:62176","2:13278:62177","2:13280:62178","2:13282:62179","2:13284:62180","2:13285:62181","2:13286:62182","2:13289:62183","2:13292:15836","2:13295:58763","2:13298:62184","2:13301:1837","2:13304:62185","2:13307:1793","2:13309:4391","2:13310:4392","2:13311:4393","2:13312:4394","2:13313:62186","2:13315:3311","2:13316:62187"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5821:5539":{"id":"5:5821:5539","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5823:167","5:5824:34277"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10108:106":{"id":"2:10108:106","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10109:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2831:169":{"id":"2:2831:169","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2833:585","2:2834:885"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:22788:17283":{"id":"2:22788:17283","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22789:7798","2:22790:60681","2:22791:60682"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22781:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13204:58725":{"id":"2:13204:58725","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47181:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13311:4393":{"id":"2:13311:4393","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5555:4642":{"id":"1:5555:4642","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5556:57579","1:5557:3727"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13231:2499":{"id":"2:13231:2499","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47181:162","self::pattern":"2:12826:5109","prim@char":"1:15735:2948"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13284:62180":{"id":"2:13284:62180","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3179:196":{"id":"2:3179:196","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3316:4739":{"id":"2:3316:4739","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3318:167","2:3319:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:153:1777":{"id":"24:153:1777","crate_id":24,"name":"Token","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:160:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10322:138":{"id":"2:10322:138","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10323:695","2:10325:58286"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3681:3291":{"id":"2:3681:3291","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13248:62170":{"id":"2:13248:62170","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:8323:116","prim@char":"1:15735:2948","str::rsplit_terminator":"1:15741:2953","self::pattern":"2:12826:5109","str::split":"1:15741:2953"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49189:5364","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1075:2220":{"id":"1:1075:2220","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:1966","1:1077:4391","1:1078:2255","1:1079:2254","1:1080:4392","1:1081:4393","1:1082:4394"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3079:74":{"id":"2:3079:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3081:2148"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5635:4623":{"id":"1:5635:4623","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5636:6866","1:5637:57955","1:5638:57956"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3635:209":{"id":"2:3635:209","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3636:167","2:3637:5096","2:3638:666","2:3639:353"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3640:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8474:153":{"id":"2:8474:153","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8475:1772","2:8476:900","2:8477:4044","2:8478:478","2:8480:2087","2:8483:4045","2:8484:4046","2:8485:4047","2:8486:2024","2:8488:2553","2:8490:4048","2:8491:4049","2:8493:819","2:8496:4050","2:8503:2386","2:8505:2381","2:8508:1786","2:8509:2839","2:8510:4051","2:8512:4052","2:8514:4053","2:8517:1279","2:8518:2152","2:8519:4054","2:8523:1773","2:8526:1768","2:8527:4055","2:8528:4056","2:8530:4057","2:8531:1779","2:8533:4058","2:8536:4059","2:8538:4060","2:8548:4061","2:8563:4062","2:8565:4063","2:8569:4064","2:8578:2843","2:8581:4065","2:8583:4066","2:8586:261","2:8593:278","2:8600:2499","2:8607:4067","2:8616:4068","2:8626:993","2:8633:4069","2:8640:4030","2:8641:4027","2:8642:4032","2:8654:4031","2:8661:4029","2:8673:4028","2:8680:4070","2:8681:4071","2:8686:4072","2:8689:2102","2:8692:4073","2:8693:2844","2:8695:4074","2:8697:398","2:8700:4075","2:8703:976","2:8706:4076","2:8709:585","2:8712:4077","2:8715:885","2:8717:804","2:8719:770","2:8721:693","2:8723:676","2:8725:4078","2:8726:4079","2:8734:4080"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8348:3334":{"id":"2:8348:3334","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8349:771","2:8350:2033"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8474:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3431:128":{"id":"2:3431:128","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:167","2:3434:362"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6771:4598":{"id":"1:6771:4598","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6772:60161"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6345:4589":{"id":"1:6345:4589","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6346:4923","1:6347:4924","1:6348:57195","1:6349:60248","1:6351:60252","1:6353:60249","1:6354:60250","1:6356:60251"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:2858:3271":{"id":"24:2858:3271","crate_id":24,"name":"Peek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2740:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5817:5541":{"id":"5:5817:5541","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5819:167","5:5820:415"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13272:62175":{"id":"2:13272:62175","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15735:2948","self::pattern":"2:12826:5109","str::rmatch_indices":"1:15741:2953","`DoubleEndedIterator`":"2:8323:116"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49289:5368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3257:5017":{"id":"2:3257:5017","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3259:167","2:3260:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13245:58757":{"id":"2:13245:58757","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15741:2953","`DoubleEndedIterator`":"2:8323:116","prim@char":"1:15735:2948","self::pattern":"2:12826:5109"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49157:5335","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13295:58763":{"id":"2:13295:58763","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15735:2948","self::pattern":"2:12826:5109"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:2255":{"id":"5:6088:2255","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15741:2953"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3623:5447":{"id":"2:3623:5447","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3554:3231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13242:33102":{"id":"2:13242:33102","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15735:2948","self::pattern":"2:12826:5109"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12618:5332","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6073:62823":{"id":"5:6073:62823","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13218:33235":{"id":"2:13218:33235","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15741:2953"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49422:5375","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3252:3428":{"id":"2:3252:3428","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3254:167","2:3255:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13217:33245":{"id":"2:13217:33245","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15741:2953"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49413:5374","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1604":{"id":"0:0:1604","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[108,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.137\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: enum_variant_names, clippy ::\nmanual_map, clippy :: match_like_matches_macro, clippy ::\nneedless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_drop, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:1257:1589","0:1258:1598"]}},"1:5697:4627":{"id":"1:5697:4627","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5698:59988"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22639:4586":{"id":"2:22639:4586","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22629:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23482:5042":{"id":"2:23482:5042","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23483:5046"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23478:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3189:103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3554:3231":{"id":"2:3554:3231","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3556:60750","2:3557:60751","2:3558:1855"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:3332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13298:62184":{"id":"2:13298:62184","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15735:2948","self::pattern":"2:12826:5109"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13235:4041":{"id":"2:13235:4041","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15735:2948","`None`":"2:47181:162","self::pattern":"2:12826:5109"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13219:5822":{"id":"2:13219:5822","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49393:4676","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13307:1793":{"id":"2:13307:1793","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12765:3232","FromStr::Err":"2:12765:3232"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12765:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12765:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13198:2688":{"id":"2:13198:2688","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12297:5489"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13263:62173":{"id":"2:13263:62173","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13312:4394":{"id":"2:13312:4394","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6695:4638":{"id":"1:6695:4638","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6696:57199","1:6697:57904"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:4587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1257:1589":{"id":"0:1257:1589","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[90,0],"end":[95,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:13289:62183":{"id":"2:13289:62183","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12826:5109","prim@char":"1:15735:2948"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3290:5029":{"id":"2:3290:5029","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3292:540"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3278:3235":{"id":"2:3278:3235","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3280:251"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3268:3419":{"id":"2:3268:3419","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3270:167","2:3271:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6086:62825":{"id":"5:6086:62825","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:421:1771","`String`":"5:8341:201"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1771","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:4410","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12836:5110":{"id":"2:12836:5110","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12838:5112","2:12839:61587","2:12840:61588","2:12841:61589","2:12842:61591","2:12843:61590","2:12844:61592"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13282:62179":{"id":"2:13282:62179","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13206:58726":{"id":"2:13206:58726","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3189:103":{"id":"2:3189:103","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6066:62821":{"id":"5:6066:62821","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1771","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:4410","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1771","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:4410","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3718:4401":{"id":"2:3718:4401","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3082:145":{"id":"2:3082:145","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3084:1597"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:661:3325":{"id":"21:661:3325","crate_id":21,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:662:63176"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"1:10979:4644":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12221:7027":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:3195:6129":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13637:7420":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"12:2315:63055":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13978:7524":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4377:8328":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"24:5768:3105":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:0:471":{"crate_id":2,"path":["core"],"kind":"module"},"2:46416:5208":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:644:6321":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4459:8361":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"24:2144:4587":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"17:12671:7121":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"22:736:1581":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"2:37337:4026":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:23773:8780":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13780:7476":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:7403:115":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:2202:5568":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:49867:5389":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:3268:3419":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:49447:3312":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:7738:2060":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"24:5443:1780":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"20:63:3068":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"24:4929:3404":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"24:5425:1799":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"1:13825:4757":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"12:925:4811":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:51122:5092":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"24:2377:3211":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"6:4439:8354":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:569:7921":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:12063:4808":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:2496:2373":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"6:4095:8235":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10266:6212":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:50857:5091":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:9551:6193":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:161:40809":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:7803:5107":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:7420:5977":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:9648:6592":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"2:23826:8784":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:8348:3334":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"24:6226:1708":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"1:15733:2946":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"9:927:45747":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:7797:6559":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:51683:5093":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:11209:4608":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:47696:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:2779:3236":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:45717:4649":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13540:7396":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:11868:9172":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"0:1257:1591":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"24:2063:3267":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:11811:4757":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:14702:6602":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:11231:5341":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1723:8086":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:47377:164":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12712:7126":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:1459:4810":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:2912:6124":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:45985:5250":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:5312:8497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"24:6307:3146":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:50888:5079":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:48726:5529":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:932:63315":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"6:88:40742":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:53116:8947":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:4023:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:46425:5209":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:4512:4658":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:49004:5348":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:49863:5391":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:712:4026":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13564:7401":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:0:1302":{"crate_id":1,"path":["std"],"kind":"module"},"5:1678:5603":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:50993:5059":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:3392:6139":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"21:3201:1581":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:10052:47732":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:4734:7566":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"14:47:9436":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4387:8331":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:11331:4769":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4255:4921":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:45976:9143":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:46359:5199":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:10717:4587":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:8236:3247":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"24:5972:1860":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"17:12307:7042":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"21:1318:1788":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"16:4230:7553":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"9:234:5668":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:5522:8572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:4627:6551":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:2945:6147":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:3755:3368":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"24:5712:3092":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"1:3249:4869":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:46447:5211":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"24:2740:4587":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:4905:3402":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"6:4317:8297":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6491:6009":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:2456:6367":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:1908:42112":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:7545:2553":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:3756:3215":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:3313:3211":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12142:7016":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:32045:4247":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:13539:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"21:3290:3320":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"14:244:9122":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:49456:5378":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:50707:8882":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:5081:3414":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"21:661:3325":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"22:744:3320":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"2:45745:5223":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:24204:5418":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:10529:9080":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:10733:4683":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:46666:4226":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:11422:4781":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:46406:5207":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"24:4007:3378":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"24:5458:3083":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"6:4300:8288":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:607:47666":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"24:2864:6339":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"1:11221:4972":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:1596:8001":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5472:5851":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10420:6207":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:49918:5465":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"24:5093:3415":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"5:5077:640":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:3306:4738":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:11075:5334":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13272:7327":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:46267:5192":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11830:4759":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10574:1881":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:3978:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"22:874:2436":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:47282:3645":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"12:2018:4519":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:11015:47961":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"24:5421:3082":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"12:937:4815":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6682:5970":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:5975:5997":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13609:7412":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"12:2331:3246":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:632:7956":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:0:2919":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"24:968:2785":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:4931:2138":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10317:6210":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"24:5940:3127":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"12:1200:5775":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:13665:34280":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11231:6196":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:46675:9156":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:2108:559":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:32103:60424":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"16:5790:5869":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"20:296:2014":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"1:11978:4849":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:14335:9173":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"21:3310:1711":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"22:770:1788":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"12:2309:7798":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"24:3863:3372":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"1:5649:4625":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:46488:5161":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:9839:6225":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:9504:57433":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:12168:6816":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:9971:63070":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4395:8335":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"24:6128:1938":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:31864:5477":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"14:231:2251":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12247:7031":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:3365:5879":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:11159:6858":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"24:4223:3384":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"18:782:6713":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"12:1235:5776":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:11665:6920":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"12:877:4519":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:9296:6796":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11475:3211":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:14395:4668":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"21:3261:1788":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"7:0:1449":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:3207:4018":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:5705:4629":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:3743:6279":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"12:1118:4820":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:7119:5888":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:781:105":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:10945:4668":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:45587:181":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:2188:1761":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11794:6953":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10028:47730":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:4653:99":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10801:47855":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5420:8549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:4842:3398":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"2:10127:3302":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:9719:47676":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:1524:4817":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"21:3171:6338":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"1:11015:4608":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:2397:13106":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:14358:9181":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:6780:6016":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"12:2303:1711":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:50084:5397":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:24340:5421":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"24:3809:2109":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"24:5860:1747":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"1:12088:4832":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6252:6004":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"21:3275:3319":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"2:52002:5061":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:49261:5339":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8578:4930":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:3247:3234":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"22:0:1579":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"17:13041:7249":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:55809:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:10998:5332":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:4427:3211":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"24:6054:3137":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"5:0:262":{"crate_id":5,"path":["alloc"],"kind":"module"},"24:5028:3410":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"2:46345:9151":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:5436:8553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"9:603:9242":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"12:1762:6544":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:14858:9182":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:13799:7481":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:8238:5033":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:11845:4760":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:49883:117":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:7753:219":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:49189:5364":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11588:6909":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:15741:2953":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:11962:6984":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11822:6963":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"11:54:5763":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:6005:8638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:47654:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:46106:5511":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:3032:56872":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4127:8249":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:22364:4026":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:7182:57174":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:1549:91":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:0:2928":{"crate_id":17,"path":["object"],"kind":"module"},"17:12118:7014":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"24:2071:63312":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"1:1472:4521":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"24:4061:3379":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:49700:5124":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:3359:5566":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"24:916:63314":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"2:22411:61471":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:7894:5992":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:1665:8051":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:23718:8778":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"6:6644:8753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:53018:5089":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:739:63099":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:519:7890":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13331:7339":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"22:365:3225":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"1:10816:4801":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:14696:6601":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:9799:47678":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:3866:3267":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"8:0:2920":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"24:4999:3408":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:5002:3283":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"22:755:3319":{"crate_id":22,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"2:46014:5253":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"22:792:2436":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"16:4852:7570":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3623:5447":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:7406:5960":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:7928:2508":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"24:4709:3389":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"17:9162:6195":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"24:5792:3111":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"17:13402:7356":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4501:8377":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11304:47685":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"24:6376:2089":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"20:431:3831":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"16:5407:5845":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:14776:4760":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:3092:212":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6744:6161":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"24:5716:3093":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"5:5399:4658":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:49636:5122":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:8276:4779":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:50962:5071":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:9250:5110":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"20:305:2014":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"24:6373:2401":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:14010:4409":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:45752:3284":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:10254:9447":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"15:0:2926":{"crate_id":15,"path":["addr2line"],"kind":"module"},"22:1015:3210":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"5:3743:3211":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"24:6360:3158":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"24:5040:3411":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"12:2005:3211":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:909:93":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:2177:4734":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:14388:114":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"24:940:63318":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"24:2973:3254":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"17:13180:7300":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:46368:5204":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"22:780:1711":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"17:13429:7360":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:14320:4639":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"21:1219:3323":{"crate_id":21,"path":["proc_macro","bridge","client","Diagnostic"],"kind":"struct"},"6:3966:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:12845:5112":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:8079:4410":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"13:232:7797":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"24:964:3131":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"18:857:6314":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:3652:5099":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10611:47882":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4272:8275":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"15:230:5794":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:15229:5803":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:696:4181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:14037:4689":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"23:0:3050":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"5:7093:6559":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"24:2385:3213":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:3188:202":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:9528:2701":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:53076:8943":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9759:47677":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"21:1126:2436":{"crate_id":21,"path":["proc_macro","bridge","client","Literal"],"kind":"struct"},"16:4890:7571":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:1501:4814":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"24:5755:3102":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"2:47945:3297":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:12155:7019":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:11069:4615":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:11482:1724":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:6363:2159":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:10068:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"24:2971:1795":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"2:3179:196":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:8527:4927":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"21:3361:2436":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"2:46289:5193":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:45562:180":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:13213:4916":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:46377:5202":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:2754:5880":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"24:2858:3271":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"17:12659:7120":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:49438:5377":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:10487:4164":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"24:6385:2092":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"1:14866:4767":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:6644:6014":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:10121:3304":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:2159:3210":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:5159:8415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4307:4692":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"24:3208:6343":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"17:10516:6259":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:1736:8089":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:2362:581":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2190:4448":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"24:4767:3393":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"6:3862:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:15757:2967":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:1744:8093":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"21:0:1016":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:53057:5054":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:12211:6367":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:46120:5513":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:23740:5279":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13520:7390":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:5555:4642":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:11216:4969":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"24:5796:3112":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"1:3116:4666":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"12:866:4521":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:13630:173":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13062:7258":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:169:53997":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:49343:5371":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:45797:5292":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:8081:6575":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"17:12582:7101":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:55796:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:2360:3210":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"16:7884:5964":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:9476:6800":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:1507:4815":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7761:6031":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:13590:7407":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:10912:47949":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:2512:6209":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:47952:3304":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:3431:128":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11628:6914":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:2831:169":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"12:396:5779":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:13620:7413":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:9632:76":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:51074:8886":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"24:4025:2479":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"5:983:5596":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5167:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:24442:5423":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:24374:4171":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"13:120:45988":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:53096:8945":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"22:24:9187":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"12:892:5765":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:6964:3644":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:6636:8751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:15205:9034":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"24:5245:3426":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"6:605:7941":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:894:4178":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:11189:5338":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"24:3881:3373":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"1:1132:4650":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:5927:5874":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"24:5852:3125":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"5:1827:6546":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:3539:6573":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10530:12134":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:591:7933":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8948:4936":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4470:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13506:7383":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11186:9082":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:47248:3644":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:10678:4634":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:10115:115":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:13154:7294":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:3333:5004":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:2991:6136":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:24544:5425":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"20:357:2438":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"24:6316:3147":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"16:7185:6023":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12010:6994":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:4629:5172":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:14952:4722":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"12:1253:4822":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"12:2009:3210":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"21:156:4578":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"24:5848:3124":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"5:4226:6546":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"22:981:1724":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"5:5299:186":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:8474:153":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:7982:4698":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:50824:5058":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:14371:125":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:1642:4821":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"24:924:63319":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"9:809:4779":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:1428:3215":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:1224:5606":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:49125:2701":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"14:189:9436":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12568:7099":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:51923:5073":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5228:8447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:7856:6033":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:2537:5610":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:49725:5126":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:2458:13122":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:13359:13116":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:3218:6130":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:6032:5887":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"12:469:63050":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"24:5760:3103":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"16:6620:6154":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:10367:4737":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"12:1651:5785":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:7467:5958":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:9346:9446":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:10579:4644":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"17:12771:7134":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:3282:4835":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4347:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:46113:5512":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"24:6331:2161":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"24:6418:2158":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"17:10211:47743":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:15485:6603":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:5330:6795":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"12:853:4810":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:7786:5967":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:5057:3285":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:6457:4521":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:599:7938":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:5824:3118":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:46237:6565":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:5812:3115":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"1:14552:4643":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:3380:1761":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:6569:6156":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"21:202:4284":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"6:4410:8339":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"24:5777:3107":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"2:3398:112":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:13348:7344":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:829:6312":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5191:8433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:32004:4245":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:3085:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:10864:6844":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:4614:4669":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4164:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:10553:13111":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:3338:5878":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13865:7498":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:3145:6137":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:9128:3648":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"24:2988:3255":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"16:5346:5955":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"11:46:7802":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:14789:4832":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:15752:2962":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:5359:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:610:7943":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:24408:5422":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:11939:3210":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:46083:5510":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"24:4241:3385":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"1:9610:4896":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:55716:5227":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"24:3359:3353":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"1:3563:4677":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:5990:4911":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4293:8287":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10200:47744":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"24:2126:6342":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"20:117:1790":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"24:5840:3122":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"2:46172:5453":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10571:47880":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:52115:5050":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:23955:5439":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:4612:220":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9516:57439":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:5860:4970":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:47959:3305":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:13577:4766":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"24:5334:3553":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"16:5433:5847":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:7342:5989":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:2543:6255":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:53195:8952":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:21:652":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:5231:7576":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:23942:5440":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:22633:4584":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:51373:5067":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"21:3356:1724":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"1:14937:4721":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6614:8750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:4823:7569":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:2162:4521":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:3640:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:7195:6024":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:6120:1934":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:47308:191":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:13172:7299":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"24:5704:3090":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"1:10821:4685":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"24:5720:3094":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"12:2039:4735":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:11045:4614":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:11458:6882":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:0:2927":{"crate_id":16,"path":["gimli"],"kind":"module"},"22:865:1724":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"17:13760:7470":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10673:47884":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:7360:180":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6152:5956":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:11405:4780":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:23852:40061":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6424:6008":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"18:660:6322":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4241:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:13051:9442":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:24476:4764":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"24:3485:95":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"24:5856:3126":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"16:4417:7557":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:12541:124":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:47444:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9886:47679":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:45998:5251":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:754:63097":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:1554:7973":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4364:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:681:1805":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:47360:3215":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:7333:5975":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:3076:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4133:8251":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5221:8443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:3800:7551":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:14965:4728":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:9961:47681":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:5693:4621":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:10464:4153":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"0:0:1604":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"22:740:3225":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"22:986:2436":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"2:49207:5365":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"21:1286:2119":{"crate_id":21,"path":["proc_macro","bridge","client","Punct"],"kind":"struct"},"2:3350:4994":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:525:7893":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"24:3737:3367":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"1:11072:4616":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"24:3395:3355":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"24:5708:3091":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"6:4401:8336":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:10988:47935":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:4762:7567":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:3341:5008":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:8902:47667":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:2843:6122":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:4641:5173":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:5151:3419":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"17:10558:47879":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1690:8070":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:48229:104":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:3327:3425":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"24:2550:1967":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"1:11264:8638":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:10844:6225":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:5717:5863":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:4008:47857":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:670:41140":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:8149:5535":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:1633:4820":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:4995:7574":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:6326:5200":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5295:46093":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:5889:4974":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:10304:6594":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"12:1180:5774":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3953:191":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"24:5733:3097":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:12826:5109":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"24:2549:1967":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"17:12073:7007":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:49714:5125":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:10111:106":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:10699:125":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:3823:6546":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5371:8530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:8929:47668":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:50776:5078":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:11009:4676":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:4506:7560":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:3465:4402":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:12548:4862":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:4621:4672":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:10058:3301":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4101:8238":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:2431:4404":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4033:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:8170:3210":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"21:471:6540":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"16:4350:7555":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"12:1159:5773":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:50039:176":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:49243:5338":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:3325:5565":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:2213:4447":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:2794:5882":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:53142:8949":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:23874:40053":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:7228:172":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11434:6868":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"24:5257:3427":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:23757:9134":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:14:2568":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:6106:8670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"24:153:1777":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"6:3997:8190":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:5284:4902":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11045:47683":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"24:4825:3397":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"16:7158:6021":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"24:6044:1929":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"1:11172:4905":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:10081:6223":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11118:47684":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:47612:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:3290:5029":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:3955:123":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:2484:47775":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:11492:4785":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:1482:4519":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:12049:4745":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:3172:6128":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:8796:4226":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"12:976:4818":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:7863:6575":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:37313:164":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:4477:7559":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:47938:2207":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13933:7518":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:13386:7352":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:3235:4866":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:11860:4761":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:48491:5149":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:9130:3646":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5282:8474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:2761:5609":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11726:6934":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:3646:5096":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:10906:3211":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:8317:5572":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:13730:57431":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:2314:6215":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:1628:4810":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"24:5800:3113":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"16:6176:6001":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:9795:5319":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:3522:6725":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:9943:63087":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:46247:13722":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:46684:4287":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:6718:6159":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3113:4437":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:3284:92":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10279:6223":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:5742:3099":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"24:6048:3134":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"17:11337:6251":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:912:5595":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:23811:5275":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:2867:163":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:46659:9155":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:294:63080":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:11277:6860":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:13735:60485":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:820:6593":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:49115:5360":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:7378:5961":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:49058:5353":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:5029:7575":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:38494:4647":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13306:7330":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:48299:4109":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:5130:8391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:46437:5210":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"24:5127:3417":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"1:6698:4589":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:14565:4761":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:23383:4585":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:1669:180":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:12431:7079":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:12544:5366":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:49030:5350":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13446:7367":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:3251:4870":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:13752:4758":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:3732:156":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:23927:5482":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6221:8741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:51546:8894":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4193:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:22788:17283":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"9:157:5660":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:5868:4971":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:8223:3246":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:849:6313":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:22377:61457":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:3110:4863":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:1729:4915":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"24:6104:1729":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"2:45654:185":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:3028:3373":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:51319:5060":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:4157:6286":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:5459:8559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:7013:3635":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:13902:187":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"12:2025:4733":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:4273:4888":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:3935:4519":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:46276:4644":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:542:5890":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:2027:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8376:4846":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:3157:111":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:4385:4690":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:3719:3366":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"1:2765:4646":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"15:269:5799":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:9005:47669":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:11241:4922":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:53210:8953":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:3971:192":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"17:12408:7078":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:9065:47671":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"18:620:9074":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:11235:4903":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:46060:5509":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:6465:4714":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:9440:6799":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"20:191:3674":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"17:10962:47937":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10061:47746":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13119:7293":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:3905:8132":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:51840:5088":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:22409:61469":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:4073:8222":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:11481:4784":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"24:4958:3405":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:10125:175":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:46457:5212":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:11104:1788":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:11779:6947":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"24:6056:3133":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"17:10128:6293":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11915:6969":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:10955:4675":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:5753:5867":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:50021:187":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10377:6214":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4371:8325":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"24:4043:1739":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"1:5838:4968":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:52266:5074":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:8253:98":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3274:5023":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:1446:4821":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:3023:62041":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:3233:4422":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:10108:106":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:5400:8543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:3018:6126":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:11217:5340":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:7279:6172":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7843:6032":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:7146:6020":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"21:3295:1789":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"6:6881:8762":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"22:542:3225":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"6:4052:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"24:6334:3153":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:51421:5052":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2183:4735":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4262:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"12:840:4809":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:49847:5383":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:11227:4914":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8691:158":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:4079:2201":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:47402:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:11833:6571":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:11147:9171":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:5481:12139":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"24:5844:3123":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"16:6110:5994":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:1493:4812":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"12:747:3211":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:3257:5017":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:4480:4287":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:53272:8955":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:8369:4845":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:15758:2968":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:46139:5255":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:49859:5387":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"21:1302:1724":{"crate_id":21,"path":["proc_macro","bridge","client","Ident"],"kind":"struct"},"2:3483:2214":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:11733:5355":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:6214:8738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:51035:8885":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"24:1278:6355":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"6:5969:8622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:8849:6192":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:4535:7561":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:5871:6557":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:11555:6902":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:6870:8758":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:13627:7415":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12051:6998":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"24:5788:3110":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"5:5520:5551":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:610:1362":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:22392:61457":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"24:4888:3401":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"2:10239:60510":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:46704:9157":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:49748:9286":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"2:13841:4405":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"24:3647:3363":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"1:4557:4667":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4281:8280":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:12902:5116":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:14808:9033":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:3954:6546":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:5052:3412":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"1:14112:4164":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:12297:5489":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:2855:165":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"24:5461:3084":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"24:5832:3120":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:4866:3269":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:537:7898":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:22824:4587":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10656:6811":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:5643:4624":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"19:0:973":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:52932:5051":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:1647:4812":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:3604:6729":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:48475:4826":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:12632:7118":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:9368:6797":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"12:2323:7800":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:2320:3293":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:12234:7029":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:50031:8881":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:3487:3220":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"21:441:63156":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"12:1667:5786":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:45470:5102":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:1622:8017":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:3718:4401":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5386:8532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:48263:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:11890:9029":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:46468:4673":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"24:5110:3416":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"17:10938:47959":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:45546:182":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:11499:6887":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12725:7127":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:3939:7552":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:12456:7083":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:49422:5375":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"24:5348:2108":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"17:12373:7067":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10071:6296":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:53157:8950":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"24:5867:2214":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:32039:4246":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:6391:6007":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"24:4277:222":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"16:5855:5871":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:10996:2701":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:47239:3210":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:13851:5398":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:510:47665":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"21:1095:1711":{"crate_id":21,"path":["proc_macro","bridge","client","Group"],"kind":"struct"},"22:965:1787":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"1:11817:167":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:48530:9161":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:6746:4658":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:48512:4779":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:52080:5068":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"12:112:63053":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"9:41:5693":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:51398:5049":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:50753:5090":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:6769:4597":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"24:3083:3262":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"1:11945:4847":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:11161:4903":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:51809:5085":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4341:8309":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12946:7166":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6091:8666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:15759:2969":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:9729:63076":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:3892:8122":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:6107:4919":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"14:250:7752":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:10123:3305":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:22835:5046":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:11465:4782":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:584:7930":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9133:47673":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6072:5940":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:9264:6794":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:8749:4400":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:9129:3647":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:47368:3210":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:9280:6795":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13394:7354":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:744:63095":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11640:6917":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:10149:47679":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:1602:3210":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12756:7133":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:1760:8098":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11714:6931":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:22781:4587":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:3529:4682":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:8133:3210":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"3:0:413":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:52049:5065":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:10117:3297":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:7250:6029":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"24:5725:3095":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"17:13574:7404":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:3241:6131":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:7573:4756":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:2733:5881":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"9:900:7853":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:53233:8954":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:12494:7088":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:8436:4520":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"22:939:3226":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"24:3247:3210":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:10930:3215":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"9:27:5692":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"24:2801:6346":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:49871:5390":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"9:1020:5710":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8020:4165":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"6:4040:8207":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10929:4698":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:7971:123":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:10477:6256":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4494:8374":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:6691:6015":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:624:7951":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7226:6027":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11604:6910":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:3428:127":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:53131:8948":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:6864:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10140:6225":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12507:7089":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"12:0:2924":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:7686:4763":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:3220:3333":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"21:1157:3320":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:46397:5206":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"24:972:3132":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"24:5403:1797":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"17:9592:124":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:9809:63074":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6357:6006":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:24306:4170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:547:5865":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:48940:5343":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"24:6052:3138":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:4576:4658":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:15751:2961":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11042:4610":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:12598:7105":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"24:3953:3284":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"1:11872:57148":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"24:3521:102":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:3088:213":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:49139:4675":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:2866:6123":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:152:53996":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:5697:4627":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:5595:5858":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:837:5112":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"24:3204:191":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"2:46052:5378":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"24:2442:3215":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"1:6603:8649":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:13056:40342":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"17:11100:6202":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:3294:5031":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"24:3449:3358":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"17:12095:7008":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:6654:5551":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:4822:3295":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:2801:101":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"24:5764:3104":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"1:11002:4675":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:3878:5575":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:10725:4882":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:4199:4521":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"12:1688:5787":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:9643:6591":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"21:3340:1787":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:5528:757":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11030:123":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:8103:4521":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"22:846:1788":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"6:6085:8664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"24:3701:3365":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:2692:560":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:5428:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:511:1712":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:11254:6194":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:3184:3332":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:10435:47786":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:3118:6138":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:10057:191":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:3972:5155":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:49413:5374":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:50930:8884":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:49403:5373":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:7733:5234":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13240:7314":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:3990:8186":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13547:7397":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:3299:4995":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:9595:4895":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:12059:4807":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:4523:8387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:636:6713":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:7545:4754":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:4290:3215":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:2314:5607":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"7:38:45643":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"20:18:3067":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"16:5941:175":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:46039:5515":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:3422:2153":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:46159:5452":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:5086:3287":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:7303:6030":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:10811:4800":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4066:8219":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13453:7368":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12442:7081":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:13598:7408":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"24:6216:3142":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"16:2889:6142":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11075:4796":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:10372:5148":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:3617:4684":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:885:6316":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:4583:6549":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"21:3210:3314":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"1:8861:4805":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:12068:4831":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:5817:5541":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:22430:61472":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:11883:57191":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:48202:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"24:6350:3157":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:49519:5111":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6910:8769":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6731:6160":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13810:7482":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:3346:4735":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12982:7197":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:4596:3301":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:46478:5213":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:5185:8430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:10329:6596":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:5429:1800":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"17:299:63069":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10442:4587":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:10117:6292":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:1522:7960":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8298:5574":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"24:6083:2109":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"5:2246:5608":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"12:784:4812":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:4704:7565":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:23576:5413":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:772:207":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:15706:12138":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:49048:5352":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:11124:57152":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:11313:3636":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:3286:5027":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12195:7024":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6238:5959":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12028:6995":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:1700:8076":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"24:5747:3100":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"12:354:9124":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10489:6258":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:3287:6133":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"12:949:4816":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:24272:5420":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"24:3130:9456":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"6:5269:8468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:3320:4734":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:12034:4935":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:900:4179":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13356:7347":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:3772:7550":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:136:53995":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:1438:3210":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:1488:4811":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:8176:3210":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"24:6046:3135":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"1:10570:9443":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:4267:4886":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12783:7137":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:57131:8963":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:10887:6845":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:49109:5359":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"12:160:5777":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:1041:4167":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"24:5303:3430":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"1:8626:4939":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4046:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:1630:8022":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"24:6324:3150":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"1:3261:4875":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:9210:47674":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:45608:184":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:2274:3207":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"9:776:5690":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"18:766:6723":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:5707:5861":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"17:9034:47670":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6269:6005":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:9769:63082":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:51498:8893":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"9:0:2921":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:15745:2955":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:0:2929":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4112:8243":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:12856:5108":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:8352:5536":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:5766:4965":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:15749:2959":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:4325:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"14:194:46016":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:6227:4920":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:7337:171":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:11260:4637":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:2115:4244":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:10236:6191":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:45710:5101":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:3091:6185":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"9:1056:5703":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:9659:63072":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10224:47747":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:47300:174":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:1236:47745":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:5197:8434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"13:0:2918":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:4922:7572":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:3311:3949":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5998:8634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"22:823:1581":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:46077:3312":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:12567:5367":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:2395:13105":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:38557:4019":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"24:5870:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"17:10468:6257":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"24:3593:3361":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"1:7683:4762":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"24:1160:2014":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"5:1184:63003":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:48196:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:47231:3215":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"24:5808:3114":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"1:7915:4165":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:14345:4634":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:10599:47881":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:49851:5386":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:8055:3276":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"22:914:1788":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"18:729:6695":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"24:5291:3429":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"2:3185:3290":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:11923:3211":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"24:5470:3088":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"2:47214:1772":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"24:3917:3375":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"11:0:2923":{"crate_id":11,"path":["adler"],"kind":"module"},"1:15760:2970":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:3264:6132":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"24:5490:3086":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"2:3316:4739":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:13221:7313":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"14:11:9436":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:51602:8896":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"24:3413:3356":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"16:6014:5998":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12685:7122":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:6021:6121":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:50728:8883":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:15151:4909":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:3022:1966":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:5012:3284":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:7151:57174":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:7194:4521":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:6999:6018":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:4284:3210":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"24:5400:171":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"24:3503:2107":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"6:4431:8349":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"24:6050:3136":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"24:5209:3423":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"17:13746:7464":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:5820:3117":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"1:8177:4165":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"18:896:6317":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:47352:3211":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"9:963:5708":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:11738:6935":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:13733:7458":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12467:7084":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"24:5417:3081":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"12:774:3210":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:7593:4525":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:10788:47856":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:47570:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:6887:8763":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10001:47729":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13488:7379":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:4899:4606":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:2140:1029":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"24:5320:2429":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"17:13884:7503":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:50801:5070":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:46189:5454":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:11970:6986":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"24:6410:2106":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"1:10536:4741":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"24:6326:3151":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:51169:5080":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:5407:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11678:6921":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11001:47934":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"24:5945:2160":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"17:13465:7374":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:15070:4617":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5548:8587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:1497:4813":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:1886:2155":{"crate_id":2,"path":["core","mem"],"kind":"module"},"12:1100:4819":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:10936:4699":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:6518:6010":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:14971:4729":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:5876:4973":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:5505:5853":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:3108:124":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:9600:63084":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:12851:5113":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11767:6944":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:48211:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:49393:4676":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:3881:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:1591:3215":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12795:7144":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:15756:2966":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:45970:3312":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"24:2449:3217":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"2:48880:5337":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12521:7092":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13054:7256":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4517:8384":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5274:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:6670:5561":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:3467:1771":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:49663:5123":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:3189:103":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:52727:5082":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11406:6864":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:4733:3391":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"24:6339:3154":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"6:543:7901":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:5672:5860":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11572:6904":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"24:5772:3106":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"24:4784:3394":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"1:5635:4623":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13924:7514":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13532:7393":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10095:6290":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:2582:9444":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"6:1717:8083":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"9:722:5644":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:6858:8756":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12262:7034":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"24:5499:2156":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:22639:4586":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:1658:8047":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7453:5957":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"24:2306:3208":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"6:1533:7965":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:720:6714":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:10726:199":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:6768:5203":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"22:920:1789":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:9637:83":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:801:6309":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"12:968:4817":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:7804:5966":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:421:1771":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:13714:4756":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:2166:4519":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"12:181:5781":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10814:6282":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"12:2032:4734":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4511:8382":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:3908:4803":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:8088:3210":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:3354:4733":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:15739:2951":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:8335:8775":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"16:5632:5859":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"22:959:2119":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"16:6768:6163":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:51578:8895":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"24:160:4587":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"1:2723:4645":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:24578:5426":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13942:7520":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:6634:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:3957:8167":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12917:7146":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:1651:4822":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"22:856:1711":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:49875:5384":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:3197:2357":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:45677:3240":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"10:0:2922":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"24:5426:1796":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"2:55861:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49879:5385":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"22:935:1711":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"6:5528:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:15214:57997":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:1018:4165":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:6344:3155":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"1:5561:4640":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"24:6302:3145":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"24:1271:6353":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"9:692:5643":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:4499:5587":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"21:3214:3210":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:13497:7382":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11932:6975":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"24:454:63313":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"5:8271:5570":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"20:193:3673":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"17:12327:7043":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:45631:183":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:8752:5105":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:14763:4759":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:1584:7993":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"24:3899:3374":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:8951:4749":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:49557:5117":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"20:44:4587":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"16:3064:6184":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:5066:3286":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:55822:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:5857:6554":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"24:5990:2406":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"17:10253:6213":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5522:5854":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:3635:209":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:49361:5372":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:13554:7398":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11947:6979":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11026:47682":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:1000:3211":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:10160:6806":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"24:4813:3396":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"1:10957:4670":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:1530:4818":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:157:40808":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:6636:5973":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"24:6322:3149":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"5:6393:208":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"24:3015:2710":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"5:8111:5598":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:53180:8951":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:14405:57150":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:46317:5196":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:48931:5342":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13582:7405":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:11809:6959":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:11700:5354":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"24:2189:1718":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"1:6345:4589":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:3187:203":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11358:6250":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:10041:47731":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:2968:6125":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10926:47958":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"21:3148:3324":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"1:10515:12131":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:4641:7563":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:14000:7530":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"18:820:6311":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:4683:6551":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"21:3315:3226":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"5:1658:4813":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:5393:3079":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"6:5210:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:3945:8165":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:49905:4836":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:12054:4941":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:3549:7548":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:8954:6254":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6893:8764":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:6367:4592":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5314:6794":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:3868:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:10975:47936":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:6605:5971":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13986:7527":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:13450:2097":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:13258:7322":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6923:8770":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6185:8724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:10741:3267":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:50128:4408":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:9574:6201":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:15735:2948":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"24:5139:3418":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"6:1527:7962":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:10950:47960":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:49571:5120":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:48958:5345":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:9404:6798":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:52616:5062":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:15240:5803":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"24:6088:3140":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"1:1075:2220":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:9689:63073":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:22432:61474":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:5492:3085":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"2:46298:5194":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"12:2013:4521":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5987:8629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"24:4259:3386":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"1:1149:12133":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:14680:6600":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:10403:6221":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"24:4941:120":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:24510:5424":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"18:866:6315":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5563:8598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:774:6713":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:9896:63071":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"24:2875:6341":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"6:6155:8707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:6861:4594":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"24:5069:3413":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:11199:6859":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:5969:2074":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"14:216:46022":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:1415:3211":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:2816:6141":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:22629:4587":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:7815:4163":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"24:4796:3395":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:51446:5053":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:4151:1761":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"17:11328:7134":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13318:7333":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4425:8346":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"24:3377:3354":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"18:811:6310":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6176:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5945:8605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:1540:7968":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:4671:7564":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"12:2045:1761":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"24:4205:3383":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"3:300:191":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:4790:7568":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:3041:6127":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:10407:6208":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:650:6318":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:5815:5870":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:6399:5201":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"22:909:1581":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:50075:5396":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:49017:5349":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6554:6011":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6166:6000":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:8341:201":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5292:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:11286:4596":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"24:658:6693":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"2:5109:3288":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:1430:4819":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"24:3791:3370":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"17:9186:6253":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"24:5804:1989":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"5:1581:3211":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:8119:61693":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:2877:170":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"24:5700:3089":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"6:6812:8754":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4083:8229":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"24:4115:1708":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"24:4097:209":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"17:10331:6225":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:1157:12136":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"24:5464:1741":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"2:49588:5121":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:13938:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:49082:5456":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:1572:7984":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:53105:8946":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"24:2053:3268":{"crate_id":24,"path":["syn","buffer","TokenBuffer"],"kind":"struct"},"2:10129:3303":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:13589:60439":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:1446:4809":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:10827:6283":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:15734:2947":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:22833:5047":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"21:3335:2119":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:48968:5346":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:1518:4816":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2836:120":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"24:1274:6354":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"1:7511:4752":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:3918:8142":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:23890:40062":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:4940:3278":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:48978:5347":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"21:396:4558":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"24:4663:3234":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"16:5273:5885":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:9649:47675":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:49097:5232":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:23834:8785":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:12108:4833":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:6239:4525":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:6767:4595":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6028:8656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:8268:4165":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"17:11616:6913":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:13192:7305":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:10448:6243":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10304:6211":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"24:6319:3148":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"17:11993:6991":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"12:812:4813":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13477:7375":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12343:7048":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"22:717:3267":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"24:5406:1798":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"16:3506:6134":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:531:7896":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:1563:7978":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:9738:6593":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:15738:2950":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:7628:4758":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"24:3827:2435":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"24:3257:3211":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"1:2852:166":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:47181:162":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:6899:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:6607:8653":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:47486:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"24:6414:3159":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"22:832:9070":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"16:5736:5864":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:13378:57440":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:7571:5953":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:3440:4681":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:704:6713":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"24:5918:2416":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"2:2004:4658":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:8242:5035":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4358:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:10469:4162":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"21:1188:3325":{"crate_id":21,"path":["proc_macro","bridge","client","MultiSpan"],"kind":"struct"},"24:5362:1711":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:12552:7098":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:15130:4902":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:24238:5419":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:12583:5370":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"24:6124:1936":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"24:2146:6698":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:3082:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:7355:3210":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"24:4871:3400":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"24:6347:3156":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"20:528:3945":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"16:5580:5857":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"24:3683:126":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"21:1033:4571":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:50911:5083":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:10119:2207":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"24:6131:3141":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:55835:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3262:3398":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"24:5781:3108":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:49289:5368":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:3014:4990":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"24:5958:2408":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:3278:3235":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:2204:4991":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:1923:4519":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"21:3064:1789":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:32051:60425":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:8534:4929":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:15736:2949":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"24:5784:3109":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"16:5766:5868":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11653:6919":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13819:7484":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:14034:4693":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:4448:7558":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13205:7310":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:55874:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:47:2786":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"2:5309:5506":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:45498:4403":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:6593:4625":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:49307:5369":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:45738:2508":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"24:4859:3399":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"16:6208:6002":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:783:6593":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:11167:4904":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:1708:8077":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:1475:4822":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7174:6022":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:4013:8195":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"24:299:1724":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"1:6771:4598":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:1311:6297":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3321:3423":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:1302:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"22:837:54225":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"1:14340:9175":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12287:7036":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"24:2872:1793":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"2:3681:3291":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:9088:47672":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:15753:2963":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"24:6356:3144":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"1:5406:4909":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:3429:5883":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:1547:7970":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:11981:6989":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:51055:5048":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:5683:4626":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:5421:5846":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"24:5828:3119":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"1:10668:4712":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:6935:8772":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"22:786:1724":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"16:7205:6025":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4060:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:3252:3428":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"9:1075:5711":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:11965:4848":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:5456:5848":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:8288:3335":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:6852:8755":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12182:7023":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:8323:116":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:69:4411":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:1080:6546":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:5627:4622":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:10543:6848":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"24:3665:3364":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"5:8419:4519":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:7631:5159":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:1204:5605":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:8279:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"21:3206:3225":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"24:2333:3209":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"2:52473:5094":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:11847:6967":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12208:7026":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:47291:4417":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:10717:114":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"24:5233:3425":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"9:686:5641":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"24:4169:3381":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"24:5836:3121":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"6:6051:8657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"24:4970:3406":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"17:13685:7457":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6124:8681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6087:5954":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:49855:5388":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:15755:2965":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:5978:8628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:9790:5318":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:13898:6599":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:10502:9079":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:15747:2957":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:3024:8774":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"24:3773:3369":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:9024:3640":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:3425:126":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:47528:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:10332:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:13554:146":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:8362:188":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"24:6353:3143":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"2:57110:8962":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:15740:2952":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:7549:5965":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:375:4413":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:3664:5100":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"24:3431:3357":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:13282:7328":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:6328:3152":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"24:5729:3096":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"1:12550:6598":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:23647:5415":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:55848:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11378:6249":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"24:5387:2060":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"6:5241:8456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:5893:2157":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:24948:5257":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12385:7069":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:15750:2960":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:47780:89":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13296:7329":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:1602:8003":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:610:6319":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:3972:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:3472:4519":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:4419:8345":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6100:8669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6413:5791":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"18:667:6323":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:694:6324":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"24:5737:3098":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"1:11994:4850":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:4539:4636":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"21:259:63173":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"16:7514:5976":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:11039:4609":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"16:5384:5844":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:4383:4689":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:50098:154":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:46388:5205":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10458:6707":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:4305:4691":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6219:6003":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:27759:5038":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:578:7927":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:10685:4635":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"12:1855:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:3191:205":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:6936:5545":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11519:6897":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:11148:5336":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:51016:5063":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"21:1577:177":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"17:12645:7119":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:52869:5086":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:49431:5376":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13370:7349":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5469:8561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"12:556:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"24:4692:3388":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:8813:4949":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"6:5379:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10353:6216":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:48315:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:616:7946":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6136:5995":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:46693:8869":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:23920:9137":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:11931:4844":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"19:117:6709":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"5:1619:4809":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"12:377:5780":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:4120:8247":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"24:4982:3407":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"24:5963:2411":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"6:6239:8744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:4346:4694":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"24:4750:3392":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"12:429:5778":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:5360:5843":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4145:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:3951:8166":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:9222:4583":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:6591:6013":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"24:2628:2438":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"6:563:7918":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:3488:6135":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:46336:5198":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:23798:5274":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:8727:57177":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:10322:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:3337:5006":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"24:6370:171":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"16:7870:5963":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:6406:2104":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"2:52979:5069":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:5281:4901":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:4386:7556":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:15092:4901":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:6366:5792":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4005:8192":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"9:469:9232":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"24:3557:111":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"24:5888:1732":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:53085:8944":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"24:6003:1800":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"24:5438:1738":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"24:3342:3431":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"21:2753:4553":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"24:661:63211":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"24:4680:3387":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"2:49039:5351":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:8141:180":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"24:176:4086":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"2:3554:3231":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11147:9081":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:5772:6546":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7073:6019":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"21:1591:9071":{"crate_id":21,"path":["proc_macro","bridge","handle","NonRandomState"],"kind":"struct"},"2:46307:5195":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11539:6898":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:4955:7573":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:23482:5042":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:790:6308":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:15717:57149":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4215:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:7236:6028":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:2776:94":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:2773:6148":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4270:4887":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:51200:5084":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"7:85:45650":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"24:5180:3421":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"17:13377:7351":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:12618:5332":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:7823:5968":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:47223:3211":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:6695:4638":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:49735:5127":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"24:3845:3371":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:48522:9160":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:4183:8262":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:15754:2964":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"20:0:1045":{"crate_id":20,"path":["quote"],"kind":"module"},"17:9849:63081":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"21:68:4557":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"1:10989:4673":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:11037:5333":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:7042:6171":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"24:0:1578":{"crate_id":24,"path":["syn"],"kind":"module"},"5:1637:4811":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:7264:5972":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"24:3575:3360":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"17:12040:6997":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:4605:59952":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4203:8264":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"24:5192:3422":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"1:15746:2956":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6068:8659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"24:6401:2417":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:46327:5197":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:10443:4180":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:2294:5622":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:46029:5514":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:11110:5335":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:14921:4720":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:15748:2958":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:51223:5087":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:6605:8651":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:10635:6809":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:48722:5530":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:677:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:8303:5571":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"24:5923:3128":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:46099:5377":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"24:5168:3420":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"17:9332:6248":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:5502:5170":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11835:6964":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4306:8291":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:4935:3277":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7392:5962":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10584:6285":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6807:6017":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:15742:2954":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:4304:7554":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:7615:4526":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:48500:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:12273:5525":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13912:7512":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"24:3206:123":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"17:11750:6936":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6949:6167":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:9059:57177":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"24:5011:3409":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"24:3103:3266":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"16:6126:5999":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:3079:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:5953:8610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"24:161:4093":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"5:7822:6563":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"24:5995:3130":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"24:5274:3428":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"1:12010:4851":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:5414:8546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11696:6930":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12275:7035":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:2184:6548":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:0:776":{"crate_id":6,"path":["libc"],"kind":"module"},"24:4187:3382":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"24:5999:3129":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"1:6839:4599":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:5488:5852":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:4:958":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:7477:5978":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:7559:4755":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13098:7288":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:3013:4587":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:5821:5539":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"21:1064:1581":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:4917:3403":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"12:1144:4821":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:7295:5974":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:6520:61580":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:10106:6291":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:52806:5066":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12699:7125":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:1461:4820":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"24:3611:3362":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"16:5960:5876":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13163:7298":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"12:463:63054":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:15701:9253":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:3714:7549":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:8364:5537":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:49157:5335":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:7525:4753":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"12:761:3215":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:51350:5064":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:48241:123":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"24:2969:1794":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"24:5494:3087":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"1:14828:4831":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"24:66:1961":{"crate_id":24,"path":["syn","token"],"kind":"module"},"17:9245:6204":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:2433:13116":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"24:5751:3101":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"24:956:63317":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:13788:7477":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:7426:6546":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:10546:4823":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:2155:3211":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"14:0:2925":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:51762:5081":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:1619:4819":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4449:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:22692:5046":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:47738:82":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:46154:97":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:10243:1805":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:9473:6589":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6577:6012":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"12:930:4814":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11082:6200":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:1617:8015":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"24:4133:3380":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"0:1258:1599":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"6:5255:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:8275:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:5561:5856":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:6098:1582":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"17:13898:7505":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:8286:5453":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12610:7107":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13963:7523":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:23478:4587":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"9:749:5645":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:48483:9159":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:48178:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:11203:5339":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:48949:5344":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:3411:3292":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"14:56:1724":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:12480:7086":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13772:7473":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:12507:5363":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:4614:7562":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:4786:3294":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"24:3989:3377":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"16:7024:6170":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:10673:4862":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:12765:3232":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:2171:4733":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"24:3935:3376":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"1:1152:12135":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:9933:47680":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:3320:6186":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:10454:57998":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:6464:5969":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"24:4721:3390":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"21:3162:3323":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"2:51272:5072":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:3345:5010":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"24:5816:3116":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"9:996:5709":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:4344:4693":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:6200:8729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:4684:4399":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"15:248:5795":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:5911:2375":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"17:12537:7094":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:11382:4779":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"24:3629:1737":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:32203:60421":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:12741:7129":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:5996:1754":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4331:8303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:4173:4700":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"16:7216:6026":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:9511:6590":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:3906:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:4478:8369":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13842:7497":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6101:5952":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:8756:5106":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:5347:8518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:1190:12137":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:2565:123":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"1:14031:4691":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:7239:6546":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"24:5221:3424":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"5:8094:5597":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:12836:5110":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"24:3539:3359":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"24:5399:1796":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:7820:57430":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:14548:9443":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:10623:47883":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4227:8266":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:1676:8059":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:8039:60498":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:50116:4648":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10179:6808":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"24:948:63316":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:49542:5114":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"}},"external_crates":{"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.20/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.40/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.98/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"unicode_ident","html_root_url":null},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"}},"format_version":15}