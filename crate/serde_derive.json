{"root":"0:0:1635","crate_version":"1.0.140","includes_private":false,"index":{"2:9240:3679":{"id":"2:9240:3679","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5823:4742":{"id":"1:5823:4742","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5824:60203"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3262:217":{"id":"2:3262:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7829:4859":{"id":"1:7829:4859","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7830:60333"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13478:62989":{"id":"2:13478:62989","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13018:5121","prim@char":"1:15939:2979"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13048:5125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:1996","5:785:1869","5:786:4110"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22902:4775":{"id":"2:22902:4775","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22892:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22713:5240":{"id":"2:22713:5240","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22714:5241","2:22715:61924","2:22716:62356","2:22717:62357","2:22718:62358","2:22719:44588","2:22720:62359","2:22721:62360","2:22722:62361","2:22723:62362","2:22724:62363","2:22725:62364","2:22726:62365","2:22727:62366","2:22728:10278","2:22729:62367","2:22730:61964","2:22731:9607","2:22732:61676","2:22733:61675","2:22734:61677","2:22735:61925","2:22736:61926","2:22737:61927","2:22738:61928"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3390:4791":{"id":"2:3390:4791","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3392:181","2:3393:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8380:136":{"id":"2:8380:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8382:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3153:74":{"id":"2:3153:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:2178"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1282:1735","glob":false}},"2:13502:4441":{"id":"2:13502:4441","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2969:1825":{"id":"24:2969:1825","crate_id":24,"name":"Parse","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2970:1824"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3724:5189":{"id":"2:3724:5189","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3726:57461"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8428:120":{"id":"2:8428:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8429:4063","2:8430:4064","2:8431:4065","2:8432:4066","2:8436:4067","2:8439:4068"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3419:5098":{"id":"2:3419:5098","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22839:5242":{"id":"2:22839:5242","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22840:5241","2:22841:1245","2:22842:1270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3253:211":{"id":"2:3253:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13490:62991":{"id":"2:13490:62991","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13018:5121","prim@char":"1:15939:2979"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13408:4902":{"id":"2:13408:4902","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49393:2730","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3718:137":{"id":"2:3718:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3720:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3360:5171":{"id":"2:3360:5171","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3362:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1258:1629":{"id":"0:1258:1629","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[99,0],"end":[104,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:13461:62981":{"id":"2:13461:62981","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8428:120","self::pattern":"2:13018:5121","str::matches":"1:15945:2984","prim@char":"1:15939:2979"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49629:5458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13437:58618":{"id":"2:13437:58618","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13018:5121","prim@char":"1:15939:2979","str::split":"1:15945:2984","`DoubleEndedIterator`":"2:8428:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49425:5421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22766:5310":{"id":"2:22766:5310","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22767:5241","2:22768:61924","2:22769:1225","2:22770:1226","2:22771:44588","2:22772:61961","2:22773:10443","2:22774:61962","2:22775:61963","2:22776:61964","2:22777:61925","2:22778:61926","2:22779:61927","2:22780:61928","2:22781:61929","2:22782:61930","2:22783:61931"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10287:3337":{"id":"2:10287:3337","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10288:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13446:58620":{"id":"2:13446:58620","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13018:5121","prim@char":"1:15939:2979","str::rsplitn":"1:15945:2984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49511:5424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10283:2237":{"id":"2:10283:2237","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10284:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12465:5603":{"id":"2:12465:5603","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12466:1803","2:12467:2938"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13412:62976":{"id":"2:13412:62976","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49671:5459","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3759:3323":{"id":"2:3759:3323","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:9239:3680":{"id":"2:9239:3680","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13499:1824":{"id":"2:13499:1824","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12957:3264","`FromStr`":"2:12957:3264"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12957:3264","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12957:3264","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13383:2063":{"id":"2:13383:2063","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13476:62987":{"id":"2:13476:62987","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5681:4768":{"id":"1:5681:4768","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5682:58258","1:5683:3756"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2850:3268":{"id":"2:2850:3268","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2852:2177"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13404:58608":{"id":"2:13404:58608","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15945:2984"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8453:3366":{"id":"2:8453:3366","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8454:793","2:8455:2063"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:60859","1:2579:2962","1:2580:60858","1:2581:60860","1:2582:59935"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10272:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3380:4790":{"id":"2:3380:4790","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:181","2:3383:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23099:5252":{"id":"2:23099:5252","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23736:5184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23090:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6105:4720":{"id":"5:6105:4720","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13402:4897":{"id":"2:13402:4897","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15945:2984","crate::ops::Index":"2:3561:2244","str::slice_mut_unchecked":"1:15945:2984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3713:224":{"id":"2:3713:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3714:181","2:3715:5189","2:3716:686","2:3717:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3718:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5831:4744":{"id":"1:5831:4744","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5832:6943"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13403:62975":{"id":"2:13403:62975","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15945:2984","crate::ops::IndexMut":"2:3565:3251","`str`":"1:15945:2984"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13392:304":{"id":"2:13392:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15956:2993","str::as_mut_ptr":"1:15945:2984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:808:3357":{"id":"21:808:3357","crate_id":21,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:809:64255"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13481:62990":{"id":"2:13481:62990","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13018:5121","prim@char":"1:15939:2979"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2628:2467":{"id":"24:2628:2467","crate_id":24,"name":"Spanned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2629:2067"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3348:5167":{"id":"2:3348:5167","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8860:4449":{"id":"2:8860:4449","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13407:2288":{"id":"2:13407:2288","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15939:2979"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49383:5446","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:18:3098":{"id":"20:18:3098","crate_id":20,"name":"TokenStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:19:9252","20:21:64227","20:23:64228","20:26:64229"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:44:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3331:5161":{"id":"2:3331:5161","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:181","2:3334:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13405:58609":{"id":"2:13405:58609","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15945:2984"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3500:2183":{"id":"2:3500:2183","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3501:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10293:3335":{"id":"2:10293:3335","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10294:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13382:793":{"id":"2:13382:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15939:2979"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13458:3059":{"id":"2:13458:3059","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13018:5121","prim@char":"1:15939:2979","`DoubleEndedIterator`":"2:8428:120","str::matches":"1:15945:2984"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49611:5457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10520:146":{"id":"2:10520:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10521:652","2:10522:2597","2:10523:59949","2:10524:59950","2:10525:59951","2:10526:59952","2:10527:59953","2:10528:59954","2:10529:59955","2:10530:59956","2:10531:59957","2:10532:59958","2:10533:59959","2:10534:59960","2:10535:59961","2:10536:1530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13496:62992":{"id":"2:13496:62992","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13018:5121","prim@char":"1:15939:2979"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3509:132":{"id":"2:3509:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3511:181","2:3512:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3088:5060":{"id":"2:3088:5060","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3087:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:1079:2250":{"id":"1:1079:2250","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:1996","1:1081:4440","1:1082:2285","1:1083:2284","1:1084:4441","1:1085:4442","1:1086:4443"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13406:2294":{"id":"2:13406:2294","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15939:2979"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49377:5445","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:63617":{"id":"5:6084:63617","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1802","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4459","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1802","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4459","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[23,0],"end":[23,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:1286:1832","glob":false}},"24:2875:6418":{"id":"24:2875:6418","crate_id":24,"name":"Speculative","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2876:64348"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6107:2284":{"id":"5:6107:2284","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15945:2984"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6993:4751":{"id":"1:6993:4751","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6994:60108"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5761:4738":{"id":"1:5761:4738","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5762:6943","1:5763:58400","1:5764:58401"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13398:58587":{"id":"2:13398:58587","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:4742:4696":{"id":"1:4742:4696","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4743:58093","1:4744:58094","1:4745:58095","1:4747:4695","1:4748:58096","1:4750:58097","1:4751:5898"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4660:4676","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2910:124":{"id":"2:2910:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6085:1985":{"id":"5:6085:1985","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:117:1821":{"id":"20:117:1821","crate_id":20,"name":"ToTokens","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:118:2457","20:119:2199","20:120:1843"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3352:3267":{"id":"2:3352:3267","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13396:58586":{"id":"2:13396:58586","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47440:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3166:227":{"id":"2:3166:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:127","2:3169:1413"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2951:184":{"id":"2:2951:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2953:997","2:2954:826","2:2955:792","2:2956:713","2:2957:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3561:2244":{"id":"2:3561:2244","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3563:181","2:3564:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3261:218":{"id":"2:3261:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3162:228":{"id":"2:3162:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3164:127","2:3165:1414"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6719:4736":{"id":"1:6719:4736","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6720:60148","1:6721:8715","1:6722:8716","1:6723:8718","1:6724:8717","1:6725:8719","1:6726:8720","1:6727:8722","1:6728:6984","1:6729:8725","1:6730:8726","1:6731:8727","1:6732:8728","1:6733:8729","1:6734:8730","1:6735:8723","1:6736:8724"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13484:9874":{"id":"2:13484:9874","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15939:2979","self::pattern":"2:13018:5121"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3326:3460":{"id":"2:3326:3460","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3328:181","2:3329:1353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12957:3264":{"id":"2:12957:3264","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12958:126","2:12959:1960"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3321:3266":{"id":"2:3321:3266","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3323:181","2:3324:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13394:1848":{"id":"2:13394:1848","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47440:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1635":{"id":"0:0:1635","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.140\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_drop, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:1257:1620","0:1258:1629"],"is_stripped":false}},"2:3701:5520":{"id":"2:3701:5520","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3632:3263","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13423:2528":{"id":"2:13423:2528","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13018:5121","prim@char":"1:15939:2979","`None`":"2:47440:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10289:189":{"id":"2:10289:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10290:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1338","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:63617","5:6085:1985","5:6088:63618","5:6091:63619","5:6103:63620","5:6104:63621","5:6105:4720","5:6106:2285","5:6107:2284"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13472:62985":{"id":"2:13472:62985","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13470:62984":{"id":"2:13470:62984","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5833:5613":{"id":"5:5833:5613","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13455:62980":{"id":"2:13455:62980","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:153:1808":{"id":"24:153:1808","crate_id":24,"name":"Token","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:160:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3632:3263":{"id":"2:3632:3263","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:62762","2:3635:62763","2:3636:1885"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10281:3329":{"id":"2:10281:3329","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10282:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6591:4779":{"id":"1:6591:4779","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6592:60196","1:6593:60197"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13731:138":{"id":"2:13731:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13732:181","2:13733:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8393:3367":{"id":"2:8393:3367","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8395:2131","2:8397:4069","2:8398:4070"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13387:62973":{"id":"2:13387:62973","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15945:2984"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:601:1740":{"id":"0:601:1740","crate_id":0,"name":"symbol","span":{"filename":"src/internals/symbol.rs","begin":[1,0],"end":[68,1]},"visibility":{"restricted":{"parent":"0:7:1611","path":"::internals"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1311:1836"],"is_stripped":true}},"2:13440:62977":{"id":"2:13440:62977","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15939:2979","`DoubleEndedIterator`":"2:8428:120","self::pattern":"2:13018:5121","str::rsplit_terminator":"1:15945:2984","str::split":"1:15945:2984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49457:5450","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10272:109":{"id":"2:10272:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10273:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6091:63619":{"id":"5:6091:63619","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3231:115":{"id":"2:3231:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3232:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3368:5175":{"id":"2:3368:5175","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4035:4671":{"id":"2:4035:4671","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4036:59935"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13449:58622":{"id":"2:13449:58622","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13018:5121","str::splitn":"1:15945:2984","prim@char":"1:15939:2979"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49529:5425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3489:3324":{"id":"2:3489:3324","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3490:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3476:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6103:63620":{"id":"5:6103:63620","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10914:214":{"id":"2:10914:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10916:181","2:10917:1848","2:10918:58586","2:10919:58587","2:10920:58588","2:10921:753","2:10922:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10905:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22802:5104":{"id":"2:22802:5104","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22803:61924","2:22804:1225","2:22805:1226","2:22806:61925","2:22807:61926","2:22808:61927","2:22809:61928","2:22810:61929","2:22811:61930","2:22812:61931"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3159:135":{"id":"2:3159:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3161:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13477:62988":{"id":"2:13477:62988","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14204:4458":{"id":"2:14204:4458","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14205:58280","2:14206:58281","2:14207:58282","2:14208:58283","2:14209:58284","2:14210:58285","2:14211:4085"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10555:4789":{"id":"2:10555:4789","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10556:146","2:10557:9970","2:10558:61104"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4717:3333":{"id":"1:4717:3333","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4718:2597","1:4719:61307","1:4721:61308","1:4722:5822","1:4723:61309","1:4724:9918","1:4725:58373","1:4734:4085"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3356:4887":{"id":"2:3356:4887","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3358:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13048:5125":{"id":"2:13048:5125","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6106:2285":{"id":"5:6106:2285","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15945:2984"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10279:119":{"id":"2:10279:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10280:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23427:5243":{"id":"2:23427:5243","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23428:1268","2:23429:1267","2:23430:1265","2:23431:1264"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22839:5242","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6895:4763":{"id":"1:6895:4763","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6896:60124"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3294:3365":{"id":"2:3294:3365","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3385:3978":{"id":"2:3385:3978","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3387:181","2:3388:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13467:62983":{"id":"2:13467:62983","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15939:2979","`DoubleEndedIterator`":"2:8428:120","self::pattern":"2:13018:5121","str::match_indices":"1:15945:2984"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49575:5455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13443:62978":{"id":"2:13443:62978","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:15945:2984","str::split":"1:15945:2984","self::pattern":"2:13018:5121","prim@char":"1:15939:2979"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49475:5451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13464:62982":{"id":"2:13464:62982","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8428:120","str::rmatch_indices":"1:15945:2984","prim@char":"1:15939:2979","self::pattern":"2:13018:5121"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49557:5454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2858:3303":{"id":"24:2858:3303","crate_id":24,"name":"Peek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2740:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3265:220":{"id":"2:3265:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6104:63621":{"id":"5:6104:63621","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:1802"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1802","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4459","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:504":{"id":"0:504","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:480:1736","glob":false}},"2:8582:157":{"id":"2:8582:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8583:1803","2:8584:922","2:8585:4071","2:8588:4072","2:8589:495","2:8591:2117","2:8594:4073","2:8595:4074","2:8596:4075","2:8597:2054","2:8599:2582","2:8601:4076","2:8602:4077","2:8604:841","2:8607:4078","2:8614:2415","2:8616:2411","2:8619:1817","2:8620:2870","2:8621:4079","2:8623:4080","2:8625:4081","2:8628:1306","2:8629:2182","2:8630:4082","2:8634:1804","2:8637:1799","2:8638:4083","2:8639:4084","2:8641:4085","2:8642:1810","2:8644:4086","2:8647:4087","2:8649:4088","2:8659:4089","2:8674:4090","2:8676:4091","2:8680:4092","2:8689:2874","2:8692:4093","2:8694:4094","2:8697:276","2:8704:294","2:8711:2528","2:8718:4095","2:8727:4096","2:8737:1014","2:8744:4097","2:8751:4057","2:8752:4054","2:8753:4059","2:8765:4058","2:8772:4056","2:8784:4055","2:8791:4098","2:8792:4099","2:8797:4100","2:8800:2132","2:8803:4101","2:8804:2875","2:8806:4102","2:8808:415","2:8811:4103","2:8814:997","2:8817:4104","2:8820:604","2:8823:4105","2:8826:907","2:8828:826","2:8830:792","2:8832:713","2:8834:696","2:8836:4106","2:8837:4107","2:8845:4108"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6471:4760":{"id":"1:6471:4760","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6472:4991","1:6473:4992","1:6474:60258","1:6475:60926","1:6477:60930","1:6479:60927","1:6480:60928","1:6482:60929"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13420:58625":{"id":"2:13420:58625","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15939:2979","self::pattern":"2:13018:5121"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:5095":{"id":"2:3411:5095","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13503:4442":{"id":"2:13503:4442","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3424:5101":{"id":"2:3424:5101","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3426:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4660:4676":{"id":"1:4660:4676","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4661:4486","1:4662:60665","1:4664:60666","1:4665:60667","1:4666:4690","1:4667:9831","1:4668:9830","1:4670:60668","1:4671:4085","1:4672:4902","1:4673:2054","1:4675:2182"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:63:3099":{"id":"20:63:3099","crate_id":20,"name":"IdentFragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:64:660","20:65:2067"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13474:62986":{"id":"2:13474:62986","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8867:5110":{"id":"2:8867:5110","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7908:5113","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13043:5124":{"id":"2:13043:5124","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13045:4063","2:13046:61902","2:13047:61903"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13037:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13391:62974":{"id":"2:13391:62974","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5769:4739":{"id":"1:5769:4739","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5770:6943","1:5771:9256"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3150:75":{"id":"2:3150:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3152:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3395:3455":{"id":"2:3395:3455","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:181","2:3398:1231"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2905:183":{"id":"2:2905:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2907:604","2:2908:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13028:5120":{"id":"2:13028:5120","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13030:5123","2:13031:62491","2:13032:62492","2:13033:62493","2:13034:62495","2:13035:62494","2:13036:62496"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1257:1620":{"id":"0:1257:1620","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[91,0],"end":[96,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:3476:116":{"id":"2:3476:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3477:221","2:3478:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13385:62972":{"id":"2:13385:62972","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3373:5084":{"id":"2:3373:5084","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:181","2:3375:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13414:1885":{"id":"2:13414:1885","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13018:5121","prim@char":"1:15939:2979"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5775:4736":{"id":"1:5775:4736","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:8370","1:5777:60285","1:5778:6943","1:5779:60286","1:5780:4991","1:5781:4992","1:5782:60287","1:5783:1302","1:5784:60288","1:5785:60289","1:5786:60290","1:5787:60291","1:5788:60292","1:5789:60293","1:5790:60294","1:5791:60295"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5753:4737":{"id":"1:5753:4737","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5754:61216","1:5755:61218","1:5756:61217","1:5757:61219"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13507:3343":{"id":"2:13507:3343","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15939:2979"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49715:3344","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4735:4693":{"id":"1:4735:4693","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4736:61135","1:4737:41617","1:4738:61137","1:4739:61136"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8347:5116":{"id":"2:8347:5116","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8349:4102"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3364:5173":{"id":"2:3364:5173","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3366:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:3083:3294":{"id":"24:3083:3294","crate_id":24,"name":"Parser","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:3084:181","24:3085:2158","24:3086:1824","24:3087:2159"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5809:4740":{"id":"1:5809:4740","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5810:58240","1:5811:58241","1:5812:58242","1:5813:58243"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13390:2717":{"id":"2:13390:2717","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12489:5564"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2126:6417":{"id":"24:2126:6417","crate_id":24,"name":"IdentExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2127:64444","24:2128:64445","24:2129:1866"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2144:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2847:97":{"id":"2:2847:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2849:1822"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6088:63618":{"id":"5:6088:63618","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8863:5111":{"id":"2:8863:5111","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3415:5083":{"id":"2:3415:5083","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3417:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10222:3333":{"id":"2:10222:3333","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10223:1530","2:10224:58374","2:10226:58373"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3263:106":{"id":"2:3263:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6821:4783":{"id":"1:6821:4783","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6822:58265","1:6823:58266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13508:62994":{"id":"2:13508:62994","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15939:2979"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49724:5464","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4767:4448":{"id":"2:4767:4448","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4768:1803","2:4769:62010","2:4770:4072"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3336:3430":{"id":"2:3336:3430","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3338:181","2:3339:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3984:68":{"id":"2:3984:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3985:1426"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:8384:151":{"id":"2:8384:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8385:1803","2:8386:3241","2:8387:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13452:62979":{"id":"2:13452:62979","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13417:58624":{"id":"2:13417:58624","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15939:2979","self::pattern":"2:13018:5121"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6897:4764":{"id":"1:6897:4764","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6898:60821"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5819:4741":{"id":"1:5819:4741","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5820:60285"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3503:130":{"id":"2:3503:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3506:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13411:5898":{"id":"2:13411:5898","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49661:4700","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5020:4649":{"id":"1:5020:4649","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5021:3242","1:5022:60843"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23736:5184":{"id":"2:23736:5184","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23737:5241"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23732:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3796:4450":{"id":"2:3796:4450","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13400:58588":{"id":"2:13400:58588","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5837:5611":{"id":"5:5837:5611","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:35319"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8343:5114":{"id":"2:8343:5114","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8345:2875"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3407:5093":{"id":"2:3407:5093","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3409:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13427:4068":{"id":"2:13427:4068","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15939:2979","`None`":"2:47440:176","self::pattern":"2:13018:5121"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13431:58097":{"id":"2:13431:58097","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:15939:2979","`DoubleEndedIterator`":"2:8428:120","str::rsplit":"1:15945:2984","str::split_whitespace":"1:15945:2984","self::pattern":"2:13018:5121"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49407:4699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13037:5123":{"id":"2:13037:5123","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13039:5143","2:13040:922","2:13041:62779","2:13042:62780"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3156:149":{"id":"2:3156:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:1628"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23051:18393":{"id":"2:23051:18393","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23052:7875","2:23053:61844","2:23054:61845"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23044:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5687:4770":{"id":"1:5687:4770","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5688:6265","1:5689:2717"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13504:4443":{"id":"2:13504:4443","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6493:4757":{"id":"1:6493:4757","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6494:60061","1:6495:8792","1:6496:60062","1:6497:60063","1:6498:60064","1:6499:60065"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13409:10486":{"id":"2:13409:10486","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15945:2984"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49681:5460","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13493:1867":{"id":"2:13493:1867","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13018:5121","prim@char":"1:15939:2979"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2941:177":{"id":"2:2941:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2942:415","2:2943:4057","2:2944:4054","2:2945:4062"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2910:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6824:4760":{"id":"1:6824:4760","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6825:60259"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23432:18412":{"id":"2:23432:18412","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23433:61675","2:23434:61676","2:23435:61677"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23427:5243","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13410:10484":{"id":"2:13410:10484","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15945:2984"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49690:5461","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7908:5113":{"id":"2:7908:5113","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7909:62427","2:7910:62428","2:7911:62425","2:7912:62423","2:7913:62429","2:7914:62426","2:7915:62424"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13746:150":{"id":"2:13746:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13747:181","2:13748:150","2:13749:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3565:3251":{"id":"2:3565:3251","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3567:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:3364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3561:2244","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10510:142":{"id":"2:10510:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10511:715","2:10513:10255"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6893:4752":{"id":"1:6893:4752","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6894:61267"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3506:131":{"id":"2:3506:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14130:141":{"id":"2:14130:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14131:277","2:14132:518","2:14133:280","2:14134:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13413:10225":{"id":"2:13413:10225","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49699:5462","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2872:104":{"id":"2:2872:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2873:408","2:2874:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9371:4772":{"id":"1:9371:4772","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9372:60263","1:9373:60264","1:9374:60265","1:9375:60266","1:9376:60267","1:9377:41231","1:9378:60262"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:4754","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13487:58626":{"id":"2:13487:58626","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15939:2979","self::pattern":"2:13018:5121"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10291:3334":{"id":"2:10291:3334","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13505:62993":{"id":"2:13505:62993","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15939:2979"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49706:5463","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13501:4440":{"id":"2:13501:4440","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3543:4451":{"id":"2:3543:4451","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3545:237","2:3546:206","2:3547:61607"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:8:1733":{"id":"0:8:1733","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"0:7:1611":{"id":"0:7:1611","crate_id":0,"name":"internals","span":{"filename":"src/internals/mod.rs","begin":[1,0],"end":[28,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:8:1733","0:74:334","0:409","0:504"],"is_stripped":true}},"2:13434:10485":{"id":"2:13434:10485","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15939:2979","self::pattern":"2:13018:5121"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12810:5418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1311:1836":{"id":"0:1311:1836","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3258:3364":{"id":"2:3258:3364","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3401:3457":{"id":"2:3401:3457","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13384:10276":{"id":"2:13384:10276","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10285:3336":{"id":"2:10285:3336","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10286:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3342:3451":{"id":"2:3342:3451","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:74:334":{"id":"0:74:334","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1952,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144"],"is_stripped":false}},"2:13381":{"id":"2:13381","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12478:1338","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13382:793","2:13383:2063","2:13384:10276","2:13385:62972","2:13387:62973","2:13390:2717","2:13391:62974","2:13392:304","2:13393:58589","2:13394:1848","2:13396:58586","2:13398:58587","2:13400:58588","2:13402:4897","2:13403:62975","2:13404:58608","2:13405:58609","2:13406:2294","2:13407:2288","2:13408:4902","2:13409:10486","2:13410:10484","2:13411:5898","2:13412:62976","2:13413:10225","2:13414:1885","2:13417:58624","2:13420:58625","2:13423:2528","2:13427:4068","2:13431:58097","2:13434:10485","2:13437:58618","2:13440:62977","2:13443:62978","2:13446:58620","2:13449:58622","2:13452:62979","2:13455:62980","2:13458:3059","2:13461:62981","2:13464:62982","2:13467:62983","2:13470:62984","2:13472:62985","2:13474:62986","2:13476:62987","2:13477:62988","2:13478:62989","2:13481:62990","2:13484:9874","2:13487:58626","2:13490:62991","2:13493:1867","2:13496:62992","2:13499:1824","2:13501:4440","2:13502:4441","2:13503:4442","2:13504:4443","2:13505:62993","2:13507:3343","2:13508:62994"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13393:58589":{"id":"2:13393:58589","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15956:2993"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"6:5241:8533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7856:6109":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"24:968:2814":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"6:157:41577":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:50123:5474":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:4133:8328":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:1694:5673":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:3345:4943":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:3044:3405":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:52348:5273":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12431:7156":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:2253:4498":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:47490:3246":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12262:7111":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"22:962:2465":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"1:2187:4787":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:2262:5678":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:49856:5133":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:13547:7474":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:8379:5619":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:695:6400":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"12:2253:4808":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:11336:5422":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:6185:8800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:11415:8714":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11458:6959":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:10673:48949":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:6964:3676":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12182:7100":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:15963:3000":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:14748:4771":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:24055:5333":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"24:6344:3186":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:10427:62086":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:2462:14158":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"24:5788:3141":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:45969:5193":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:13094:5128":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"22:1047:2149":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"1:4026:4882":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:903:4206":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:1554:8050":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"24:6406:2134":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"22:799:3299":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:50396:4457":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7477:6054":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"21:3076:3351":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"16:3488:6211":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"19:117:6786":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:6233:4987":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"24:5417:3112":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"5:3048:58092":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:10001:48794":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:47955:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:15937:2977":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"0:1257:1622":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:4742:4696":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:5312:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:5761:4738":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:5169:3319":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:14498:4784":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:5528:8649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:2203:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4317:8374":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"9:749:5721":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:55912:5180":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10950:49025":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:48756:5250":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:1944:2185":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:24529:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:13248:41196":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"24:2146:6772":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:22802:5104":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:3411:5095":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"9:927:46513":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:46379:5588":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:2381:3325":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:48748:9235":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:49365:5109":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"22:920:9148":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"17:9809:64207":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"24:5733:3128":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"21:2923:4611":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"6:5428:8627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:3064:6260":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:4717:3333":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"24:5700:3120":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"5:1235:5676":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"24:2496:2403":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:49982:5137":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"18:730:6769":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:46684:5212":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6072:5919":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4425:8423":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6110:6070":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"22:874:1755":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"6:6636:8827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"24:5844:3154":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"16:6219:6079":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:6614:62038":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:47745:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"24:924:64489":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:13772:7550":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:1665:8128":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:6821:4783":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:4262:8345":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11573:4832":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:2740:4754":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:5751:3132":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"1:2166:4571":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6807:6093":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4272:8352":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:49271:5434":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:3375:5623":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12632:7195":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:12240:4884":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:50173:4888":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"5:2777:5679":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:4151:1792":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"24:5499:2186":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"24:3204:205":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"1:3676:4701":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:5400:8619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:7966:58278":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"24:3719:3398":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"18:867:6391":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:51323:5253":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:24030:8856":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:2988:3287":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"21:2746:1755":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"6:88:41511":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"21:107:4612":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"17:13620:7490":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:1161:13158":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:4350:7632":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6136:6071":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"12:114:64173":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"24:4871:3432":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"24:176:4114":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"2:7650:2582":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9574:6312":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"24:5069:3445":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"5:2310:5698":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:4790:7645":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"21:3162:2465":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"6:4293:8364":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"9:603:9319":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:5831:4744":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10827:6281":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"24:2144:4754":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:8144:62828":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:15957:2994":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:1472:4809":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:4890:7648":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:1597:3242":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:8250:3278":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"24:4259:3418":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:10222:3333":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"24:6302:3176":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"6:4033:8281":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"22:832:3352":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:4633:4682":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:5273:5967":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:5964:5038":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:9088:48737":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:1522:8037":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:48224:3337":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:51618:5269":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:5769:4739":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:1533:8042":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11962:7061":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:6744:6237":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:2163:3241":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:9404:6875":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:13530:58274":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:3320:6262":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:4767:4448":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5130:8468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:9296:6873":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:49350:5531":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:49724:5464":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:46506:14767":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:23904:5496":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:24461:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"24:5400:185":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"9:1056:5779":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:10914:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:5681:4768":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12287:7113":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:3335:4938":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:7366:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:6418:2188":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:51437:5285":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:13904:4854":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:38753:4668":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13497:7459":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:46056:5316":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:46943:4314":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:5405:4969":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11616:6990":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:9332:6310":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:10458:6784":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:50366:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"21:2687:1744":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"24:6363:2189":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"1:14959:4855":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:51021:5295":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"24:5820:3148":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:10028:48795":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:510:48730":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:7514:6052":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:5796:3143":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:9849:64212":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:3543:4451":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:15905:9330":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:6899:8841":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:47913:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:11921:5441":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"22:944:1744":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:3390:4791":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4459:8438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:6028:8732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"21:1253:3352":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:8160:3308":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:51714:5258":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12073:7084":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13598:7485":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"21:3141:1818":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"5:2330:5677":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"12:971:4806":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8061:4193":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:12494:7165":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:24495:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:1079:2250":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:10656:6888":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:15921:58237":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"24:4692:3420":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:3150:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:10926:49023":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:13822:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:3218:6206":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:5185:8507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4193:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:49224:5431":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5459:8635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:5712:3123":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"1:10605:60283":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:1744:8170":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:46336:3344":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:4599:6623":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"16:4995:7651":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:46675:5211":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12610:7184":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:12775:5456":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13799:7558":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"24:6120:1964":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"1:1522:4805":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4949:3301":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:8138:5630":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11159:6935":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:12023:58235":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:11519:6974":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:6824:4760":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5292:8557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:14892:6675":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"24:5494:3118":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"2:3632:3263":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"21:1509:191":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"1:7683:4850":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:32462:61686":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"20:47:2815":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"24:3989:3409":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"24:6044:1959":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"21:1222:1612":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:12456:7160":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"21:1284:3357":{"crate_id":21,"path":["proc_macro","bridge","client","MultiSpan"],"kind":"struct"},"5:8197:3241":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:5790:5952":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11254:6338":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:1939:4569":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:53478:9029":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:10730:4665":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"24:658:6767":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"1:5819:4741":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:5953:8686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"24:5438:1769":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"6:605:8018":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:48217:3336":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:11556:4831":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"24:5969:2104":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"17:12095:7085":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:8176:5610":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:3395:3455":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:3759:3242":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:5360:5926":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:3714:7626":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13465:7451":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"24:2071:64494":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:5014:2168":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13780:7553":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:6087:6030":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:5940:3158":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"6:5969:8698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:49715:3344":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:3362:4787":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6152:6032":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:3392:6215":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:23427:5243":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:3153:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:2794:5964":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:1623:4808":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:15334:4970":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6780:6092":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:7236:6104":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"24:661:64344":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"5:5788:6620":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12327:7120":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:14744:9523":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:12598:7182":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"24:5824:3149":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"17:10160:6883":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:11750:7013":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:50143:5470":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:7928:2537":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:1156:13157":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:11360:4651":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:56270:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"22:1074:2465":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"16:4614:7639":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:3118:6214":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13760:7547":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:15939:2979":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:3336:3430":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:14094:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:13098:7365":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:7711:4852":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:3319:4934":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3506:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12051:7075":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:15944:2983":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"24:160:4754":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"17:12467:7161":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:24068:5334":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6032:5968":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11767:7021":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"21:3091:3352":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"24:4859:3431":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"16:4448:7635":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4449:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:10594:4207":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"12:1103:4808":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:4671:7641":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13348:7421":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"24:5804:2019":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"24:4007:3410":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"2:6418:5206":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"12:1183:5850":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:4955:7650":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:6056:3164":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"6:4203:8341":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"8:0:2951":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2751:4666":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11231:6340":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:49699:5462":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:9240:3679":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:46636:5222":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:32310:61685":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"5:5833:5613":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:51069:5275":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6166:6076":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"20:528:3974":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:7736:5226":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"24:5180:3453":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"17:13272:7404":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6636:6049":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:6491:5220":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"9:776:5766":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:13532:7470":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"24:5725:3126":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"24:6098:1613":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:45867:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:46235:9219":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:13977:4853":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:8959:5017":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"9:27:5768":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:7453:6033":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11678:6998":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11981:7066":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:4726:58372":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:8313:5526":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7333:6051":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"24:6003:1831":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"24:5127:3449":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"6:1572:8061":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:9954:5404":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:23833:5494":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:8115:3241":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:3195:6205":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"22:828:3257":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:13942:7597":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"24:3845:3403":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"1:10868:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:10106:6367":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"24:5426:1827":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"1:7649:4848":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:10814:6280":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"24:956:64491":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:11377:5424":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:50115:5469":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:47627:3241":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:4050:4670":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:5023:3310":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:5753:5950":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:14573:4692":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:7849:6637":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13746:7541":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:14:2597":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4401:8413":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:22766:5310":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:7320:60914":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:6116:4979":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:50343:5482":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:53399:9024":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:10435:48851":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"24:4888:3433":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"16:2843:6198":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"24:3809:2139":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:53325:5259":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:10836:4750":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:2492:4453":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:3039:62852":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:15355:4977":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:22896:4773":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:46747:5216":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:22543:62690":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10623:48948":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:10405:9527":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:13048:5125":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:22902:4775":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11045:48748":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10061:48811":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4060:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10468:6318":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"24:5291:3461":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"5:923:5627":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:1528:4806":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"24:5303:3462":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"24:2377:3242":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:52741:5299":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"21:2797:2465":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:53286:5294":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13574:7481":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"13:232:7874":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12725:7204":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:8298:5634":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:2793:4667":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:50119:5472":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3352:3267":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"20:357:2467":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"17:13865:7575":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10140:6321":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11572:6981":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:3970:6620":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:12702:6672":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:11419:5427":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"24:2973:3286":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:9133:48738":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"24:5777:3138":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"17:10331:6321":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:5020:4649":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:3253:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"12:815:4802":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:8463:4570":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:11100:6342":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:14876:6674":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:13866:4852":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:6644:6090":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"24:2872:1824":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"1:3642:4706":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"12:2072:1792":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13331:7416":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:11391:5425":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:9794:6665":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"6:6858:8832":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:48203:2237":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:14264:4192":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"18:637:6790":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"18:791:6384":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:9368:6874":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:53200:5256":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"22:158:55299":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"1:8508:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:8444:5651":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"24:5406:1829":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"16:6413:5867":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"24:5764:3135":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"16:5766:5951":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"18:802:6385":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11026:48747":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11378:4982":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:46934:9232":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:15958:2995":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"14:56:1755":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:15954:2991":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"24:3503:2137":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:24177:9213":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:46229:3344":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"13:0:2949":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:3555:4705":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:10884:4707":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:7257:6620":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:50147:5471":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"24:5760:3134":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"1:12185:5003":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4364:8400":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:8009:6649":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"21:3111:1744":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:6226:1741":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"16:5314:6871":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:3087:4754":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:6366:5868":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"24:6048:3165":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"24:4680:3419":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"16:6682:6046":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:7289:60914":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4005:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13733:7535":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:5687:4770":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"24:3257:3242":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:50135:5475":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4215:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"21:2846:1820":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"1:8227:6649":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:47703:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:1729:4983":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8772:5007":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"12:1238:5852":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:12699:5449":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:632:8033":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:5192:3320":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:49475:5451":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:45757:4452":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:7541:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:1622:8094":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"24:5870:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"2:3565:3251":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:7111:6633":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:24665:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:4417:7634":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4164:8338":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:12489:5564":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"15:0:2957":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:584:8007":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"24:5888:1763":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"12:379:5856":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:3951:8243":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:7073:6095":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12343:7125":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:6897:4764":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:12011:4857":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:7870:6039":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13912:7589":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:4535:7638":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:5320:2458":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:32296:4273":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:56322:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:0:2955":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"24:6104:1760":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"5:8362:8851":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:11726:7011":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:14993:4884":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"14:244:9197":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:51766:8969":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:48461:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:50139:5476":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:50384:4669":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:24083:8860":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"24:6088:3171":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"18:830:6388":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:15689:6677":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"9:692:5719":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:13842:7574":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:46576:5203":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4478:8446":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:10850:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"24:6410:2136":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"2:49810:5126":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:46:7879":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:699:4208":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:12480:7163":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13306:7407":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:1091:6620":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"24:3247:3241":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"24:6046:3166":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:46716:5219":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"20:117:1821":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"12:2032:3242":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:8121:5629":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:1690:8147":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6391:6083":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:9649:48740":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"24:3755:3400":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"1:1432:3246":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"14:0:2956":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:46566:5202":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"18:838:5123":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:15964:3001":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:9005:48734":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"24:3935:3408":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"24:5081:3446":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:3348:5167":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:13243:9522":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:8393:3367":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:5808:3145":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"17:607:48731":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:3271:2387":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:15910:13160":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:616:8023":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6691:6091":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:4183:8339":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:11604:6987":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11199:6936":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:3331:5161":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:24597:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"12:2419:3278":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:6999:6094":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:7908:5113":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:2816:6217":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"24:2442:3246":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"17:13477:7452":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:9746:4963":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"5:2218:5625":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:5347:8594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:3259:3322":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:3365:5962":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"24:5403:1828":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"16:3091:6261":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:2181:4786":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:45729:5186":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:3385:3978":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:9440:6876":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:8582:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:6688:5641":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11847:7044":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"22:623:3257":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"5:5875:6628":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:6126:6075":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12582:7178":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:15125:4891":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6569:6232":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:11225:5419":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:7894:6068":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"24:2969:1825":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"16:5975:6073":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:5585:5308":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:56348:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:2449:3248":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"9:0:2952":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13933:7595":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:8954:6290":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:0:2959":{"crate_id":17,"path":["object"],"kind":"module"},"24:3485:98":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"24:5832:3151":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:51540:5277":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:1463:4799":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13377:7428":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"12:933:4803":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:7158:6097":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6005:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:45890:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:45976:4672":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"9:1075:5787":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"12:856:4799":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"24:5860:1778":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:2314:6350":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:51125:5296":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"24:932:64488":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"1:4465:4717":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9729:64195":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:4428:4716":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:23732:4754":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:23090:4754":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:10275:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:6068:8735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"24:5867:2244":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"9:1020:5786":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"24:4929:3436":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"21:1358:1819":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"1:6893:4752":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:6350:3188":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"1:5532:4977":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:14204:4458":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:1618:3241":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"21:2972:6414":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"6:3957:8244":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:48506:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:10611:48947":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:3730:4708":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:2910:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"22:997:1612":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:13685:7534":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8166:4193":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:22545:62688":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:14130:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:681:1836":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11696:7007":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:23101:5241":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"24:4223:3416":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"2:46737:5215":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:1655:4811":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:542:5970":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:1708:8154":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:11392:4990":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10529:9155":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"24:4733:3423":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"5:5837:5611":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"24:6052:3169":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"24:3521:105":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"1:5809:4740":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13609:7489":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:15169:4899":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:3415:5083":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11738:7012":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:11190:4652":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"6:6176:8797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:2889:6218":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"21:3015:3241":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:7697:4851":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:24014:9210":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:15274:4660":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:8330:5635":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:1540:8045":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6155:8783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8837:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:46918:9231":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"24:5387:2090":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"24:5958:2437":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:53364:9021":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:2053:3300":{"crate_id":24,"path":["syn","buffer","TokenBuffer"],"kind":"struct"},"16:7378:6037":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"12:1703:5863":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12537:7171":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12208:7103":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:7549:6041":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:6471:4760":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:15953:2990":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:15938:2978":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:15433:5879":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"14:194:47080":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:49787:5122":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:5996:1785":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:11437:4762":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"12:1147:4810":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:49825:5129":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"24:3208:6419":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"1:15409:9110":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4040:8284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"21:2949:3356":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:45846:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:4704:7642":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:11405:5426":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:2628:2467":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"16:3549:7625":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:23432:18412":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:46431:5526":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:3604:6806":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:24801:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:9799:48743":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:2484:48840":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13429:7437":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:2512:6346":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:49671:5459":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"24:5704:3121":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:8343:5114":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"24:4241:3417":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"17:12010:7071":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:49245:5433":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:3018:6202":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:11160:4700":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:11337:6311":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:3488:4569":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"12:183:5857":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:9361:5120":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:9839:6321":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13506:7460":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10887:6922":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13180:7377":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:1450:4798":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:1501:4802":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:6644:8829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10279:6303":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:4663:3266":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"6:5191:8510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:23099:5252":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:6591:6089":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11411:4782":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:46665:5210":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5167:8494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:3743:6277":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4112:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"22:934:1819":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"1:13729:4861":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"7:38:46409":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:7786:6043":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:53247:5274":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"12:895:5841":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:13453:7445":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:10520:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:3419:5098":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"12:869:4571":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:1441:4808":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:11328:7211":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:9971:64201":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:161:41578":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:8323:4193":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:5892:5035":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"6:4501:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"24:3737:3399":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:9743:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10117:6368":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"12:952:4805":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:9495:9526":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:49690:5461":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11220:4658":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"5:3839:6620":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:3103:3298":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:48740:4815":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:15956:2993":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"22:1002:1819":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"1:6015:5044":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"24:6339:3185":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"17:13520:7467":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:5889:6631":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:4127:8326":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13062:7335":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:6895:4763":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11835:7041":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:3281:4047":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"24:3881:3405":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:10555:4789":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:6768:6239":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:11080:4722":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:537:7975":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"12:979:4807":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:3368:5175":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"24:2858:3303":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"16:7420:6053":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:51491:5292":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:15156:4893":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"18:812:6386":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"24:3953:3316":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"1:13365:4984":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:12205:5009":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:13781:62739":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12307:7119":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"24:6373:2430":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"24:5911:2405":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:22892:4754":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10788:48921":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:15012:9109":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:14536:9257":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"24:4999:3440":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:22815:4754":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"24:5923:3159":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"16:5407:5928":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:4331:8380":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13394:7431":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"12:940:4804":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:45913:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:12145:4918":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:50307:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:3978:8254":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"24:5800:3144":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"17:13154:7371":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:48787:9236":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"24:2864:6415":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"24:4169:3413":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:47507:3676":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:48564:4137":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:7024:6246":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:11193:4653":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:13564:7478":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:8929:48733":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:7663:4849":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4145:8337":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4120:8324":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:1635:4798":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:5488:5935":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12659:7197":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10407:6345":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:4052:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:8106:4459":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:4504:4713":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:14566:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"24:5963:2440":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"24:6131:3172":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"16:7195:6100":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:9065:48736":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5359:8599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"24:1160:2044":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:3088:5060":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12275:7112":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:13882:58279":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9162:6339":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:6764:4682":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:1658:8124":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"20:63:3099":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"24:5052:3444":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:51230:5276":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"14:250:7829":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:37572:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:2178:4271":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:10081:6303":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:3701:5520":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:3742:5192":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:10704:14147":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:3359:3385":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"6:3918:8219":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"24:6376:2119":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"1:2598:9524":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"24:3611:3394":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"16:6021:6197":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:50131:5477":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:49968:5136":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:10560:5249":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:5815:5953":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:46011:3316":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:51342:8962":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:6176:6077":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:12363:6442":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:1511:4804":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:1457:4810":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:4699:6625":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:15940:2980":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"24:3413:3388":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"1:11367:5039":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4358:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6464:6045":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:22511:62666":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"24:5011:3441":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"17:13554:7475":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11147:9156":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:24631:4198":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:1563:8055":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"24:5257:3459":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:5564:13161":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:519:7967":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"24:2063:3299":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"21:0:1037":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:47559:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:49706:5463":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9034:48735":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:10272:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:6852:8831":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:3396:1792":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:713:4053":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"22:925:55292":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"17:10584:6292":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10149:48744":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:24563:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:11643:4836":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:12019:9248":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:7761:6107":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:13898:7582":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:8263:3279":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:8942:4253":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:49904:5134":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4241:8344":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:3905:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:0:1329":{"crate_id":1,"path":["std"],"kind":"module"},"1:11962:4853":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:6971:4765":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:10480:6670":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:610:8020":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:4467:4718":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:8087:4722":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:49214:5430":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:9551:6337":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:22498:4053":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"21:1315:3355":{"crate_id":21,"path":["proc_macro","bridge","client","Diagnostic"],"kind":"struct"},"18:169:55062":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:3647:3395":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"24:2549:1997":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"2:3718:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:531:7973":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"24:6322:3180":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:50352:5483":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:11118:3246":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"24:0:1609":{"crate_id":24,"path":["syn"],"kind":"module"},"1:12210:4867":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:5192:3454":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"1:6733:8729":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:45997:2537":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:6591:4779":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:0:2960":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:8680:4997":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"9:234:5744":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:3287:6209":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:3159:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6731:6236":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"14:231:2281":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:5085:3315":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:10052:48797":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"24:5716:3124":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"22:0:1610":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"17:12783:7214":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:1607:3246":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:46319:5584":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:2941:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"21:3157:1755":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"24:5784:3140":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"17:9280:6872":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:48210:3329":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"24:4025:2508":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"2:46358:5463":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:10988:49000":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"24:5708:3122":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"24:5245:3458":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:52191:5278":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:9961:48746":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:611:6395":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11277:6937":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:7829:4859":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:3321:3266":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:4515:5664":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"16:2733:5921":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10224:48812":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:3882:3299":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:4388:4954":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13637:7497":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11968:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:6873:5223":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"24:6356:3175":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"5:7212:4571":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:0:2958":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:3892:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:5522:5937":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:12220:4883":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"24:3342:3463":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"1:5823:4742":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:10236:6314":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:50975:8958":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:10599:48946":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:46311:5464":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"24:4958:3437":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"1:15070:4862":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:3364:5173":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:11298:9247":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:5433:5930":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8414:4193":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:22713:5240":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"24:972:3163":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"17:12982:7274":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:5386:8608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:6100:8745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:3862:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:5295:47157":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"12:2040:4571":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:6239:8820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"24:4187:3414":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"22:1103:3241":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"2:46706:5214":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"24:299:1755":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"17:10938:49024":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:4511:8459":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:9094:5004":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:3945:8242":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:7826:4858":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:4470:8444":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:1534:4807":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:5580:5940":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:5274:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7250:6105":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:1442:3241":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"24:5747:3131":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"16:4922:7649":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:10283:2237":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:49306:5437":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:4157:6293":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:3506:6210":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:2991:6212":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:50289:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11981:4855":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:51390:5297":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:136:55060":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:6993:4751":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:49383:5446":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:6051:8733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"15:269:5875":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"24:2550:1997":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:8515:4913":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:49196:5428":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"20:191:3706":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:3261:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"22:818:9147":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"12:2404:64172":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:56309:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1617:8092":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"24:5429:1831":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"21:3002:1612":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:12408:7155":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"24:4721:3422":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"24:3629:1768":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"17:10502:9154":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:9689:64197":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:22564:62693":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"24:5781:3139":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"12:880:4569":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4306:8368":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:52317:5270":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"24:3593:3393":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"17:12699:7202":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:10967:4880":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"20:305:2044":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"5:1486:4811":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"18:767:6800":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:47440:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"12:1121:4809":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:3476:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5371:8606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"24:2875:6418":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"24:5443:1811":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"16:7406:6036":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:13511:14152":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:6577:6088":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:51044:5283":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:897:6393":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:1646:4810":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:8863:5111":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:23638:62670":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11779:7024":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:23975:8854":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:13446:7444":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:3401:3457":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:49457:5450":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:886:6392":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:4762:7644":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11499:6964":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:9769:64208":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:10725:1911":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"12:399:5855":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:3197:4486":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:5561:5939":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"9:722:5720":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:5945:8681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4013:8272":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:10666:13153":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:3172:6204":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:8384:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:10293:3335":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4431:8426":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"24:6316:3178":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"17:10864:6921":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8724:4998":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:3041:6203":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13041:7326":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:2126:6417":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"17:12771:7211":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:6887:8839":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:50127:5473":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:51198:8960":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:10232:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:3166:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:4712:5245":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11378:6283":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:6106:8746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:13172:7376":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"24:161:4121":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"2:4724:5246":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:3984:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:3241:6207":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7295:6050":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:49557:5454":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:51261:5264":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:7151:3667":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:10681:13156":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:9659:64191":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:3038:1996":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:4905:3327":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:13602:2127":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:53425:9026":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:15418:60282":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:5197:8511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:46925:4253":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:9245:6282":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:49425:5421":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"21:344:64245":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"24:6347:3187":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"14:47:9517":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11464:3668":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"21:2238:4605":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"12:1203:5851":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12552:7175":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"24:5028:3442":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"2:49377:5445":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"10:0:2953":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:668:6399":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:2850:3268":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:57623:9038":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"24:6360:3189":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"2:46647:5209":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6101:6028":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:6518:6086":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7264:6048":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:5255:8543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:52534:5279":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:13119:7370":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:11223:4659":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"24:5768:3136":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"6:5563:8674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11318:4972":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:2847:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:4796:3427":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:10279:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:46288:5589":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:10829:4749":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:1700:8153":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"12:2045:4569":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"12:2036:3241":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"21:2448:4607":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"16:7279:6248":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:49234:5432":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:13857:35322":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:1497:4801":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13788:7554":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"24:153:1808":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"21:553:6614":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"2:46004:5307":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:10801:48920":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:5221:3456":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"1:15032:4883":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:5456:5931":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12795:7221":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"24:2801:6422":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"24:5421:3113":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:23051:18393":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:1908:42878":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:6424:6084":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:5210:8512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"24:4205:3415":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"24:5852:3156":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"24:5139:3450":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"17:10448:6319":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:7453:6620":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"14:11:9517":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"24:1278:6431":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"1:4072:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"24:964:3162":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"17:13963:7600":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:12041:9105":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"24:2306:3239":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"1:12693:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"24:66:1991":{"crate_id":24,"path":["syn","token"],"kind":"module"},"24:4277:237":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:2905:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:53463:9028":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"9:963:5784":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13370:7426":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"24:5755:3133":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"1:4506:4714":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:3759:3323":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:46963:9233":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:12129:4917":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:786:6667":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:9959:5405":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:3730:5191":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:48777:4830":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:4641:7640":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:1194:13159":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:2171:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"24:5729:3127":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:5672:5943":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:3336:4786":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:670:41907":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:15946:2985":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:12155:7096":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:47871:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:3194:4931":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:47473:1803":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"24:4115:1741":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"6:591:8010":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:10291:3334":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:7823:6044":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"24:6370:185":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"6:4523:8464":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:46365:5586":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:547:5948":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:6269:6081":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"21:2720:2149":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"17:10543:6925":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"24:916:64492":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"17:12142:7093":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:14000:7607":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:2872:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"24:6319:3179":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:53384:9023":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:1674:4802":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:51587:5265":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"20:44:4754":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"1:14985:61088":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:5522:8648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11915:7046":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:13282:7405":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:47787:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"24:5742:3130":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:45805:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:5505:5936":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:11130:4665":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:5986:5040":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:7475:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:48443:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:4842:3430":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:5960:5959":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:3040:8850":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:823:6667":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:8453:3366":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:3326:3460":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"24:6324:3181":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:4823:7646":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:10819:4778":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"18:661:6398":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"24:5348:2138":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"1:11140:4697":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"12:787:4801":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:2192:1792":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10558:48944":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"21:523:64244":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:49393:2730":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:10179:6885":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"24:6124:1966":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"1:6731:8727":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:24184:5557":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6124:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:9662:6664":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:14549:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:11714:7008":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13205:7387":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:47482:3242":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"24:5812:3146":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:5168:3452":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"24:5828:3150":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:48467:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"24:5918:2445":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"18:621:9149":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:7226:6103":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:2866:6199":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11358:6284":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:15959:2996":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:46557:5221":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:46618:5207":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"12:353:9199":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:14043:5484":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:6252:6080":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:6605:6047":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"24:3917:3407":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"1:15949:2986":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:11616:4833":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:3539:3391":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"6:4387:8408":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:3990:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:11196:4657":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:14583:61090":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13402:7433":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6554:6087":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"24:4982:3439":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"1:11372:5042":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"24:5720:3125":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"17:11186:9157":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13590:7484":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:57644:9039":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:6257:4575":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:10317:6309":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:8867:5110":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"24:5110:3448":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"17:13296:7406":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"24:4941:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:51689:5257":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:2773:6224":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:5775:4736":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:3796:4450":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:3265:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:299:64205":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:1021:4193":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"9:996:5785":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:46342:5585":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:46604:9227":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:1736:8166":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"24:6083:2139":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"1:15945:2984":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:11794:7030":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:294:64202":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"22:824:1612":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"1:12161:4919":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"24:4970:3438":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"5:1011:3242":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"21:3116:3258":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"6:5221:8520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"24:5848:3155":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"24:5399:1827":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:12074:3242":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12221:7104":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:3370:4785":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"24:5233:3457":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"6:4095:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:10615:4181":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:7766:4854":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:24212:5512":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"24:5093:3447":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"5:7620:4575":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"12:162:5853":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:48991:5595":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:4825:3429":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"12:764:3246":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:5282:8550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:3200:4690":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:6475:4571":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:5736:5947":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4439:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"24:6385:2122":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"1:11626:3242":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"24:3377:3386":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"24:2333:3240":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"17:11932:7052":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:1630:8099":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:7961:4191":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"24:6334:3184":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:48765:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:9886:48744":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11947:7056":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:2267:5236":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:5737:3129":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"17:12195:7101":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:2951:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:47661:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:2401:14142":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11304:48750":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"24:4784:3426":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:23997:5338":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:14189:4713":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:12645:7196":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:10289:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:22955:5241":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:6002:5043":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8873:60920":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:51846:8971":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:10420:6344":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10403:6320":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"24:1274:6430":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"1:9371:4772":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10041:48796":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:11263:5420":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11482:1755":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:11298:5421":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:9186:6288":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:4391:4955":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:1045:4195":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:624:8028":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13054:7333":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:52995:5287":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12507:7166":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"24:2385:3244":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"24:5274:3460":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"2:3489:3324":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:51870:8972":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:46696:5213":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:49326:5439":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"20:18:3098":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"2:51179:5288":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:24147:40965":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11147:2730":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:1505:4803":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:3881:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:52030:5286":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:10071:6372":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13810:7559":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"24:2189:1749":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"5:1663:4801":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:5095:3316":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"22:1069:1755":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"2:46418:5525":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:4494:8451":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:10638:4192":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:3868:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:10211:48808":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:6864:8833":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12118:7091":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:10975:49001":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11665:6997":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10635:6886":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:5536:5640":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11533:4830":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:4074:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:46535:4665":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10477:6317":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"12:2280:4810":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:47611:3242":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:3800:7628":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:1215:5675":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:12957:3264":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4377:8405":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11588:6986":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:46413:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:3333:4937":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:7185:6099":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:610:1389":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:14972:4856":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:38816:4048":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:374:4462":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:10824:4930":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:525:7970":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:1476:4571":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"24:5856:3157":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:4736:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"22:953:1755":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:45821:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:46526:5217":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"24:3701:3397":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"24:4905:3434":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"2:51666:5254":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:5330:6872":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:5707:5944":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"12:472:64175":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:3939:7629":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"23:0:3081":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"1:11096:4692":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:32302:4274":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:9759:48742":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13192:7382":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:1527:8039":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:9719:48741":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:15175:4900":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4083:8306":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10844:6321":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:4394:4956":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12685:7199":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11970:7063":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"9:686:5717":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"20:296:2044":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"15:230:5870":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:5753:4737":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:49839:5132":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7467:6034":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:1486:4569":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"9:469:9309":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:8391:5620":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:6238:6035":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:52884:5267":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"12:2052:4785":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10571:48945":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:1419:3242":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:5346:6031":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:721:6791":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10620:4190":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:10962:4879":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:6812:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:52108:5293":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"18:745:64217":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46595:5205":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:56296:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:5990:2435":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"24:6331:2191":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"21:3011:3346":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:46656:5224":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:8380:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"12:843:4798":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:0:2950":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:3424:5101":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"7:0:1478":{"crate_id":7,"path":["unwind"],"kind":"module"},"18:775:6790":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:5994:5041":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:2659:4610":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"11:54:5839":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"16:3264:6208":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:2753:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:48795:9237":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6014:6074":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:14050:6673":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:9173:3672":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11993:7068":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"24:6128:1968":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"24:5772:3137":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"22:843:3351":{"crate_id":22,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"5:3329:3242":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:5392:5581":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:4477:7636":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12385:7146":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:9241:3678":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:11809:7036":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:1723:8163":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9896:64206":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:24131:40956":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:14513:9249":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:4386:7633":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:47567:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:9889:6667":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:3262:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:3951:4569":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:12247:7108":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:3772:3246":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12373:7144":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:49316:5438":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:12260:4885":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:1602:8080":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"24:6414:3190":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"24:6328:3183":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"6:563:7995":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"22:1023:1744":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"24:5470:3119":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"12:1784:6618":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:2276:4497":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:8130:4571":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11640:6994":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:46952:8945":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:46627:5208":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:2399:14141":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:13978:7601":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"24:4767:3425":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"1:8522:4914":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:3509:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:8849:6336":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:37596:4053":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:5415:4682":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:25205:5367":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6491:6085":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:9799:6666":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"24:3449:3390":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:49931:5135":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:12200:4874":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:52270:5266":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"24:5492:3116":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"1:12090:3241":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"24:4133:3412":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"1:11108:4694":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:4362:3241":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:5927:5957":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:5029:7652":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:10972:4709":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"24:3395:3387":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"21:165:4635":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"1:15960:2997":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:5611:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:6718:6235":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:9748:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:3997:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:2170:4569":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"22:911:1612":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:53344:9019":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"24:5840:3153":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"17:13386:7429":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:49297:5436":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:24835:5499":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"24:4097:224":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"16:7174:6098":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"21:300:9308":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"17:2543:6315":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:3561:2244":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:46727:4697":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:11275:58236":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:5379:8607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4419:8422":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:49661:4700":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:3263:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"21:1730:1836":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"1:6719:4736":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:7146:6096":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:6893:8840":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"0:1258:1630":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"2:13028:5120":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:432:1802":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:49284:5435":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:11186:5418":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:1644:4799":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:5408:4970":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8422:4830":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"6:511:1745":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:50151:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"12:1682:5862":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"24:5995:3161":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"6:1760:8175":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:50299:8957":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"24:6054:3168":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"1:9622:6663":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13221:7390":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:3145:6213":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:3156:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"18:740:64218":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:24091:8861":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:14523:4749":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:13924:7591":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:4255:4989":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:705:6790":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:9239:3680":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:152:55061":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3503:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:3380:4790":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"24:454:64343":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"5:8203:3241":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10095:6366":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:1547:8047":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:23626:4774":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:8673:4995":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"24:3015:2739":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"6:543:7978":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13540:7473":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:1676:8136":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"21:1191:4633":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"24:5458:3114":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:47829:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:10905:4754":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:51284:5268":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11822:7040":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12946:7243":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13819:7561":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:49205:5429":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"24:5945:2190":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"1:15141:4892":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:9097:4870":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:24109:40964":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"22:858:1819":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"6:6935:8848":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:7838:5200":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:8347:5116":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:46586:5204":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:4601:4314":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"0:0:1635":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"21:3136:2149":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"1:897:4205":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4300:8365":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9933:48745":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12234:7106":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:5018:3309":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:1653:4800":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:1637:4809":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:12810:5418":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:11632:4835":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:11312:4971":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"20:193:3705":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"1:12116:4916":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:6923:8846":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:3500:2183":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:4306:3246":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"12:1256:4811":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"24:3791:3402":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"16:7303:6106":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:6870:8834":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:51092:5263":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:4230:7630":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:10221:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:53137:5291":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"24:3773:3401":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"21:2963:3355":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"2:13037:5123":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:11094:3242":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10253:6348":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:858:6390":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:10876:4950":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12741:7206":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11118:48749":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:3972:8251":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:5384:5927":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:53353:9020":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:32261:4272":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:6881:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6208:6078":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12917:7223":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:12759:5453":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:5149:3318":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:5987:8705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:47619:3246":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"24:5209:3455":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"5:7379:3241":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4101:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5420:8625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:6729:8725":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:49629:5458":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:48494:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:48987:5594":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:5140:3317":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:3772:7627":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10489:6322":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:7392:6038":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:9600:64198":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:24767:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:3713:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"24:5461:3115":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"2:3373:5084":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:10287:3337":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12756:7210":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:15943:2982":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:13731:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:7216:6102":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:23044:4754":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:12736:5452":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:3966:8249":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"12:466:64174":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:13746:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:4227:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"24:2971:1826":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"2:51641:5272":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"9:809:4830":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1584:8070":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:0:1066":{"crate_id":20,"path":["quote"],"kind":"module"},"24:940:64490":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"1:12082:4912":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:15942:2981":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:5228:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:8160:3241":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:53501:9030":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:6954:5617":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12028:7072":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:23736:5184":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13884:7580":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:1717:8160":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:3724:5189":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4371:8402":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:10687:4793":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:11539:6975":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"24:3863:3404":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:53074:5271":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:9007:4865":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:11996:4856":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10516:6323":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:2200:6622":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:6353:4988":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:8344:5636":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"24:4079:2231":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:10285:3336":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"21:478:4613":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"5:7642:4576":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:3317:4471":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4066:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:46273:5363":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:1236:48810":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13582:7482":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:11143:4699":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:47541:3677":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:6091:8742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"12:928:4800":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:2437:14152":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4073:8299":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:5998:8710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"12:432:5854":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:2159:3242":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:12215:4868":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:3258:3364":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:3429:5965":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"22:24:9263":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"17:10266:6347":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:3341:5622":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:2460:6442":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:4852:7647":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:3557:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"16:2754:5963":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"18:755:64216":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:11482:4820":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:5632:5942":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:1136:4673":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13318:7410":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"24:2360:3241":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"24:3683:130":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"6:5407:8621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:51468:5289":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"11:0:2954":{"crate_id":11,"path":["adler"],"kind":"module"},"2:53540:9031":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:6620:6230":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"24:3206:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"2:32362:61687":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"6:5414:8622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:4008:48922":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5978:8704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:1195:63696":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:12168:6893":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4660:4676":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"24:4061:3411":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"17:11434:6945":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"24:6307:3177":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:52383:5255":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:11166:4651":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:9655:60833":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"16:6949:6243":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12521:7169":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13488:7456":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4395:8412":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:4294:4724":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:11628:6991":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:3294:3365":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10200:48809":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"24:6326:3182":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"21:808:3357":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"1:9667:60835":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:8860:4449":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:53448:9027":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:850:6389":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:15444:5879":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:49145:5423":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:46398:5365":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:6221:8817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:4410:8416":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:4215:4571":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4347:8389":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:9210:48739":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"24:5040:3443":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:48081:5530":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:4678:4691":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:49511:5424":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:12700:4930":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"12:777:3241":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:4734:7643":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:5472:5934":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:14186:4717":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:15961:2998":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:7119:5969":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:51156:5284":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7804:6042":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"24:6401:2446":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"17:13258:7399":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"24:5792:3142":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:56283:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13986:7604":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12671:7198":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:6910:8845":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:46372:5587":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:6200:8805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10962:49002":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13163:7375":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5269:8544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10912:49014":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12568:7176":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:3162:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:53410:9025":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:10281:3329":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"18:783:6790":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:46548:5218":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"24:3971:206":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:49407:4699":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:7571:6029":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5469:8637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:50016:9363":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"24:5893:2187":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:13018:5121":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6614:8826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:24733:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"24:1271:6429":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"15:248:5871":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:48528:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:7205:6101":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"21:200:4641":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"1:6493:4757":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5595:5941":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10128:6369":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"22:1053:1818":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"17:11406:6941":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:3338:5961":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"21:3007:3257":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"9:900:7930":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"24:3467:1802":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"16:4304:7631":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:45936:3272":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5436:8629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"24:6050:3167":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:3231:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:14761:4857":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:46448:5527":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:2062:4682":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:46244:5360":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:10697:4812":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"24:3665:3396":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:13240:7391":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:8446:4569":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:569:7998":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"24:3083:3294":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:56335:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2175:4785":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11082:6289":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:12465:5603":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:12442:7158":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"24:6216:3173":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"17:9943:64209":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:3407:5093":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:11888:5440":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:11255:1819":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"18:645:6397":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:9208:60920":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"24:4750:3424":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"1:14518:9251":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"24:4917:3435":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"17:9476:6877":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"24:5334:3585":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"17:12040:7074":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"20:431:3860":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"2:50996:8959":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"21:3062:1819":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:24199:5513":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"24:4043:1770":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"16:5717:5946":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:47636:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:2968:6201":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:52077:5290":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:6672:5640":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"12:2392:1744":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:14898:6676":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10353:6351":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:11153:4699":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:47550:4466":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:5999:3160":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"24:5151:3451":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"1:11386:4971":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:50003:5139":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"24:5816:3147":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"12:2412:7877":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:4643:6625":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:1843:6620":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:7042:6247":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:12096:4915":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:7884:6040":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:4813:3428":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"22:880:2465":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"1:1153:13155":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:1311:6373":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:15296:4969":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7738:2090":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3342:3451":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"12:1162:5849":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"24:5362:1744":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"6:4281:8357":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:10394:1836":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:22839:5242":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:6214:8814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"24:3431:3389":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:24699:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"9:157:5736":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:50186:5540":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:15962:2999":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:69:4460":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:15950:2987":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4341:8386":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:22526:62666":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:13627:7492":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:49681:5460":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"24:5972:1890":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"6:4517:8461":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13356:7424":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:5159:8492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:10593:4754":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:9264:6871":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:13927:61697":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"21:3096:1820":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:4035:4671":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:4506:7637":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6357:6082":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:28016:5119":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:46298:5590":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:15062:9258":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:5855:5954":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12712:7203":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:10510:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:10455:6668":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:2912:6200":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5548:8663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:32121:5552":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"24:5490:3117":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"22:1008:1820":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"12:2066:4787":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:14033:4454":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:251:4311":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:3827:2464":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"16:5421:5929":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:3360:5171":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:48039:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:4443:3242":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:3356:4887":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"22:448:3257":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"13:120:47052":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"14:189:9517":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"22:1027:3258":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:4654:4682":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:15952:2989":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"24:3575:3392":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"5:8146:64050":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:11226:4796":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"16:7843:6108":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4046:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:9528:2730":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"7:85:46416":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:12034:60916":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:11555:6979":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:8428:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:3652:6647":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:6085:8740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:1596:8078":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:4426:4715":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:49611:5457":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:51303:8961":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:22566:62691":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10304:6306":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:14183:4715":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:46257:5361":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11323:4973":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:5231:7653":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:47498:3241":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:51814:8970":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:8902:48732":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:7824:6633":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:10721:9523":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:48580:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"12:750:3242":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"24:3899:3406":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"12:2059:4786":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:7342:6065":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:4242:6620":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10377:6349":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:15955:2992":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"24:3130:9536":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"14:216:47086":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:651:6394":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:47997:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:9761:4964":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"24:5393:3110":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"18:821:6387":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"24:4709:3421":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"5:3894:5652":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4325:8378":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"24:6353:3174":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"12:1666:5861":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11653:6996":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11015:49026":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"12:2269:4809":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:11001:48999":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:53373:9022":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"24:5464:1772":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"16:2945:6223":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:578:8004":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:49575:5455":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:48476:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"5:2553:5680":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"24:5425:1830":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"9:41:5769":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:4023:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:599:8015":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"22:868:1744":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:10892:3299":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:1492:4800":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"24:5836:3152":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"12:2398:7875":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:51951:5298":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:15951:2988":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:4735:4693":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:13043:5124":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"24:948:64493":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:4869:3326":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:49993:5138":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:46496:6639":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:49529:5425":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:3522:6802":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:994:5628":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:12021:6645":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"22:155:9146":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"24:2274:3238":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11087:4723":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"}},"external_crates":{"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.42/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.20/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"unicode_ident","html_root_url":null},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.98/"}},"format_version":16}