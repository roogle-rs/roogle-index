{"root":"0:0:2435","crate_version":"1.0.204","includes_private":false,"index":{"5:5727:2810":{"id":"5:5727:2810","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14049:2651":{"id":"2:14049:2651","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13579:148","`FromStr`":"2:13578:4034"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13578:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13578:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13929:1024":{"id":"2:13929:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12486:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13957:3017":{"id":"2:13957:3017","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12486:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44806:9668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14008:2776":{"id":"2:14008:2776","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13618:4426","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::rmatches":"2:14011:36543"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:45034:9682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14040:36552":{"id":"2:14040:36552","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14026:36549":{"id":"2:14026:36549","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14022:36547":{"id":"2:14022:36547","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13951:3429":{"id":"2:13951:3429","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13953:32259","str::split_at_mut":"2:13952:32256"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13961:28833":{"id":"2:13961:28833","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:45084:9684","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13970:31796":{"id":"2:13970:31796","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14024:36548":{"id":"2:14024:36548","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14027:36550":{"id":"2:14027:36550","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13931:36534":{"id":"2:13931:36534","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13987:32264":{"id":"2:13987:32264","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13618:4426","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::split":"2:13981:28832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44848:9599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14028:36551":{"id":"2:14028:36551","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13644:16658","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13964:2882":{"id":"2:13964:2882","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14002:32270":{"id":"2:14002:32270","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14054:31646":{"id":"2:14054:31646","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14061:11195":{"id":"2:14061:11195","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5153:11195"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45138:9623","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13990:36541":{"id":"2:13990:36541","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13618:4426","str::split":"2:13981:28832","prim@char":"1:12486:490","`DoubleEndedIterator`":"2:8516:133","str::rsplit_terminator":"2:13993:36542"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44880:9673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:2555":{"id":"0:8:2555","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:13954:32260":{"id":"2:13954:32260","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13953:32259"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14062:36556":{"id":"2:14062:36556","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5150:36556"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45147:9628","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14037:32272":{"id":"2:14037:32272","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13937:3541":{"id":"2:13937:3541","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:13140:16662"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13949:36538":{"id":"2:13949:36538","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12492:1765","str::slice_mut_unchecked":"2:13950:36539","crate::ops::Index":"2:40375:3186"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13958:9585":{"id":"2:13958:9585","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44816:3551","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14011:36543":{"id":"2:14011:36543","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13618:4426","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::matches":"2:14008:2776"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:45052:9683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13934:36536":{"id":"2:13934:36536","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13932:36535"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:2562":{"id":"0:492-0:1019:2562","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:2562","glob":false}}},"2:13984:32262":{"id":"2:13984:32262","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13408:9598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13932:36535":{"id":"2:13932:36535","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:37249":{"id":"5:5730:37249","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14017:36545":{"id":"2:14017:36545","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13618:4426","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::match_indices":"2:14014:36544"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44998:9680","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14059:36555":{"id":"2:14059:36555","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5152:36555"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45129:9629","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2435":{"id":"0:0:2435","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.204\")]","#![allow(unexpected_cfgs)]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:2424","0:965:2432"],"is_stripped":false}}},"2:14058:32171":{"id":"2:14058:32171","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:41040"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2432":{"id":"0:965:2432","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13950:36539":{"id":"2:13950:36539","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12492:1765","crate::ops::IndexMut":"2:3608:4022","str::slice_unchecked":"2:13949:36538"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13996:32266":{"id":"2:13996:32266","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:4426","str::rsplitn":"2:13999:32268"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44934:9676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14031:2689":{"id":"2:14031:2689","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14046:36554":{"id":"2:14046:36554","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5743:4079":{"id":"5:5743:4079","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5744:3014":{"id":"5:5744:3014","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:14054:31646"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5742:37252":{"id":"5:5742:37252","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2626","`String`":"5:7809:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2626","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14057:32170":{"id":"2:14057:32170","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:41040"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13956:3023":{"id":"2:13956:3023","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12486:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44800:9667","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:408":{"id":"0:63:408","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2656"],"is_stripped":false}}},"5:5733:37250":{"id":"5:5733:37250","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13939:350":{"id":"2:13939:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13940:32234","`u8`":"1:12505:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13953:32259":{"id":"2:13953:32259","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13954:32260"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14052:32166":{"id":"2:14052:32166","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40728:5181","Self::is_ascii":"2:14051:31643"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40728:5181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14051:31643":{"id":"2:14051:31643","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13963:34205":{"id":"2:13963:34205","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45122:9688","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13941:2671":{"id":"2:13941:2671","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14056:32169":{"id":"2:14056:32169","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:41040"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13947:32233":{"id":"2:13947:32233","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13928":{"id":"2:13928","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13929:1024","2:13930:2780","2:13931:36534","2:13932:36535","2:13934:36536","2:13937:3541","2:13938:36537","2:13939:350","2:13940:32234","2:13941:2671","2:13943:32231","2:13945:32232","2:13947:32233","2:13949:36538","2:13950:36539","2:13951:3429","2:13952:32256","2:13953:32259","2:13954:32260","2:13956:3023","2:13957:3017","2:13958:9585","2:13959:34216","2:13960:34143","2:13961:28833","2:13962:36540","2:13963:34205","2:13964:2882","2:13967:31794","2:13970:31796","2:13973:3331","2:13977:5190","2:13981:28832","2:13984:32262","2:13987:32264","2:13990:36541","2:13993:36542","2:13996:32266","2:13999:32268","2:14002:32270","2:14005:32271","2:14008:2776","2:14011:36543","2:14014:36544","2:14017:36545","2:14020:36546","2:14022:36547","2:14024:36548","2:14026:36549","2:14027:36550","2:14028:36551","2:14031:2689","2:14034:28422","2:14037:32272","2:14040:36552","2:14043:36553","2:14046:36554","2:14049:2651","2:14051:31643","2:14052:32166","2:14053:31645","2:14054:31646","2:14055:31647","2:14056:32169","2:14057:32170","2:14058:32171","2:14059:36555","2:14061:11195","2:14062:36556"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:964:2424":{"id":"0:964:2424","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13938:36537":{"id":"2:13938:36537","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13945:32232":{"id":"2:13945:32232","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:37248":{"id":"5:5726:37248","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2626","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2626","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:2563":{"id":"0:493-0:404:2563","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:2563","glob":false}}},"0:86-0:994:2656":{"id":"0:86-0:994:2656","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2656","glob":false}}},"2:13952:32256":{"id":"2:13952:32256","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13951:3429","str::split_at_mut_checked":"2:13954:32260"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13943:32231":{"id":"2:13943:32231","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13973:3331":{"id":"2:13973:3331","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42829:202","prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14005:32271":{"id":"2:14005:32271","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13940:32234":{"id":"2:13940:32234","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12505:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14034:28422":{"id":"2:14034:28422","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14043:36553":{"id":"2:14043:36553","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13930:2780":{"id":"2:13930:2780","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13999:32268":{"id":"2:13999:32268","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12486:490","str::splitn":"2:13996:32266","self::pattern":"2:13618:4426"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44952:9677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13962:36540":{"id":"2:13962:36540","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:45094:9685","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13960:34143":{"id":"2:13960:34143","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13959:34216"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45113:9687","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5745:3013":{"id":"5:5745:3013","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:14055:31647"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13959:34216":{"id":"2:13959:34216","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13960:34143"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45104:9686","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13977:5190":{"id":"2:13977:5190","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42829:202","prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13993:36542":{"id":"2:13993:36542","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13618:4426","str::split":"2:13981:28832","prim@char":"1:12486:490","str::split_terminator":"2:13990:36541"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44898:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13981:28832":{"id":"2:13981:28832","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13618:4426","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::split_whitespace":"2:13959:34216","str::rsplit":"2:13987:32264"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44830:9596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13967:31794":{"id":"2:13967:31794","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:4426"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14014:36544":{"id":"2:14014:36544","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13618:4426","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::rmatch_indices":"2:14017:36545"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44980:9679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14020:36546":{"id":"2:14020:36546","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14053:31645":{"id":"2:14053:31645","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14055:31647":{"id":"2:14055:31647","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:37251":{"id":"5:5741:37251","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725":{"id":"5:5725","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5726:37248","5:5727:2810","5:5730:37249","5:5733:37250","5:5741:37251","5:5742:37252","5:5743:4079","5:5744:3014","5:5745:3013"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1023:2659":{"id":"0:1023:2659","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}}},"paths":{"6:6521:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"24:2986:4336":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"11:1907:9562":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:23816:8738":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:282:5902":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"24:4813:4329":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"1:10487:11447":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"24:1064:37963":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:42942:5610":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15931:6979":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:6606:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:12437:10472":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"18:651:6158":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"24:5397:3962":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:23249:5623":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:43651:3179":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:4956:3910":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"21:2548:4195":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:13294:9670":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:2256:5462":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:12004:16649":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:5057:8021":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:754:9357":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:45574:9721":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6866:24019":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:4984:7986":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6914:9481":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:15410:6836":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"24:3615:4282":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"2:8569:4091":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"24:3411:4274":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"11:740:10767":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:5363:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:8546:9545":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:33062:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:5249:3941":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"20:116:37737":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"16:7471:7385":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:2332:5629":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"11:123:5893":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:8024:5487":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"21:2746:2578":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"24:1952:2653":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"20:908:4030":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"24:5483:3242":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"6:6411:8298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11114:24103":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:10597:6291":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6998:9485":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6256:9423":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:11965:9598":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"21:2617:4193":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"11:2301:9530":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:7838:24026":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:7598:36430":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:4300:5926":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:14796:6671":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"23:239:5096":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"24:1007:6110":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:41580:4111":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:23904:8746":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:0:3770":{"crate_id":17,"path":["object"],"kind":"module"},"2:11015:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:15090:6718":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13983:6495":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:22364:35769":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:6531:5940":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2:8931:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:15024:6711":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"24:5012:3926":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"16:6942:9483":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"24:2678:6121":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"16:7542:9529":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:8165:7266":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12976:6381":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:44998:9680":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:3078:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10418:24095":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:2772:7246":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:5562:8216":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11958:24159":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:538:6162":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:14917:6689":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:6666:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:10572:4155":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:4781:11416":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:4830:8573":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:3570:5926":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:22466:11496":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:15731:6928":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"24:3105:2626":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"1:11013:9234":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:381:5485":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"24:5997:3990":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"1:11921:6014":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:7929:34410":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:5088:8031":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:2920:7253":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6408:9441":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:12505:1895":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"24:3853:4290":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"24:5279:3930":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"24:5465:3129":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"1:7441:6003":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:16145:7050":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4914:7956":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"21:0:1380":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:3576:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:40295:16684":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:1636:11216":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:44952:9677":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13055:6309":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:12648:6368":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12225:9378":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:5196:4761":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"20:738:2578":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"6:485:7666":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:48017:9117":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"20:815:2645":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"5:3304:9562":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:47416:9069":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:41681:4118":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:8281:31406":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11777:9364":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:44576:34856":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:14832:6676":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13635:6425":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:1933:11239":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:7186:11494":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11042:34075":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11592:6272":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:6830:10656":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:299:9553":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11984:11345":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:41423:11268":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"6:8014:8672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:2014:11251":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:47996:9116":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:8559:4119":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:2900:7252":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:14554:5972":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:8000:7273":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:1884:4009":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:3048:23150":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"11:1085:37626":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"24:2290:4006":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"1:1872:11224":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:43157:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"18:531:9341":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:8014:7274":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6144:24010":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:4372:4010":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"20:834:2578":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"24:1761:28384":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"5:4332:5926":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:4903:11398":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"24:6046:3131":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"1:9509:9742":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10793:6182":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"16:6970:7260":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:14612:6626":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:6584:11590":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:4114:11364":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:39082:6133":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:15785:6940":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8226:9156":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11432:24122":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:4944:11382":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"24:5270:3945":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:44934:9676":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"24:3173:4263":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:47490:9071":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:16132:7044":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:12501:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:6680:8433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:7350:7378":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:1140:23075":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:387:5486":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12018:24205":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:44676:8989":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:13427:6410":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:48054:9120":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:5636:11440":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6269:9424":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:12511:1957":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:12493:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:4586:4313":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"17:13006:6385":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:12184:16654":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:11873:9758":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:5165:8037":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:14393:6593":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:7656:4009":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:3540:4080":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:3695:7284":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:3817:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11878:6317":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:2796:7247":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6599:8401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:6046:5687":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:3608:4022":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:23371:11579":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:2816:8713":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:4499:4307":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"11:798:5687":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:1785:5902":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:15905:6969":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:5860:3243":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"17:10938:37704":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:2802:5163":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"9:480:22994":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:6790:8472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:11816:9752":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:8528:9542":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:4956:7299":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"24:5517:3132":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"5:1889:5685":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"24:4726:4323":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"16:7044:7265":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:2400:4014":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:8137:7275":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:2499:11278":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:3045:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:15939:6982":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:9438:5994":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"5:7832:10642":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"21:241:37825":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"6:4805:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"24:3717:2561":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"5:6130:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"11:2121:9530":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:41632:4114":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:8591:11343":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:10115:24085":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:1584:7784":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10564:6290":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:31409:5545":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"21:2682:4194":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"24:3343:4270":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"6:5007:7999":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"14:7:10634":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:43181:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:5286:31381":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:2279:2970":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"16:4694:7292":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"9:500:7637":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:6716:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:5441:8162":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"9:0:3763":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:16786:7215":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:5186:8040":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11270:9219":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:3411:5590":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:42589:8957":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:43665:4165":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:23300:5623":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:11457:6307":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:13958:6493":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"14:160:10634":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:33051:9620":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:42863:4014":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:5319:8109":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"20:953:3262":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"24:4540:4310":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"0:964:2426":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"2:41557:4109":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:43255:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:42649:2645":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:43946:34219":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:5375:8126":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:3834:7285":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:11355:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"24:1809:2652":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"2:23115:11582":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:47349:9066":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:12625:6367":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"24:88:4478":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"24:6012:3133":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"17:15655:6911":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:12170:9677":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:1643:7828":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:2197:2571":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"6:5151:8036":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:8308:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:13644:16658":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:4267:7290":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:8023:11291":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:45566:9719":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:6749:7328":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:8934:4089":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:8448:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:491:9340":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"21:1362:2659":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"6:7563:8648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:14773:6670":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:2660:7241":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:43017:9657":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:10796:4157":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:884:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:44655:9602":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:9473:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:6410:4099":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:2684:7242":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:9195:9221":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:1696:7856":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"24:3581:239":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"6:5107:8032":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:22902:35775":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"24:590:4019":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"21:109:5716":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"16:7807:37661":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:5976:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:13692:16667":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:6672:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:15106:6720":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:6564:8379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:7773:9583":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"14:165:23084":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:16323:7101":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"20:933:2644":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"24:3088:4262":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"17:15777:6938":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:6917:8518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:5009:3925":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"7:79:22989":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:4165:5902":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"15:306:23104":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:11424:9242":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"2:45865:9726":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10578:30933":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:2227:24165":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:3551:4183":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:11686:11291":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:586:7725":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:45582:8995":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:8626:9549":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:42880:4771":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"18:581:5177":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6159:9413":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:3917:11345":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:46913:9020":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4881:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:16377:7111":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:2585:8710":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8585:11344":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:889:5905":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:635:6176":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:14902:6685":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:5885:9728":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"14:0:3767":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:7588:9578":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:974:11210":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:5709:24008":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11706:24152":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"18:659:28362":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:45558:9717":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:4828:8571":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:45052:9683":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9377:9227":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:3720:24219":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:9336:28414":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:16198:7068":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:22868:11502":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:13408:9598":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11475:24124":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:15439:6847":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"24:4632:4316":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"5:3456:5685":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:1123:5902":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:4184:7288":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"24:5875:2960":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"1:4019:11347":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:873:11212":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12319:24230":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"24:5512:3965":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"6:7308:8525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:7386:7380":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:8330:8702":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"24:2103:11071":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"2:47511:9072":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:22393:35767":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"24:5904:3983":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"16:2990:7256":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:47378:9067":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:3308:29305":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"20:744:3262":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"6:5295:8098":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11283:9220":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:9211:11469":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13041:24294":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:43072:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"1:6440:10775":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:48191:9135":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:22381:35774":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:5813:11444":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"24:691:4009":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"1:4816:11368":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:769:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"21:959:2645":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"6:6462:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:7058:9494":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:6763:5902":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"15:0:3768":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:14055:6509":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"11:1893:5685":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:16798:7218":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:913:9559":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4929:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"24:4434:4303":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"17:13692:6435":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:42911:4758":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:6723:8450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:8058:24028":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:535:5462":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:538:7700":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:5449:7314":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12191:9375":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:3051:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:22863:11291":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:4334:11391":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:12502:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12869:6411":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:1492:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:14859:6679":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:41332:9631":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:7487:8600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:48063:9121":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"0:0:2435":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"17:12095:9368":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:10293:9650":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:7448:8583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"12:0:3766":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:43092:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:6984:7277":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:5271:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"11:685:4014":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11065:24102":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:5249:8074":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:12512:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"18:573:6158":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:47076:9037":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12583:6366":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:23665:34199":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:6473:8326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"21:2562:129":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"11:2566:4066":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"24:3428:2961":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:43292:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:15981:6991":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:15739:6931":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:6808:7257":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:12073:31414":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:2486:7233":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"24:4938:2909":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"2:24389:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7959:9534":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:47843:9111":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7223:9500":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:47399:9068":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:15852:6954":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:479:7663":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:3772:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:3889:6191":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:155:5891":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:964:10767":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:40487:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:13306:6406":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:47222:9045":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:14312:6580":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"17:322:37681":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:2794:11323":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:7577:8657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11971:24158":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8902:4010":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:40429:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:12507:1883":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:1507:7737":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:11222:24104":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"21:127:5889":{"crate_id":21,"path":["proc_macro","bridge","client","state","set","RestoreOnDrop"],"kind":"struct"},"6:5139:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11952:10722":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:15496:6882":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:3707:4010":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:6813:8478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:43918:8982":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:15010:6710":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"24:5284:3946":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:12082:9366":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:726:10641":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:8212:4075":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5025:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"24:1811:4135":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:7863:4104":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"24:5257:3943":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"17:506:6233":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:41146:9624":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10823:6297":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:7114:9592":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:10798:3179":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:33037:34264":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:16520:7135":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:12108:9369":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:22411:11291":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:9329:5467":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11985:24204":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:881:11349":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:11163:6011":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:14243:34733":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:12234:6392":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:34288:4055":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:349:37961":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"17:15864:6960":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:34016:6128":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:44715:16641":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12044:24182":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12280:24250":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6440:24013":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"24:6031:4000":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"17:15557:6889":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"18:563:6164":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:53:5710":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:45849:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:42999:9656":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"5:3330:9563":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:10734:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:6123:7262":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:42767:9734":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:14220:6544":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:3503:24216":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"21:2218:4031":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"24:1072:37967":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"2:2896:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:3088:8712":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"24:3139:2958":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"24:1018:6111":{"crate_id":24,"path":["syn","fixup","FixupContext"],"kind":"struct"},"5:7907:5686":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"23:148:4792":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"17:14708:6640":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:7094:5691":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:16613:6471":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:23700:34204":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11294:34078":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:42871:4009":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:33149:2604":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:6408:5989":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12122:9370":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:3579:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"24:5261:3928":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"16:2820:7248":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:12497:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"11:396:5897":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"24:4962:2777":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:26789:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:3129:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:3520:5591":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:41816:4119":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:10802:4166":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"24:259:10632":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:44806:9668":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:16701:7193":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:1632:7820":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10549:6289":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"24:647:6109":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"2:7758:3389":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"24:5460:2586":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:12077:9599":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"24:1925:4132":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"6:6740:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:11539:6309":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:7990:9536":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:0:3771":{"crate_id":18,"path":["memchr"],"kind":"module"},"24:1112:3969":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"18:765:28361":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:23577:9608":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:47798:9110":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:11483:5971":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"5:3933:5685":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:7431:8578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8579:9684":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:43960:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:43479:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:41225:9627":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:6449:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:39716:6137":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:23937:8749":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"24:5899:3984":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"2:43672:4166":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:22890:8718":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:1250:36373":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:45888:9727":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"23:46:4040":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"24:3496:4277":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"6:6659:8427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11579:24131":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:7852:10662":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:8297:4146":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:2348:37570":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:2466:5685":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:43930:7455":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:13554:6416":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"17:13854:6476":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:7495:9523":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:8662:9201":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:23376:11577":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"24:4313:4295":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"16:5255:7308":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:991:11212":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:8403:4093":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:4212:11369":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12260:24249":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:13157:24292":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:2719:5978":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:3556:4056":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"14:31:10634":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:46782:9006":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:46995:9025":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:7556:9577":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6770:8464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:5622:11439":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:41403:3551":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:43027:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"1:6716:11459":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:1539:4014":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:14750:6661":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:15:3404":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:7548:8643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"23:504:5090":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"6:7350:8549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:15418:6839":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:291:37901":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:3406:5589":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:8209:5762":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"21:2668:2645":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:8940:4090":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"10:36:7576":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"24:5385:3960":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:47190:9043":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:44789:9666":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:23827:8739":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:42074:4084":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:45393:9701":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:1727:7868":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:12510:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:3314:31580":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:8284:8693":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:11842:9755":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:3309:36443":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:3688:11310":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"11:1900:9561":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"24:5538:3237":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"2:22472:11499":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:14460:6604":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"24:5641:3971":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"2:40392:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12687:24283":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:39:5598":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:5304:5934":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:13945:6491":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:2415:23122":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:43891:8972":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:22362:35778":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7731:4771":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6904:9480":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:4056:5687":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:4150:11365":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:47623:9076":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:2481:5612":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:8656:11344":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"21:2397:2646":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"5:3720:4014":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:9318:10772":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:1627:5687":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:7612:4009":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:40447:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:9576:4860":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"17:14533:6337":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:3096:28402":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:7980:7272":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:3404:11330":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:6935:5902":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:15701:6917":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:1524:4010":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:7604:8663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"24:1364:9298":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"24:5296:3931":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"16:7578:9227":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"9:445:22995":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:11007:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:2266:9566":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:2652:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:14845:6678":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:11752:8984":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"16:2530:7235":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"13:229:7569":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:465:2567":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:6625:9471":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4997:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:5305:24303":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"0:965:2433":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"6:5586:8223":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:8031:8683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:6823:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:11385:9238":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:3789:16685":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"24:5401:3963":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"17:14358:6589":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"24:3836:4289":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"1:1086:9530":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:5341:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"14:40:2578":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:7316:8530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:43329:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:5106:11417":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14821:6675":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:16728:7202":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:7628:9579":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:23915:8747":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:14692:6635":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5230:8063":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:2755:10653":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:14375:6592":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:546:9401":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11319:37720":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2336:11271":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:42807:8967":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12897:9393":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:6183:17033":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:41461:11287":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:6098:24009":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"11:2323:11214":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:12204:9376":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:3092:4277":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"9:390:22996":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:3126:23151":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:14507:6610":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:10966:9743":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:41187:34120":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:15121:6724":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:12491:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:9594:5753":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:7785:9586":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:45214:16673":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:5129:11419":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:3140:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"21:181:5332":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"6:1530:7747":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7554:24025":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:1927:3128":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:6495:5990":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11173:37703":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:7822:9587":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:8302:8696":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"24:5719:3978":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"2:45600:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:46831:9011":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2890:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"24:6025:3998":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"1:8511:9196":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:14599:6624":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:7292:5956":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"24:4284:4293":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"16:7212:9499":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:31847:5177":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10246:24089":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:23893:8745":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:12156:9676":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:23221:11291":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:13140:16662":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:8261:8687":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:15997:6994":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:14627:6629":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:4934:4177":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11617:24104":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:7267:5953":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:44898:9674":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:47304:9049":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:10753:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:15573:6890":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:15844:6953":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:4998:5982":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:47158:9041":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:939:5687":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"21:141:5717":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"24:4615:4315":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"24:5865:2956":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"1:6752:5997":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"24:5360:3936":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"11:2380:4010":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:5255:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:31462:4154":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:2854:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:1563:7770":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"21:2726:2970":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"8:0:3762":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:12787:6370":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:22325:5177":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:6392:5972":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:45147:9628":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:16761:7209":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"21:2751:3262":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"24:5352:2844":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:33060:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:45562:9718":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"15:394:23113":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:7964:6005":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"21:902:5723":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"6:6748:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:9219:4009":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:5551:8210":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:9450:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:4446:146":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"15:327:10742":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:12176:9374":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:42921:4149":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:23641:8724":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11653:6313":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:4529:5926":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:10787:11330":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:48034:9118":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:14335:6584":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:3296:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5676:8266":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:5649:7315":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:34489:6131":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:13639:16660":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:45744:8998":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"20:518:4028":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"17:14997:6709":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:44980:9679":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:3632:3310":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"1:631:11194":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13028:24295":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:12776:24286":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:48100:9124":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:41651:4116":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"24:4980:3912":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"17:10394:24094":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:12906:6377":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:3497:11317":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"24:4557:4311":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:7108:4101":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:10808:4164":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"24:5424:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"17:11788:24175":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"24:4376:4299":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"17:16019:6999":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:23685:34194":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:13818:6471":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:10432:10769":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"24:4685:4320":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"17:14560:6619":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"9:176:10757":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:4826:8569":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:47091:9038":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:39137:6136":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:11055:9594":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:2504:5709":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"16:2570:7237":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"24:5409:2601":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:33592:6126":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"23:407:4981":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"21:2352:3262":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"1:8596:11340":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"20:775:4031":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"16:6890:7259":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:44702:4095":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"24:4925:4659":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"1:328:1817":{"crate_id":1,"path":["std","thread"],"kind":"module"},"17:13871:6478":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:5019:8005":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:1105:23074":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:4234:11373":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:1636:9561":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:8637:9735":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6852:9477":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5069:8030":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:8152:4073":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:11856:10471":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"9:328:7614":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:4929:7298":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:23849:8741":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:8814:8984":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"20:792:265":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"17:12886:9392":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:6296:4110":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:1631:5685":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:23593:8720":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:41840:4121":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:7716:37690":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:41391:9634":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:11902:6322":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"24:5495:3966":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"17:13145:24293":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:6462:24014":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11503:6308":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:4164:11366":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:7891:5685":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:3076:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:7192:24021":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:10843:6298":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:4570:11389":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:1415:10640":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:42621:11341":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"9:422:22997":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11050:11421":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"2:45459:9712":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12347:24252":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:5641:8253":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:903:37673":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:32984:7573":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:9491:9231":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:5672:11442":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"24:5637:3977":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"16:8598:24034":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:8503:7477":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12851:9390":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12711:24285":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11828:9246":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4792:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6337:9432":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:13331:9675":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:34422:6130":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:2206:5638":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:7219:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"24:4866:4333":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:45034:9682":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13205:24107":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:5379:7312":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:23562:8719":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11818:24163":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:42040:4076":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:43968:4154":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:3944:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:1401:11214":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:1711:7863":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:4983:7300":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:491:7668":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:3308:3106":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:15531:6883":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5570:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:41566:9638":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:11944:11346":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:12499:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"6:578:7721":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:8214:11286":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:5001:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:4714:4322":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"18:698:9348":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13909:6484":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:9465:6001":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:15540:6887":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:12005:11347":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:1616:10767":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:2469:4016":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"1:12080:9760":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:5115:11418":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:5357:8116":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:22580:11291":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:8066:24029":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:10419:30928":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:11386:24120":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:14152:6540":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:2246:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"5:3085:2819":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"24:1108:3635":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:4492:5926":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:16822:6488":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:8151:7276":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4869:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"10:0:3764":{"crate_id":10,"path":["adler"],"kind":"module"},"1:11508:7634":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:5575:16636":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:882:4010":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8371:31382":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:11006:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:16264:7085":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"24:1371:9301":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:48089:9123":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:3043:5981":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:44203:8984":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:42033:4074":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:11050:11295":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"20:709:9337":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"20:948:2578":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"17:11232:24124":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11448:24123":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11401:6305":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:7030:7337":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:905:4009":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:3587:7283":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:2021:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:8353:8708":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:358:4028":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:42951:5479":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:7401:37650":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:16595:6461":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:23021:11291":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:44191:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:8457:4092":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:785:9560":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:1624:4009":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:3449:11327":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:4772:4326":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"17:14099:6526":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8852:11434":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:1589:7786":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:1564:23076":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:15077:6717":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13537:6378":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"13:0:3760":{"crate_id":13,"path":["std_detect"],"kind":"module"},"24:640:237":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"20:723:2645":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"17:14284:6573":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:7414:8577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"11:2545:7571":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:5579:16637":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:5349:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"5:4210:4014":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"24:1630:4152":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"24:3445:3261":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:46814:9010":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:2649:11322":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:997:11213":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:1586:9560":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8125:10648":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:5198:7306":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11805:24164":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:2467:7227":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:4970:7978":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"14:187:23091":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"24:5826:214":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:33120:5161":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:22592:8717":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:6219:5926":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:4964:7976":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:4860:4169":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:7919:24027":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12293:24214":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:8685:8558":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:3762:16750":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:14438:6603":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:47594:9075":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"6:559:7711":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12149:9372":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:41538:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:5839:5691":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:2112:5542":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:6953:9484":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:532:7697":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:15769:6936":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13169:24326":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:44737:16651":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"24:4255:4291":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:9410:9230":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:15641:6907":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6652:8426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13798:6461":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:14531:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"24:5983:3988":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"6:4902:7947":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"24:5028:2583":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"20:878:265":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"6:1625:7816":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11733:24153":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:14400:16711":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:3699:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:523:7691":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:583:24082":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"24:5253:3942":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"24:6009:3995":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"17:15989:6993":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:3308:7224":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:6028:7258":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:7119:5710":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:11302:8995":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"20:883:2645":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"17:13757:6458":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"23:513:1433":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"2:48074:9122":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:16209:7069":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"24:1005:11291":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"17:14640:6630":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:6064:7263":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:40375:3186":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:4594:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:16832:6493":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:3914:11346":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:44830:9596":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:35220:4327":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"24:5340:3934":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"1:7909:2659":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:2329:11270":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:41176:9625":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:726:6180":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14140:6537":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:842:11210":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:5205:8052":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:4873:7296":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:41642:4115":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:10097:24084":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:1339:24139":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:2215:5637":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6502:23121":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5593:8225":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:23627:34157":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"24:5729:3979":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:14611:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:31179:11348":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:6882:8493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:14666:5596":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11465:9358":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:440:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7372:7268":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:12371:6330":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:45839:11587":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:4415:11395":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:3353:11329":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:12498:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13933:6488":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5117:8033":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"24:4951:3911":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"16:6696:24017":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:3376:4054":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"11:1674:5899":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:3181:11254":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"24:4359:4298":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"6:5482:8188":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10274:24090":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:11346:5970":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:12458:11203":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:7282:9513":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:5810:8479":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:16632:7179":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:4844:7295":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"24:4528:4309":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:10806:4163":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"24:1056:37965":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"6:7463:8588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:42920:4150":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:16241:7084":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5471:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:14886:6683":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:515:6161":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:4912:827":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:12683:16645":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:8267:8688":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"20:825:2566":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:10830:5473":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:13854:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:41244:9623":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:23838:8740":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:46752:9002":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:2137:11214":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:15665:6912":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"20:982:4009":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"5:2162:11217":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:9242:9223":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"24:4656:4318":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"17:15602:6898":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:2378:24193":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13471:6375":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:11291:37702":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:11757:24154":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:11630:6311":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:14260:16713":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:8549:4106":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:42755:9653":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:8529:11290":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:5217:8059":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:6691:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:8262:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:11678:24130":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:43403:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4890:7942":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:5814:3980":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"5:7539:5597":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"21:2246:2566":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"2:5012:4180":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:960:10766":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5405:8141":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:2509:11283":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:3024:11291":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:3461:4314":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:42064:4082":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:33026:2733":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:6217:5990":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"24:6007:3994":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"17:15064:6716":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:6534:8356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:43140:4014":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:5282:8093":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:11157:6010":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:43658:4157":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:15679:6913":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:4350:11393":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"24:5288:3947":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:46899:9019":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11442:2947":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:2668:5624":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"20:687:4032":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"5:3338:9561":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11075:37706":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"20:806:37741":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:47272:9047":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:38972:6134":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12952:9396":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:14114:6532":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10442:24096":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:3141:6186":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:5224:8060":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:7368:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:31820:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:14375:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"24:1830:4136":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"16:8636:24035":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:80:28350":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13222:24108":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:10790:11326":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:41140:9623":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:11339:5969":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:11926:6324":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:6712:4076":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:14299:6578":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"24:5560:3967":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"1:9759:11286":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:44848:9599":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:11058:10648":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"20:719:4028":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"11:2366:23079":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:7259:9512":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:12840:9386":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:5282:7309":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6713:2608":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:3866:11217":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:10987:9751":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:4498:5928":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"9:53:10746":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:1214:36370":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:12826:9382":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:7568:5687":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13733:6444":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:688:11199":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:45749:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:11320:9231":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:10516:24098":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7521:9528":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:7797:5935":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:6233:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"24:5333:3933":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"17:14346:6587":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:16283:7090":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:598:6118":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:9182:9220":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:15148:6727":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:10241:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:14001:6503":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:9305:9226":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"9:236:8984":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:2450:7225":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:9158:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:12492:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:6419:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:3802:35714":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:11922:9596":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12736:24261":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13547:10724":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:42055:4080":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"24:5329:3954":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:23286:11586":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:297:2626":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:46980:9024":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:16812:7219":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:2403:5593":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"21:2608:265":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"24:5389:3961":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"5:212:5600":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:4178:11368":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:12485:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12008:6150":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:11527:24138":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7305:7372":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5622:8244":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:2704:7243":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:44166:9658":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"11:671:4010":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:830:11208":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:5479:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"24:4393:4300":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"24:3598:4281":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"6:5670:8264":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:8669:3340":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6794:9473":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:14672:6634":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:9254:11467":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:4483:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12359:24253":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"24:3700:267":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"16:6658:10726":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:2702:2566":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:8437:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:14947:6692":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:5520:8198":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:8219:9731":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"20:843:3262":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"17:13119:6388":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:47038:9035":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"23:272:2655":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"24:4668:4319":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"17:16084:7043":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13970:6494":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:7969:9535":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:4241:7289":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:7907:7425":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"21:420:5890":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"24:5416:3186":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"24:3666:4283":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"1:8062:5473":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:1489:7729":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:15829:6951":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:45570:9720":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:22464:11291":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11025:9197":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:13618:4426":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:14520:6613":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:5043:4181":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:14127:6536":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13662:6431":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:3538:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:12486:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:44419:9664":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:12489:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:4902:7297":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:3573:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:7539:8640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:698:4009":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:7361:8554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"24:4760:4325":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"24:4989:2592":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"11:2349:11215":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:12508:1889":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:2550:7236":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"20:781:28370":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"24:4825:4330":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:45104:9686":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5488:8189":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"24:4697:4321":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:3391:6138":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12135:9371":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6544:8363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:8296:8695":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"24:3734:4284":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"24:4994:2637":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"20:889:2646":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"17:16297:7092":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:2766:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:45418:9702":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4896:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:16159:7056":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:12496:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"17:12392:6332":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"24:3394:4273":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"17:16036:7006":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:43051:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"1:1648:9563":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:15714:6923":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:102:9552":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:42733:34193":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:4496:11396":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:6901:5998":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:44627:9600":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"20:693:4146":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"24:5829:3226":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"6:5477:8186":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"24:5544:3636":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"17:16171:7059":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13570:24112":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:8223:9537":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:41548:4108":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:9781:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:41215:9626":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:1799:5707":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"17:12920:9394":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:7391:8576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:41691:4103":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:12115:16652":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:7075:24020":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:8711:7483":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:6611:8406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13781:2578":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:4883:4334":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"2:45828:35188":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:8707:9202":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:985:5910":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"24:2349:4008":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"24:5832:2939":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:34556:6132":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"24:1088:37966":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:44880:9673":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:43440:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:14652:6631":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:41347:8953":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"23:322:3265":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:5441:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"24:3462:4275":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"17:12749:24260":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:33044:4177":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:41528:4107":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:34874:5097":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:41468:4095":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"11:1049:11215":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:23159:11583":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:33151:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:5460:11333":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"4:0:3761":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10784:37715":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"16:2506:7234":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"24:5365:3957":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"11:708:10766":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:3020:4258":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"2:43985:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:14043:6508":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:5871:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:6381:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"24:5564:3232":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"1:6316:5985":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12056:6325":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6680:24016":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"13:110:37637":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:4733:4185":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:3311:31581":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:41589:4112":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"22:0:3893":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:7864:4105":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:8248:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:10534:6288":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:41488:4096":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:1605:10766":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:47946:9114":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:8648:11388":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:3303:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:41667:4117":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:2666:5623":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"24:0:2413":{"crate_id":24,"path":["syn"],"kind":"module"},"2:45329:9699":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:9764:6007":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:6071:5984":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4990:7989":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:2571:9335":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"17:15812:6944":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:7410:6002":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"11:854:11211":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:3343:36438":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"24:2613:11291":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:5742:11443":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:10421:31408":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:23649:8725":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:44757:16650":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:12061:9247":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"24:5631:3974":{"crate_id":24,"path":["syn","lit","LitCStr"],"kind":"struct"},"24:3649:2593":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"6:6708:8445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"24:3003:4257":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:13578:4034":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:5113:7303":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:12335:24251":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"20:927:2970":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"1:7347:10658":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"21:2613:4028":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:31473:34153":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:5507:8197":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:4781:4148":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:4816:7891":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:835:11209":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:5429:5936":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"17:14963:6696":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"24:5890:3985":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"1:12513:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:13124:10645":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:22335:35772":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:3603:9199":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:11851:24162":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:8565:9548":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:15953:6984":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:3381:6125":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:3086:36386":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:23247:34381":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:10996:9156":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"24:4330:4296":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"1:9369:2572":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:4312:30929":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11026:37714":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:5658:8257":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"11:1920:2615":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:14573:6621":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:968:11209":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:434:37631":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:4570:34244":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:11081:29549":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:14031:6507":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:15689:6914":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:5502:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:13095:6387":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:1908:11233":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:4189:4009":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"24:341:4146":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"16:7416:24022":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:15475:6877":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:5656:11441":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:2590:7238":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5196:8047":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:45635:16844":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6302:9430":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"11:772:9559":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"24:1297:2655":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:8978:34291":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:1642:9562":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:41376:16787":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4940:11379":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:14872:6680":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:6084:9407":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"24:1367:9299":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"5:6844:4009":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:40544:8823":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:10561:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:11358:24119":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:7454:8585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:9357:31411":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:881:11213":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:16341:7107":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:22379:35764":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"11:1880:4010":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:5301:3949":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"17:12860:9391":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:48138:9132":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:6958:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"24:1096:37964":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"24:3071:4261":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"24:4801:4328":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"16:5060:7301":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"11:1023:11214":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"11:1914:9563":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:2474:129":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"1:8376:10780":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:4342:11392":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"24:5627:2784":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"17:13838:6472":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10729:6295":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"24:5569:2578":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"6:8343:8706":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:926:9560":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:14327:6582":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"11:2551:37630":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:12272:6019":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:908:37681":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:8199:8684":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:1675:7846":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:3987:6199":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:46867:9017":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:23023:11498":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:11142:6009":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:45113:9687":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:45281:9698":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"24:5336:3955":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:34701:6117":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:16187:7063":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:5992:11457":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:2295:9568":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:9284:11468":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:570:7716":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:6543:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:7578:5913":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:8319:8701":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2208:5639":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:11034:34077":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:14283:4111":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:41826:4120":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4842:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:15760:6935":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:809:5685":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"24:3275:4267":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:44423:9665":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:44636:9601":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:4981:4178":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:7518:8626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:689:9347":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:8179:7433":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"24:53:2654":{"crate_id":24,"path":["syn","token"],"kind":"module"},"20:113:9336":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"16:5417:7313":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:10400:11233":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:1703:7859":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"24:5419:3939":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"1:4900:11420":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:8566:3551":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:14348:34688":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13921:6487":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:2483:11274":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"24:3326:4269":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:12042:16655":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"24:3768:4285":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:47917:9113":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:42827:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:5462:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:8209:7264":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:8483:3911":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:10696:6294":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:1597:7791":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"24:5274:3929":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"24:5442:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"24:79:2572":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"21:1992:5708":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:47975:9115":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:23747:9616":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:33061:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:42959:9655":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:45264:9697":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2105:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:16008:6998":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12699:24284":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:1657:7839":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:4851:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:4410:4301":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:43553:10771":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:9203:4010":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"24:5049:2916":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"24:6015:3996":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:3298:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"24:5907:2561":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"6:5334:8113":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:2840:7249":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:317:37673":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:2173:11218":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:16026:7001":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:43132:4010":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:8273:9733":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:3660:4162":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:3403:5588":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:5757:7317":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:47888:9112":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:15160:6731":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:2733:5977":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10141:24086":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:23456:9606":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:1002:4010":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:40728:5181":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:3048:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:8585:24033":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:2148:4146":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"23:235:5094":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"2:44406:8988":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:16656:7184":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"20:904:2566":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"24:5714:2961":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"17:15753:6934":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:2368:9573":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:13451:6411":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:42026:9645":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"21:2621:4009":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"6:6731:8451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:6631:8414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7949:7271":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"11:2533:2566":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:4703:11399":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"11:2440:5687":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:12487:1917":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:16399:7117":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:1230:36385":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:2769:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"11:351:37623":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:2724:7244":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:7508:30918":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:4617:5587":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:7469:8589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:6623:8413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11281:24105":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:3852:11342":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:2142:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:2748:7245":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"24:3870:282":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"17:12762:24259":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:1931:5753":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:3854:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:45756:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:16362:7110":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:718:6177":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:15315:6753":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:895:4014":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:11822:11448":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:44728:9603":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10487:24097":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"6:5648:8256":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7508:9525":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:12798:24287":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:9433:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13515:24111":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:4120:7286":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:2282:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"24:4574:4312":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"24:3292:4268":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:14019:6504":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"21:2687:2646":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:3054:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:47173:9042":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"21:2601:4198":{"crate_id":21,"path":["proc_macro","escape","EscapeOptions"],"kind":"struct"},"16:8320:24032":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:7118:5692":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"24:3479:4276":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"16:2950:7254":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:6565:11589":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:4766:7293":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11421:24121":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:8255:8686":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:23734:8737":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:2406:24160":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:23871:8743":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:1985:10649":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"24:3785:4286":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"24:5580:2655":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"17:12962:24288":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:4921:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:10971:9745":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"18:613:37731":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:45356:9700":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:7337:7376":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"24:4296:4294":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"17:12723:24262":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15549:6888":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:3447:11326":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11864:24161":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4829:7901":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12524:24218":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12409:24254":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:1620:4010":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:8892:9736":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:3513:4278":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:3057:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:8749:4765":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:45428:9706":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"24:5988:3989":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:5223:16697":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:5318:7310":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:5878:5990":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:3338:5158":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:1220:24134":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:7341:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:4120:11363":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"10:44:7577":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:42567:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:44645:16648":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:3854:24235":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:1005:9530":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:41339:9632":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:46799:9009":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:1109:11215":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:7814:10659":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"16:6876:7335":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"24:5348:3935":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"1:985:11211":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13349:9398":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:1690:7855":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"9:355:23010":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8090:11201":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:12570:24215":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13181:24297":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:44174:9660":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:8908:9218":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:7548:4009":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"23:150:4791":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:41252:9629":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:45441:9710":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:3309:152":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"1:12469:29545":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:7586:8660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3621:11288":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:6443:8316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13322:24110":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:16311:7099":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:507:6158":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13592:6421":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:34355:6129":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"24:3207:4264":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"1:12500:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:31447:5546":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"24:3819:4288":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"2:23616:9611":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"24:5547:2712":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"1:683:11198":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"20:801:9338":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"17:16714:7199":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"24:5381:3959":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:44800:9667":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"24:5313:3932":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"1:1855:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:11998:24176":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:9752:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:6781:7331":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:5387:8130":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:3851:4146":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:1898:5445":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:14547:6618":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:10789:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"24:3156:119":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:44221:9663":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"21:936:4194":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"6:5044:8017":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11831:6309":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:16332:7105":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:46934:9021":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"24:5318:3952":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"24:6005:3993":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"24:5373:3937":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"6:5366:8120":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"23:0:1433":{"crate_id":23,"path":["quote"],"kind":"module"},"2:41202:8952":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:33804:6127":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"24:5639:3976":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"16:7938:9531":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:5999:11458":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:45624:9723":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"24:4475:4305":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"6:8273:8689":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:13266:24109":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"24:6003:3992":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"6:6876:8492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:4562:5926":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"16:6111:9411":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"24:6000:3991":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"5:6717:5687":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:48115:9125":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:41413:5961":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"24:6041:3987":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:11699:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:45122:9688":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4957:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:1667:7845":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:6421:9402":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:472:24081":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:4636:16688":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"24:3054:4260":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"11:1580:23077":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:1521:7742":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:680:9344":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:14574:5974":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:2437:24181":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"24:5038:2793":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"24:2125:37902":{"crate_id":24,"path":["syn","precedence","Precedence"],"kind":"enum"},"2:41443:11255":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"24:5393:3938":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"16:3014:23149":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:7789:37691":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:14405:6595":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:8399:4094":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:2228:9564":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:23727:9613":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"24:5326:2918":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"17:12673:24274":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:15887:6965":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:8233:24031":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10928:24100":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5494:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"24:3564:4177":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:4924:4176":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:7729:5478":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"7:32:22982":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"24:5305:3950":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"11:2148:11215":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:5420:8147":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"24:2393:4010":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"24:2322:4007":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"6:7332:8542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"24:5629:3973":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:40555:8824":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"24:5841:2942":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"5:7648:4009":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:43901:4154":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:8381:11324":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:9225:9222":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"24:4598:4314":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"24:5042:3927":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"23:78:2647":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"5:3364:2615":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10167:24087":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:5241:8070":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:31441:5166":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:22484:8717":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:6437:8313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5036:8013":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12816:6375":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"24:4854:4332":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:40379:9621":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"24:2667:11291":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"2:3783:16686":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4937:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:10800:4165":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:4404:7291":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:2816:5164":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"6:8008:8670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:15919:6976":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"24:3224:4265":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"16:8267:7441":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:47205:9044":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:9269:11466":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:7128:5693":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:11691:24129":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13610:6424":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:4582:34113":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:15946:6983":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:5317:31381":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:13624:16659":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"24:1807:4021":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"24:5488:3201":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"20:0:2412":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"24:252:10631":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"1:12504:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:33119:4201":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12028:24206":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:46966:9023":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:40507:4060":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:576:5468":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:8289:10654":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:2555:3776":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:45546:9714":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"21:919:265":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:13193:24296":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:3441:7282":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"24:5884:3130":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"6:5127:8034":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"21:2305:2578":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:46767:9005":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:41610:4113":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"24:5369:3958":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"16:2640:7240":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:9726:16659":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:8837:9213":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5450:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:680:11197":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:45129:9629":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:42855:4010":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:45774:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:45815:8999":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:12087:9760":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:4152:7287":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:8516:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10977:37713":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:12216:9377":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"24:6037:3986":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"1:5688:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"24:4837:4331":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"17:14933:6690":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8630:9734":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:2559:7574":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13014:24302":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:12249:24248":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:9455:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:1064:23073":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"24:2376:4009":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"1:1870:11223":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:42082:4086":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:3567:3126":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:41365:9633":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12941:6380":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:15621:6899":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:40407:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:2497:11277":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:12503:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"24:4487:4306":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"24:701:4010":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"16:5689:7316":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:7838:10661":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"2:23509:9607":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:44006:4156":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:44747:9604":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:5742:6289":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"24:5356:3956":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"6:6507:8349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5325:8110":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"11:1158:10640":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:508:5975":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:545:7703":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"24:3241:4266":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"1:2084:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6758:8462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:12306:9379":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:40331:5592":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:1370:9530":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:16385:7114":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:8104:11202":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:11867:9757":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:7703:4066":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:5727:6288":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:45094:9685":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11720:9361":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:4575:5928":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:6526:8351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:3297:4010":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6389:24012":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13290:6247":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:9460:6000":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"24:5405:3964":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"5:7809:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:521:28364":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:40467:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:7986:8669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:45407:16674":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:14586:6622":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7358:7267":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:10784:11328":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:8740:4766":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"6:6777:8465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:5224:7307":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"24:3377:4272":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"1:10947:11422":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:13890:6483":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:3678:11289":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:4702:4184":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:7016:9492":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:12509:1871":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:6833:11462":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"21:590:4196":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"17:14975:6698":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:896:37672":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:16555:7165":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:12453:10782":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:3110:7279":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:47528:9073":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:6638:8415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:11098:9221":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:4226:11371":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:14269:6569":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"24:2520:3199":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"24:4463:4304":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"17:12983:24289":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:8105:7430":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:11873:4010":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"11:2420:4009":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:6573:9468":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:589:6165":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:7620:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6205:24011":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"24:3683:266":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"5:7758:16787":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"11:2539:7570":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:9152:11445":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:328:9556":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:5144:7304":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:8681:11421":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:5629:8247":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:5428:8152":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12163:9373":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:11209:5968":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"16:4810:7294":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6480:8330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:14738:6659":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"14:214:9550":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:41519:4098":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:47251:9046":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"24:5635:3975":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"24:2172:11072":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"24:138:2572":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:10427:34287":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:1500:7734":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"24:6020:3997":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:22413:11500":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:9390:29494":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"24:1940:4145":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"18:96:28351":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"24:3802:4287":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"1:3351:11328":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6738:37654":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:16775:7213":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:46846:9012":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:3800:5902":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:5533:3234":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"24:6028:3999":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"24:3751:2615":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"2:23329:11291":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"21:364:4860":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"20:732:2566":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:2660:3265":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"18:623:37734":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:8236:9732":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:45138:9623":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:47461:9070":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:8043:37649":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:9613:4772":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12066:6326":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:5085:7302":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:16218:7071":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13070:6317":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:45752:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:16684:7191":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:47721:9109":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:497:7671":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"24:6034:68":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"6:6493:8339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:8919:9739":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:1601:23078":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:8298:9538":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"24:3258:2591":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"17:10778:24099":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:23882:8744":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:41598:4122":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:5265:8082":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:23343:11578":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14483:6609":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:23926:8748":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:5288:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:15431:6846":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"24:4516:4308":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"24:5309:3951":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:3344:5160":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:8624:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"24:85:11291":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"1:8110:11241":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:7980:4070":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:45554:9716":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"24:5015:2595":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"6:5603:8230":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:33030:3340":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:2435:23148":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:42789:8966":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:2860:7250":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:8039:5474":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"23:514:3263":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"17:11566:24132":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:47120:9039":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:48230:9151":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:5131:24298":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:22347:35772":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:2859:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:13398:6409":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:667:2659":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:47644:9077":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:15286:6733":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:12484:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12035:9564":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:4942:11381":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"23:35:11291":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"16:7765:7407":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6843:9476":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:6919:4123":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:1595:11208":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10368:24093":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11606:6317":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12550:6364":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:9446:5926":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:43366:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"24:4644:4317":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"6:5635:8250":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:8249:8685":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:35047:6116":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:44665:16647":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:5292:3948":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"24:4272:4292":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"5:1555:4009":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"18:735:28360":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:8044:5476":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:1653:2615":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"24:1104:3968":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"1:4172:11367":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:22590:11497":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"24:4422:4302":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"24:4912:3255":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"23:281:2655":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"24:3547:4280":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"1:5549:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"24:5046:2837":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:11897:4014":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"24:2462:4014":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"1:6026:4767":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:48043:9119":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"24:1711:2650":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:47009:9026":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:481:9339":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:47289:9048":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:41360:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5381:8127":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"24:5581:2917":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:45766:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:10794:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:46884:9018":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"24:5870:2959":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"15:288:23103":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:45235:9689":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:564:7713":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:517:7688":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"23:38:3640":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"17:15136:6378":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:41510:4097":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:1551:7762":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:7714:4067":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:48153:9133":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:553:7708":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:4222:11370":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6188:9418":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:8766:6119":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:7883:7424":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:13361:6408":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12605:6317":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:47549:9074":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"11:364:5895":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"24:5322:3953":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"24:5022:2416":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"6:1494:7731":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:41497:4106":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:16750:7208":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:8268:5765":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"18:706:9350":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:7756:29059":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:3025:16708":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"24:5245:3940":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:43148:4009":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:41619:4100":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:46951:9022":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:5266:3944":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"2:40537:16751":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"24:3122:105":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"2:45578:9722":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:15896:6968":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:12716:16646":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:16494:6444":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:5172:7305":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"24:4789:4327":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"1:10976:9731":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:3669:30936":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:1766:28385":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"1:1100:11214":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:7745:9580":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:949:5685":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:8096:24030":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:0:3765":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:13354:9678":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:15586:6895":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:44816:3551":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:13491:6413":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:47059:9036":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"24:2401:4012":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"5:6288:5926":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5301:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6902:8507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:3777:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13719:6443":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:6042:7261":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"24:1857:3587":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"24:5880:3982":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"17:15876:6961":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:8502:4073":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"21:2707:4030":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"17:11309:24106":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12992:6382":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"24:3530:4279":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"16:0:3769":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6368:9438":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:11337:9237":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:15351:6784":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"24:86:5237":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:8520:9197":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:2522:11285":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"2:44213:9662":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:10804:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:12104:6017":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:2966:7255":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:15973:6990":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"11:430:37635":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:11598:6012":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:1684:7852":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:5145:5926":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:6887:10776":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:10031:24083":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:45807:10463":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"24:4984:3913":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:43218:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:2620:7239":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:4363:11394":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:600:5470":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:4947:7970":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:10735:4162":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:955:11208":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:6239:7320":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:43516:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6640:24015":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"6:5395:8135":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:44776:8991":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:8290:8694":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:44182:9661":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:23758:11362":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:42846:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:7919:10663":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:41236:9628":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"16:5348:7311":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:5051:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5179:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:6588:7325":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:15963:6987":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:929:5908":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:16179:7062":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:8028:7426":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:113:28352":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:5408:34495":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"2:42049:4078":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10663:6293":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:16668:7186":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:7826:10660":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"2:3061:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:47141:9040":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"18:670:28363":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:10296:24091":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:39027:6135":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:4135:5687":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5541:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"21:213:10721":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"1:664:10647":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:1569:7772":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2209:5612":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"24:989:4133":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"2:48168:9134":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"23:11:4039":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"5:5530:5902":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:5533:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:45550:9715":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"18:608:37732":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11515:24144":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:12490:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:12506:1877":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6822:24018":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:16739:7207":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:12754:5635":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"24:4895:4335":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"24:5633:3972":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"6:1514:7739":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:13633:9350":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:15836:6952":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"24:3037:4259":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"5:1386:11215":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:45876:5595":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:6173:9416":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7168:7360":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:2880:7251":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"24:3360:4271":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"17:16642:7180":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:6700:8441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"16:8612:7278":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:23197:11584":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:13082:24104":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:7462:24024":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"24:1080:37962":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"2:10792:122":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"24:1950:2415":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"6:1539:7753":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12537:24217":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:10670:11445":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10332:24092":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:14072:6517":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"11:1888:5687":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"24:644:9297":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"1:2327:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:5682:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:13370:9681":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:12198:16653":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:23779:11291":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:14807:6673":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11553:24133":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:4990:4179":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:15036:6712":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3406:11331":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11066:11443":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:13385:9399":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:1577:9559":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4976:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12931:6378":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"14:220:7561":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:45250:9695":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:41298:9630":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:2792:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:9323:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:2087:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"21:2731:2644":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"1:8642:11397":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:13108:16804":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11124:37716":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:15050:6713":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"24:4743:4324":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10630:6292":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"24:4342:4297":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"14:202:3010":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:4855:4168":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:9364:10774":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"20:715:265":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"17:10803:3551":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6731:10725":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:643:6158":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11016:24101":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:10713:6008":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"24:113:2566":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:10218:24088":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:10246:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:45084:9684":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"24:642:149":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"6:473:7660":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:8572:9596":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:11163:6317":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:2029:5926":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:7159:9498":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:23235:11585":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:4875:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:14416:6596":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6765:8463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:14084:6520":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:5311:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:1118:10640":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:5021:11378":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:4681:11398":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:6162:5934":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:37096:4329":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:16507:6458":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"24:3190:126":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"1:9169:9219":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:42605:8959":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"21:1099:219":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"24:1636:38103":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"16:6837:10741":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:41259:16703":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:7424:24023":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:23860:8742":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.36/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.86/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.71/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}