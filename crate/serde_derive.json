{"root":"0:0:1854","crate_version":"1.0.196","includes_private":false,"index":{"2:13019:35132":{"id":"2:13019:35132","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12638:15875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:1851":{"id":"0:965:1851","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[96,0],"end":[101,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12922:35115":{"id":"2:12922:35115","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12936:30334":{"id":"2:12936:30334","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:30364":{"id":"2:12975:30364","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12429:8772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13002:35124":{"id":"2:13002:35124","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12613:3826","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::matches":"2:12999:2189"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44377:8857","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:15877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12996:30373":{"id":"2:12996:30373","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:15877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13045:31501":{"id":"2:13045:31501","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12993:30372":{"id":"2:12993:30372","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:30361":{"id":"2:12944:30361","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12945:30362"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612:2426":{"id":"5:5612:2426","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13046:31502"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13011:35127":{"id":"2:13011:35127","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2067":{"id":"0:86-0:994:2067","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2067","glob":false}}},"2:13022:2101":{"id":"2:13022:2101","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1966":{"id":"0:8:1966","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12951:33678":{"id":"2:12951:33678","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12950:33689"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44438:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5609:35834":{"id":"5:5609:35834","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:2037","`String`":"5:7630:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2037","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:30368":{"id":"2:12987:30368","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:3826","str::rsplitn":"2:12990:30370"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44259:8850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:2955":{"id":"2:12928:2955","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12159:15879"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1843":{"id":"0:964:1843","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[88,0],"end":[93,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13025:27828":{"id":"2:13025:27828","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13053:35137":{"id":"2:13053:35137","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4790:35137"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44472:8803","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:334":{"id":"2:12930:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12931:30336","`u8`":"1:12090:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5594:2223":{"id":"5:5594:2223","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2070":{"id":"0:1023:2070","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"5:5592":{"id":"5:5592","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5593:35830","5:5594:2223","5:5597:35831","5:5600:35832","5:5608:35833","5:5609:35834","5:5610:3486","5:5611:2427","5:5612:2426"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12981:35122":{"id":"2:12981:35122","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12613:3826","str::split":"2:12972:29404","prim@char":"1:12073:454","`DoubleEndedIterator`":"2:7994:131","str::rsplit_terminator":"2:12984:35123"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44205:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13052:10412":{"id":"2:13052:10412","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4793:10412"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44463:8798","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13037:35135":{"id":"2:13037:35135","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:15877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13048:31505":{"id":"2:13048:31505","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:38001"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:29940":{"id":"2:12958:29940","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13034:35134":{"id":"2:13034:35134","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5610:3486":{"id":"5:5610:3486","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:882":{"id":"2:12920:882","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12073:454"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:2745":{"id":"2:12964:2745","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42274:191","prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12978:30366":{"id":"2:12978:30366","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12613:3826","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::split":"2:12972:29404"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44173:8773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:15877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1974":{"id":"0:493-0:404:1974","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1974","glob":false}}},"2:12934:30333":{"id":"2:12934:30333","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42274:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:33691":{"id":"2:12954:33691","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44447:8862","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13042:31497":{"id":"2:13042:31497","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13044:31500":{"id":"2:13044:31500","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5608:35833":{"id":"5:5608:35833","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12945:30362":{"id":"2:12945:30362","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12944:30361"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:29404":{"id":"2:12972:29404","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12613:3826","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::split_whitespace":"2:12950:33689","str::rsplit":"2:12978:30366"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44155:8770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12984:35123":{"id":"2:12984:35123","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12613:3826","str::split":"2:12972:29404","prim@char":"1:12073:454","str::split_terminator":"2:12981:35122"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44223:8848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:15877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:2843":{"id":"2:12942:2843","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:12944:30361","str::split_at_mut":"2:12943:30358"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:35121":{"id":"2:12953:35121","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44419:8859","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:35118":{"id":"2:12929:35118","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12948:2430":{"id":"2:12948:2430","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12073:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44131:8842","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:4375":{"id":"2:12968:4375","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42274:191","prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:15877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13008:35126":{"id":"2:13008:35126","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12613:3826","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::match_indices":"2:13005:35125"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44323:8854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:15877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12949:8759":{"id":"2:12949:8759","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44141:2965","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919":{"id":"2:12919","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12920:882","2:12921:2193","2:12922:35115","2:12923:35116","2:12925:35117","2:12928:2955","2:12929:35118","2:12930:334","2:12931:30336","2:12932:2082","2:12934:30333","2:12936:30334","2:12938:30335","2:12940:35119","2:12941:35120","2:12942:2843","2:12943:30358","2:12944:30361","2:12945:30362","2:12947:2436","2:12948:2430","2:12949:8759","2:12950:33689","2:12951:33678","2:12952:29405","2:12953:35121","2:12954:33691","2:12955:2295","2:12958:29940","2:12961:29942","2:12964:2745","2:12968:4375","2:12972:29404","2:12975:30364","2:12978:30366","2:12981:35122","2:12984:35123","2:12987:30368","2:12990:30370","2:12993:30372","2:12996:30373","2:12999:2189","2:13002:35124","2:13005:35125","2:13008:35126","2:13011:35127","2:13013:35128","2:13015:35129","2:13017:35130","2:13018:35131","2:13019:35132","2:13022:2101","2:13025:27828","2:13028:30374","2:13031:35133","2:13034:35134","2:13037:35135","2:13040:2062","2:13042:31497","2:13043:31498","2:13044:31500","2:13045:31501","2:13046:31502","2:13047:31504","2:13048:31505","2:13049:31506","2:13050:35136","2:13052:10412","2:13053:35137"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5611:2427":{"id":"5:5611:2427","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13045:31501"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13047:31504":{"id":"2:13047:31504","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:38001"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12999:2189":{"id":"2:12999:2189","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12613:3826","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::rmatches":"2:13002:35124"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44359:8856","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12955:2295":{"id":"2:12955:2295","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13049:31506":{"id":"2:13049:31506","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:38001"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:35116":{"id":"2:12923:35116","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:35831":{"id":"5:5597:35831","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13040:2062":{"id":"2:13040:2062","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12574:137","`FromStr`":"2:12573:3442"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42415:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12573:3442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12573:3442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:2082":{"id":"2:12932:2082","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42274:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13043:31498":{"id":"2:13043:31498","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40245:4366","Self::is_ascii":"2:13042:31497"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40245:4366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13017:35130":{"id":"2:13017:35130","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13031:35133":{"id":"2:13031:35133","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:15877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:30358":{"id":"2:12943:30358","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12942:2843","str::split_at_mut_checked":"2:12945:30362"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:378":{"id":"0:63:378","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2067"],"is_stripped":false}}},"2:12938:30335":{"id":"2:12938:30335","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13015:35129":{"id":"2:13015:35129","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:35131":{"id":"2:13018:35131","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5593:35830":{"id":"5:5593:35830","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2037","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:2037","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:35832":{"id":"5:5600:35832","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:35120":{"id":"2:12941:35120","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12079:1549","crate::ops::IndexMut":"2:3270:3426","str::slice_unchecked":"2:12940:35119"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13005:35125":{"id":"2:13005:35125","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12613:3826","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::rmatch_indices":"2:13008:35126"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44305:8853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13046:31502":{"id":"2:13046:31502","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:2193":{"id":"2:12921:2193","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12940:35119":{"id":"2:12940:35119","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12079:1549","str::slice_mut_unchecked":"2:12941:35120","crate::ops::Index":"2:39891:2600"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12961:29942":{"id":"2:12961:29942","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:15877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12952:29405":{"id":"2:12952:29405","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44409:8858","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12990:30370":{"id":"2:12990:30370","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12073:454","str::splitn":"2:12987:30368","self::pattern":"2:12613:3826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44277:8851","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:15877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13028:30374":{"id":"2:13028:30374","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:3826"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:15876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:15877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:35128":{"id":"2:13013:35128","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:2436":{"id":"2:12947:2436","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12073:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44125:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1854":{"id":"0:0:1854","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[101,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.196\")]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1843","0:965:1851"],"is_stripped":false}}},"2:13050:35136":{"id":"2:13050:35136","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4792:35136"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44454:8804","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:30336":{"id":"2:12931:30336","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12090:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:33689":{"id":"2:12950:33689","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12951:33678"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44429:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12925:35117":{"id":"2:12925:35117","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12923:35116"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:1973":{"id":"0:492-0:1019:1973","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1973","glob":false}}}},"paths":{"21:2606:8516":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"6:1663:7081":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"24:4541:2190":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"17:15010:6085":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8294:3514":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"24:3177:3687":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:3849:3416":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:12150:5565":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:40831:33714":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9737:23277":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:13674:5738":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:2749:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"24:5365:2355":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:42338:3421":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"11:2423:3416":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"24:4392:3735":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:46920:8257":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:42355:3997":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:13412:5687":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:6381:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:3196:6422":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:8933:8406":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"21:107:4830":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"24:2667:3668":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"16:6948:6465":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:46145:8225":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11293:23352":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:4050:10578":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:8241:3480":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:285:37061":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"17:15116:6108":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:2562:6810":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:7516:7861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:10095:10449":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"24:4276:3727":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"17:13844:5787":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:643:10415":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:8216:8723":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:15383:6179":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:12618:15876":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:11431:8931":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8941:3417":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"11:832:10424":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"24:1366:3559":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"2:40973:3515":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4965:7214":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13972:5533":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"18:598:5328":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5244:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:41519:3491":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4932:7200":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"24:4863:3355":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"2:3481:3590":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:513:23294":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:4882:6504":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:33610:5339":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:3507:8383":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:931:10426":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"9:53:10036":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:3466:33874":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"11:1883:3417":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10875:9956":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:11142:5515":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"24:3398:3694":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"24:1649:3554":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"24:2008:3417":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:47124:8275":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:12315:8844":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"11:1887:3416":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:40723:8802":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:42396:4001":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:5716:5210":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:47424:8281":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:2508:6437":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12362:8567":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:7546:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"24:5524:3399":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"17:13774:5776":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:9938:23299":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:8351:7943":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:5707:4803":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:4143:5147":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:7249:29242":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:10064:3569":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"11:787:8734":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:10972:5227":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12408:5574":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4992:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:4859:15914":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:40072:8049":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:5828:5147":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:659:27557":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"11:1910:8736":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:41509:3489":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:5385:5488":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:1087:36641":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:2542:6806":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:4267:4700":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"11:700:3416":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:2274:4740":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:2017:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:8274:10506":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:44323:8854":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"20:950:1989":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"11:742:10057":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:5398:5123":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"24:2283:5333":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"15:288:22310":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:22650:8781":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:2035:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"23:78:2058":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"17:13538:5714":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"24:5123:3050":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"23:345:2677":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"21:2387:2676":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:41126:3527":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4014:10577":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8949:10687":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:1978:711":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"18:613:36743":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:2736:10538":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:10775:29387":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:10887:36723":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:4913:6505":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:3810:6484":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:7602:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:40059:8048":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:32850:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:4856:6503":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"21:2636:251":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:14436:5901":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"24:4211:3722":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"2:47922:8315":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:14545:5912":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:4424:6490":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11242:23350":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"24:4177:3720":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"1:1829:10440":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:491:6904":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:14271:5868":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"24:5091:3374":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"24:4119:3716":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"6:559:6947":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:5652:7714":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:4787:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:44065:15868":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"24:5555:3408":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"6:5617:7480":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4985:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:44359:8856":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13899:5796":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:44472:8803":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:2466:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:7428:23231":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:3473:23416":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:7452:7820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"15:0:3182":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:11788:23445":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12478:5579":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:34080:5343":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12993:23313":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:8963:8407":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:40:4712":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11138:8424":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:42455:3417":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:15376:6178":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"24:4066:3712":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"1:8646:8403":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"24:563:5324":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"6:5160:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:5742:8583":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:46330:8232":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:4428:3557":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:10047:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4837:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:42200:8830":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:13855:5788":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:10052:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:12251:23456":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12530:23491":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:2788:6450":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:46698:8250":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"24:4824:3349":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:40663:8799":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:4876:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:44749:8880":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11647:8547":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:8300:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:9007:10684":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"24:5112:2648":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"17:11510:23356":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8575:8398":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"21:404:36780":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"5:2205:8740":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:12371:5608":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:13272:5665":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"24:128:1977":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"11:1160:9947":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"11:2548:6807":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:42178:33712":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:2878:6454":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:42463:3421":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:6678:7668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:6721:7685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:11171:15870":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:44883:8891":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"9:482:22200":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"7:78:22194":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:12056:27855":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:4134:10586":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:1816:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:307:1599":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:46352:8233":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:2728:6447":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:32752:8795":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:4885:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:14475:5904":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:42471:3416":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"24:5143:2646":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"6:8029:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:542:8577":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:40742:8798":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:16259:5682":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:7397:36683":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:1580:7020":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:15778:6303":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:6608:5123":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"23:235:4280":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"1:8262:8381":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:6494:8653":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:44921:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"18:581:4362":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:44141:2965":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:44879:8890":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"24:3921:3703":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"24:4845:3353":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"17:12707:23310":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"24:3875:3700":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:44075:8778":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:44780:8885":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"20:740:1989":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:12572:5515":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:48110:8317":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:7429:7813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:5723:8901":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:4575:10611":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:44956:16053":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:912:10424":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"24:89:1983":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"24:4972:3347":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:32818:3609":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:42621:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:5863:23218":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6300:23222":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:46500:8244":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"24:4980:3372":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"6:5457:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"21:2583:3604":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:2835:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:48455:8330":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:5336:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:942:10427":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:14868:6041":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"10:44:6813":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:11071:8404":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:150:5112":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:13046:5615":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:15176:6126":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:39982:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:15931:5638":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"21:478:5111":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"24:2084:3423":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"16:4614:6496":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6895:6568":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:2087:3555":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11634:8546":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:3078:4703":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:43533:8204":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:45067:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"24:2718:2371":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"6:5536:7440":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:46300:8231":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:7501:3477":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:6706:7680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:5046:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12695:23492":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"20:808:36763":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:47154:8276":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:7756:10507":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:15190:6129":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:23985:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"24:4832:3351":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:22835:7961":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:43001:3563":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:12353:8566":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"24:4013:3709":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"17:11688:8550":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"24:3058:3682":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"16:860:36698":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:10050:121":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"24:5039:1997":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:4264:10606":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13173:5637":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:6962:6466":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"24:5527:3400":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"5:1478:3421":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:9493:10502":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:4531:6493":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12388:8568":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"24:2272:10507":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"16:5897:6517":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:7965:3500":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:48570:8335":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"24:5521:3398":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"24:2077:3421":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"5:669:9948":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:9067:4576":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:42504:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:44277:8851":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13211:5652":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:6698:7676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:3026:36255":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"24:1656:2064":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"17:11166:5509":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:11662:8933":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:44677:8874":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46646:8248":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"24:607:3416":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"6:5320:7346":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:11715:8552":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:48383:8324":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"11:710:10056":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:4915:3364":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"6:6738:7689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:5344:7351":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:8920:8405":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10759:5515":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:43261:33884":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:2808:6451":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:3041:3681":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"18:531:8522":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"24:4931:2257":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"5:6962:4805":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:7799:6462":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11324:23374":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"20:955:2676":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"2:46744:8252":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:1655:2542":{"crate_id":2,"path":["core","mem"],"kind":"module"},"11:2151:10431":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:10977:15866":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:6624:9962":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"21:183:4440":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"17:13146:5629":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:545:6939":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:7449:33820":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:41285:3530":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:3240:32670":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"23:504:4276":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"6:6417:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:10766:29391":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:5134:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:7986:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"21:2730:1977":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:5139:3376":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"24:2854:3673":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"5:1724:5123":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:7359:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:9204:8416":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:12092:1651":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:9056:10063":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"24:1166:8482":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:22434:33994":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:2995:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:14876:6042":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:10717:8924":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:12030:23415":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:3020:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:12613:3826":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"0:0:1854":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"24:506:3427":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:40933:3504":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:7648:23233":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:7561:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:5479:10656":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:43015:3572":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:7470:3416":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:3899:6486":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:8630:8909":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:556:226":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"24:3075:3683":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:3041:3462":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:11414:9694":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"9:502:6873":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:1510:6975":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:3030:4346":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"24:4601:1835":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"17:10997:5505":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:6435:7549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:3573:29318":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:4828:10595":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5064:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:1671:7082":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:3068:4701":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:6263:8647":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5181:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5502:7433":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:10883:10659":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:11386:8429":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:8552:8204":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:3426:15964":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:10116:31836":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"5:6175:5147":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"23:239:4282":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"16:7857:6638":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:6442:8650":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12399:8569":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:9886:23297":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5665:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:14599:5926":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:5700:6459":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:9074:27827":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:7823:23236":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"14:165:22291":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"9:424:22203":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:7755:6464":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"20:356:3436":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"4:0:3175":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:3249:36117":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:39232:5348":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:44114:8840":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:3109:3685":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:41034:3521":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:7686:23235":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10612:23304":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:12328:8558":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:14356:5881":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:12078:1517":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:48440:8329":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:4468:6491":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:44155:8770":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:8395:10601":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"24:3415:3695":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"6:5296:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:22344:10801":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:5400:5489":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"23:407:4161":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"18:515:5369":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:40783:15921":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:44556:8863":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"24:5044:2543":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"17:14189:5853":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5314:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3592:10526":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"12:0:3180":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:5370:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12189:23479":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:5914:8599":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"11:774:8733":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:2140:10430":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"21:2340:1989":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"1:10256:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:21653:10507":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:15655:6267":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10710:23306":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"7:0:1698":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:364:5116":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"21:2281:1977":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"24:1991:3416":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"16:6991:36661":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:7915:3502":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6524:7587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13116:5625":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"24:4905:2331":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"17:11269:23351":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:12391:8855":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:941:3417":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:5329:7349":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:3270:8737":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:44602:8872":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:15463:6197":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10524:23303":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:7828:10419":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"24:4908:3363":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:39847:4705":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:43904:33816":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"9:0:3177":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:5686:6456":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:43008:3571":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:48414:8327":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10828:36737":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:1485:6965":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:1098:23332":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:6647:4823":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:15608:6255":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:14246:5865":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:12040:10069":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:12080:1634":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:1555:10057":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:4103:5123":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:9984:23300":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"24:4840:3337":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"17:11313:8542":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:12074:1669":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:47314:8278":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:2271:10486":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"24:3834:3697":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:12087:803":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:925:10425":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"24:4984:3373":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:30997:33704":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:40846:8811":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:7014:23228":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"20:891:2057":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"17:11915:23450":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"13:0:3174":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:42398:4723":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:5238:2374":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"6:6562:7615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10671:36727":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:21674:7954":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:7780:4585":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"24:4165:3719":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"17:597:2070":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11841:23447":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10044:23301":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"24:4591:3335":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"11:102:8726":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:44259:8850":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:8197:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:328:8730":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:12024:9695":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:1610:2026":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"24:3211:2724":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"6:5146:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:43315:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:6510:3483":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"24:4504:3887":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:4235:3724":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"2:40906:10503":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:5212:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"21:2641:3436":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"16:4743:6499":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:485:6902":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:7410:8752":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:578:6957":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12508:5583":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:7888:8712":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"24:1539:3545":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"17:2234:23380":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"10:0:3178":{"crate_id":10,"path":["adler"],"kind":"module"},"2:12627:8531":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:40964:3506":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:2499:3190":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:5636:7489":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"24:1789:10359":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"1:5864:10062":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:12969:5610":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:9181:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"20:113:8517":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"6:5472:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:48508:8333":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:41096:3525":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:21429:34362":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:5864:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:42407:4589":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:13464:8780":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:42066:10556":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"24:2837:2002":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:41077:3523":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:10054:3563":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:4986:23499":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:8030:9961":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"21:2779:2676":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"11:299:8727":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13594:5731":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:5546:7446":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6532:8656":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:4073:4799":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6664:7663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:7370:3416":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:44004:8209":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:7580:33714":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:4339:3731":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"6:4824:7137":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:22843:7962":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:46199:8227":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:7570:6470":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5515:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:38653:5347":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"11:2383:3417":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:43504:8834":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:2936:22357":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11075:5507":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:4653:10628":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:6480:6457":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7590:6471":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3817:10560":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10769:36730":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:9176:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11661:8548":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"24:4194:3721":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:44438:8861":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:11537:23375":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:7813:8711":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:564:6949":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"24:4305:3729":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"24:1481:27582":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:2703:10507":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10218:5491":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:42234:8190":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:2532:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:5846:8594":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"24:957:3378":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"20:803:8519":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"24:5507:3396":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"17:11493:23368":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:14516:5909":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4959:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:870:8733":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"20:708:251":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"1:4784:10637":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:12045:10421":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:22436:4734":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"17:11574:8738":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:7485:7835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"24:4042:3710":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"16:4502:6492":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"24:4621:3336":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"11:2536:1977":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"21:2432:2057":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"1:8487:3993":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:11186:8425":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:6768:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:2674:5185":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:1948:4748":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"24:674:36916":{"crate_id":24,"path":["syn","expr","precedence","Precedence"],"kind":"enum"},"5:3740:5123":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:4474:3741":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"11:1903:8735":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10818:23307":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:4641:6497":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:3313:3690":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"16:6758:6556":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"20:910:3438":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:40052:15965":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:42738:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:7132:8703":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"24:2956:3678":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"5:7420:35035":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:1526:6983":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:21400:34355":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:1729:5147":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"1:7775:4583":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"24:4433:3738":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"6:6821:7716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"24:0:1832":{"crate_id":24,"path":["syn"],"kind":"module"},"13:109:36649":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:42012:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"24:4880:3358":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"1:10675:10639":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:43973:15865":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:6071:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:735:27555":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"23:38:3054":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"1:484:5196":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:2441:10493":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:2458:6435":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6385:6527":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11497:23357":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:2338:6423":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"21:2253:3439":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"17:13606:5734":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:45148:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:4897:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:10699:8918":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:4213:29241":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:15769:6301":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:1971:10467":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:5352:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:4507:3575":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:2998:6477":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"24:2973:3679":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:5830:10674":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:532:6933":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6491:7575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11354:23361":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7085:8697":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:15078:6102":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:5445:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:44739:8876":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:5528:7435":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2988:3589":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:2612:6442":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:14489:5905":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:15646:6265":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:2438:6434":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:9706:34312":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:15281:6149":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:22879:33707":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:4919:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:754:8538":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:5039:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11583:23381":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"11:2326:10430":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:6519:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:1494:3416":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:6471:7562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:39907:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:12096:1708":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:42321:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:6018:3507":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:22821:33701":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:5208:5153":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:10467:10543":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:6952:4804":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:11121:8416":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:12887:8575":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:5934:4799":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:5107:6511":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:7321:3997":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:15814:6307":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13738:5767":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:6047:23219":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1535:6989":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:30965:4658":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:7390:4799":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:14025:5814":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:8377:8907":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:3806:10433":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:5058:5147":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:2528:6438":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"24:4563:3322":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:48234:8319":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"24:2599:3664":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"1:8002:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:8288:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:2355:6425":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"24:5003:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"2:6642:8766":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:4905:10591":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:2990:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:10982:23321":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12289:5567":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:6514:10676":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"11:2569:3473":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:7919:3501":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:538:6936":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:3037:4348":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"24:2803:3671":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"1:8504:8395":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:10738:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"20:929:2383":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"24:3262:252":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"20:680:3440":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"17:12127:5564":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:9095:31835":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:45126:8218":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:12824:23312":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"24:4935:3365":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:21655:10714":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:4385:3594":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:0:1541":{"crate_id":1,"path":["std"],"kind":"module"},"24:2684:2037":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:40876:5175":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11825:23427":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:1584:4799":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:11400:8928":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:9671:23278":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"24:949:3377":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"2:41087:3524":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:1680:7088":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:46407:8236":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:3056:5349":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:9102:10065":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"24:5159:2066":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"24:1937:3414":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"5:2195:4572":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5677:7505":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:2768:6449":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:9061:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:15434:6190":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"23:272:2066":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:44429:8860":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"24:4535:3319":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"1:9486:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:14235:5863":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"24:5160:2330":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"11:1107:22280":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:7361:4711":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:5394:2372":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"17:10018:23279":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"18:491:8521":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:6775:7700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:7497:6622":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12851:8574":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:32731:2754":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:44762:8884":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:10066:3570":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"24:2922:3676":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:2756:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:3447:15903":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:896:4799":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13375:5681":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:9916:23298":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:1723:7104":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4800:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2985:5201":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5477:7424":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:7575:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"21:2774:1989":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"1:5655:10660":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:5598:7466":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"21:2696:2056":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"17:15701:6281":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:2307:8747":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:1516:8733":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"24:4153:3718":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"6:6460:7554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:15313:6157":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:4655:3586":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"24:5203:3382":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"6:8306:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"24:3989:3707":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"17:13089:5619":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:13308:5670":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1189:35063":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:12264:23455":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:6542:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:7994:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:10515:5189":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:3207:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:6429:10808":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:14260:5867":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11467:5522":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:15748:6295":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"24:5067:2615":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:48403:8326":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:40955:3505":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:5307:6512":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:7800:4582":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6574:6475":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6026:8614":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:4682:3587":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:3189:4704":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"24:4054:3711":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:33844:3463":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"11:883:10429":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"24:5404:3390":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"21:244:36851":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"21:2597:3603":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"17:0:3184":{"crate_id":17,"path":["object"],"kind":"module"},"2:41500:3487":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:2748:6448":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"20:116:36751":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:3235:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:15273:6148":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:14933:6077":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"24:4445:3739":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"1:12071:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:5733:5147":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"24:2650:3667":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"1:1942:9957":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5290:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:8116:10539":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:22089:7955":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:38543:5346":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:42252:8191":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:11443:5520":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:22787:7957":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:46552:8246":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:5565:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:5446:15855":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11547:5361":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:10092:23302":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:2369:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:13250:34421":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"24:3228:2004":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"5:5442:15854":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:10961:5226":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:44585:8871":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:4062:6488":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13999:5811":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:1559:7006":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:1814:1982":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:5904:3519":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"24:4001:3708":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"21:2754:2383":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:22952:10575":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8336:10558":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:10728:8340":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"5:3032:3683":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"11:1582:22283":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:34736:3733":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:7727:6473":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:7549:8708":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:10694:8916":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:10317:5494":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:11341:23362":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:22:738":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:2854:6453":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"9:447:22201":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:12095:856":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:16212:6409":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:22422:10803":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:11026:23323":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:8415:3497":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:43983:8776":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:465:1978":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:11755:8556":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"11:430:36642":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:44205:8847":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:9186:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"20:935:2055":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:10311:8768":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12768:23280":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:14752:5948":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:12076:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:44903:8215":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:11103:8215":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:10846:3417":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10284:5493":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:40886:10485":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:22921:8788":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:3278:10544":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:434:36643":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:0:887":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10155:5488":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"24:5126:2124":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"1:7642:2070":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"24:334:3555":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"17:14977:6082":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:8412:3494":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6629:7649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:6160:22329":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:46121:8224":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"23:344:1239":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"1:3445:3487":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:39962:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:12089:800":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:1812:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:3518:3592":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11095:29389":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"24:153:1983":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"17:13723:5763":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5200:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:31508:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"24:5117:2651":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"24:5338:3388":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"18:623:36742":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:6880:7728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:10004:3568":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:44871:8888":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:3304:2026":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:7378:8751":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:1828:4797":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:6050:5153":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:10251:5492":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:8253:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:4434:5149":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:22407:10507":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:12375:8852":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6729:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:6976:6577":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11636:8430":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:2101:10433":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:10938:8772":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:5390:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:43521:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:11580:10562":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:6627:10679":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:4719:7804":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:2572:6440":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:359:4596":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:3238:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:11689:15863":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"0:964:1845":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"8:0:3176":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11016:23322":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12808:5604":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:7653:9949":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:12093:1652":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"13:226:6805":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:8247:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"20:885:2056":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"2:3363:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:15635:6264":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:7306:36689":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:12159:15879":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11405:23359":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:8013:8906":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:21781:10715":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"24:5074:3375":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"1:11359:10664":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:217:4714":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:12086:802":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:8271:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"24:95:10507":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"17:11419:5515":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:6230:5194":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"24:2016:3419":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"20:845:2676":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"5:3028:7947":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12671:23522":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:9091:3999":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:22521:10507":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:12633:15877":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:5324:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:8980:8408":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:7974:8905":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:42896:10061":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:4787:10610":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:1354:9947":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"9:178:10047":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:42777:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:921:10057":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:294:2037":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6802:8673":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:44101:8211":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10170:5489":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:12088:804":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"24:5384:2657":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"17:11367:5507":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6447:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6788:7707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"9:392:22202":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:13302:15929":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"24:5021:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"17:1207:23337":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:41471:8822":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:6728:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:589:5373":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"24:2582:3663":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"5:2756:7948":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:40983:3516":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:1707:7099":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:16121:6387":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:1043:8704":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7618:6623":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:4354:3593":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:32689:6809":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"24:98:3878":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"2:39891:2600":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:1075:9947":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:33903:5340":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:14131:5827":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:10473:10541":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:42386:3998":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12201:23480":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"24:5512:3397":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:48356:8322":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:43993:15864":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:2752:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:46370:8234":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:1593:7027":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1639:7064":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:39922:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:2112:10434":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:40700:8176":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:96:27545":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:41136:3511":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:6333:5210":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:43496:8832":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:586:6961":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:46389:8235":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"24:4625:2250":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:6636:3509":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:3130:3720":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8590:10650":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:250:9938":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"6:1547:6998":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:8330:10559":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"24:3330:2026":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"2:42272:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:14788:5979":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:43273:6652":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:3036:27605":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:6849:8686":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5212:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40750:8804":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:32761:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:4553:10610":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"24:1768:10358":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"1:12084:700":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:6154:5205":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:13235:1989":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:13228:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:7525:3473":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"24:5539:3404":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"24:4948:3367":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:13553:5720":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:7330:7777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:8301:6680":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"24:917:37107":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"11:800:4799":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:7604:6472":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:10757:8381":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:5191:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"24:5209:3385":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"17:13509:5703":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:3359:10542":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:2708:6446":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:8304:3528":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"15:394:22320":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"21:367:4824":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:32819:4349":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:3320:10546":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:1066:10431":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"21:216:10014":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"24:4628:2329":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:7956:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:5927:8600":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13814:5784":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11336:5229":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:7964:8340":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:7528:8705":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6749:8672":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"24:4964:3369":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"24:5561:3394":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"17:16138:6389":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:5277:7329":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"18:765:27556":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"24:5253:3387":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"16:4771:6500":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13766:5774":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"21:2539:4822":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:46269:8230":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:8106:31862":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"20:817:2056":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"5:3871:4797":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:5756:23216":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:15356:6172":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11425:8930":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"23:0:1239":{"crate_id":23,"path":["quote"],"kind":"module"},"2:2379:4734":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"24:2786:3670":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"2:47360:8279":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:11128:5479":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:4498:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8957:3416":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6231:8644":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"24:5529:3401":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"1:12094:1649":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:506:4572":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:12900:5607":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:558:138":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"2:41261:3528":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"24:4095:3714":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"24:5431:1972":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"16:3669:5397":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"24:4264:3726":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"17:12107:5515":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:44945:8896":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:16050:5665":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"24:4573:2048":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:3092:3684":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:2696:9960":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:5415:6514":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:3475:5147":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"11:351:36638":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:45118:9684":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:2287:35033":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:47780:8314":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:4830:724":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:7306:7760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5630:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"3:0:481":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:11291:6870":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:640:10414":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:2453:10499":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:15992:6361":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:5382:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:3791:3555":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"24:96:4422":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:7952:10502":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:4286:15905":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:279:5123":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:22941:8791":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:11015:15872":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:10058:3571":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12175:23470":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:46897:8256":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:45175:4709":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:14051:5818":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:44043:15859":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:2752:3669":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:48280:8320":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:4464:5147":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4916:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8022:31860":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:2701:105":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"16:6940:6574":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7168:8412":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:43551:8837":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"18:538:5370":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13455:5697":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:1309:8704":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:12079:1549":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"24:3449:267":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"17:15624:6259":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:4723:7808":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"24:3909:3702":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"1:7947:4987":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:12683:23493":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:1599:8736":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:4999:10636":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:4718:6498":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"24:4351:3732":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"1:12085:805":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:42330:3417":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:10306:10512":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:867:36699":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:6055:5210":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"20:783:27566":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"24:3143:3583":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"17:2175:23392":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:7584:7895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:8136:8719":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"24:342:37115":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"5:1169:35057":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:41112:3526":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"11:1051:10431":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:10419:5497":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:10513:4582":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:22536:10796":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:15058:6094":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:2038:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:44305:8853":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:9148:8415":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:11764:8557":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:479:6899":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:1853:1200":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12422:8570":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13187:5638":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11877:5526":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:15197:6131":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:7096:9964":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12056:5560":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:8226:23240":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:7348:7784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:10273:27880":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:6543:8657":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5423:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:7537:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:2633:3666":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:13946:5802":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11392:23360":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11730:8553":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:8012:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:15368:6175":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4924:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:5499:10657":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:42699:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:5283:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:3007:2374":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"6:4909:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4811:7127":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:14986:6083":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"24:4897:3361":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"6:5266:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"24:3432:3696":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"1:9022:10686":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"24:4223:3723":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"1:4064:10579":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:32727:2145":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:8341:10555":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:6018:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:44875:8889":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:6466:6531":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:1577:3417":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:22928:7974":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:32848:2015":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:7580:8710":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:6665:23225":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:40858:10472":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:39895:8796":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:15342:6165":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:46075:8222":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:10470:10545":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"24:876:5331":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"20:746:2676":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"5:4145:3421":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:21661:10717":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:15521:6239":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8657:8912":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12433:5575":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:15206:6132":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12485:23485":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:2304:8704":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"24:617:3417":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"24:5399:2373":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"2:22490:4734":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"2:2463:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:1522:2063":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"1:12097:1259":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:3647:3417":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:41527:3493":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:40022:3467":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:924:5131":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:13554:4710":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"24:2990:3680":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:40713:8801":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:46600:8247":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"24:2769:126":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"2:3241:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"9:357:22216":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:7536:3474":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:872:36664":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:10185:5490":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"24:4960:3368":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"24:4404:3736":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:2871:3674":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"1:8907:8404":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:3329:6480":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:12429:8772":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:26385:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:651:5366":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:44223:8848":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6915:7753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:45139:10805":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"24:874:10507":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"23:46:3448":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"6:5436:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:13277:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"21:2314:2383":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:839:3417":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"24:3938:3704":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"1:12073:454":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:40776:8806":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:5392:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:553:6944":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"20:725:2056":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"2:5077:10548":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:7619:5154":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"11:2231:8738":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:8259:2754":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:3276:10543":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"20:827:1977":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"20:794:251":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"24:4559:3321":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"24:560:8480":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"17:15390:6180":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:41011:8815":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:4884:3359":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"16:5037:6509":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:11859:5234":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:6504:8654":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:14587:5919":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"24:4927:3344":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"2:6447:3532":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:7098:8699":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:9498:5224":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"24:4888:3360":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"6:6636:7650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:7442:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:36612:3735":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:43234:8196":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:48318:8321":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5260:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:6982:5217":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:15616:6258":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:3752:10557":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:4020:10576":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:45187:8900":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"24:5570:2545":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:4617:2206":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"15:306:22311":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:7355:6604":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:3396:4797":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:11129:8850":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:517:6924":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:3842:6485":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:8038:3555":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:2485:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:6657:7662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:14212:5862":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:3243:32666":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:48032:8316":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:14402:5888":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:6634:6463":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:8317:7936":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"24:5201:2197":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:22756:7956":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:8006:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:16165:6398":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:31054:33702":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:16032:5655":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:3278:8735":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:46251:8229":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:40802:8177":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:5781:6460":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"24:4912:3342":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"21:2645:3601":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:3441:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:11733:4746":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:6650:7661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6588:8658":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6433:8649":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:6680:10681":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:12464:23484":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:5817:8589":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:6609:7641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:3014:22358":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"24:858:3542":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"16:8188:23239":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:6714:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:7984:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"24:4871:3357":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:40993:3517":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:6441:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13753:5772":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:22565:10797":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:8073:3320":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:3402:10534":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:14414:5890":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"21:1066:2056":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:14177:5851":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:14298:5871":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:43755:8839":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:34390:4283":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"24:2939:3677":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"1:9043:8411":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:9202:15876":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:4243:10604":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"24:3347:3691":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:3073:4702":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:42582:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:15836:6313":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:2902:22356":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:7671:3480":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8640:3417":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"24:1566:3001":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"17:14012:5813":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:21444:34367":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:948:10428":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:1676:5120":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"24:5350:203":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:13499:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:31535:4362":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:1925:4749":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:10978:5228":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:3436:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"24:4594:2006":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"5:1340:10430":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:507:5366":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13785:5779":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:7731:3482":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:852:3421":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"21:1201:208":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"11:2352:10431":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"24:1170:8484":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:5118:862":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:7957:8904":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"24:1964:3415":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"2:30709:10563":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:2234:8742":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:2443:10494":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"20:880:251":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"24:5423:3392":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"16:3778:6483":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:1534:10424":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"24:909:37106":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"0:965:1852":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"16:4587:6495":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:1142:22281":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13363:5678":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:3919:10562":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:687:3421":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:917:10056":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:635:5384":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:5802:23217":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:38488:5345":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:536:4577":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:5408:2544":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"24:5207:3383":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"14:7:9941":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3220:3591":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"23:35:10507":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"5:7643:8761":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:2124:8704":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:46530:8245":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"21:140:4833":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:2746:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:7769:6630":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"14:214:8724":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:1463:3417":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:11084:8405":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:6763:7698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:14066:5821":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:954:10429":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:570:6952":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:5671:7502":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:40674:8800":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:365:4597":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:4122:10583":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11042:23324":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:21600:10507":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:22476:10804":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:5039:34232":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:43512:8835":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:40769:8805":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:15289:6150":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:2374:6431":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:39811:15901":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:41271:3529":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"24:4517:2322":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"2:2537:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:11153:23307":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5960:8606":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:10003:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"24:3972:3706":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"1:9990:8827":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:5014:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"20:906:1977":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"17:4821:23494":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"14:220:6758":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:16249:6415":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"24:925:37110":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"16:6278:10016":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:3029:5392":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:3606:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:5530:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:8175:23238":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:862:3416":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"24:5531:3402":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:10062:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:6098:23220":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"21:2649:3416":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"5:7595:8757":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:5722:6461":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:38598:5344":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"24:4858:3339":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"6:5002:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:4315:10607":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:3614:6482":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12949:5572":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12076:23412":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:13426:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:16176:6403":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:1865:10449":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:40942:3514":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:33238:5337":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:44535:15890":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:2037:23363":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4942:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:8896:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"24:1654:1834":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"2:42543:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:43289:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"18:718:5385":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:9858:23296":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:4305:3417":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:43336:3562":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:15151:6118":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"21:1023:3602":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:8459:34311":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:7389:7811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:1496:6970":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5250:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:1605:8737":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:11656:15862":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:3715:4799":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:41494:3485":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:14503:5908":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:712:3436":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"1:2591:10537":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:44714:8875":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:14529:5910":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:4626:3584":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"24:5096:2546":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"20:734:1977":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"17:12443:5578":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:8202:6476":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:13444:5194":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5400:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:41043:3531":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"11:1007:8704":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:11256:8539":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"21:2735:3438":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"24:4368:3733":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"5:2525:7945":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11189:5511":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:12494:5580":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:2574:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:7314:7765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:2660:6444":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:7509:23232":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7006:23227":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"24:53:2065":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:2704:15926":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"21:52:4823":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:42660:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"14:202:2423":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:48394:8325":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:7434:3416":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"20:777:3439":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:11621:8544":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:5483:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:43298:3560":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:13986:5810":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6620:6533":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:2427:10490":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:4824:10592":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:21772:10507":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"23:281:2066":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"6:6621:7648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:1588:4797":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:906:4797":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:46722:8251":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:883:8734":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"23:150:4021":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"24:4849:3354":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"1:7139:5218":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"11:123:5114":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10573:36713":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:4078:10581":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4971:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:12143:9953":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:15324:6161":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10720:36735":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:44571:8869":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:2425:4725":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:16069:6375":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:3000:2520":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:1692:7092":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"18:481:8520":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:11353:8925":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:4802:6501":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:7607:8760":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:3018:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"24:5428:3391":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"17:13877:5795":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13473:5698":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:7052:23229":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"24:4491:2669":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:4635:3585":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:3357:10541":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:16093:6380":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:41064:3508":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:1593:8735":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:2592:6441":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:473:6896":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11773:5590":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:11143:8851":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10439:5498":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:47078:8274":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8311:2965":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:21458:34360":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:21783:7954":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:42397:4000":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:40820:8810":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:16235:6414":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:3525:10504":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4952:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:726:10564":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:15678:6280":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:44173:8773":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12213:23481":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:6929:4803":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6353:6524":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:5588:7461":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8454:8386":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:46866:8255":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:417:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"24:3245:3689":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"18:563:5372":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:22101:34363":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:5709:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6782:23226":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:7061:6582":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:11231:2360":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:22703:8782":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:6813:8674":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:15596:6252":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:12684:15884":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:1888:4873":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:5174:7274":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:44125:8841":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:44895:8894":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11567:23405":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:43244:3560":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"20:836:1989":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"24:5213:3380":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"17:261:36664":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:15301:6156":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"24:5062:2656":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"24:4901:3362":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"17:15760:6297":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:44867:8887":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13959:5805":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:7559:8709":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:5769:8587":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:7693:5220":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:7842:10420":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:42346:3416":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"15:327:10032":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"11:1923:2026":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13024:23314":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:6478:7566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4891:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:10417:5182":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:8389:10609":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"24:3126:3686":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:44409:8858":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:1062:5123":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:15456:6195":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:12516:23498":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:12659:23488":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:12454:8572":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:41485:3483":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"21:1402:2070":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"24:5356:2352":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"6:6670:7666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:5515:10658":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:9519:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"14:187:22298":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12342:8562":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:12083:698":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:44419:8859":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"24:933:37108":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"24:4919:3343":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"6:5624:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"21:992:251":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"16:7539:6469":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12724:23311":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:1153:35066":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:15:2818":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:8047:3499":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:32763:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:1057:10430":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:5831:8592":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:42818:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8411:8385":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:46819:8254":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:497:6907":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:15222:6136":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"24:5565:3395":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:4571:3582":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:16269:5687":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"23:148:4022":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"17:11595:5523":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12043:23414":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:41478:3481":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:15957:6331":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:1575:10432":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:10895:8770":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:7493:32267":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:7656:23234":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:7863:9956":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:6410:10807":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:40685:33709":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:2478:6436":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:4940:6506":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6900:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5557:7452":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13922:5801":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"24:1905:3413":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"2:1939:7951":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:6427:10031":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"21:0:1187":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"24:2565:3742":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"21:648:3605":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"18:706:8531":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:5347:6513":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:5995:8608":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:3046:5336":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:4830:6502":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:6746:7690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:12844:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:8265:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:4251:10605":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:14284:5870":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:2876:10470":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:42994:2593":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:34021:5342":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:22211:10507":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:47236:8277":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5407:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10877:23308":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7695:6627":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:3283:36121":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10399:2965":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"9:330:6850":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6079:8578":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:1566:22282":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13387:5682":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:591:10411":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:2568:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"18:80:27544":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:5909:5204":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:5122:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6689:7670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"11:0:3179":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:14463:5903":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:15168:6123":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:8421:3498":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"24:5148:1989":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"16:6066:8617":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:10534:36725":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:12573:3442":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:15102:6107":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:46454:8237":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:11156:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:14038:5816":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:48374:8323":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:15266:6147":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"24:2218:10507":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:5205:3381":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:47000:8258":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:21390:4362":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:13497:5702":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:9755:23275":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"24:4952:3346":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"1:10408:5225":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:46768:8253":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:10271:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:5166:31859":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43964:8775":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:1621:7052":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:4721:7806":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:41055:3522":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"24:5549:3406":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:42212:8907":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"24:4607:1994":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"2:10263:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:10060:3572":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8432:7793":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:22859:33705":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:7653:9965":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"18:698:8529":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7144:23230":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:1525:8734":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11702:8551":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"24:1634:3541":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"17:16151:6395":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:8328:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:3025:2232":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:44891:8893":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"24:4995:2600":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"6:1517:6978":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:1699:7095":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12929:5608":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6560:6458":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"11:2469:4797":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:1823:4654":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:46676:8249":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:12127:16010":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:22810:8786":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"23:11:3447":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"5:4235:5147":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"21:1834:4820":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"1:1890:10455":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:1827:10439":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:14855:6034":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:14091:5823":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:8103:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5466:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:8259:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:256:36699":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:15039:6093":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:22771:8783":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:40245:4366":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"21:2715:2057":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"17:12238:23457":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:0:3183":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:8428:10638":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:16223:6411":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"11:837:10425":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5219:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:12098:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"24:5533:3403":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:32745:3583":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:8341:7941":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:9128:27861":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:3237:29911":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:44447:8862":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:15720:6286":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:6278:10066":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"24:4462:3740":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"1:5584:10659":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:11227:23327":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:7384:3512":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:7122:5171":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:9115:8412":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:13832:5785":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:3318:10545":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:0:537":{"crate_id":2,"path":["core"],"kind":"module"},"21:2759:2055":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"5:3244:8736":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:4467:10602":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:10483:5184":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:12352:8849":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:680:8525":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"24:4247:3725":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"17:3597:23432":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:1099:2066":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"23:322:2679":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:41025:3520":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:5135:31859":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:2443:4799":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"24:1520:3429":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"2:7385:3513":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:9325:4873":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"18:608:36750":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:6895:10712":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5031:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7473:6621":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11524:23403":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"24:1476:27581":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"16:7741:6474":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:4853:3338":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"24:3863:3699":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"1:560:4579":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:5367:23215":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:624:9955":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:12077:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:648:10416":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:13581:5730":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"24:4588:3334":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"17:12278:23482":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"24:4136:3717":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:22059:10507":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:7111:8702":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:8118:8716":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:14147:5832":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:30933:4657":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11115:23329":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"21:2027:4821":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"6:6409:7534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:15410:6186":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13325:5672":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"11:1917:8737":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:1025:10430":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"14:0:3181":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:2323:22355":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:11799:23446":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:7467:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:4232:34069":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:10870:3421":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:5006:6508":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"20:686:3555":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"24:4078:3713":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"6:5083:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"24:4976:3371":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"17:13015:5575":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13344:5677":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:14341:5877":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:2381:4735":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:10114:27881":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:2548:6439":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:46055:8221":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:8250:8380":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"20:0:1831":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"24:5544:3405":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:44887:8892":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12792:5454":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:10898:27848":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:6772:5123":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:7279:2803":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:40757:15920":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:44463:8798":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:6648:8668":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:15126:6109":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11605:5524":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:7412:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"20:702:8518":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:4709:10581":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:5075:6510":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:6441:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:5653:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:6927:6572":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:670:27558":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:1653:7075":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:2279:10487":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:48429:8328":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11865:23449":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"24:2616:3665":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"6:1585:7022":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:15023:6090":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:2684:6445":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:16105:6382":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:39944:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:10905:23309":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1503:6973":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:2418:6433":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:21427:34357":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"14:31:9941":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13485:5701":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"24:4530:3320":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"17:16187:6404":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:31159:33700":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:7339:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:6317:2019":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:6246:5209":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:15445:6194":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12597:5585":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"18:726:5388":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"24:5536:2547":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:22383:10802":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"16:6412:23223":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:43955:8774":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:875:10428":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:2838:6452":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"24:5552:3407":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"17:14449:5902":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"24:3364:3692":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:44377:8857":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:573:5366":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:14994:6084":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:3564:3568":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:45164:8899":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:7728:4798":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:4419:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:11559:10560":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:7757:4598":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10704:8904":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:5225:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:21602:10718":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:7400:5134":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:4352:6489":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:44085:15867":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:2554:36635":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12647:23489":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:5102:7268":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:44454:8804":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"24:3892:3701":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"16:3475:6481":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"18:643:5366":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:2137:4706":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8992:10685":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:1325:10431":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:7053:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:10500:5185":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"24:4944:3366":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"1:10182:10663":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:6597:7636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:6456:23224":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7379:36665":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"18:521:27559":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5376:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:6694:5215":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"24:2888:141":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"2:40657:8798":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:4126:10584":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"7:31:22187":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5020:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:14723:5928":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:46167:8226":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:4497:5149":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11089:23331":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:16198:6405":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:7567:8754":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12584:23307":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"24:4836:3352":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"17:12621:5586":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:15822:6310":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"24:941:37111":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"1:4882:5202":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:33424:5338":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13292:5666":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:34217:5327":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"11:844:10426":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:9239:31845":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"17:13568:5726":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:6335:10015":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:15944:5652":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"11:2403:3421":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"24:4107:3715":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"5:1544:10056":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:2394:6432":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:11674:8549":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9807:23283":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:7551:4586":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5581:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:4990:10635":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"21:2509:3603":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"14:40:1989":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:2743:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:1581:3416":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:3582:10505":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:6550:5214":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:11655:8933":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:5018:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:2203:23358":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:9781:23295":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"24:3296:1972":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"24:3279:253":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"18:113:27546":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:3381:3693":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"2:40734:8803":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:2660:5198":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:15092:6106":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:10056:2593":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:4502:3574":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:1449:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:30971:4659":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:4235:10603":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:10350:5495":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:22213:10716":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:6505:7585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:14372:5882":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:1628:7056":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"11:1603:22284":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:44030:3503":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:3237:3417":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:11088:15869":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:44056:8777":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:14311:5872":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:7461:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"24:257:9939":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"17:10915:36719":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:12091:1650":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"24:4293:3728":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"17:15473:6202":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13399:5685":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:48493:8332":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:47390:8280":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:7366:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:1896:4797":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8403:10559":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10622:36714":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:14847:6031":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:46229:8228":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"11:856:10427":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12557:5507":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:32738:34350":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:7446:7818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:3453:15902":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8317:8770":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:10365:10661":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:15799:6306":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:14079:5822":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:4560:6494":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:10915:8406":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5489:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:14912:6072":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:6398:6455":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:3194:3688":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"24:4322:3730":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:44650:8873":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:3814:10561":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:6690:3416":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13252:5655":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:14560:5916":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:22299:10800":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:11648:31842":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:7450:8753":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"20:984:3416":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:11063:23336":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:15418:6187":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"24:901:37109":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"24:4988:2012":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"24:1372:36929":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"2:10693:10507":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:5465:10655":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"24:5414:3393":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"6:5112:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:42034:8181":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:437:5440":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"24:5211:3384":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"1:11496:5231":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"24:3851:3698":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"2:11157:15871":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:14386:5884":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:1891:4799":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13064:5618":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:42050:8183":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:34563:5326":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"24:4875:3340":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"2:11050:8773":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"24:5353:2640":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:3264:23413":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13437:5689":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15214:6134":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"24:4380:3734":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"1:9107:1983":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"22:0:3306":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"1:9261:27841":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:726:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12300:23483":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"9:238:8204":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:7478:3416":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:0:3185":{"crate_id":18,"path":["memchr"],"kind":"module"},"24:1163:8481":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"6:8282:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:8294:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:47574:8282":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:403:23293":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10068:23282":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:3270:3426":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:4244:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:3925:6487":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:42857:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:43736:8208":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:21412:34355":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:6562:4799":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4979:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:523:6927":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"24:2135:2613":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"16:7633:36663":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"24:4416:3737":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"1:9171:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:4220:34032":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:7910:23237":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:8155:8722":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:14111:5826":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"24:4867:3356":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"17:15426:6189":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:8111:10067":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12089:5562":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:22894:33717":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:5643:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:44131:8842":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13424:5688":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12225:23458":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10954:23320":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:30986:3560":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:5236:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:9222:8915":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:45064:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:11102:23330":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:4395:10608":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6872:8687":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11898:5528":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:6874:7727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:4826:10594":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:10747:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:2824:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"10:36:6812":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:6756:7697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:11214:23328":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:40002:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:33962:5341":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13526:5711":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8008:4865":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:12072:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"24:4892:3341":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"17:11812:23411":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"24:4939:3345":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:3955:3705":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"6:6379:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"21:961:4839":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"17:14325:5875":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:12090:1653":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:4112:10582":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:48531:8334":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11557:23404":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:868:5129":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:8384:8908":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:2740:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"21:433:5110":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"17:15333:6164":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12543:23490":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"24:3160:228":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"24:2265:2679":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"2:46099:8223":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"11:673:3417":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10137:23276":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:7952:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:2636:6443":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:45077:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:15569:6240":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:5361:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:44728:15891":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:15734:6288":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6342:36687":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:15138:6112":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6120:23221":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:9524:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40913:3503":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:6071:16245":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13797:5781":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:8324:8858":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:6606:8666":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"20:513:3436":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"2:22570:10795":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:12863:5606":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:828:5126":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8890:10661":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:4581:3583":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:396:5118":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"11:2369:22285":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"24:2820:3672":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"17:15400:6183":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:10022:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:7712:5222":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:8093:6674":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:43543:8836":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:10703:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"24:4828:3350":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:44899:8895":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:14575:5575":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:1490:6967":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:22064:10720":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:5048:3989":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:40815:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:42094:2056":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:16079:6376":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:11853:23448":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"20:716:3602":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"17:11051:23342":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:1686:7091":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4870:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:9711:10059":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:14968:6078":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"18:689:8528":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:12638:15875":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"24:5243:3386":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"21:2710:3602":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"6:6532:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:43751:8838":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:4976:6507":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:48478:8331":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:7630:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12318:5572":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:11743:8554":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"24:5389:2369":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"6:6811:7713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:45085:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:7712:4797":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:48172:8318":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:42415:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10661:23305":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:15249:6140":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:4265:5147":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"24:2735:118":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"6:1565:7008":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:5837:10675":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:3231:2540":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"11:1066:22279":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4864:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:811:4797":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:5415:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"24:4968:3370":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:32762:3608":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:2905:3675":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"1:4072:10580":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"24:3024:2675":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:42480:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"24:953:3049":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"24:4025:135":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"6:5306:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"14:160:9941":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:725:10507":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"24:4998:3348":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"1:7848:10457":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:3660:3421":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:21446:34365":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:5558:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"5:7097:5168":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"24:1524:3544":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"24:4568:2003":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"6:5052:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:41002:3518":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:9851:3561":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:15582:6246":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:11519:10561":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:2303:22330":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"24:1439:2061":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.35/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.78/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.49/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}