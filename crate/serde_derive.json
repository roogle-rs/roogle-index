{"root":"0:0:1708","crate_version":"1.0.171","includes_private":false,"index":{"2:12127:29581":{"id":"2:12127:29581","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11599:8366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:29573":{"id":"2:12098:29573","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12097:2686"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:36082":{"id":"2:12171:36082","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11801:14427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:326-0:970:1818":{"id":"0:326-0:970:1818","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:970:1818","glob":false}}},"2:12087:1931":{"id":"2:12087:1931","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:345":{"id":"0:63:345","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1812,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:85-0:974:1916"],"is_stripped":false}}},"0:0:1708":{"id":"0:0:1708","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[105,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.171\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:946:1696","0:947:1705"],"is_stripped":false}}},"2:12130:29583":{"id":"2:12130:29583","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11776:14431","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split":"2:12124:26208"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43574:8367","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:14429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12145:36072":{"id":"2:12145:36072","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375-0:351:1819":{"id":"0:375-0:351:1819","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:351:1819","glob":false}}},"2:12148:36073":{"id":"2:12148:36073","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:14429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5428:36735":{"id":"5:5428:36735","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1885","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:4476","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:1885","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:4476","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:36736":{"id":"5:5432:36736","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12124:26208":{"id":"2:12124:26208","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11776:14431","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split_whitespace":"2:12102:33158","str::rsplit":"2:12130:29583"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43556:8364","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:1968":{"id":"2:12107:1968","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:29590":{"id":"2:12113:29590","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:14429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:2583":{"id":"2:12116:2583","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:36078":{"id":"2:12165:36078","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:36079":{"id":"2:12167:36079","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:1950":{"id":"2:12174:1950","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:36083":{"id":"2:12183:36083","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:14429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:4460":{"id":"2:12197:4460","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:36077":{"id":"2:12163:36077","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:4459":{"id":"2:12196:4459","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:4461":{"id":"2:12198:4461","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:816":{"id":"2:12075:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11978:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:36063":{"id":"2:12077:36063","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:33154":{"id":"2:12106:33154","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43848:8455","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:29548":{"id":"2:12089:29548","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:36066":{"id":"2:12084:36066","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:4142":{"id":"2:12120:4142","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:14429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:36071":{"id":"2:12136:36071","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11776:14431","str::split":"2:12124:26208","prim@char":"1:11978:418","str::split_terminator":"2:12133:36070"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43624:8441","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:14429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:29587":{"id":"2:12142:29587","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11978:418","str::splitn":"2:12139:29585","self::pattern":"2:11776:14431"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43678:8444","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:14429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12083:2788":{"id":"2:12083:2788","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11343:14432"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:29549":{"id":"2:12091:29549","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:36086":{"id":"2:12199:36086","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4536:36086"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43855:8397","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:3425":{"id":"2:12201:3425","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4537:3425"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43864:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12202:36087":{"id":"2:12202:36087","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4534:36087"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43873:8396","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5445:3320":{"id":"5:5445:3320","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:36738":{"id":"5:5443:36738","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:314":{"id":"2:12085:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12086:29551","`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:36067":{"id":"2:12095:36067","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11984:1406","str::slice_mut_unchecked":"2:12096:36068","crate::ops::Index":"2:2978:2313"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:26563":{"id":"2:12177:26563","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85-0:974:1916":{"id":"0:85-0:974:1916","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:974:1916","glob":false}}},"5:5446:2354":{"id":"5:5446:2354","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12197:4460"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12157:36075":{"id":"2:12157:36075","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11776:14431","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::rmatch_indices":"2:12160:36076"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43706:8446","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:946:1696":{"id":"0:946:1696","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12186:36084":{"id":"2:12186:36084","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12170:36081":{"id":"2:12170:36081","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5435:36737":{"id":"5:5435:36737","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12154:36074":{"id":"2:12154:36074","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11776:14431","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:3120"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43778:8450","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:14429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:36068":{"id":"2:12096:36068","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11984:1406","crate::ops::IndexMut":"2:2982:3278","str::slice_unchecked":"2:12095:36067"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:29551":{"id":"2:12086:29551","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:36069":{"id":"2:12105:36069","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43820:8452","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076:2037":{"id":"2:12076:2037","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:29589":{"id":"2:12110:29589","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:29550":{"id":"2:12093:29550","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12133:36070":{"id":"2:12133:36070","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11776:14431","str::split":"2:12124:26208","prim@char":"1:11978:418","`DoubleEndedIterator`":"2:7304:121","str::rsplit_terminator":"2:12136:36071"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43606:8440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:36065":{"id":"2:12080:36065","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12078:36064"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12180:29591":{"id":"2:12180:29591","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:14429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:26209":{"id":"2:12104:26209","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43810:8451","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1816":{"id":"0:8:1816","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[215,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12103:33157":{"id":"2:12103:33157","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12102:33158"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43839:8454","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12192:1912":{"id":"2:12192:1912","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11737:127","`FromStr`":"2:11736:3293"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11736:3293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11736:3293","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:2067":{"id":"5:5429:2067","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:2363":{"id":"2:12099:2363","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43526:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:33158":{"id":"2:12102:33158","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12103:33157"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43830:8453","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12139:29585":{"id":"2:12139:29585","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:14431","str::rsplitn":"2:12142:29587"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43660:8443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12074":{"id":"2:12074","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12075:816","2:12076:2037","2:12077:36063","2:12078:36064","2:12080:36065","2:12083:2788","2:12084:36066","2:12085:314","2:12086:29551","2:12087:1931","2:12089:29548","2:12091:29549","2:12093:29550","2:12095:36067","2:12096:36068","2:12097:2686","2:12098:29573","2:12099:2363","2:12100:2357","2:12101:8356","2:12102:33158","2:12103:33157","2:12104:26209","2:12105:36069","2:12106:33154","2:12107:1968","2:12110:29589","2:12113:29590","2:12116:2583","2:12120:4142","2:12124:26208","2:12127:29581","2:12130:29583","2:12133:36070","2:12136:36071","2:12139:29585","2:12142:29587","2:12145:36072","2:12148:36073","2:12151:3120","2:12154:36074","2:12157:36075","2:12160:36076","2:12163:36077","2:12165:36078","2:12167:36079","2:12169:36080","2:12170:36081","2:12171:36082","2:12174:1950","2:12177:26563","2:12180:29591","2:12183:36083","2:12186:36084","2:12189:36085","2:12192:1912","2:12194:4458","2:12195:30692","2:12196:4459","2:12197:4460","2:12198:4461","2:12199:36086","2:12201:3425","2:12202:36087"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:947:1705":{"id":"0:947:1705","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12078:36064":{"id":"2:12078:36064","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:36739":{"id":"5:5444:36739","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1885","`String`":"5:7283:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1885","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:4476","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5427":{"id":"5:5427","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5428:36735","5:5429:2067","5:5432:36736","5:5435:36737","5:5443:36738","5:5444:36739","5:5445:3320","5:5446:2354","5:5447:2353"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12100:2357":{"id":"2:12100:2357","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43532:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:3120":{"id":"2:12151:3120","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11776:14431","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:3120"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43760:8449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:36080":{"id":"2:12169:36080","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:36085":{"id":"2:12189:36085","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:14431"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:14429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:4458":{"id":"2:12194:4458","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12195:30692":{"id":"2:12195:30692","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39626:3427","Self::is_ascii":"2:12194:4458"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39626:3427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:999:1919":{"id":"0:999:1919","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12101:8356":{"id":"2:12101:8356","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43542:2801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:36076":{"id":"2:12160:36076","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11776:14431","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::match_indices":"2:12157:36075"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43724:8447","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:14428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:14429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5447:2353":{"id":"5:5447:2353","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12198:4461"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:2686":{"id":"2:12097:2686","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12098:29573"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:40512:3359":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:12446:14490":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:6461:5002":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:2399:6112":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"24:4920:3219":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:8314:3752":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"24:4892:3212":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:41714:4485":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13083:5683":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:8277:8500":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:2643:3268":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"24:5070:2885":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:40498:3358":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"22:790:233":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:2693:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:1732:4512":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:47413:7936":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:434:5223":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:10226:9211":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10786:21397":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13803:5911":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:2223:35862":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:562:6622":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12424:5562":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"24:5014:2454":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"16:7568:37265":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:9688:4976":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:42898:8429":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:1473:8333":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:40195:8403":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:9977:21289":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:5841:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"21:2704:3436":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:30941:4131":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:4897:9182":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:8531:8501":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:3802:4559":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:11045:5346":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8449:7825":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:7379:4560":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4518:6920":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:9225:3422":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8974:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"20:0:1114":{"crate_id":20,"path":["quote"],"kind":"module"},"1:11300:8520":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:7055:4924":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8862:3268":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:3932:4937":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"14:31:8894":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"24:5500:3259":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:2960:4469":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:5284:14407":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13574:5859":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:47725:7940":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"24:4900:3214":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"17:13732:5893":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:13591:5860":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:3991:9128":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:149:4901":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:7753:8310":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:45546:7842":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:5150:3230":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"18:538:5157":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:4787:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12631:5593":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"20:150:3771":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"17:13179:5701":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:9044:26564":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:9153:5274":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"24:4549:3186":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"22:512:3287":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"2:21549:7573":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:8558:8504":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13787:5907":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"24:4582:2049":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"2:40342:3338":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:11488:8437":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12303:5538":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:4488:9158":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:1411:3269":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:2465:6115":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:11160:8052":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"24:3950:3502":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"13:226:6483":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:11776:14431":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"24:2222:2517":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"5:1011:4913":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:40237:9035":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"16:4592:6176":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:6789:4957":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6815:6245":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4685:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:5381:4937":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:10800:8004":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:14315:6063":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"21:478:4900":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"6:4568:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:568:6625":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4938:7091":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:5530:4565":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:7259:8357":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:6673:26507":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:8086:8318":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:7586:7554":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"14:221:6436":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6317:8578":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4315:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:1077:8900":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:6981:3314":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:45791:7852":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"24:2713:3464":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"1:8203:2801":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11264:5363":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:3212:8334":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12982:5663":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:2802:3515":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:1575:6687":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:3042:20345":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5818:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:9561:21288":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:2797:5131":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"14:187:20286":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"24:3172:2562":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"17:9866:21307":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"24:4810:3194":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:40412:3352":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:4731:9139":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"11:749:4561":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"20:322:2517":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:2160:4496":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:4616:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:919:8603":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:7041:3316":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"8:0:3013":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:7994:26568":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:11115:28877":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:40207:33069":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11981:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"24:5457:3248":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"6:541:6611":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:9469:9065":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:8605:21259":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:6140:9360":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:554:6617":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:5028:6189":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2746:4121":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:3330:4559":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:5065:4943":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:9272:4665":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:11421:9119":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:44575:4474":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:5967:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:4944:4937":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:2589:6120":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11767:5413":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:44588:8493":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:3025:6156":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:42360:3423":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:2715:6125":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"24:5469:3250":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:44472:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:43409:3336":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:6028:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7584:21218":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4463:6891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"11:2180:6485":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"24:4003:3505":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:42851:8425":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:30343:4306":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:11801:14427":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:4228:9154":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"21:1195:196":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"17:9528:37327":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13981:5958":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"0:946:1698":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"2:9656:4971":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:14177:6027":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:13604:5865":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:44083:8467":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:14403:6085":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:4256:3394":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:8838:8029":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:41453:9114":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:11983:1376":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:45566:7843":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:908:4559":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:5916:8215":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:1603:6706":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:9716:37334":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:8109:9066":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:5382:5269":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"21:2591:3437":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"6:7529:7541":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:1690:6767":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:7505:7537":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:39432:2594":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"24:3962:3503":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"24:4904:3215":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"18:582:4131":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:1843:9021":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:956:8995":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:6036:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:1892:8909":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"24:1068:1915":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"16:7038:8301":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13303:5703":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:22451:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:2738:3443":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:7759:1994":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:2611:6121":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:6692:21211":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:582:2319":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"24:5043:2255":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"6:1520:6654":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"24:4015:3506":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:12421:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11189:5355":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:3295:6160":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"24:3257:1824":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"17:3395:21398":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:1663:6754":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:9124:8040":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10969:21464":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"18:0:3022":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:10923:9207":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:46915:7902":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:42184:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:1755:4511":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:6603:4565":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:1820:3411":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:403:37249":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13513:5852":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:10266:21337":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"22:926:2222":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"17:10249:21349":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:653:15232":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"20:37:2891":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"1:4626:7418":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:9913:21314":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:42367:3424":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:4630:7422":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:1702:6771":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8798:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:6153:4998":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:6534:8914":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:7229:3334":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10910:8908":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:11313:14563":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"24:1133:8089":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"17:8997:21260":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:4446:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"24:5373:3241":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"16:7679:6153":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:5105:2173":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"1:5491:9207":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:4034:4913":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:4762:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:21843:8376":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:39269:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:10621:21431":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"24:2594:3461":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"2:32137:8389":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6484:8257":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"24:4801:3192":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"5:822:4919":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:6986:6259":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:10069:9015":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:21236:7571":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13016:5676":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7505:6149":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:4476:6172":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:43864:3426":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:46569:7895":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:5474:3252":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:10194:14424":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:3996:33430":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12646:5596":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:41655:3273":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:14282:6056":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"11:667:8603":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:8021:3172":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"24:4932:3222":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"5:7308:8902":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"24:1772:1832":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"17:10499:8154":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:7255:3749":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"21:988:233":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"16:5972:8179":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:42651:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:44145:8469":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:42104:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:49867:9286":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:2760:5125":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:46615:7896":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:39626:3427":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:2857:6131":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:44490:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:13659:5877":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:5767:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:595:6640":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2692:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:12089:5478":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"24:5073:1973":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:20839:9277":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:10308:8443":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"24:5334:2210":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"1:5554:9208":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:4606:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:9655:21289":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"24:2832:3469":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"22:932:1905":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:8313:3753":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:782:4916":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:3870:3497":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:11991:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:44363:14603":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:22418:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"24:5472:3251":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"6:6688:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:4434:3405":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:690:8133":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:1138:35793":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:42867:8428":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:5882:8209":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11815:1838":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:10074:8364":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:878:4921":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"24:2951:3475":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"1:3187:32833":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:40320:3337":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6713:8272":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:1928:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:3645:3268":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13914:5939":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:7519:1919":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10403:8147":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:7853:8497":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:10229:8367":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"24:4027:3507":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"1:7727:4626":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:521:25306":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9223:5276":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:62:14822":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:40892:3321":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:2131:4223":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:6185:8616":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:9065:8038":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:927:8991":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:20895:9282":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:9990:5290":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"22:14:25432":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"6:4833:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:2962:20344":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12618:5591":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11007:21439":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"18:113:25293":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:12891:5647":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"7:0:1553":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:2755:5124":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4039:9131":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:4965:6187":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6571:21210":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:8043:6352":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12186:5509":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12711:5602":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:4814:6182":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"11:399:37248":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12318:5542":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11118:8167":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12161:5505":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3963:9125":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"24:1491:3377":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:41774:3269":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"11:1818:3269":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"9:237:7825":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"24:2577:3460":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12394:5559":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"22:902:1827":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"17:13155:5355":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"14:202:2350":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:3810:6165":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:43606:8440":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12792:5637":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13620:5868":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10863:5294":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:20801:9070":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:3186:21395":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12333:5547":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:40157:14482":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:895:3269":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:1574:8334":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"24:4465:3661":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"2:4603:14475":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:4353:3530":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"1:3985:9127":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:1818:9015":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:864:3268":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:10520:8157":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:40441:3354":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:8916:9232":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:3181:29470":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:5615:4991":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11992:5462":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"24:2730:116":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"24:4797:3191":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"10:0:3015":{"crate_id":10,"path":["adler"],"kind":"module"},"5:7183:3308":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"20:407:3930":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"24:5200:3237":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"5:1523:8998":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:5639:8188":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:5301:6192":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:4395:4937":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:40652:3360":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10417:8148":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:2133:21339":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"22:832:1838":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:42888:7825":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:2663:6123":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:0:1080":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"5:3171:3269":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:7295:7535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9734:21291":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11056:21466":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:7474:6148":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:3220:6159":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:7546:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11428:5381":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:6775:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:2825:6130":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"11:2033:8303":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9474:5012":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4848:7035":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:12614:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12966:5659":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:4735:9142":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:8872:21281":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:12566:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:41538:8499":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"24:4853:3204":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"6:5829:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13882:5931":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:11036:5016":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:7230:33069":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:8210:2594":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:44303:8487":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5849:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:3974:3504":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"17:13957:5953":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"24:5038:3224":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:2600:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:1569:4559":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:14380:6081":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:7530:8918":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:5836:7216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:4733:9141":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:41663:3268":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:44155:8473":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:532:6605":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:14259:6055":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"24:4394:3533":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:21203:9070":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:7331:37291":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"9:330:6528":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"24:917:3227":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"17:11955:5456":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:3160:14465":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12691:5601":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:42859:8427":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:10568:21393":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"24:1623:2079":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:2785:5128":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10654:5307":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:22103:9122":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"24:4936:3223":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"1:4628:7420":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"24:94:4189":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"14:215:8323":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:9434:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:11333:8523":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:46727:7898":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"24:4991:2252":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"6:4413:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:7283:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5058:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:8315:3751":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:599:5116":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:4809:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:6471:4913":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:42024:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:6738:3345":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:9211:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"24:5344:2296":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"2:39418:7670":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"24:554:5112":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"24:497:3279":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"1:4560:9175":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:3977:9126":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:40035:8392":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:47523:7937":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"24:2526:3537":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"24:4789:3189":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"16:3580:6162":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"24:3836:3495":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"17:10555:21428":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:7696:35350":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:3183:35710":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:400:21272":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:6805:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:9926:21313":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:2830:3530":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11976:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:7924:3388":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12826:5640":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5793:8200":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:7079:3268":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:9090:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4929:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:10110:21342":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:11551:26609":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:3344:9092":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:12002:1134":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:2637:6122":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"24:3189:1853":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"1:10314:26973":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:40329:3346":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:7463:8304":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"22:702:233":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:2866:3470":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"6:4587:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:4466:9157":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:10790:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"24:4908:3216":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"17:2105:21374":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:2049:8996":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"21:2241:3290":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"17:12851:5643":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:43855:8397":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:5962:4991":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:6421:3317":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"22:887:1907":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"24:4406:3534":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:7382:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"24:5515:2254":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:40223:8404":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:2824:3528":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:3315:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:11905:5447":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:20803:9275":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:40143:8398":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:1631:6731":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9409:37313":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10361:5303":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:7883:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:10117:8366":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:1503:8604":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:40473:3356":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:40086:8394":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:8980:4227":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:5119:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:841:3269":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:44291:8484":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"24:2628:3463":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:42064:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:12394:34165":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10066:21333":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:3179:33460":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:11979:5460":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:1302:8900":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:2959:2078":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:7870:8498":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1733:6783":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:8739:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11943:5453":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:629:8901":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"24:3070:3480":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:21928:7575":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:1489:1913":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"6:4380:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:43940:14443":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:7570:5008":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"20:34:9070":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"17:10581:21409":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8887:8031":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13749:5898":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"24:1136:8090":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"24:4423:3535":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"1:1782:9006":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:5414:6194":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"21:216:8561":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"21:957:4601":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"16:6763:8285":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"24:5301:2195":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"17:9899:5288":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"24:1035:1838":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"24:4552:3187":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"17:9706:21290":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:5626:21202":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:4177:9153":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7763:21221":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"24:4896:3213":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"1:8987:26610":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13673:5881":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:4407:3404":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:11736:3293":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:11988:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4475:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4764:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:1611:4910":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"24:4039:3508":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"2:7652:3328":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:22583:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:1746:7568":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:3729:9119":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4854:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"21:244:37459":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"16:6232:8562":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:43464:14419":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:1558:3269":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"18:531:8127":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5994:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14037:5970":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13894:5932":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"24:4365:3531":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"17:12412:5560":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:5587:3340":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:14044:5972":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:7240:37268":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"24:4986:1846":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"11:1831:4559":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:582:1919":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"24:3342:3488":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"16:5720:8195":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:30349:4307":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:40300:3336":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:6392:3268":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"22:116:8117":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"24:2883:3471":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:41799:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:10835:14417":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"24:5476:3253":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"17:9188:5275":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:4794:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:10868:14418":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:10350:14422":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:40863:3315":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11371:5379":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:9442:37333":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10013:5292":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:2978:2313":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:1638:6735":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:4506:6173":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:8489:9197":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:40421:3353":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:9100:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11832:5430":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"24:3036:3478":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"14:40:1838":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:1517:20273":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:4556:6936":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4824:7025":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:10297:9206":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:47905:7948":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:1466:2251":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:358:4245":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:8771:21278":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:635:8983":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:11327:8522":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:2934:3474":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:11123:7836":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:11790:8136":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:7363:4559":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:5051:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:7833:8311":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:7540:7545":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:6604:5003":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"24:343:37690":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"16:2689:6124":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"24:5494:3257":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"17:11329:21294":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:3435:8006":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12457:5570":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:587:6635":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"22:0:1686":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"24:4912:3217":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"17:12133:5495":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:4781:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:21987:7580":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:11999:1505":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:5877:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:8907:8606":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12727:5607":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"24:4056:3509":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:47271:7935":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:9296:5278":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:3894:6167":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"14:165:20279":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:3596:3273":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10199:5299":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:13096:5684":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:2982:3278":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:41638:1886":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"21:2729:3289":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"5:5687:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:4724:6179":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12905:5650":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"24:909:37685":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"18:766:25303":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:695:8604":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8792:9209":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4770:7000":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11520:5351":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13971:5955":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:42586:7817":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"24:4814:3195":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"1:0:1398":{"crate_id":1,"path":["std"],"kind":"module"},"1:10740:8510":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:4436:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:3732:9118":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2853:5136":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:6372:6136":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:11753:5412":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:7678:4233":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:40360:3347":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:30118:9121":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2688:3442":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:41587:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12605:5589":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:9170:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:5799:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:43383:7830":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:39293:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11074:5351":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:20939:9283":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:12372:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:12035:5472":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"9:357:20206":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:6590:9229":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:7297:8358":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"22:841:2515":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"24:3882:3498":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"6:4944:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:3777:6164":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:8734:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43678:8444":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12377:5556":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:8420:14428":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:4955:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5900:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10981:21441":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:1442:3268":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:10994:21440":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:5008:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3220:9101":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:20650:33458":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:2777:5137":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11084:8158":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9665:37329":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"24:5489:3256":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"22:804:37487":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"6:4395:6858":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:21671:9070":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"24:4873:3208":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"22:742:2515":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"15:288:20298":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:32133:1994":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:3383:14450":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:13795:5909":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:30365:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"24:2229:9070":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"16:6470:6154":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12952:5657":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:7739:6141":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"24:4097:3512":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"24:4266:3524":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"1:11252:8517":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:46021:7866":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:4428:4939":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:9219:3424":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:5044:7143":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:2765:5126":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:30309:4305":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:526:6602":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:43810:8451":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:2632:9096":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"20:148:3772":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"1:9022:1891":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:573:6627":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:7659:3331":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:46310:7875":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:2781:3297":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:4261:3395":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:7552:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12354:5551":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1569:6685":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:615:8907":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:6872:6144":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:1673:6760":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:4955:3741":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:11030:5015":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:41723:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:5386:9203":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4729:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:5015:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:45690:7848":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:3299:9099":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4291:6789":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"24:4478:2165":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"16:4928:6186":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:46411:7878":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:477:4983":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11155:8169":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"24:4283:3525":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"5:2970:25951":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5955:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6834:7506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:47969:7952":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:21042:9070":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"20:77:1908":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:2469:14487":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:22517:4237":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:4868:6184":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"21:2749:2222":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"1:9010:26581":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"24:4950:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"1:2403:3026":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:7652:4234":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:5738:9222":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:7025:8298":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"18:609:37347":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:4761:671":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:504:21273":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:10633:5305":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4420:6874":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:5651:6139":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:4785:6181":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:1075:21315":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:7843:4774":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:40886:3319":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"24:4578:2047":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"16:7515:8309":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:22550:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:3834:9120":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:14350:6076":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:4164:9152":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:2194:6488":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:9032:5270":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:35:4477":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:43991:8464":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:8955:8034":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:40877:3317":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:9017:8615":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12174:5506":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"21:2635:3287":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"24:5295:190":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:22041:33085":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:13332:5723":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:22484:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:207:4479":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:10507:9103":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:41396:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:11994:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11960:26996":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:47065:7903":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"24:2611:3462":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"1:11949:8988":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:46189:7871":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12254:5513":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:3441:6161":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"24:4555:1855":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"6:1681:6761":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:5590:6140":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:6638:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11109:8166":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:47920:7949":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:944:8993":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4323:3400":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"21:140:4595":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"11:311:8329":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:6796:7489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:2759:6127":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"22:906:3289":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:42353:3414":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"24:5359:3243":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"2:43760:8449":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13368:5754":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"9:507:6551":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13557:5857":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"24:3002:3476":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"24:3223:2300":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"1:8932:9234":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:1562:3268":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:6785:33443":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"7:32:20177":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:4196:4937":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:6197:21208":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"22:948:1838":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"16:7099:8035":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:4396:6170":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:2874:6132":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"24:925:3228":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"1:11985:1490":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:10511:8156":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"21:1818:4582":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"5:1776:4559":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:2035:3388":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"10:36:6490":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11979:1525":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12878:5646":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:547:6614":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8868:8030":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"24:1601:3375":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:7327:3332":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"18:699:8134":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6864:6251":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:9030:8035":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"11:805:8992":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"24:3087:3481":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"17:10832:21394":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:755:8143":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"21:107:4592":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"11:836:8994":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:2918:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"24:549:128":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"1:4148:9150":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:40176:7799":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:6239:37302":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:40108:8396":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:7799:6316":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:8794:21279":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:8296:9117":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"11:1858:1875":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:7755:8908":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11888:5445":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:14150:6015":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:5704:8193":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:1048:37246":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"24:3019:3477":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"9:426:20193":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"24:4806:3193":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"17:13456:5817":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:5689:8190":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:48061:7956":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:8740:21277":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"18:590:5160":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"21:2600:8124":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"5:7246:8354":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:3501:32511":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6850:6249":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:41525:8423":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:1649:6743":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11388:21295":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:1911:16223":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:22025:33082":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6175:8563":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8186:3346":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:8348:8009":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:41573:7813":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:11992:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:9604:5294":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10529:5367":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:2883:4988":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"24:1443:25328":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"6:123:14877":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:3111:9106":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:5793:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:3194:3408":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:4004:4561":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"24:4824:3197":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"16:2926:20343":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:2376:9056":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"24:4589:2172":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:43574:8367":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8004:9097":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"24:4586:2051":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"24:2798:1851":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:21104:9271":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:9359:33429":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"24:0:1685":{"crate_id":24,"path":["syn"],"kind":"module"},"1:8304:8008":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:14216:6039":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10931:21453":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9318:5279":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"24:5009:2495":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:46213:7872":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:7033:8349":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:47946:7951":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:5775:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"14:0:3018":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"24:5376:1824":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"2:11564:8448":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:40380:3349":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:47984:7953":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:23162:7594":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:2217:9050":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:598:3268":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"6:1557:6677":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:5988:3364":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:41672:3749":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"24:1332:3392":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"1:10138:2203":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:43532:8435":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13548:5853":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6250:6203":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:30379:33075":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:7631:6305":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"24:2900:3472":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"1:1580:8335":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:11847:14437":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:2781:6128":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:80:25291":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:0:3020":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4650:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"11:1068:20270":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:7020:5006":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6886:6145":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:4035:9130":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:46235:7873":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:9181:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4638:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:20607:4131":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:11781:14428":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"24:3393:3491":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:44008:8465":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:6809:9267":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:8176:21225":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:39335:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:5940:21205":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"24:5021:3225":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"5:261:4913":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:9213:3414":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"16:7313:37275":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:4126:28658":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:3262:9104":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:9171:3420":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6156:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12053:5473":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"23:0:3141":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"16:7693:6143":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:11944:8619":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:39379:3301":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:7622:21220":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:14102:6014":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10051:21310":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12365:5554":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"21:2014:4583":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"1:7657:4236":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:5608:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:10504:9101":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"21:1393:1919":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"5:1102:35795":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:8209:8364":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"20:504:4044":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"17:13964:5954":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13140:5691":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"18:707:8136":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:7732:8494":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:5994:21206":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:9223:3421":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12004:5463":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:6705:7432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11542:5385":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13854:5923":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:41731:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10339:21362":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"11:1826:4561":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5737:7159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6160:8246":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13566:5858":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"22:706:3287":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:10444:8150":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"24:93:9070":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"6:5979:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:41944:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:2174:6484":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"21:2577:3438":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:43962:8456":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:2789:5129":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"11:2168:1827":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4524:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4754:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:8841:21280":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"21:2754:1905":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"6:7575:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:494:6580":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11034:21465":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4469:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"24:2968:2212":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"17:8899:21282":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"11:1012:8997":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:10486:8153":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:9274:2801":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:21979:7579":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:7999:8617":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:6456:6137":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40482:3357":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:7278:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1595:6701":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:6900:6254":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:4166:4937":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:40389:3350":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:21124:7571":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11852:5440":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:40131:14481":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:42596:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:1709:6774":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:2493:9095":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:5236:4913":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:6915:37266":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:4536:6174":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:6820:7497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:1513:6652":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:8138:21224":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:11285:8053":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:2960:36816":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:632:8982":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"24:4845:3202":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"5:1118:35771":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:1288:8996":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:41419:7803":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:39411:14514":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"11:285:8326":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:6649:2644":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:11558:8525":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6977:21214":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:32224:4122":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:4047:9133":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:5280:14406":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:3178:8335":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"18:660:25304":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"11:630:3269":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:21561:33346":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:3204:8336":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:1121:8900":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:20635:33342":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:2793:5130":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"20:235:4048":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"24:4520:3173":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"24:1747:8924":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:10175:5294":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:7484:8307":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:45590:7844":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:41984:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"24:103:4187":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"2:44275:8480":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:5622:4992":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:8270:8499":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:736:25302":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:3671:4913":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13043:5678":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"24:4884:3211":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"2:22004:33086":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10253:21338":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5987:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:7609:7560":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:3933:9123":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"24:4196:3519":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"2:4184:3390":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:119:14876":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"24:4876:3209":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"17:11127:5383":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:7564:7549":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:11398:5019":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"20:272:1915":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:6726:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7665:6152":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:46881:7901":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:723:8332":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:40029:3426":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:12077:5477":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8824:8028":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"24:1448:25329":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"24:4300:3526":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"17:8659:21275":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:4753:6180":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"24:5510:3246":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"16:5398:5270":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:7199:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:14189:6030":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6540:6142":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:14026:5969":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"24:4940:1861":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:45991:7865":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:3737:8999":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8153:8004":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4748:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"24:4869:3207":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"18:652:5153":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:2900:6133":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:6671:7426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12502:5576":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:44533:7839":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:14:2659":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:7116:3268":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:14417:6088":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:2164:21361":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10148:21341":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:14359:6078":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"24:4155:3516":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"24:4866:2174":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"6:4550:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7494:8308":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:3492:3420":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:2378:9057":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:11098:8162":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12769:5628":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"22:119:37488":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"24:3308:3486":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:44295:8485":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:9939:21312":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13448:5816":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:47601:7938":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:42642:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:47931:7950":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13862:5924":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"24:5503:3244":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:10161:21340":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:2388:9062":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6357:6208":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"9:52:8583":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:41561:7812":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:4543:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11220:21467":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:6214:1868":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:6648:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:4387:3403":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"24:5158:3229":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:826:3374":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"11:817:8993":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2373:6111":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"24:4341:3529":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"24:921:2884":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"20:281:1915":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:21912:8377":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8216:8451":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:6711:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"24:4880:3210":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:10097:21343":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:933:8992":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"18:624:37339":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:5185:2212":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"1:3407:4937":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:43526:8434":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"24:5478:3254":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"24:4924:3220":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:9206:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:2570:4972":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:14236:6042":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:47771:7941":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:46167:7870":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"24:2747:3465":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"24:901:37687":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"1:7916:8913":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:7128:28659":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:4564:6175":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:6589:7391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"24:3104:3401":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"1:7860:7963":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:4996:6188":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:7433:6300":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:914:8990":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:21234:9279":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8810:8027":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:11258:9212":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12479:5571":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"24:126:1827":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:898:4561":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:793:8990":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:46851:7900":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"24:4836:3200":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"6:4842:7034":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:44307:8488":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13905:5936":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:8222:9117":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:4374:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"0:947:1706":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:9160:26622":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:7511:7538":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:2966:3478":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"20:10:3145":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"2:2703:2441":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"9:177:8594":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13029:5677":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:256:37312":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:5775:6196":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:5978:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:1545:6668":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"24:4126:3514":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:41790:3268":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:7445:21217":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12840:5642":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:4172:3517":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"24:3138:3482":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"17:13639:5869":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10609:21430":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:7061:8302":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:12669:4475":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:13778:5906":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:6978:8917":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"24:5190:3236":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"24:5452:3247":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"16:7012:8296":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:12359:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:5805:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"24:3240:234":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"1:885:8333":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"24:1965:3269":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"5:6273:4561":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:4789:4989":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:11179:8039":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"24:3206:3484":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"1:5406:9204":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6396:8253":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:6658:8271":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"24:4534:1898":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"6:5080:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:2170:8340":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:5437:9206":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:47809:7942":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6618:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:21964:33064":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:46388:7877":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:950:8994":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:21025:9274":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:12002:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6850:7512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:55:6343":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"21:2724:1827":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:4312:3527":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"21:404:37479":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"1:3510:9068":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"24:3155:3483":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"1:10445:5013":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:43556:8364":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"24:1533:2810":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"14:7:8894":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11199:5358":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:3217:35727":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:48022:7955":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6598:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4992:7116":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:2362:9053":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:3301:9100":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6289:6206":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:3058:5179":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:1426:3273":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13125:5687":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:1717:6778":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:515:5156":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:2840:5134":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:10550:4233":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:6894:5005":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:20986:4496":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"24:4502:2035":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:43660:8443":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"24:869:37686":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"1:4694:9157":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14341:6072":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14163:6021":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6332:8249":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:644:5153":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6724:8273":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:46357:7876":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:3722:3388":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13999:5962":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:3583:3269":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4984:7114":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"24:2696:108":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:43283:33428":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:6516:6210":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:6554:8267":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:854:3273":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"24:1616:3387":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"11:986:8996":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:11462:9118":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6057:20317":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"11:97:8325":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:9426:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:4783:35645":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:45720:7849":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:8196:3360":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:488:6577":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:8924:21283":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:1527:6657":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2919:2249":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:12118:5489":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:11989:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:5843:8207":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:4691:9184":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:2213:4504":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:304:1458":{"crate_id":1,"path":["std","thread"],"kind":"module"},"24:3376:3490":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"17:9840:21305":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"24:842:9070":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"16:4323:6169":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"24:1405:1911":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"1:1765:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2691:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:482:6574":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:14395:6082":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"11:2060:8997":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:2735:4118":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:10080:21355":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:7523:7540":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6531:4903":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:45821:7853":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:2844:5132":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:1501:20272":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13683:5882":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:10957:21463":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:39313:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:5285:3238":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"22:881:1906":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"5:7171:3307":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:8068:8315":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5863:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:551:4230":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:44056:8466":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:11354:5237":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:8632:21274":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:5074:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:45742:7850":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:7633:4246":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:681:8130":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6841:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2836:5133":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2920:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:12346:5549":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"24:551:8088":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"1:4308:9155":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:11343:14432":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"24:5466:3249":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"1:728:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:45612:7845":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:3260:9103":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11454:8176":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4664:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:21952:8380":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:39152:14463":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:3231:3410":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"24:2781:3467":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"16:2293:20318":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:1586:8336":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"24:4377:3532":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"1:11995:1509":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:4111:3412":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12936:5656":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12148:5501":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:46043:7867":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:43778:8450":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"24:3795:3492":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:43334:8368":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"24:3916:3500":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"16:5807:8201":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:2141:8338":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:9095:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:43106:8431":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:498:4223":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:14007:5964":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4704:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:7087:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"24:4568:1843":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"1:8900:9233":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10123:5288":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:11978:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4328:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:46805:7899":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:41647:3269":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"22:953:2515":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"17:12579:5586":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:0:3021":{"crate_id":17,"path":["object"],"kind":"module"},"2:39253:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:1543:4937":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"4:0:3012":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:352:4244":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:2243:8345":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:9877:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11967:5457":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13055:5679":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:4441:6171":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:5068:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"24:4452:2508":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:10267:14421":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:8152:6155":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:4435:3536":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"21:1062:1906":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"5:4076:3273":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:14301:6061":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:5771:8612":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:4928:3221":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"24:5353:2253":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"17:10945:21462":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:4616:9128":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:22616:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:7025:3268":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:10402:9209":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"24:151:1891":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"24:893:37682":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"20:45:3146":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:43435:8372":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4626:6949":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11924:5452":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:9744:37336":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:9221:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"24:5368:3242":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"21:2426:1907":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"1:5042:26522":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9850:21306":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"24:4138:3515":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"5:5951:4937":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:1979:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:45880:7856":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:474:1828":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:21790:8375":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"24:3359:3489":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"24:4888:2101":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"16:5737:21204":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:40370:3348":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:22091:8385":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:44351:8489":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11164:5354":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:8326:7407":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:10038:21311":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:40666:3361":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:6171:7367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:9821:5286":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:11020:21438":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:43848:8455":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6744:7449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"24:1862:3265":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"1:7721:8987":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:3453:9067":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:44120:8468":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9614:37316":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:7632:9070":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:32097:6487":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:8902:35349":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:41705:3750":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:10025:3269":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:47874:7945":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:11467:5382":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:13069:5680":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12106:5486":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6502:8265":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:10812:5339":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:42626:6330":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:10377:8144":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:10780:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:39446:3401":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"24:5156:3233":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:5329:2496":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"17:13427:5806":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:45861:7855":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"24:4080:3511":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"1:11091:8027":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:7739:9023":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:3824:3494":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"22:710:3436":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:8547:8026":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:10458:8151":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"18:574:5153":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11178:8170":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"24:4858:3205":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"2:2848:5135":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:2814:4051":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6789:8286":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:5890:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7707:6308":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9485:37321":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:22070:8382":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:3076:3292":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:5567:6138":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"15:0:3019":{"crate_id":15,"path":["addr2line"],"kind":"module"},"9:393:20192":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:673:8985":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:6427:8255":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:30913:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11144:8168":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:7706:8986":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"24:5090:2485":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"6:6067:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:1495:6644":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"22:730:1827":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"16:3635:5183":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:20972:9278":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:43706:8446":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13167:5694":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:7289:6281":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"24:1894:3266":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:3166:14464":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:41482:1906":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"24:4496:3171":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:46645:7897":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13847:5922":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"22:736:1838":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"16:2352:6110":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:4378:3402":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:10953:8029":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"9:450:20191":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8228:9116":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:12003:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:21457:9284":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:42669:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"21:2709:1907":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"6:1506:6649":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"24:673:37570":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"17:12592:5588":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:2421:6113":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:9590:4968":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:40680:3362":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:8144:8003":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11250:5360":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"18:564:5159":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:10770:7963":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:41824:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10597:21429":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:5757:4561":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"21:2328:1838":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"6:1500:6646":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:40150:8399":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:9469:14492":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:1590:6699":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:20853:4496":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"24:4968:62":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"16:6128:8243":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:40124:8397":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"24:1726:8923":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"1:11761:5022":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:42876:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4695:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"22:678:3388":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:11642:5393":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:40116:3426":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:1045:8303":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:20851:34188":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"11:968:8303":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:14205:6034":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:4678:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"9:486:20190":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:7124:3268":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:45945:7858":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:6348:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:491:8126":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:8125:21223":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:608:3269":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:43372:14414":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11498:5383":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:7272:4944":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:42144:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"21:2269:1827":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"5:6622:4566":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:12001:1563":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:2208:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6939:21213":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:1273:8997":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:44283:8482":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:11998:1508":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:7065:35735":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:11103:8028":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:6720:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"11:365:4908":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:11591:5355":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:5861:4943":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:2689:3407":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:4698:6178":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:2541:6118":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:5310:2198":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"17:12864:5645":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:7539:6151":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:9462:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:8105:8321":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:44134:14444":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4810:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"11:1852:8336":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:3511:4561":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"22:773:3290":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"1:4380:9149":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"24:3410:247":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"1:8846:3269":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"24:88:1891":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"24:258:8893":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:39439:33427":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"18:481:8125":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:11927:8660":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:8542:21261":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"24:1338:37549":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"16:2332:6104":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"24:5064:2490":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"1:11977:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"24:844:5119":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:20665:33455":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:9475:21286":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:11669:5394":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:21452:9276":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:7558:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"13:0:3011":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:9966:5294":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:6137:4981":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:14329:6070":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:12000:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:12552:5312":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:43839:8454":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"24:4529:1852":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"21:2639:3435":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:43873:8396":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:657:3268":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:10303:5151":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:44299:8486":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"22:720:1906":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"18:719:5172":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:6764:4954":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:6018:21207":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:6044:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"24:2985:2514":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:2741:1864":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:12017:5464":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4723:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"24:4849:3203":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:5469:4937":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"24:2849:2159":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"17:10471:8152":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:25972:7595":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"24:4184:3518":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:43362:8371":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6931:21212":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:45898:7857":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:11993:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:2314:6102":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6323:8248":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4740:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:47865:7944":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:1672:4913":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"21:1019:3436":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:39191:4470":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"24:1921:3267":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"6:500:6582":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:11235:5017":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:11982:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:5612:8184":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:5363:21201":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:7599:7558":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:8472:8021":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"24:5086:3226":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:4043:4468":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"24:877:37683":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:40870:8415":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:44168:8477":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:22385:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:6022:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10430:8149":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"24:4208:3520":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"1:8381:3745":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:6240:4991":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"21:2533:4584":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:22352:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:1257:8303":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:45843:7854":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:43624:8441":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:2923:2159":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4341:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:40270:4961":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:11525:8442":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8282:9156":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:2809:5115":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"15:327:8579":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:21058:9269":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:5551:7328":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:7095:8350":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:8399:8018":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4535:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13923:5940":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:4785:3188":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"6:7463:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:261:37311":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:9209:112":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:40450:3341":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:736:8333":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:6425:9224":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:5059:2487":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"6:5882:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4489:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:5529:3351":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:9215:2306":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:4428:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"24:885:37684":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"24:547:210":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"16:7592:21219":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:8288:9148":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"24:4947:2313":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:6832:3311":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:8137:3314":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:4329:3528":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"24:4862:3206":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"24:3812:3493":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"1:10758:8516":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"24:5506:3245":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"24:5148:3231":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"6:7517:7539":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:11997:1507":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10799:21396":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:3291:1875":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"2:43820:8452":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6565:7374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"24:5484:3255":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:4142:3413":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:4963:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:1184:21320":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:40056:33067":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"11:1845:8335":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:3139:14513":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5920:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:6136:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:30543:33076":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:6573:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:43977:8462":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:41782:3273":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:10510:9099":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"24:3053:3479":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:10810:28879":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13830:5915":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:1915:4471":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:11416:8175":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:7525:6150":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:40522:3343":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"12:0:3017":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:12757:5626":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:47999:7954":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:1089:1915":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"17:9399:21285":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:3184:32822":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:6319:4913":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:2681:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:13697:5883":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:2210:9049":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"18:671:25305":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13492:5847":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:21896:7574":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"24:4491:3172":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"16:5342:6193":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"0:0:1708":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"10:44:6491":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:42906:8430":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:2497:6116":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:6015:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:11548:8445":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:44330:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:11990:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:4895:7060":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:10735:8508":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:5025:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:9192:8044":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6667:6233":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:507:5153":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:7407:6299":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:39453:7671":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:9474:8363":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6077:7330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:1973:21344":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12815:5638":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:10745:8497":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:11315:8659":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:40398:8408":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:42346:2306":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13991:5961":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:5299:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:13707:5884":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:2519:6117":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13937:5947":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:4900:6185":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"24:5481:2256":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:44525:8652":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:9344:37330":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:2737:6126":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:4818:7024":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:4841:6183":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"21:433:4899":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"5:1464:8332":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"11:1103:20271":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:1591:1875":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"21:2770:1838":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"1:5745:9223":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:20648:33453":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:3744:6163":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:3238:1875":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:6386:8252":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"24:5349:3240":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"1:872:8332":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4973:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10906:5344":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:5073:26522":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10293:21356":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:9965:8420":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:923:8604":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:2771:5127":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:44482:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:7272:7522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9952:5260":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"9:0:3014":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"24:251:8892":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"6:6008:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:9867:9070":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"24:1506:3378":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"2:45636:7846":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:506:6585":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"21:2378:2515":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"1:6384:26507":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:1430:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"21:183:4208":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:43514:8433":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4389:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:9571:37328":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11696:5400":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:7848:9065":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6347:21209":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"24:286:37555":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"24:5497:3258":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"2:44546:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:9048:5271":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"21:53:4585":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:2698:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:40280:9048":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:40911:3325":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:1696:6770":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:7900:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:4304:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:11996:1506":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:47847:7943":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8541:3269":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:9217:3423":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:6537:9227":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:11142:8040":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:44287:8483":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:2461:7562":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:40919:3327":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:5816:4993":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:7250:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:9777:21303":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:5067:6190":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:45658:7847":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:6625:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"21:367:4586":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"6:4368:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"24:53:1914":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:46259:7874":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10671:21432":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:43542:2801":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11600:21297":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"24:2645:1885":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"15:306:20299":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:3933:3501":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"6:4800:7016":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:579:6630":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:4025:9129":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:4483:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:2962:7564":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:1536:6662":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"24:4114:3513":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"2:45760:7851":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10845:5341":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"24:3121:212":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"16:5100:6191":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"24:5152:3232":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:20667:33457":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:47663:7939":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:1565:4561":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11623:5390":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"24:1487:3281":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"1:9182:29101":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:4506:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:40190:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:10914:6548":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"11:1027:20269":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:22077:7592":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:4906:9183":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"24:3986:125":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"18:636:5171":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"14:160:8894":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12566:5585":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:21673:9272":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:798:8991":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12526:5577":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"24:1973:3271":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"17:14197:6033":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:640:8984":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:8949:21284":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:2926:3444":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:40096:8395":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"24:4225:3521":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:21102:9070":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:8854:9235":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:2201:3307":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"24:1948:3268":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"1:6061:4994":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"24:3899:3499":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"6:4401:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:40901:3323":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:14015:5965":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4949:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:844:8995":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"22:357:3287":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:21110:9273":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:10322:8444":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4908:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"24:4832:3199":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:43343:8369":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"24:5339:2295":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"2:41502:33070":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:8166:8322":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:7655:3330":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:276:1885":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"24:2543:3458":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:46491:7879":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:2049:8999":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"22:876:233":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:10313:21386":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:7908:26625":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10351:5302":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"24:3274:3485":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"17:10544:21427":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:43352:14415":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:2567:6119":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"24:2175:9070":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:3517:9087":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:3667:9115":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"24:4841:3201":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"17:11791:5427":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:3519:21414":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:43091:7829":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:43110:8432":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:43830:8453":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6868:7515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:44188:8478":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13109:5685":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:4620:6177":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:44563:8492":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:3222:9102":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:11210:8172":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"24:2764:3466":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"21:648:3439":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"1:6288:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:30437:33056":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:4156:9151":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:41436:7805":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"24:4828:3198":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"1:3927:9124":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5553:6135":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12921:5652":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:21227:9070":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:11329:8905":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:1492:8603":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:7016:4476":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:4237:3522":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"17:13757:5901":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"22:813:1906":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"2:4020:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:9016:5269":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"11:2186:37247":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:47894:7947":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:40044:8393":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4872:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4496:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"24:2815:3468":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:2929:3445":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:7216:8351":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:9875:21325":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:5231:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"22:823:1827":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:2743:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"24:3853:3496":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"1:9143:8507":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4917:7076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10390:8146":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:4252:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11726:5404":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6303:6134":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:11234:5359":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"11:0:3016":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"15:394:20308":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:2162:4497":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:1780:9005":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:14054:5977":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:4524:3174":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"5:1482:8990":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"24:2092:2452":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"24:1140:8092":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:7275:3333":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:43444:14420":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:10716:9186":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:2443:6114":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11565:8525":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"22:779:25313":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"21:2630:233":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"24:4793:3190":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"1:5422:9205":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:41904:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:42691:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:40430:3363":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:2360:4487":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"24:2560:3459":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"17:13870:5925":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:2556:4985":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"24:4068:3510":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"1:11984:1406":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:46137:7869":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"24:5298:2479":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:9518:21287":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"21:2302:2222":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"7:79:20184":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13719:5887":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:22682:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:530:8178":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:12539:5580":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:46091:7868":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"18:614:37340":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:5959:8218":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:10935:26597":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"24:4562:1688":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"1:2592:8912":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:13435:5809":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:12577:4981":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12435:5563":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:7855:21222":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8165:9069":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:1636:4302":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"13:110:37255":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"24:3325:3487":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"24:5154:3234":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"1:7589:5010":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:2819:5114":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"21:2503:3437":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"24:335:3388":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"16:5673:21203":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11568:21296":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:4333:3401":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"18:96:25292":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:3867:6166":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"24:4254:3523":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"17:10280:21385":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11539:8054":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:10336:14423":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:8252:6358":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:40351:3339":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"24:5146:2041":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"21:2690:1906":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:7304:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:43500:7832":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"22:799:8119":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"5:5877:14796":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:4236:3269":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:11796:14429":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"24:4916:3218":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:11599:8366":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:9083:5272":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:4008:33426":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"18:727:5175":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:10156:14416":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12671:5598":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:41864:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:12994:5665":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:4862:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:43724:8447":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:9806:21304":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:6438:8256":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:6130:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"24:2917:3473":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"1:8233:9113":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:10223:5301":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:6607:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6720:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:6632:4567":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:8322:9185":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:39357:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7553:6301":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:4812:9138":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:644:3273":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:1822:3268":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:7045:4561":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10330:21363":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13771:5904":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:11872:5441":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10323:21387":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:7262:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:40463:3355":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:1921:9033":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"11:332:4906":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:7225:3335":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11290:21293":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:2908:3409":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:42614:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:10088:26972":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"20:239:4050":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"6:4456:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:7362:21216":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:9887:21319":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:1841:4665":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13949:5950":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:2750:3296":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:3377:3321":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:7370:32523":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:7073:21215":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:8969:8613":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:9673:4972":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12065:5476":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:11272:21292":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:9105:8039":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"24:2041:3275":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"24:4819:3196":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:22715:7593":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:1059:8996":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:22649:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:2803:6129":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:21208:9270":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"24:2662:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"2:40072:7798":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:43454:8373":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4716:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:760:4559":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:44279:8481":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12659:5597":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:20620:33342":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:11241:21468":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:1838:8334":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:2468:9070":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:9118:5273":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:527:4228":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:11483:9120":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:1068:8997":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"21:2775:2515":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"16:4032:6168":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10883:5343":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:43422:14411":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:8711:21276":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:4365:4939":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:39238:8390":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:47885:7946":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:10049:3273":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"24:2034:3273":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"2:44311:7836":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"11:1538:20274":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4887:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:11019:5014":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:119:4904":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:2690:7565":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:2679:2294":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:7266:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:42224:8608":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"22:982:3268":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"22:696:8118":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:3371:14446":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:5372:9202":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"24:2240:5121":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"17:14227:6040":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.11/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.30/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.65/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.26/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}