{"root":"0:0:2535","crate_version":"0.16.1","includes_private":false,"index":{"a:2:3338:4710-0:262:2987":{"id":"a:2:3338:4710-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:114:2528":{"id":"0:114:2528","crate_id":0,"name":"indent","span":{"filename":"src/indentation.rs","begin":[52,0],"end":[75,1]},"visibility":"public","docs":"Indent each line by the given prefix.\n\n# Examples\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\"First line.\\nSecond line.\\n\", \"  \"),\n           \"  First line.\\n  Second line.\\n\");\n```\n\nWhen indenting, trailing whitespace is stripped from the prefix.\nThis means that empty lines remain empty afterwards:\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\"First line.\\n\\n\\nSecond line.\\n\", \"  \"),\n           \"  First line.\\n\\n\\n  Second line.\\n\");\n```\n\nNotice how `\"\\n\\n\\n\"` remained as `\"\\n\\n\\n\"`.\n\nThis feature is useful when you want to indent text and have a\nspace between your prefix and the text. In this case, you _don't_\nwant a trailing space on empty lines:\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\"foo = 123\\n\\nprint(foo)\\n\", \"# \"),\n           \"# foo = 123\\n#\\n# print(foo)\\n\");\n```\n\nNotice how `\"\\n\\n\"` became `\"\\n#\\n\"` instead of `\"\\n# \\n\"` which\nwould have trailing whitespace.\n\nLeading and trailing whitespace coming from the text itself is\nkept unchanged:\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\" \\t  Foo   \", \"->\"), \"-> \\t  Foo   \");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["prefix",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3946-0:330:2532":{"id":"b:2:3946-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:290:3699":{"id":"0:290:3699","crate_id":0,"name":"LF","span":{"filename":"src/line_ending.rs","begin":[15,4],"end":[15,6]},"visibility":"default","docs":"_Line feed_ – a line ending historically used in Unix.\n Corresponds to the ASCII control character `0x0A` or `\\n`","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:326:827":{"id":"0:326:827","crate_id":0,"name":"fmt","span":{"filename":"src/options.rs","begin":[7,9],"end":[7,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3303:260-0:271:2534":{"id":"a:2:3303:260-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14037:3900":{"id":"2:14037:3900","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5745:31102":{"id":"5:5745:31102","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:14055:31105"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:2782":{"id":"0:10:2782","crate_id":0,"name":"Fragment","span":{"filename":"src/core.rs","begin":[221,0],"end":[232,1]},"visibility":"public","docs":"A (text) fragment denotes the unit which we wrap into lines.\n\nFragments represent an abstract _word_ plus the _whitespace_\nfollowing the word. In case the word falls at the end of the line,\nthe whitespace is dropped and a so-called _penalty_ is inserted\ninstead (typically `\"-\"` if the word was hyphenated).\n\nFor wrapping purposes, the precise content of the word, the\nwhitespace, and the penalty is irrelevant. All we need to know is\nthe displayed width of each part, which this trait provides.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:11:2708","0:12:2786","0:13:2789"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"std::fmt::Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:24"]}}},"b:2:3087-0:246:2988":{"id":"b:2:3087-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:111:2526":{"id":"0:111:2526","crate_id":0,"name":"fill_inplace","span":{"filename":"src/fill.rs","begin":[120,0],"end":[153,1]},"visibility":"public","docs":"Fill `text` in-place without reallocating the input string.\n\nThis function works by modifying the input string: some `' '`\ncharacters will be replaced by `'\\n'` characters. The rest of the\ntext remains untouched.\n\nSince we can only replace existing whitespace in the input with\n`'\\n'` (there is no space for `\"\\r\\n\"`), we cannot do hyphenation\nnor can we split words longer than the line width. We also need to\nuse `AsciiSpace` as the word separator since we need `' '`\ncharacters between words in order to replace some of them with a\n`'\\n'`. Indentation is also ruled out. In other words,\n`fill_inplace(width)` behaves as if you had called [`fill()`] with\nthese options:\n\n```\n# use textwrap::{core, LineEnding, Options, WordSplitter, WordSeparator, WrapAlgorithm};\n# let width = 80;\nOptions::new(width)\n    .break_words(false)\n    .line_ending(LineEnding::LF)\n    .word_separator(WordSeparator::AsciiSpace)\n    .wrap_algorithm(WrapAlgorithm::FirstFit)\n    .word_splitter(WordSplitter::NoHyphenation);\n```\n\nThe wrap algorithm is\n[`WrapAlgorithm::FirstFit`](crate::WrapAlgorithm::FirstFit) since\nthis is the fastest algorithm — and the main reason to use\n`fill_inplace` is to get the string broken into newlines as fast\nas possible.\n\nA last difference is that (unlike [`fill()`]) `fill_inplace` can\nleave trailing whitespace on lines. This is because we wrap by\ninserting a `'\\n'` at the final whitespace in the input string:\n\n```\nlet mut text = String::from(\"Hello   World!\");\ntextwrap::fill_inplace(&mut text, 10);\nassert_eq!(text, \"Hello  \\nWorld!\");\n```\n\nIf we didn't do this, the word `World!` would end up being\nindented. You can avoid this if you make sure that your input text\nhas no double spaces.\n\n# Performance\n\nIn benchmarks, `fill_inplace` is about twice as fast as\n[`fill()`]. Please see the [`linear`\nbenchmark](https://github.com/mgeisler/textwrap/blob/master/benchmarks/linear.rs)\nfor details.","links":{"crate::WrapAlgorithm::FirstFit":"0:272:3000","`fill()`":"0:107:2518"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["width",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:788:4873":{"id":"5:788:4873","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13930:3484":{"id":"2:13930:3484","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:2988":{"id":"0:246:2988","crate_id":0,"name":"Penalties","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[23,0],"end":[132,1]},"visibility":"public","docs":"Penalties for\n[`WrapAlgorithm::OptimalFit`](crate::WrapAlgorithm::OptimalFit)\nand [`wrap_optimal_fit`].\n\nThis wrapping algorithm in [`wrap_optimal_fit`] considers the\nentire paragraph to find optimal line breaks. When wrapping text,\n\"penalties\" are assigned to line breaks based on the gaps left at\nthe end of lines. The penalties are given by this struct, with\n[`Penalties::default`] assigning penalties that work well for\nmonospace text.\n\nIf you are wrapping proportional text, you are advised to assign\nyour own penalties according to your font size. See the individual\npenalties below for details.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"crate::WrapAlgorithm::OptimalFit":"0:274:3009","`wrap_optimal_fit`":"0:65:2986","`Penalties::default`":"0:55:60"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:247:3193","0:248:3224","0:249:3256","0:250:3259","0:251:3261"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:52","a:2:3338:4710-0:246:2988","a:2:42921:10878-0:246:2988","a:2:42920:10671-0:246:2988","a:2:33119:4554-0:246:2988","a:2:3303:260-0:246:2988","a:2:33060:248-0:246:2988","b:2:3081-0:246:2988","b:2:3946-0:246:2988","b:2:2772-0:246:2988","b:2:3087-0:246:2988","b:2:2775-0:246:2988","b:2:3077-0:246:2988","b:2:2804-0:246:2988","b:2:2807-0:246:2988","b:2:3092-0:246:2988","b:5:784-0:246:2988","0:54","0:252","0:255","0:257","0:258","0:254","0:260"]}}},"a:2:33060:248-0:246:2988":{"id":"a:2:33060:248-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:323:2946":{"id":"0:323:2946","crate_id":0,"name":"word_splitter","span":{"filename":"src/options.rs","begin":[32,4],"end":[32,35]},"visibility":"public","docs":"The method for splitting words. This can be used to prohibit\nsplitting words on hyphens, or it can be used to implement\nlanguage-aware machine hyphenation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:316:2708":{"id":"0:316:2708","crate_id":0,"name":"width","span":{"filename":"src/options.rs","begin":[10,4],"end":[10,20]},"visibility":"public","docs":"The width in columns at which the text will be wrapped.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"2:13956:2700":{"id":"2:13956:2700","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12486:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44800:7654","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13984:31715":{"id":"2:13984:31715","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13408:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:246:2988":{"id":"b:5:784-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:4225","5:787:4226","5:788:4873"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13990:3621":{"id":"2:13990:3621","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13618:16103","str::split":"2:13981:3529","prim@char":"1:12486:490","`DoubleEndedIterator`":"2:8516:133","str::rsplit_terminator":"2:13993:36015"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44880:7822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:214:2793":{"id":"b:2:3087-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14051:31099":{"id":"2:14051:31099","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13996:31719":{"id":"2:13996:31719","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:16103","str::rsplitn":"2:13999:31721"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44934:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2809:27761":{"id":"2:2809:27761","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:494":{"id":"0:283:494","crate_id":0,"name":"clone","span":{"filename":"src/wrap_algorithms.rs","begin":[35,9],"end":[35,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[35,9],"end":[35,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:283:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13950:36013":{"id":"2:13950:36013","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12492:1765","crate::ops::IndexMut":"2:3608:4804","str::slice_unchecked":"2:13949:36012"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2775-0:236:2533":{"id":"b:2:2775-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:3276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:48:2516":{"id":"0:48:2516","crate_id":0,"name":"wrap_algorithms","span":{"filename":"src/wrap_algorithms.rs","begin":[1,0],"end":[413,1]},"visibility":"public","docs":"Word wrapping algorithms.\n\nAfter a text has been broken into words (or [`Fragment`]s), one\nnow has to decide how to break the fragments into lines. The\nsimplest algorithm for this is implemented by\n[`wrap_first_fit()`]: it uses no look-ahead and simply adds\nfragments to the line as long as they fit. However, this can lead\nto poor line breaks if a large fragment almost-but-not-quite fits\non a line. When that happens, the fragment is moved to the next\nline and it will leave behind a large gap.\n\nA more advanced algorithm, implemented by [`wrap_optimal_fit()`],\nwill take this into account. The optimal-fit algorithm considers\nall possible line breaks and will attempt to minimize the gaps\nleft behind by overly short lines.\n\nWhile both algorithms run in linear time, the first-fit algorithm\nis about 4 times faster than the optimal-fit algorithm.","links":{"`Fragment`":"0:10:2782","`wrap_optimal_fit()`":"0:65:2986","`wrap_first_fit()`":"0:90:3055"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:71-0:65:2986","0:72-0:262:2987","0:73-0:246:2988","0:271:2534","0:90:3055"],"is_stripped":false}}},"a:2:33119:4554-0:287:2529":{"id":"a:2:33119:4554-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:4554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3948:1865":{"id":"2:3948:1865","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40544:7467","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:2708":{"id":"0:141:2708","crate_id":0,"name":"width","span":{"filename":"src/options.rs","begin":[124,4],"end":[126,5]},"visibility":"public","docs":"Set [`self.width`] to the given value.\n\n[`self.width`]: #structfield.width","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["width",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/options.rs","begin":[50,0],"end":[54,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:136:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:14014:2928":{"id":"2:14014:2928","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13618:16103","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::rmatch_indices":"2:14017:36017"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44980:7824","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329:494":{"id":"0:329:494","crate_id":0,"name":"clone","span":{"filename":"src/options.rs","begin":[7,16],"end":[7,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3:582":{"id":"0:3:582","crate_id":0,"name":"core","span":{"filename":"src/core.rs","begin":[1,0],"end":[461,1]},"visibility":"public","docs":"Building blocks for advanced wrapping functionality.\n\nThe functions and structs in this module can be used to implement\nadvanced wrapping functionality when [`wrap()`](crate::wrap())\n[`fill()`](crate::fill()) don't do what you want.\n\nIn general, you want to follow these steps when wrapping\nsomething:\n\n1. Split your input into [`Fragment`]s. These are abstract blocks\n   of text or content which can be wrapped into lines. See\n   [`WordSeparator`](crate::word_separators::WordSeparator) for\n   how to do this for text.\n\n2. Potentially split your fragments into smaller pieces. This\n   allows you to implement things like hyphenation. If you use the\n   `Word` type, you can use [`WordSplitter`](crate::WordSplitter)\n   enum for this.\n\n3. Potentially break apart fragments that are still too large to\n   fit on a single line. This is implemented in [`break_words`].\n\n4. Finally take your fragments and put them into lines. There are\n   two algorithms for this in the\n   [`wrap_algorithms`](crate::wrap_algorithms) module:\n   [`wrap_optimal_fit`](crate::wrap_algorithms::wrap_optimal_fit)\n   and [`wrap_first_fit`](crate::wrap_algorithms::wrap_first_fit).\n   The former produces better line breaks, the latter is faster.\n\n5. Iterate through the slices returned by the wrapping functions\n   and construct your lines of output.\n\nPlease [open an issue](https://github.com/mgeisler/textwrap/) if\nthe functionality here is not sufficient or if you have ideas for\nimproving it. We would love to hear from you!","links":{"crate::word_separators::WordSeparator":"0:330:2532","crate::wrap_algorithms::wrap_first_fit":"0:90:3055","`Fragment`":"0:10:2782","`break_words`":"0:28:2825","crate::wrap()":"0:190:2524","crate::fill()":"0:107:2518","crate::WordSplitter":"0:236:2533","crate::wrap_algorithms":"0:48:2516","crate::wrap_algorithms::wrap_optimal_fit":"0:65:2986"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:9:2772","0:10:2782","0:214:2793","0:28:2825"],"is_stripped":false}}},"0:25:2708":{"id":"0:25:2708","crate_id":0,"name":"width","span":{"filename":"src/core.rs","begin":[330,4],"end":[332,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14028:36021":{"id":"2:14028:36021","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13644:16100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14043:36022":{"id":"2:14043:36022","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:5060":{"id":"5:5727:5060","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:262:2987":{"id":"b:2:3087-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:276:2023":{"id":"0:276:2023","crate_id":0,"name":"0","span":{"filename":"src/wrap_algorithms.rs","begin":[57,15],"end":[57,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:318:3483":{"id":"0:318:3483","crate_id":0,"name":"initial_indent","span":{"filename":"src/options.rs","begin":[15,4],"end":[15,31]},"visibility":"public","docs":"Indentation used for the first line of output. See the\n[`Options::initial_indent`] method.","links":{"`Options::initial_indent`":"0:142:3483"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"0:144:2825":{"id":"0:144:2825","crate_id":0,"name":"break_words","span":{"filename":"src/options.rs","begin":[212,4],"end":[217,5]},"visibility":"public","docs":"Change [`self.break_words`]. This controls if words longer\nthan `self.width` can be broken, or if they will be left\nsticking out into the right margin.\n\nSee [`Options::word_splitter`] instead if you want to control\nhyphenation.\n\n# Examples\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(4).break_words(true);\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"This\",\n                \"is a\",\n                \"litt\",\n                \"le\",\n                \"exam\",\n                \"ple.\"]);\n```\n\n[`self.break_words`]: #structfield.break_words","links":{"`Options::word_splitter`":"0:147:2946"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["break_words",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/options.rs","begin":[35,0],"end":[48,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:133:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3946-0:236:2533":{"id":"b:2:3946-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:333:4009":{"id":"0:333:4009","crate_id":0,"name":"UnicodeBreakProperties","span":{"filename":"src/word_separators.rs","begin":[119,4],"end":[119,26]},"visibility":"default","docs":"Split `line` into words using Unicode break properties.\n\nThis word separator uses the Unicode line breaking algorithm\ndescribed in [Unicode Standard Annex\n#14](https://www.unicode.org/reports/tr14/) to find legal places\nto break lines. There is a small difference in that the U+002D\n(Hyphen-Minus) and U+00AD (Soft Hyphen) don’t create a line break:\nto allow a line break at a hyphen, use\n[`WordSplitter::HyphenSplitter`](crate::WordSplitter::HyphenSplitter).\nSoft hyphens are not currently supported.\n\n# Examples\n\nUnlike [`WordSeparator::AsciiSpace`], the Unicode line\nbreaking algorithm will find line break opportunities between\nsome characters with no intervening whitespace:\n\n```\n#[cfg(feature = \"unicode-linebreak\")] {\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::UnicodeBreakProperties;\n\nassert_eq!(UnicodeBreakProperties.find_words(\"Emojis: 😂😍\").collect::<Vec<_>>(),\n           vec![Word::from(\"Emojis: \"),\n                Word::from(\"😂\"),\n                Word::from(\"😍\")]);\n\nassert_eq!(UnicodeBreakProperties.find_words(\"CJK: 你好\").collect::<Vec<_>>(),\n           vec![Word::from(\"CJK: \"),\n                Word::from(\"你\"),\n                Word::from(\"好\")]);\n}\n```\n\nA U+2060 (Word Joiner) character can be inserted if you want to\nmanually override the defaults and keep the characters together:\n\n```\n#[cfg(feature = \"unicode-linebreak\")] {\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::UnicodeBreakProperties;\n\nassert_eq!(UnicodeBreakProperties.find_words(\"Emojis: 😂\\u{2060}😍\").collect::<Vec<_>>(),\n           vec![Word::from(\"Emojis: \"),\n                Word::from(\"😂\\u{2060}😍\")]);\n}\n```\n\nThe Unicode line breaking algorithm will also automatically\nsuppress break breaks around certain punctuation characters::\n\n```\n#[cfg(feature = \"unicode-linebreak\")] {\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::UnicodeBreakProperties;\n\nassert_eq!(UnicodeBreakProperties.find_words(\"[ foo ] bar !\").collect::<Vec<_>>(),\n           vec![Word::from(\"[ foo ] \"),\n                Word::from(\"bar !\")]);\n}\n```","links":{"`WordSeparator::AsciiSpace`":"0:331:3530","crate::WordSplitter::HyphenSplitter":"0:239:2895"},"attrs":["#[cfg(feature = \"unicode-linebreak\")]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:209-0:155:2531":{"id":"0:209-0:155:2531","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,25],"end":[229,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"refill::unfill","name":"unfill","id":"0:155:2531","glob":false}}},"2:13941:3168":{"id":"2:13941:3168","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:36723":{"id":"5:5741:36723","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:786:4225":{"id":"5:786:4225","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:2:42920:10671-0:287:2529":{"id":"a:2:42920:10671-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:10671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14020:3622":{"id":"2:14020:3622","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:314:2530":{"id":"b:2:3081-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:33119:4554-0:271:2534":{"id":"a:2:33119:4554-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:4554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3077-0:214:2793":{"id":"b:2:3077-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3080:3420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3077-0:262:2987":{"id":"b:2:3077-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:3420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3090:149":{"id":"2:3090:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2775-0:314:2530":{"id":"b:2:2775-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2777:3276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2804-0:330:2532":{"id":"b:2:2804-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2806:27761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:203-0:115:2527":{"id":"0:203-0:115:2527","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,22],"end":[226,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"indentation::dedent","name":"dedent","id":"0:115:2527","glob":false}}},"b:2:3077-0:314:2530":{"id":"b:2:3077-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3080:3420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13949:36012":{"id":"2:13949:36012","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12492:1765","str::slice_mut_unchecked":"2:13950:36013","crate::ops::Index":"2:40375:4803"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:14026:36019":{"id":"2:14026:36019","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14027:36020":{"id":"2:14027:36020","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14053:31103":{"id":"2:14053:31103","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320:2825":{"id":"0:320:2825","crate_id":0,"name":"break_words","span":{"filename":"src/options.rs","begin":[22,4],"end":[22,25]},"visibility":"public","docs":"Allow long words to be broken if they cannot fit on a line.\nWhen set to `false`, some lines may be longer than\n`self.width`. See the [`Options::break_words`] method.","links":{"`Options::break_words`":"0:144:2825"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"a:2:33060:248-0:287:2529":{"id":"a:2:33060:248-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:33119:4554-0:330:2532":{"id":"a:2:33119:4554-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:4554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13940:31687":{"id":"2:13940:31687","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12505:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14061:10664":{"id":"2:14061:10664","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5153:10664"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45138:7595","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5733:36722":{"id":"5:5733:36722","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299:722":{"id":"0:299:722","crate_id":0,"name":"eq","span":{"filename":"src/line_ending.rs","begin":[7,29],"end":[7,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:1208":{"id":"0:167:1208","crate_id":0,"name":"new","span":{"filename":"src/word_separators.rs","begin":[176,4],"end":[186,5]},"visibility":"public","docs":"Create a new word separator.\n\nThe best available algorithm is used by default, i.e.,\n[`WordSeparator::UnicodeBreakProperties`] if available,\notherwise [`WordSeparator::AsciiSpace`].","links":{"`WordSeparator::UnicodeBreakProperties`":"0:333:4009","`WordSeparator::AsciiSpace`":"0:331:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3946-0:314:2530":{"id":"b:2:3946-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/options.rs","begin":[56,0],"end":[280,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:139:1208","0:140:2520","0:141:2708","0:142:3483","0:143:3725","0:144:2825","0:145:3733","0:146:3560","0:147:2946"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:33060:248-0:330:2532":{"id":"a:2:33060:248-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:33119:4554-0:214:2793":{"id":"a:2:33119:4554-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:4554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:26:2786":{"id":"0:26:2786","crate_id":0,"name":"whitespace_width","span":{"filename":"src/core.rs","begin":[337,4],"end":[339,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42920:10671-0:271:2534":{"id":"a:2:42920:10671-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:10671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3077-0:271:2534":{"id":"b:2:3077-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:3420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[258,0],"end":[326,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:19:857","0:20:2815"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:248:3224":{"id":"0:248:3224","crate_id":0,"name":"overflow_penalty","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[70,4],"end":[70,31]},"visibility":"public","docs":"Per-character cost for lines that overflow the target line width.\n\nWith a default value of 50², every single character costs as\nmuch as leaving a gap of 50 characters behind. This is because\nwe assign as cost of `gap * gap` to a short line. When\nwrapping monospace text, we can overflow the line by 1\ncharacter in extreme cases:\n\n```\nuse textwrap::core::Word;\nuse textwrap::wrap_algorithms::{wrap_optimal_fit, Penalties};\n\nlet short = \"foo \";\nlet long = \"x\".repeat(50);\nlet length = (short.len() + long.len()) as f64;\nlet fragments = vec![Word::from(short), Word::from(&long)];\nlet penalties = Penalties::new();\n\n// Perfect fit, both words are on a single line with no overflow.\nlet wrapped = wrap_optimal_fit(&fragments, &[length], &penalties).unwrap();\nassert_eq!(wrapped, vec![&[Word::from(short), Word::from(&long)]]);\n\n// The words no longer fit, yet we get a single line back. While\n// the cost of overflow (`1 * 2500`) is the same as the cost of the\n// gap (`50 * 50 = 2500`), the tie is broken by `nline_penalty`\n// which makes it cheaper to overflow than to use two lines.\nlet wrapped = wrap_optimal_fit(&fragments, &[length - 1.0], &penalties).unwrap();\nassert_eq!(wrapped, vec![&[Word::from(short), Word::from(&long)]]);\n\n// The cost of overflow would be 2 * 2500, whereas the cost of\n// the gap is only `49 * 49 + nline_penalty = 2401 + 1000 =\n// 3401`. We therefore get two lines.\nlet wrapped = wrap_optimal_fit(&fragments, &[length - 2.0], &penalties).unwrap();\nassert_eq!(wrapped, vec![&[Word::from(short)],\n                         &[Word::from(&long)]]);\n```\n\nThis only happens if the overflowing word is 50 characters\nlong _and_ if the word overflows the line by exactly one\ncharacter. If it overflows by more than one character, the\noverflow penalty will quickly outgrow the cost of the gap, as\nseen above.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"a:2:3303:260-0:287:2529":{"id":"a:2:3303:260-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2807-0:214:2793":{"id":"b:2:2807-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2809:27761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[133,0],"end":[191,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:82:1208","0:83:3047","0:84:2524"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[238,16],"end":[238,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[193,0],"end":[197,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3083:857":{"id":"2:3083:857","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:3009":{"id":"0:274:3009","crate_id":0,"name":"OptimalFit","span":{"filename":"src/wrap_algorithms.rs","begin":[57,4],"end":[57,25]},"visibility":"default","docs":"Wrap words using an advanced algorithm with look-ahead.\n\nThis wrapping algorithm considers the entire paragraph to find\noptimal line breaks. When wrapping text, \"penalties\" are\nassigned to line breaks based on the gaps left at the end of\nlines. See [`Penalties`] for details.\n\nThe underlying wrapping algorithm is implemented by\n[`wrap_optimal_fit()`], please see that function for examples.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"`Penalties`":"0:246:2988","`wrap_optimal_fit()`":"0:65:2986"},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:276:2023"]},"discriminant":null}}},"0:90:3055":{"id":"0:90:3055","crate_id":0,"name":"wrap_first_fit","span":{"filename":"src/wrap_algorithms.rs","begin":[347,0],"end":[371,1]},"visibility":"public","docs":"Wrap abstract fragments into lines with a first-fit algorithm.\n\nThe `line_widths` slice gives the target line width for each line\n(the last slice element is repeated as necessary). This can be\nused to implement hanging indentation.\n\nThe fragments must already have been split into the desired\nwidths, this function will not (and cannot) attempt to split them\nfurther when arranging them into lines.\n\n# First-Fit Algorithm\n\nThis implements a simple “greedy” algorithm: accumulate fragments\none by one and when a fragment no longer fits, start a new line.\nThere is no look-ahead, we simply take first fit of the fragments\nwe find.\n\nWhile fast and predictable, this algorithm can produce poor line\nbreaks when a long fragment is moved to a new line, leaving behind\na large gap:\n\n```\nuse textwrap::core::Word;\nuse textwrap::wrap_algorithms::wrap_first_fit;\nuse textwrap::WordSeparator;\n\n// Helper to convert wrapped lines to a Vec<String>.\nfn lines_to_strings(lines: Vec<&[Word<'_>]>) -> Vec<String> {\n    lines.iter().map(|line| {\n        line.iter().map(|word| &**word).collect::<Vec<_>>().join(\" \")\n    }).collect::<Vec<_>>()\n}\n\nlet text = \"These few words will unfortunately not wrap nicely.\";\nlet words = WordSeparator::AsciiSpace.find_words(text).collect::<Vec<_>>();\nassert_eq!(lines_to_strings(wrap_first_fit(&words, &[15.0])),\n           vec![\"These few words\",\n                \"will\",  // <-- short line\n                \"unfortunately\",\n                \"not wrap\",\n                \"nicely.\"]);\n\n// We can avoid the short line if we look ahead:\n#[cfg(feature = \"smawk\")]\nuse textwrap::wrap_algorithms::{wrap_optimal_fit, Penalties};\n#[cfg(feature = \"smawk\")]\nassert_eq!(lines_to_strings(wrap_optimal_fit(&words, &[15.0], &Penalties::new()).unwrap()),\n           vec![\"These few\",\n                \"words will\",\n                \"unfortunately\",\n                \"not wrap\",\n                \"nicely.\"]);\n```\n\nThe [`wrap_optimal_fit()`] function was used above to get better\nline breaks. It uses an advanced algorithm which tries to avoid\nshort lines. This function is about 4 times faster than\n[`wrap_optimal_fit()`].\n\n# Examples\n\nImagine you're building a house site and you have a number of\ntasks you need to execute. Things like pour foundation, complete\nframing, install plumbing, electric cabling, install insulation.\n\nThe construction workers can only work during daytime, so they\nneed to pack up everything at night. Because they need to secure\ntheir tools and move machines back to the garage, this process\ntakes much more time than the time it would take them to simply\nswitch to another task.\n\nYou would like to make a list of tasks to execute every day based\non your estimates. You can model this with a program like this:\n\n```\nuse textwrap::core::{Fragment, Word};\nuse textwrap::wrap_algorithms::wrap_first_fit;\n\n#[derive(Debug)]\nstruct Task<'a> {\n    name: &'a str,\n    hours: f64,   // Time needed to complete task.\n    sweep: f64,   // Time needed for a quick sweep after task during the day.\n    cleanup: f64, // Time needed for full cleanup if day ends with this task.\n}\n\nimpl Fragment for Task<'_> {\n    fn width(&self) -> f64 { self.hours }\n    fn whitespace_width(&self) -> f64 { self.sweep }\n    fn penalty_width(&self) -> f64 { self.cleanup }\n}\n\n// The morning tasks\nlet tasks = vec![\n    Task { name: \"Foundation\",  hours: 4.0, sweep: 2.0, cleanup: 3.0 },\n    Task { name: \"Framing\",     hours: 3.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Plumbing\",    hours: 2.0, sweep: 2.0, cleanup: 2.0 },\n    Task { name: \"Electrical\",  hours: 2.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Insulation\",  hours: 2.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Drywall\",     hours: 3.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Floors\",      hours: 3.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Countertops\", hours: 1.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Bathrooms\",   hours: 2.0, sweep: 1.0, cleanup: 2.0 },\n];\n\n// Fill tasks into days, taking `day_length` into account. The\n// output shows the hours worked per day along with the names of\n// the tasks for that day.\nfn assign_days<'a>(tasks: &[Task<'a>], day_length: f64) -> Vec<(f64, Vec<&'a str>)> {\n    let mut days = Vec::new();\n    // Assign tasks to days. The assignment is a vector of slices,\n    // with a slice per day.\n    let assigned_days: Vec<&[Task<'a>]> = wrap_first_fit(&tasks, &[day_length]);\n    for day in assigned_days.iter() {\n        let last = day.last().unwrap();\n        let work_hours: f64 = day.iter().map(|t| t.hours + t.sweep).sum();\n        let names = day.iter().map(|t| t.name).collect::<Vec<_>>();\n        days.push((work_hours - last.sweep + last.cleanup, names));\n    }\n    days\n}\n\n// With a single crew working 8 hours a day:\nassert_eq!(\n    assign_days(&tasks, 8.0),\n    [\n        (7.0, vec![\"Foundation\"]),\n        (8.0, vec![\"Framing\", \"Plumbing\"]),\n        (7.0, vec![\"Electrical\", \"Insulation\"]),\n        (5.0, vec![\"Drywall\"]),\n        (7.0, vec![\"Floors\", \"Countertops\"]),\n        (4.0, vec![\"Bathrooms\"]),\n    ]\n);\n\n// With two crews working in shifts, 16 hours a day:\nassert_eq!(\n    assign_days(&tasks, 16.0),\n    [\n        (14.0, vec![\"Foundation\", \"Framing\", \"Plumbing\"]),\n        (15.0, vec![\"Electrical\", \"Insulation\", \"Drywall\", \"Floors\"]),\n        (6.0, vec![\"Countertops\", \"Bathrooms\"]),\n    ]\n);\n```\n\nApologies to anyone who actually knows how to build a house and\nknows how long each step takes :-)","links":{"`wrap_optimal_fit()`":"0:65:2986"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["fragments",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}],["line_widths",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7219:278","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fragment","id":"0:10:2782","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:314:2530":{"id":"b:2:2772-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2774:3278"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:16:651":{"id":"0:16:651","crate_id":0,"name":"deref","span":{"filename":"src/core.rs","begin":[253,4],"end":[255,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3538:127","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2531":{"id":"0:155:2531","crate_id":0,"name":"unfill","span":{"filename":"src/refill.rs","begin":[62,0],"end":[114,1]},"visibility":"public","docs":"Unpack a paragraph of already-wrapped text.\n\nThis function attempts to recover the original text from a single\nparagraph of wrapped text, such as what [`fill()`] would produce.\nThis means that it turns\n\n```text\ntextwrap: a small\nlibrary for\nwrapping text.\n```\n\nback into\n\n```text\ntextwrap: a small library for wrapping text.\n```\n\nIn addition, it will recognize a common prefix and a common line\nending among the lines.\n\nThe prefix of the first line is returned in\n[`Options::initial_indent`] and the prefix (if any) of the the\nother lines is returned in [`Options::subsequent_indent`].\n\nLine ending is returned in [`Options::line_ending`]. If line ending\ncan not be confidently detected (mixed or no line endings in the\ninput), [`LineEnding::LF`] will be returned.\n\nIn addition to `' '`, the prefixes can consist of characters used\nfor unordered lists (`'-'`, `'+'`, and `'*'`) and block quotes\n(`'>'`) in Markdown as well as characters often used for inline\ncomments (`'#'` and `'/'`).\n\nThe text must come from a single wrapped paragraph. This means\nthat there can be no empty lines (`\"\\n\\n\"` or `\"\\r\\n\\r\\n\"`) within\nthe text. It is unspecified what happens if `unfill` is called on\nmore than one paragraph of text.\n\n# Examples\n\n```\nuse textwrap::{LineEnding, unfill};\n\nlet (text, options) = unfill(\"\\\n* This is an\n  example of\n  a list item.\n\");\n\nassert_eq!(text, \"This is an example of a list item.\\n\");\nassert_eq!(options.initial_indent, \"* \");\nassert_eq!(options.subsequent_indent, \"  \");\nassert_eq!(options.line_ending, LineEnding::LF);\n```","links":{"`Options::line_ending`":"0:140:2520","`Options::subsequent_indent`":"0:143:3725","`LineEnding::LF`":"0:290:3699","`Options::initial_indent`":"0:142:3483","`fill()`":"0:107:2518"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"crate::Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:330:2532":{"id":"b:2:2772-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3278"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2774:3278":{"id":"2:2774:3278","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212-0:190:2524":{"id":"0:212-0:190:2524","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[234,0],"end":[234,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"wrap::wrap","name":"wrap","id":"0:190:2524","glob":false}}},"0:27:2789":{"id":"0:27:2789","crate_id":0,"name":"penalty_width","span":{"filename":"src/core.rs","begin":[344,4],"end":[346,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2804-0:246:2988":{"id":"b:2:2804-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2806:27761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2775-0:246:2988":{"id":"b:2:2775-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:3276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42921:10878-0:262:2987":{"id":"a:2:42921:10878-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:10878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42920:10671-0:246:2988":{"id":"a:2:42920:10671-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:10671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:256:827":{"id":"0:256:827","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:1208":{"id":"0:82:1208","crate_id":0,"name":"new","span":{"filename":"src/wrap_algorithms.rs","begin":[139,4],"end":[149,5]},"visibility":"public","docs":"Create new wrap algorithm.\n\nThe best wrapping algorithm is used by default, i.e.,\n[`WrapAlgorithm::OptimalFit`] if available, otherwise\n[`WrapAlgorithm::FirstFit`].","links":{"`WrapAlgorithm::OptimalFit`":"0:274:3009","`WrapAlgorithm::FirstFit`":"0:272:3000"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:271:2534":{"id":"b:2:2772-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3278"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2535":{"id":"0:0:2535","crate_id":0,"name":"textwrap","span":{"filename":"src/lib.rs","begin":[1,0],"end":[235,39]},"visibility":"public","docs":"The textwrap library provides functions for word wrapping and\nindenting text.\n\n# Wrapping Text\n\nWrapping text can be very useful in command-line programs where\nyou want to format dynamic output nicely so it looks good in a\nterminal. A quick example:\n\n```\n# #[cfg(feature = \"smawk\")] {\nlet text = \"textwrap: a small library for wrapping text.\";\nassert_eq!(textwrap::wrap(text, 18),\n           vec![\"textwrap: a\",\n                \"small library for\",\n                \"wrapping text.\"]);\n# }\n```\n\nThe [`wrap()`] function returns the individual lines, use\n[`fill()`] is you want the lines joined with `'\\n'` to form a\n`String`.\n\nIf you enable the `hyphenation` Cargo feature, you can get\nautomatic hyphenation for a number of languages:\n\n```\n#[cfg(feature = \"hyphenation\")] {\nuse hyphenation::{Language, Load, Standard};\nuse textwrap::{wrap, Options, WordSplitter};\n\nlet text = \"textwrap: a small library for wrapping text.\";\nlet dictionary = Standard::from_embedded(Language::EnglishUS).unwrap();\nlet options = Options::new(18).word_splitter(WordSplitter::Hyphenation(dictionary));\nassert_eq!(wrap(text, &options),\n           vec![\"textwrap: a small\",\n                \"library for wrap-\",\n                \"ping text.\"]);\n}\n```\n\nSee also the [`unfill()`] and [`refill()`] functions which allow\nyou to manipulate already wrapped text.\n\n## Wrapping Strings at Compile Time\n\nIf your strings are known at compile time, please take a look at\nthe procedural macros from the [textwrap-macros] crate.\n\n## Displayed Width vs Byte Size\n\nTo word wrap text, one must know the width of each word so one can\nknow when to break lines. This library will by default measure the\nwidth of text using the _displayed width_, not the size in bytes.\nThe `unicode-width` Cargo feature controls this.\n\nThis is important for non-ASCII text. ASCII characters such as `a`\nand `!` are simple and take up one column each. This means that\nthe displayed width is equal to the string length in bytes.\nHowever, non-ASCII characters and symbols take up more than one\nbyte when UTF-8 encoded: `é` is `0xc3 0xa9` (two bytes) and `⚙` is\n`0xe2 0x9a 0x99` (three bytes) in UTF-8, respectively.\n\nThis is why we take care to use the displayed width instead of the\nbyte count when computing line lengths. All functions in this\nlibrary handle Unicode characters like this when the\n`unicode-width` Cargo feature is enabled (it is enabled by\ndefault).\n\n# Indentation and Dedentation\n\nThe textwrap library also offers functions for adding a prefix to\nevery line of a string and to remove leading whitespace. As an\nexample, [`indent()`] allows you to turn lines of text into a\nbullet list:\n\n```\nlet before = \"\\\nfoo\nbar\nbaz\n\";\nlet after = \"\\\n* foo\n* bar\n* baz\n\";\nassert_eq!(textwrap::indent(before, \"* \"), after);\n```\n\nRemoving leading whitespace is done with [`dedent()`]:\n\n```\nlet before = \"\n    Some\n      indented\n        text\n\";\nlet after = \"\nSome\n  indented\n    text\n\";\nassert_eq!(textwrap::dedent(before), after);\n```\n\n# Cargo Features\n\nThe textwrap library can be slimmed down as needed via a number of\nCargo features. This means you only pay for the features you\nactually use.\n\nThe full dependency graph, where dashed lines indicate optional\ndependencies, is shown below:\n\n<img src=\"https://raw.githubusercontent.com/mgeisler/textwrap/master/images/textwrap-0.16.1.svg\">\n\n## Default Features\n\nThese features are enabled by default:\n\n* `unicode-linebreak`: enables finding words using the\n  [unicode-linebreak] crate, which implements the line breaking\n  algorithm described in [Unicode Standard Annex\n  #14](https://www.unicode.org/reports/tr14/).\n\n  This feature can be disabled if you are happy to find words\n  separated by ASCII space characters only. People wrapping text\n  with emojis or East-Asian characters will want most likely want\n  to enable this feature. See [`WordSeparator`] for details.\n\n* `unicode-width`: enables correct width computation of non-ASCII\n  characters via the [unicode-width] crate. Without this feature,\n  every [`char`] is 1 column wide, except for emojis which are 2\n  columns wide. See [`core::display_width()`] for details.\n\n  This feature can be disabled if you only need to wrap ASCII\n  text, or if the functions in [`core`] are used directly with\n  [`core::Fragment`]s for which the widths have been computed in\n  other ways.\n\n* `smawk`: enables linear-time wrapping of the whole paragraph via\n  the [smawk] crate. See [`wrap_algorithms::wrap_optimal_fit()`]\n  for details on the optimal-fit algorithm.\n\n  This feature can be disabled if you only ever intend to use\n  [`wrap_algorithms::wrap_first_fit()`].\n\n<!-- begin binary-sizes -->\n\nWith Rust 1.64.0, the size impact of the above features on your\nbinary is as follows:\n\n| Configuration                            |  Binary Size |    Delta |\n| :---                                     |         ---: |     ---: |\n| quick-and-dirty implementation           |       289 KB |     — KB |\n| textwrap without default features        |       305 KB |    16 KB |\n| textwrap with smawk                      |       317 KB |    28 KB |\n| textwrap with unicode-width              |       309 KB |    20 KB |\n| textwrap with unicode-linebreak          |       342 KB |    53 KB |\n\n<!-- end binary-sizes -->\n\nThe above sizes are the stripped sizes and the binary is compiled\nin release mode with this profile:\n\n```toml\n[profile.release]\nlto = true\ncodegen-units = 1\n```\n\nSee the [binary-sizes demo] if you want to reproduce these\nresults.\n\n## Optional Features\n\nThese Cargo features enable new functionality:\n\n* `terminal_size`: enables automatic detection of the terminal\n  width via the [terminal_size] crate. See\n  [`Options::with_termwidth()`] for details.\n\n* `hyphenation`: enables language-sensitive hyphenation via the\n  [hyphenation] crate. See the [`word_splitters::WordSplitter`]\n  trait for details.\n\n[unicode-linebreak]: https://docs.rs/unicode-linebreak/\n[unicode-width]: https://docs.rs/unicode-width/\n[smawk]: https://docs.rs/smawk/\n[binary-sizes demo]: https://github.com/mgeisler/textwrap/tree/master/examples/binary-sizes\n[textwrap-macros]: https://docs.rs/textwrap-macros/\n[terminal_size]: https://docs.rs/terminal_size/\n[hyphenation]: https://docs.rs/hyphenation/","links":{"`dedent()`":"0:115:2527","`refill()`":"0:156:2521","`char`":"1:12486:490","`word_splitters::WordSplitter`":"0:236:2533","`wrap_algorithms::wrap_optimal_fit()`":"0:65:2986","`WordSeparator`":"0:330:2532","`wrap_algorithms::wrap_first_fit()`":"0:90:3055","`wrap()`":"0:190:2524","`core::Fragment`":"0:10:2782","`core::display_width()`":"0:9:2772","`unfill()`":"0:155:2531","`core`":"0:3:582","`indent()`":"0:114:2528","`fill()`":"0:107:2518"},"attrs":["#![doc(html_root_url = \"https://docs.rs/textwrap/0.16.1\")]","#![forbid(unsafe_code)]","#![deny(missing_docs)]","#![deny(missing_debug_implementations)]","#![allow(clippy::redundant_field_names)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3:582","0:31:2515","0:48:2516","0:198-0:98:2525","0:200-0:107:2518","0:201-0:111:2526","0:203-0:115:2527","0:204-0:114:2528","0:205-0:287:2529","0:206-0:314:2530","0:208-0:156:2521","0:209-0:155:2531","0:210-0:330:2532","0:211-0:236:2533","0:212-0:190:2524","0:213-0:271:2534"],"is_stripped":false}}},"2:13938:36011":{"id":"2:13938:36011","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13959:33668":{"id":"2:13959:33668","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13960:33597"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45104:7830","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204-0:114:2528":{"id":"0:204-0:114:2528","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,30],"end":[226,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"indentation::indent","name":"indent","id":"0:114:2528","glob":false}}},"2:13970:2949":{"id":"2:13970:2949","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14058:31624":{"id":"2:14058:31624","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:40088"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33060:248-0:262:2987":{"id":"a:2:33060:248-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:33060:248-0:271:2534":{"id":"a:2:33060:248-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:239:2895":{"id":"0:239:2895","crate_id":0,"name":"HyphenSplitter","span":{"filename":"src/word_splitters.rs","begin":[68,4],"end":[68,18]},"visibility":"default","docs":"`HyphenSplitter` is the default `WordSplitter` used by\n[`Options::new`](super::Options::new). It will split words on\nexisting hyphens in the word.\n\nIt will only use hyphens that are surrounded by alphanumeric\ncharacters, which prevents a word like `\"--foo-bar\"` from\nbeing split into `\"--\"` and `\"foo-bar\"`.\n\n# Examples\n\n```\nuse textwrap::WordSplitter;\n\nassert_eq!(WordSplitter::HyphenSplitter.split_points(\"--foo-bar\"),\n           vec![6]);\n```","links":{"super::Options::new":"0:139:1208"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2804-0:287:2529":{"id":"b:2:2804-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2806:27761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2772-0:214:2793":{"id":"b:2:2772-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2774:3278"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42921:10878-0:214:2793":{"id":"a:2:42921:10878-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:10878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:33119:4554-0:246:2988":{"id":"a:2:33119:4554-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:4554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:256:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:38:722":{"id":"0:38:722","crate_id":0,"name":"eq","span":{"filename":"src/word_splitters.rs","begin":[114,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:494":{"id":"0:253:494","crate_id":0,"name":"clone","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3303:260-0:262:2987":{"id":"a:2:3303:260-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:98:2525":{"id":"0:98:2525","crate_id":0,"name":"wrap_columns","span":{"filename":"src/columns.rs","begin":[63,0],"end":[114,1]},"visibility":"public","docs":"Wrap text into columns with a given total width.\n\nThe `left_gap`, `middle_gap` and `right_gap` arguments specify the\nstrings to insert before, between, and after the columns. The\ntotal width of all columns and all gaps is specified using the\n`total_width_or_options` argument. This argument can simply be an\ninteger if you want to use default settings when wrapping, or it\ncan be a [`Options`] value if you want to customize the wrapping.\n\nIf the columns are narrow, it is recommended to set\n[`Options::break_words`] to `true` to prevent words from\nprotruding into the margins.\n\nThe per-column width is computed like this:\n\n```\n# let (left_gap, middle_gap, right_gap) = (\"\", \"\", \"\");\n# let columns = 2;\n# let options = textwrap::Options::new(80);\nlet inner_width = options.width\n    - textwrap::core::display_width(left_gap)\n    - textwrap::core::display_width(right_gap)\n    - textwrap::core::display_width(middle_gap) * (columns - 1);\nlet column_width = inner_width / columns;\n```\n\nThe `text` is wrapped using [`wrap()`] and the given `options`\nargument, but the width is overwritten to the computed\n`column_width`.\n\n# Panics\n\nPanics if `columns` is zero.\n\n# Examples\n\n```\nuse textwrap::wrap_columns;\n\nlet text = \"\\\nThis is an example text, which is wrapped into three columns. \\\nNotice how the final column can be shorter than the others.\";\n\n#[cfg(feature = \"smawk\")]\nassert_eq!(wrap_columns(text, 3, 50, \"| \", \" | \", \" |\"),\n           vec![\"| This is       | into three    | column can be  |\",\n                \"| an example    | columns.      | shorter than   |\",\n                \"| text, which   | Notice how    | the others.    |\",\n                \"| is wrapped    | the final     |                |\"]);\n\n// Without the `smawk` feature, the middle column is a little more uneven:\n#[cfg(not(feature = \"smawk\"))]\nassert_eq!(wrap_columns(text, 3, 50, \"| \", \" | \", \" |\"),\n           vec![\"| This is an    | three         | column can be  |\",\n                \"| example text, | columns.      | shorter than   |\",\n                \"| which is      | Notice how    | the others.    |\",\n                \"| wrapped into  | the final     |                |\"]);","links":{"`Options::break_words`":"0:144:2825","`wrap()`":"0:190:2524","`Options`":"0:314:2530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["columns",{"primitive":"usize"}],["total_width_or_options",{"generic":"Opt"}],["left_gap",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["middle_gap",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["right_gap",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7219:278","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Opt"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3338:4710-0:314:2530":{"id":"a:2:3338:4710-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:200-0:107:2518":{"id":"0:200-0:107:2518","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[225,15],"end":[225,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"fill::fill","name":"fill","id":"0:107:2518","glob":false}}},"0:142:3483":{"id":"0:142:3483","crate_id":0,"name":"initial_indent","span":{"filename":"src/options.rs","begin":[146,4],"end":[151,5]},"visibility":"public","docs":"Change [`self.initial_indent`]. The initial indentation is\nused on the very first line of output.\n\n# Examples\n\nClassic paragraph indentation can be achieved by specifying an\ninitial indentation and wrapping each paragraph by itself:\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(16).initial_indent(\"    \");\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"    This is a\",\n                \"little example.\"]);\n```\n\n[`self.initial_indent`]: #structfield.initial_indent","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["initial_indent",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14062:36026":{"id":"2:14062:36026","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5150:36026"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45147:7738","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:2798":{"id":"0:217:2798","crate_id":0,"name":"whitespace","span":{"filename":"src/core.rs","begin":[243,4],"end":[243,27]},"visibility":"public","docs":"Whitespace to insert if the word does not fall at the end of a line.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"5:5725":{"id":"5:5725","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5726:36720","5:5727:5060","5:5730:36721","5:5733:36722","5:5741:36723","5:5742:36724","5:5743:3424","5:5744:31101","5:5745:31102"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3092-0:262:2987":{"id":"b:2:3092-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:205-0:287:2529":{"id":"0:205-0:287:2529","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"line_ending::LineEnding","name":"LineEnding","id":"0:287:2529","glob":false}}},"a:2:3338:4710-0:214:2793":{"id":"a:2:3338:4710-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:337:2023":{"id":"0:337:2023","crate_id":0,"name":"0","span":{"filename":"src/word_separators.rs","begin":[122,11],"end":[122,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"function_pointer":{"decl":{"inputs":[["line",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:4011","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Iterator","id":"2:8624:189","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"crate::core::Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}}}},"b:2:3081-0:214:2793":{"id":"b:2:3081-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:222:827":{"id":"0:222:827","crate_id":0,"name":"fmt","span":{"filename":"src/core.rs","begin":[238,9],"end":[238,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2807-0:287:2529":{"id":"b:2:2807-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2809:27761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,40],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:265:827":{"id":"0:265:827","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,9],"end":[185,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42921:10878-0:271:2534":{"id":"a:2:42921:10878-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:10878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:201-0:111:2526":{"id":"0:201-0:111:2526","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[225,21],"end":[225,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"fill::fill_inplace","name":"fill_inplace","id":"0:111:2526","glob":false}}},"2:14031:3868":{"id":"2:14031:3868","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42920:10671-0:330:2532":{"id":"a:2:42920:10671-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:10671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[41,16],"end":[41,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,29],"end":[22,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:33062:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3303:260-0:246:2988":{"id":"a:2:3303:260-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5742:36724":{"id":"5:5742:36724","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:4011","`String`":"5:7809:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:4011","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:2532":{"id":"0:330:2532","crate_id":0,"name":"WordSeparator","span":{"filename":"src/word_separators.rs","begin":[42,0],"end":[123,1]},"visibility":"public","docs":"Describes where words occur in a line of text.\n\nThe simplest approach is say that words are separated by one or\nmore ASCII spaces (`' '`). This works for Western languages\nwithout emojis. A more complex approach is to use the Unicode line\nbreaking algorithm, which finds break points in non-ASCII text.\n\nThe line breaks occur between words, please see\n[`WordSplitter`](crate::WordSplitter) for options of how to handle\nhyphenation of individual words.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::AsciiSpace;\n\nlet words = AsciiSpace.find_words(\"Hello World!\").collect::<Vec<_>>();\nassert_eq!(words, vec![Word::from(\"Hello \"), Word::from(\"World!\")]);\n```","links":{"crate::WordSplitter":"0:236:2533"},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:331:3530","0:333:4009","0:335:2904"],"impls":["0:166","a:2:3338:4710-0:330:2532","a:2:42921:10878-0:330:2532","a:2:42920:10671-0:330:2532","a:2:33119:4554-0:330:2532","a:2:3303:260-0:330:2532","a:2:33060:248-0:330:2532","b:2:3081-0:330:2532","b:2:3946-0:330:2532","b:2:2772-0:330:2532","b:2:3087-0:330:2532","b:2:2775-0:330:2532","b:2:3077-0:330:2532","b:2:2804-0:330:2532","b:2:2807-0:330:2532","b:2:3092-0:330:2532","b:5:784-0:330:2532","0:338","0:162","0:340","0:164"]}}},"2:13964:2701":{"id":"2:13964:2701","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13999:31721":{"id":"2:13999:31721","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12486:490","str::splitn":"2:13996:31719","self::pattern":"2:13618:16103"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44952:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2815":{"id":"0:20:2815","crate_id":0,"name":"break_apart","span":{"filename":"src/core.rs","begin":[286,4],"end":[325,5]},"visibility":"public","docs":"Break this word into smaller words with a width of at most\n`line_width`. The whitespace and penalty from this `Word` is\nadded to the last piece.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nassert_eq!(\n    Word::from(\"Hello!  \").break_apart(3).collect::<Vec<_>>(),\n    vec![Word::from(\"Hel\"), Word::from(\"lo!  \")]\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Self"}}}],["line_width",{"primitive":"usize"}]],"output":{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8624:189","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'b"}]},"c_variadic":false},"generics":{"params":[{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267":{"id":"0:267","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,16],"end":[185,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:268:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13977:4822":{"id":"2:13977:4822","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42829:202","prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14011:36016":{"id":"2:14011:36016","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13618:16103","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::matches":"2:14008:4114"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:45052:7827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:2796":{"id":"0:216:2796","crate_id":0,"name":"word","span":{"filename":"src/core.rs","begin":[241,4],"end":[241,21]},"visibility":"public","docs":"Word content.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"0:31:2515":{"id":"0:31:2515","crate_id":0,"name":"word_splitters","span":{"filename":"src/word_splitters.rs","begin":[1,0],"end":[314,1]},"visibility":"public","docs":"Word splitting functionality.\n\nTo wrap text into lines, long words sometimes need to be split\nacross lines. The [`WordSplitter`] enum defines this\nfunctionality.","links":{"`WordSplitter`":"0:236:2533"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:236:2533","0:43:2945"],"is_stripped":false}}},"b:2:3081-0:246:2988":{"id":"b:2:3081-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3946-0:214:2793":{"id":"b:2:3946-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:251:3261":{"id":"0:251:3261","crate_id":0,"name":"hyphen_penalty","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[131,4],"end":[131,29]},"visibility":"public","docs":"Penalty for lines ending with a hyphen.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[152,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:245:494":{"id":"0:245:494","crate_id":0,"name":"clone","span":{"filename":"src/word_splitters.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:2800":{"id":"0:218:2800","crate_id":0,"name":"penalty","span":{"filename":"src/core.rs","begin":[245,4],"end":[245,24]},"visibility":"public","docs":"Penalty string to insert if the word falls at the end of a line.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"0:140:2520":{"id":"0:140:2520","crate_id":0,"name":"line_ending","span":{"filename":"src/options.rs","begin":[114,4],"end":[119,5]},"visibility":"public","docs":"Change [`self.line_ending`]. This specifies which of the\nsupported line endings should be used to break the lines of the\ninput text.\n\n# Examples\n\n```\nuse textwrap::{refill, LineEnding, Options};\n\nlet options = Options::new(15).line_ending(LineEnding::CRLF);\nassert_eq!(refill(\"This is a little example.\", options),\n           \"This is a\\r\\nlittle example.\");\n```\n\n[`self.line_ending`]: #structfield.line_ending","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["line_ending",{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:857":{"id":"0:133:857","crate_id":0,"name":"from","span":{"filename":"src/options.rs","begin":[36,4],"end":[47,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["options",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3338:4710-0:287:2529":{"id":"a:2:3338:4710-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:11:2708":{"id":"0:11:2708","crate_id":0,"name":"width","span":{"filename":"src/core.rs","begin":[223,4],"end":[223,27]},"visibility":"default","docs":"Displayed width of word represented by this fragment.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:139:1208":{"id":"0:139:1208","crate_id":0,"name":"new","span":{"filename":"src/options.rs","begin":[86,4],"end":[97,5]},"visibility":"public","docs":"Creates a new [`Options`] with the specified width.\n\nThe other fields are given default values as follows:\n\n```\n# use textwrap::{LineEnding, Options, WordSplitter, WordSeparator, WrapAlgorithm};\n# let width = 80;\nlet options = Options::new(width);\nassert_eq!(options.line_ending, LineEnding::LF);\nassert_eq!(options.initial_indent, \"\");\nassert_eq!(options.subsequent_indent, \"\");\nassert_eq!(options.break_words, true);\n\n#[cfg(feature = \"unicode-linebreak\")]\nassert_eq!(options.word_separator, WordSeparator::UnicodeBreakProperties);\n#[cfg(not(feature = \"unicode-linebreak\"))]\nassert_eq!(options.word_separator, WordSeparator::AsciiSpace);\n\n#[cfg(feature = \"smawk\")]\nassert_eq!(options.wrap_algorithm, WrapAlgorithm::new_optimal_fit());\n#[cfg(not(feature = \"smawk\"))]\nassert_eq!(options.wrap_algorithm, WrapAlgorithm::FirstFit);\n\nassert_eq!(options.word_splitter, WordSplitter::HyphenSplitter);\n```\n\nNote that the default word separator and wrap algorithms\nchanges based on the available Cargo features. The best\navailable algorithms are used by default.","links":{"`Options`":"0:314:2530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["width",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42920:10671-0:214:2793":{"id":"a:2:42920:10671-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:10671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14040:2805":{"id":"2:14040:2805","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:827":{"id":"0:80:827","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms.rs","begin":[123,4],"end":[130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:2904":{"id":"0:277:2904","crate_id":0,"name":"Custom","span":{"filename":"src/wrap_algorithms.rs","begin":[89,4],"end":[89,98]},"visibility":"default","docs":"Custom wrapping function.\n\nUse this if you want to implement your own wrapping algorithm.\nThe function can freely decide how to turn a slice of\n[`Word`]s into lines.\n\n# Example\n\n```\nuse textwrap::core::Word;\nuse textwrap::{wrap, Options, WrapAlgorithm};\n\nfn stair<'a, 'b>(words: &'b [Word<'a>], _: &'b [usize]) -> Vec<&'b [Word<'a>]> {\n    let mut lines = Vec::new();\n    let mut step = 1;\n    let mut start_idx = 0;\n    while start_idx + step <= words.len() {\n      lines.push(&words[start_idx .. start_idx+step]);\n      start_idx += step;\n      step += 1;\n    }\n    lines\n}\n\nlet options = Options::new(10).wrap_algorithm(WrapAlgorithm::Custom(stair));\nassert_eq!(wrap(\"First, second, third, fourth, fifth, sixth\", options),\n           vec![\"First,\",\n                \"second, third,\",\n                \"fourth, fifth, sixth\"]);\n```","links":{"`Word`":"0:214:2793"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:279:2023"]},"discriminant":null}}},"0:295":{"id":"0:295","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,22],"end":[7,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:296:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5744:31101":{"id":"5:5744:31101","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:14054:31104"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2986":{"id":"0:65:2986","crate_id":0,"name":"wrap_optimal_fit","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[302,0],"end":[389,1]},"visibility":"public","docs":"Wrap abstract fragments into lines with an optimal-fit algorithm.\n\nThe `line_widths` slice gives the target line width for each line\n(the last slice element is repeated as necessary). This can be\nused to implement hanging indentation.\n\nThe fragments must already have been split into the desired\nwidths, this function will not (and cannot) attempt to split them\nfurther when arranging them into lines.\n\n# Optimal-Fit Algorithm\n\nThe algorithm considers all possible break points and picks the\nbreaks which minimizes the gaps at the end of each line. More\nprecisely, the algorithm assigns a cost or penalty to each break\npoint, determined by `cost = gap * gap` where `gap = target_width -\nline_width`. Shorter lines are thus penalized more heavily since\nthey leave behind a larger gap.\n\nWe can illustrate this with the text “To be, or not to be: that is\nthe question”. We will be wrapping it in a narrow column with room\nfor only 10 characters. The [greedy\nalgorithm](super::wrap_first_fit) will produce these lines, each\nannotated with the corresponding penalty:\n\n```text\n\"To be, or\"   1² =  1\n\"not to be:\"  0² =  0\n\"that is\"     3² =  9\n\"the\"         7² = 49\n\"question\"    2² =  4\n```\n\nWe see that line four with “the” leaves a gap of 7 columns, which\ngives it a penalty of 49. The sum of the penalties is 63.\n\nThere are 10 words, which means that there are `2_u32.pow(9)` or\n512 different ways to typeset it. We can compute\nthe sum of the penalties for each possible line break and search\nfor the one with the lowest sum:\n\n```text\n\"To be,\"     4² = 16\n\"or not to\"  1² =  1\n\"be: that\"   2² =  4\n\"is the\"     4² = 16\n\"question\"   2² =  4\n```\n\nThe sum of the penalties is 41, which is better than what the\ngreedy algorithm produced.\n\nSearching through all possible combinations would normally be\nprohibitively slow. However, it turns out that the problem can be\nformulated as the task of finding column minima in a cost matrix.\nThis matrix has a special form (totally monotone) which lets us\nuse a [linear-time algorithm called\nSMAWK](https://lib.rs/crates/smawk) to find the optimal break\npoints.\n\nThis means that the time complexity remains O(_n_) where _n_ is\nthe number of words. Compared to\n[`wrap_first_fit()`](super::wrap_first_fit), this function is\nabout 4 times slower.\n\nThe optimization of per-line costs over the entire paragraph is\ninspired by the line breaking algorithm used in TeX, as described\nin the 1981 article [_Breaking Paragraphs into\nLines_](http://www.eprg.org/G53DOC/pdfs/knuth-plass-breaking.pdf)\nby Knuth and Plass. The implementation here is based on [Python\ncode by David\nEppstein](https://github.com/jfinkels/PADS/blob/master/pads/wrap.py).\n\n# Errors\n\nIn case of an overflow during the cost computation, an `Err` is\nreturned. Overflows happens when fragments or lines have infinite\nwidths (`f64::INFINITY`) or if the widths are so large that the\ngaps at the end of lines have sizes larger than `f64::MAX.sqrt()`\n(approximately 1e154):\n\n```\nuse textwrap::core::Fragment;\nuse textwrap::wrap_algorithms::{wrap_optimal_fit, OverflowError, Penalties};\n\n#[derive(Debug, PartialEq)]\nstruct Word(f64);\n\nimpl Fragment for Word {\n    fn width(&self) -> f64 { self.0 }\n    fn whitespace_width(&self) -> f64 { 1.0 }\n    fn penalty_width(&self) -> f64 { 0.0 }\n}\n\n// Wrapping overflows because 1e155 * 1e155 = 1e310, which is\n// larger than f64::MAX:\nassert_eq!(wrap_optimal_fit(&[Word(0.0), Word(0.0)], &[1e155], &Penalties::default()),\n           Err(OverflowError));\n```\n\nWhen using fragment widths and line widths which fit inside an\n`u64`, overflows cannot happen. This means that fragments derived\nfrom a `&str` cannot cause overflows.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"super::wrap_first_fit":"0:90:3055"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["fragments",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}],["line_widths",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"primitive":"f64"}}}}],["penalties",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7219:278","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fragment","id":"0:10:2782","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42921:10878-0:287:2529":{"id":"a:2:42921:10878-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:10878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5980:1825":{"id":"5:5980:1825","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,9],"end":[7,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:293:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/options.rs","begin":[7,16],"end":[7,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:329:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2804-0:236:2533":{"id":"b:2:2804-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2806:27761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:83:3047":{"id":"0:83:3047","crate_id":0,"name":"new_optimal_fit","span":{"filename":"src/wrap_algorithms.rs","begin":[157,4],"end":[159,5]},"visibility":"public","docs":"New [`WrapAlgorithm::OptimalFit`] with default penalties. This\nworks well for monospace text.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"`WrapAlgorithm::OptimalFit`":"0:274:3009"},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[134,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1208"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:33060:248-0:314:2530":{"id":"a:2:33060:248-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:321:3560":{"id":"0:321:3560","crate_id":0,"name":"wrap_algorithm","span":{"filename":"src/options.rs","begin":[25,4],"end":[25,37]},"visibility":"public","docs":"Wrapping algorithm to use, see the implementations of the\n[`WrapAlgorithm`] trait for details.","links":{"`WrapAlgorithm`":"0:271:2534"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:13961:3165":{"id":"2:13961:3165","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:45084:7828","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14054:31104":{"id":"2:14054:31104","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:214:2793":{"id":"b:2:3092-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:293:494":{"id":"0:293:494","crate_id":0,"name":"clone","span":{"filename":"src/line_ending.rs","begin":[7,9],"end":[7,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,40],"end":[7,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3946-0:287:2529":{"id":"b:2:3946-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:43:2945":{"id":"0:43:2945","crate_id":0,"name":"split_words","span":{"filename":"src/word_splitters.rs","begin":[181,0],"end":[218,1]},"visibility":"public","docs":"Split words into smaller words according to the split points given\nby `word_splitter`.\n\nNote that we split all words, regardless of their length. This is\nto more cleanly separate the business of splitting (including\nautomatic hyphenation) from the business of word wrapping.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["words",{"generic":"I"}],["word_splitter",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8624:189","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"crate::core::Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42920:10671-0:236:2533":{"id":"a:2:42920:10671-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:10671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3338:4710-0:271:2534":{"id":"a:2:3338:4710-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:206-0:314:2530":{"id":"0:206-0:314:2530","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[228,0],"end":[228,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"options::Options","name":"Options","id":"0:314:2530","glob":false}}},"2:14046:36023":{"id":"2:14046:36023","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228":{"id":"0:228","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[238,29],"end":[238,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:33062:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:28:2825":{"id":"0:28:2825","crate_id":0,"name":"break_words","span":{"filename":"src/core.rs","begin":[354,0],"end":[367,1]},"visibility":"public","docs":"Forcibly break words wider than `line_width` into smaller words.\n\nThis simply calls [`Word::break_apart`] on words that are too\nwide. This means that no extra `'-'` is inserted, the word is\nsimply broken into smaller pieces.","links":{"`Word::break_apart`":"0:20:2815"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["words",{"generic":"I"}],["line_width",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Vec","id":"5:7219:278","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297":{"id":"0:297","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,29],"end":[7,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:33062:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:236:2533":{"id":"0:236:2533","crate_id":0,"name":"WordSplitter","span":{"filename":"src/word_splitters.rs","begin":[37,0],"end":[99,1]},"visibility":"public","docs":"The `WordSplitter` enum describes where words can be split.\n\nIf the textwrap crate has been compiled with the `hyphenation`\nCargo feature enabled, you will find a\n[`WordSplitter::Hyphenation`] variant. Use this struct for\nlanguage-aware hyphenation:\n\n```\n#[cfg(feature = \"hyphenation\")] {\n    use hyphenation::{Language, Load, Standard};\n    use textwrap::{wrap, Options, WordSplitter};\n\n    let text = \"Oxidation is the loss of electrons.\";\n    let dictionary = Standard::from_embedded(Language::EnglishUS).unwrap();\n    let options = Options::new(8).word_splitter(WordSplitter::Hyphenation(dictionary));\n    assert_eq!(wrap(text, &options), vec![\"Oxida-\",\n                                          \"tion is\",\n                                          \"the loss\",\n                                          \"of elec-\",\n                                          \"trons.\"]);\n}\n```\n\nPlease see the documentation for the [hyphenation] crate for more\ndetails.\n\n[hyphenation]: https://docs.rs/hyphenation/","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:237:2885","0:239:2895","0:241:2904"],"impls":["0:39","a:2:3338:4710-0:236:2533","a:2:42921:10878-0:236:2533","a:2:42920:10671-0:236:2533","a:2:33119:4554-0:236:2533","a:2:3303:260-0:236:2533","a:2:33060:248-0:236:2533","b:2:3081-0:236:2533","b:2:3946-0:236:2533","b:2:2772-0:236:2533","b:2:3087-0:236:2533","b:2:2775-0:236:2533","b:2:3077-0:236:2533","b:2:2804-0:236:2533","b:2:3092-0:236:2533","b:5:784-0:236:2533","0:35","0:244","0:37"]}}},"2:13951:3641":{"id":"2:13951:3641","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13953:31712","str::split_at_mut":"2:13952:31709"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213-0:271:2534":{"id":"0:213-0:271:2534","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[235,0],"end":[235,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"wrap_algorithms::WrapAlgorithm","name":"WrapAlgorithm","id":"0:271:2534","glob":false}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[122,0],"end":[131,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:33060:248-0:214:2793":{"id":"a:2:33060:248-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:317:2520":{"id":"0:317:2520","crate_id":0,"name":"line_ending","span":{"filename":"src/options.rs","begin":[12,4],"end":[12,31]},"visibility":"public","docs":"Line ending used for breaking lines.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:13954:31713":{"id":"2:13954:31713","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13953:31712"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14059:36025":{"id":"2:14059:36025","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5152:36025"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45129:7739","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:287:2529":{"id":"b:2:3081-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:13:2789":{"id":"0:13:2789","crate_id":0,"name":"penalty_width","span":{"filename":"src/core.rs","begin":[231,4],"end":[231,35]},"visibility":"default","docs":"Displayed width of the penalty that must be inserted if the\nword falls at the end of a line.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13929:1024":{"id":"2:13929:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12486:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13953:31712":{"id":"2:13953:31712","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13954:31713"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:330:2532":{"id":"b:2:3081-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2775-0:262:2987":{"id":"b:2:2775-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:3276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3303:260-0:214:2793":{"id":"a:2:3303:260-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[238,29],"end":[238,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:232:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3081-0:236:2533":{"id":"b:2:3081-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:145:3733":{"id":"0:145:3733","crate_id":0,"name":"word_separator","span":{"filename":"src/options.rs","begin":[224,4],"end":[229,5]},"visibility":"public","docs":"Change [`self.word_separator`].\n\nSee the [`WordSeparator`] trait for details on the choices.\n\n[`self.word_separator`]: #structfield.word_separator","links":{"`WordSeparator`":"0:330:2532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["word_separator",{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33060:248-0:236:2533":{"id":"a:2:33060:248-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:784-0:287:2529":{"id":"b:5:784-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:4225","5:787:4226","5:788:4873"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:319:3725":{"id":"0:319:3725","crate_id":0,"name":"subsequent_indent","span":{"filename":"src/options.rs","begin":[18,4],"end":[18,34]},"visibility":"public","docs":"Indentation used for subsequent lines of output. See the\n[`Options::subsequent_indent`] method.","links":{"`Options::subsequent_indent`":"0:143:3725"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"b:2:3077-0:236:2533":{"id":"b:2:3077-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:3420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2772-0:287:2529":{"id":"b:2:2772-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3278"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3087-0:287:2529":{"id":"b:2:3087-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119":{"id":"0:119","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[18,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:120:352"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:143:3725":{"id":"0:143:3725","crate_id":0,"name":"subsequent_indent","span":{"filename":"src/options.rs","begin":[182,4],"end":[187,5]},"visibility":"public","docs":"Change [`self.subsequent_indent`]. The subsequent indentation\nis used on lines following the first line of output.\n\n# Examples\n\nCombining initial and subsequent indentation lets you format a\nsingle paragraph as a bullet list:\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(12)\n    .initial_indent(\"* \")\n    .subsequent_indent(\"  \");\n#[cfg(feature = \"smawk\")]\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"* This is\",\n                \"  a little\",\n                \"  example.\"]);\n\n// Without the `smawk` feature, the wrapping is a little different:\n#[cfg(not(feature = \"smawk\"))]\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"* This is a\",\n                \"  little\",\n                \"  example.\"]);\n```\n\n[`self.subsequent_indent`]: #structfield.subsequent_indent","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["subsequent_indent",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9:2772":{"id":"0:9:2772","crate_id":0,"name":"display_width","span":{"filename":"src/core.rs","begin":[199,0],"end":[209,1]},"visibility":"public","docs":"Compute the display width of `text` while skipping over ANSI\nescape sequences.\n\n# Examples\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(display_width(\"Café Plain\"), 10);\nassert_eq!(display_width(\"\\u{1b}[31mCafé Rouge\\u{1b}[0m\"), 10);\nassert_eq!(display_width(\"\\x1b]8;;http://example.com\\x1b\\\\This is a link\\x1b]8;;\\x1b\\\\\"), 14);\n```\n\n**Note:** When the `unicode-width` Cargo feature is disabled, the\nwidth of a `char` is determined by a crude approximation which\nsimply counts chars below U+1100 as 1 column wide, and all other\ncharacters as 2 columns wide. With the feature enabled, function\nwill correctly deal with [combining characters] in their\ndecomposed form (see [Unicode equivalence]).\n\nAn example of a decomposed character is “é”, which can be\ndecomposed into: “e” followed by a combining acute accent: “◌́”.\nWithout the `unicode-width` Cargo feature, every `char` below\nU+1100 has a width of 1. This includes the combining accent:\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(display_width(\"Cafe Plain\"), 10);\n#[cfg(feature = \"unicode-width\")]\nassert_eq!(display_width(\"Cafe\\u{301} Plain\"), 10);\n#[cfg(not(feature = \"unicode-width\"))]\nassert_eq!(display_width(\"Cafe\\u{301} Plain\"), 11);\n```\n\n## Emojis and CJK Characters\n\nCharacters such as emojis and [CJK characters] used in the\nChinese, Japanese, and Korean languages are seen as double-width,\neven if the `unicode-width` feature is disabled:\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(display_width(\"😂😭🥺🤣✨😍🙏🥰😊🔥\"), 20);\nassert_eq!(display_width(\"你好\"), 4);  // “Nǐ hǎo” or “Hello” in Chinese\n```\n\n# Limitations\n\nThe displayed width of a string cannot always be computed from the\nstring alone. This is because the width depends on the rendering\nengine used. This is particularly visible with [emoji modifier\nsequences] where a base emoji is modified with, e.g., skin tone or\nhair color modifiers. It is up to the rendering engine to detect\nthis and to produce a suitable emoji.\n\nA simple example is “❤️”, which consists of “❤” (U+2764: Black\nHeart Symbol) followed by U+FE0F (Variation Selector-16). By\nitself, “❤” is a black heart, but if you follow it with the\nvariant selector, you may get a wider red heart.\n\nA more complex example would be “👨‍🦰” which should depict a man\nwith red hair. Here the computed width is too large — and the\nwidth differs depending on the use of the `unicode-width` feature:\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(\"👨‍🦰\".chars().collect::<Vec<char>>(), ['\\u{1f468}', '\\u{200d}', '\\u{1f9b0}']);\n#[cfg(feature = \"unicode-width\")]\nassert_eq!(display_width(\"👨‍🦰\"), 4);\n#[cfg(not(feature = \"unicode-width\"))]\nassert_eq!(display_width(\"👨‍🦰\"), 6);\n```\n\nThis happens because the grapheme consists of three code points:\n“👨” (U+1F468: Man), Zero Width Joiner (U+200D), and “🦰”\n(U+1F9B0: Red Hair). You can see them above in the test. With\n`unicode-width` enabled, the ZWJ is correctly seen as having zero\nwidth, without it is counted as a double-width character.\n\n## Terminal Support\n\nModern browsers typically do a great job at combining characters\nas shown above, but terminals often struggle more. As an example,\nGnome Terminal version 3.38.1, shows “❤️” as a big red heart, but\nshows \"👨‍🦰\" as “👨🦰”.\n\n[combining characters]: https://en.wikipedia.org/wiki/Combining_character\n[Unicode equivalence]: https://en.wikipedia.org/wiki/Unicode_equivalence\n[CJK characters]: https://en.wikipedia.org/wiki/CJK_characters\n[emoji modifier sequences]: https://unicode.org/emoji/charts/full-emoji-modifiers.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[92,0],"end":[120,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2772-0:236:2533":{"id":"b:2:2772-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3278"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3303:260-0:314:2530":{"id":"a:2:3303:260-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3092-0:314:2530":{"id":"b:2:3092-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:168:3531":{"id":"0:168:3531","crate_id":0,"name":"find_words","span":{"filename":"src/word_separators.rs","begin":[192,4],"end":[199,5]},"visibility":"public","docs":"Find all words in `line`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["line",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:4011","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Iterator","id":"2:8624:189","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2775-0:330:2532":{"id":"b:2:2775-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:3276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13943:31684":{"id":"2:13943:31684","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13945:31685":{"id":"2:13945:31685","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13960:33597":{"id":"2:13960:33597","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13959:33668"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45113:7831","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13962:36014":{"id":"2:13962:36014","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:45094:7829","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3303:260-0:330:2532":{"id":"a:2:3303:260-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13967:3639":{"id":"2:13967:3639","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:36721":{"id":"5:5730:36721","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2775-0:287:2529":{"id":"b:2:2775-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:3276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/options.rs","begin":[7,9],"end":[7,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:326:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3092-0:271:2534":{"id":"b:2:3092-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3087-0:314:2530":{"id":"b:2:3087-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:63:827":{"id":"0:63:827","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[189,4],"end":[191,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2807-0:271:2534":{"id":"b:2:2807-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2809:27761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[238,9],"end":[238,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:222:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:245:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:211-0:236:2533":{"id":"0:211-0:236:2533","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[233,0],"end":[233,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"word_splitters::WordSplitter","name":"WordSplitter","id":"0:236:2533","glob":false}}},"2:14008:4114":{"id":"2:14008:4114","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13618:16103","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::rmatches":"2:14011:36016"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:45034:7826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:2529":{"id":"0:287:2529","crate_id":0,"name":"LineEnding","span":{"filename":"src/line_ending.rs","begin":[8,0],"end":[16,1]},"visibility":"public","docs":"Supported line endings. Like in the Rust standard library, two line\nendings are supported: `\\r\\n` and `\\n`","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:288:3696","0:290:3699"],"impls":["0:119","a:2:3338:4710-0:287:2529","a:2:42921:10878-0:287:2529","a:2:42920:10671-0:287:2529","a:2:33119:4554-0:287:2529","a:2:3303:260-0:287:2529","a:2:33060:248-0:287:2529","b:2:3081-0:287:2529","b:2:3946-0:287:2529","b:2:2772-0:287:2529","b:2:3087-0:287:2529","b:2:2775-0:287:2529","b:2:3077-0:287:2529","b:2:2804-0:287:2529","b:2:2807-0:287:2529","b:2:3092-0:287:2529","b:5:784-0:287:2529","0:298","0:294","0:300","0:292","0:295","0:297"]}}},"0:339:494":{"id":"0:339:494","crate_id":0,"name":"clone","span":{"filename":"src/word_separators.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42921:10878-0:246:2988":{"id":"a:2:42921:10878-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:10878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14049:36024":{"id":"2:14049:36024","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13579:148","`FromStr`":"2:13578:10735"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13578:10735","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13578:10735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13963:33657":{"id":"2:13963:33657","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45122:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,29],"end":[7,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:299:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73-0:246:2988":{"id":"0:73-0:246:2988","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[23,55],"end":[23,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"import":{"source":"optimal_fit::Penalties","name":"Penalties","id":"0:246:2988","glob":false}}},"0:115:2527":{"id":"0:115:2527","crate_id":0,"name":"dedent","span":{"filename":"src/indentation.rs","begin":[95,0],"end":[150,1]},"visibility":"public","docs":"Removes common leading whitespace from each line.\n\nThis function will look at each non-empty line and determine the\nmaximum amount of whitespace that can be removed from all lines:\n\n```\nuse textwrap::dedent;\n\nassert_eq!(dedent(\"\n    1st line\n      2nd line\n    3rd line\n\"), \"\n1st line\n  2nd line\n3rd line\n\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13947:31686":{"id":"2:13947:31686","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13993:36015":{"id":"2:13993:36015","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13618:16103","str::split":"2:13981:3529","prim@char":"1:12486:490","str::split_terminator":"2:13990:3621"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44898:7823","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:787:4226":{"id":"5:787:4226","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[238,40],"end":[238,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42920:10671-0:262:2987":{"id":"a:2:42920:10671-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:10671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:107:2518":{"id":"0:107:2518","crate_id":0,"name":"fill","span":{"filename":"src/fill.rs","begin":[36,0],"end":[47,1]},"visibility":"public","docs":"Fill a line of text at a given width.\n\nThe result is a [`String`], complete with newlines between each\nline. Use [`wrap()`] if you need access to the individual lines.\n\nThe easiest way to use this function is to pass an integer for\n`width_or_options`:\n\n```\nuse textwrap::fill;\n\nassert_eq!(\n    fill(\"Memory safety without garbage collection.\", 15),\n    \"Memory safety\\nwithout garbage\\ncollection.\"\n);\n```\n\nIf you need to customize the wrapping, you can pass an [`Options`]\ninstead of an `usize`:\n\n```\nuse textwrap::{fill, Options};\n\nlet options = Options::new(15)\n    .initial_indent(\"- \")\n    .subsequent_indent(\"  \");\nassert_eq!(\n    fill(\"Memory safety without garbage collection.\", &options),\n    \"- Memory safety\\n  without\\n  garbage\\n  collection.\"\n);\n```","links":{"`wrap()`":"0:190:2524","`Options`":"0:314:2530","`String`":"5:7809:256"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["width_or_options",{"generic":"Opt"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Opt"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[250,0],"end":[256,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3538:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:15:262","0:16:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3080:3420":{"id":"2:3080:3420","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3054:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120:352":{"id":"0:120:352","crate_id":0,"name":"as_str","span":{"filename":"src/line_ending.rs","begin":[21,4],"end":[26,5]},"visibility":"public","docs":"Turns this [`LineEnding`] value into its ASCII representation.","links":{"`LineEnding`":"0:287:2529"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:287:2529":{"id":"b:2:3092-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13928":{"id":"2:13928","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13929:1024","2:13930:3484","2:13931:36008","2:13932:36009","2:13934:36010","2:13937:3709","2:13938:36011","2:13939:350","2:13940:31687","2:13941:3168","2:13943:31684","2:13945:31685","2:13947:31686","2:13949:36012","2:13950:36013","2:13951:3641","2:13952:31709","2:13953:31712","2:13954:31713","2:13956:2700","2:13957:2818","2:13958:3536","2:13959:33668","2:13960:33597","2:13961:3165","2:13962:36014","2:13963:33657","2:13964:2701","2:13967:3639","2:13970:2949","2:13973:3708","2:13977:4822","2:13981:3529","2:13984:31715","2:13987:31717","2:13990:3621","2:13993:36015","2:13996:31719","2:13999:31721","2:14002:31723","2:14005:31724","2:14008:4114","2:14011:36016","2:14014:2928","2:14017:36017","2:14020:3622","2:14022:36018","2:14024:3620","2:14026:36019","2:14027:36020","2:14028:36021","2:14031:3868","2:14034:27905","2:14037:3900","2:14040:2805","2:14043:36022","2:14046:36023","2:14049:36024","2:14051:31099","2:14052:31619","2:14053:31103","2:14054:31104","2:14055:31105","2:14056:31622","2:14057:31623","2:14058:31624","2:14059:36025","2:14061:10664","2:14062:36026"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:84:2524":{"id":"0:84:2524","crate_id":0,"name":"wrap","span":{"filename":"src/wrap_algorithms.rs","begin":[167,4],"end":[190,5]},"visibility":"public","docs":"Wrap words according to line widths.\n\nThe `line_widths` slice gives the target line width for each\nline (the last slice element is repeated as necessary). This\ncan be used to implement hanging indentation.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["words",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}],["line_widths",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"primitive":"usize"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7219:278","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:2987":{"id":"0:262:2987","crate_id":0,"name":"OverflowError","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[186,0],"end":[186,25]},"visibility":"public","docs":"Overflow error during the [`wrap_optimal_fit`] computation.","links":{"`wrap_optimal_fit`":"0:65:2986"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:3338:4710-0:262:2987","a:2:42921:10878-0:262:2987","a:2:42920:10671-0:262:2987","a:2:33119:4554-0:262:2987","a:2:3303:260-0:262:2987","a:2:33060:248-0:262:2987","b:2:3081-0:262:2987","b:2:3946-0:262:2987","b:2:2772-0:262:2987","b:2:3087-0:262:2987","b:2:2775-0:262:2987","b:2:3077-0:262:2987","b:2:3092-0:262:2987","b:5:5978-0:262:2987","0:64","0:62","0:267","0:264","0:266","0:269"]}}},"b:2:2807-0:330:2532":{"id":"b:2:2807-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2809:27761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:2521":{"id":"0:156:2521","crate_id":0,"name":"refill","span":{"filename":"src/refill.rs","begin":[169,0],"end":[188,1]},"visibility":"public","docs":"Refill a paragraph of wrapped text with a new width.\n\nThis function will first use [`unfill()`] to remove newlines from\nthe text. Afterwards the text is filled again using [`fill()`].\n\nThe `new_width_or_options` argument specify the new width and can\nspecify other options as well — except for\n[`Options::initial_indent`] and [`Options::subsequent_indent`],\nwhich are deduced from `filled_text`.\n\n# Examples\n\n```\nuse textwrap::refill;\n\n// Some loosely wrapped text. The \"> \" prefix is recognized automatically.\nlet text = \"\\\n> Memory\n> safety without garbage\n> collection.\n\";\n\nassert_eq!(refill(text, 20), \"\\\n> Memory safety\n> without garbage\n> collection.\n\");\n\nassert_eq!(refill(text, 40), \"\\\n> Memory safety without garbage\n> collection.\n\");\n\nassert_eq!(refill(text, 60), \"\\\n> Memory safety without garbage collection.\n\");\n```\n\nYou can also reshape bullet points:\n\n```\nuse textwrap::refill;\n\nlet text = \"\\\n- This is my\n  list item.\n\";\n\nassert_eq!(refill(text, 20), \"\\\n- This is my list\n  item.\n\");\n```","links":{"`unfill()`":"0:155:2531","`Options::subsequent_indent`":"0:143:3725","`Options::initial_indent`":"0:142:3483","`fill()`":"0:107:2518"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["filled_text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["new_width_or_options",{"generic":"Opt"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Opt"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33119:4554-0:262:2987":{"id":"a:2:33119:4554-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:4554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3092-0:330:2532":{"id":"b:2:3092-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14005:31724":{"id":"2:14005:31724","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[194,0],"end":[194,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","provide","source","type_id","description"],"trait":{"name":"Error","id":"2:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:14055:31105":{"id":"2:14055:31105","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:236:2533":{"id":"b:2:3092-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:53:1208":{"id":"0:53:1208","crate_id":0,"name":"new","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[141,4],"end":[149,5]},"visibility":"public","docs":"Default penalties for monospace text.\n\nThe penalties here work well for monospace text. This is\nbecause they expect the gaps at the end of lines to be roughly\nin the range `0..100`. If the gaps are larger, the\n`overflow_penalty` and `hyphen_penalty` become insignificant.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,27],"end":[185,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:784-0:271:2534":{"id":"b:5:784-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:4225","5:787:4226","5:788:4873"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13937:3709":{"id":"2:13937:3709","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:13140:3540"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13931:36008":{"id":"2:13931:36008","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259:722":{"id":"0:259:722","crate_id":0,"name":"eq","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,29],"end":[22,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5978-0:262:2987":{"id":"b:5:5978-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10794:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5976:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5980:1825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:190:2524":{"id":"0:190:2524","crate_id":0,"name":"wrap","span":{"filename":"src/wrap.rs","begin":[180,0],"end":[193,1]},"visibility":"public","docs":"Wrap a line of text at a given width.\n\nThe result is a vector of lines, each line is of type [`Cow<'_,\nstr>`](Cow), which means that the line will borrow from the input\n`&str` if possible. The lines do not have trailing whitespace,\nincluding a final `'\\n'`. Please use [`fill()`](crate::fill()) if\nyou need a [`String`] instead.\n\nThe easiest way to use this function is to pass an integer for\n`width_or_options`:\n\n```\nuse textwrap::wrap;\n\nlet lines = wrap(\"Memory safety without garbage collection.\", 15);\nassert_eq!(lines, &[\n    \"Memory safety\",\n    \"without garbage\",\n    \"collection.\",\n]);\n```\n\nIf you need to customize the wrapping, you can pass an [`Options`]\ninstead of an `usize`:\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(15)\n    .initial_indent(\"- \")\n    .subsequent_indent(\"  \");\nlet lines = wrap(\"Memory safety without garbage collection.\", &options);\nassert_eq!(lines, &[\n    \"- Memory safety\",\n    \"  without\",\n    \"  garbage\",\n    \"  collection.\",\n]);\n```\n\n# Optimal-Fit Wrapping\n\nBy default, `wrap` will try to ensure an even right margin by\nfinding breaks which avoid short lines. We call this an\n“optimal-fit algorithm” since the line breaks are computed by\nconsidering all possible line breaks. The alternative is a\n“first-fit algorithm” which simply accumulates words until they no\nlonger fit on the line.\n\nAs an example, using the first-fit algorithm to wrap the famous\nHamlet quote “To be, or not to be: that is the question” in a\nnarrow column with room for only 10 characters looks like this:\n\n```\n# use textwrap::{WrapAlgorithm::FirstFit, Options, wrap};\n#\n# let lines = wrap(\"To be, or not to be: that is the question\",\n#                  Options::new(10).wrap_algorithm(FirstFit));\n# assert_eq!(lines.join(\"\\n\") + \"\\n\", \"\\\nTo be, or\nnot to be:\nthat is\nthe\nquestion\n# \");\n```\n\nNotice how the second to last line is quite narrow because\n“question” was too large to fit? The greedy first-fit algorithm\ndoesn’t look ahead, so it has no other option than to put\n“question” onto its own line.\n\nWith the optimal-fit wrapping algorithm, the previous lines are\nshortened slightly in order to make the word “is” go into the\nsecond last line:\n\n```\n# #[cfg(feature = \"smawk\")] {\n# use textwrap::{Options, WrapAlgorithm, wrap};\n#\n# let lines = wrap(\n#     \"To be, or not to be: that is the question\",\n#     Options::new(10).wrap_algorithm(WrapAlgorithm::new_optimal_fit())\n# );\n# assert_eq!(lines.join(\"\\n\") + \"\\n\", \"\\\nTo be,\nor not to\nbe: that\nis the\nquestion\n# \"); }\n```\n\nPlease see [`WrapAlgorithm`](crate::WrapAlgorithm) for details on\nthe choices.\n\n# Examples\n\nThe returned iterator yields lines of type `Cow<'_, str>`. If\npossible, the wrapped lines will borrow from the input string. As\nan example, a hanging indentation, the first line can borrow from\nthe input, but the subsequent lines become owned strings:\n\n```\nuse std::borrow::Cow::{Borrowed, Owned};\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(15).subsequent_indent(\"....\");\nlet lines = wrap(\"Wrapping text all day long.\", &options);\nlet annotated = lines\n    .iter()\n    .map(|line| match line {\n        Borrowed(text) => format!(\"[Borrowed] {}\", text),\n        Owned(text) => format!(\"[Owned]    {}\", text),\n    })\n    .collect::<Vec<_>>();\nassert_eq!(\n    annotated,\n    &[\n        \"[Borrowed] Wrapping text\",\n        \"[Owned]    ....all day\",\n        \"[Owned]    ....long.\",\n    ]\n);\n```\n\n## Leading and Trailing Whitespace\n\nAs a rule, leading whitespace (indentation) is preserved and\ntrailing whitespace is discarded.\n\nIn more details, when wrapping words into lines, words are found\nby splitting the input text on space characters. One or more\nspaces (shown here as “␣”) are attached to the end of each word:\n\n```text\n\"Foo␣␣␣bar␣baz\" -> [\"Foo␣␣␣\", \"bar␣\", \"baz\"]\n```\n\nThese words are then put into lines. The interword whitespace is\npreserved, unless the lines are wrapped so that the `\"Foo␣␣␣\"`\nword falls at the end of a line:\n\n```\nuse textwrap::wrap;\n\nassert_eq!(wrap(\"Foo   bar baz\", 10), vec![\"Foo   bar\", \"baz\"]);\nassert_eq!(wrap(\"Foo   bar baz\", 8), vec![\"Foo\", \"bar baz\"]);\n```\n\nNotice how the trailing whitespace is removed in both case: in the\nfirst example, `\"bar␣\"` becomes `\"bar\"` and in the second case\n`\"Foo␣␣␣\"` becomes `\"Foo\"`.\n\nLeading whitespace is preserved when the following word fits on\nthe first line. To understand this, consider how words are found\nin a text with leading spaces:\n\n```text\n\"␣␣foo␣bar\" -> [\"␣␣\", \"foo␣\", \"bar\"]\n```\n\nWhen put into lines, the indentation is preserved if `\"foo\"` fits\non the first line, otherwise you end up with an empty line:\n\n```\nuse textwrap::wrap;\n\nassert_eq!(wrap(\"  foo bar\", 8), vec![\"  foo\", \"bar\"]);\nassert_eq!(wrap(\"  foo bar\", 4), vec![\"\", \"foo\", \"bar\"]);\n```","links":{"`Options`":"0:314:2530","Cow":"5:789:121","crate::WrapAlgorithm":"0:271:2534","crate::fill()":"0:107:2518","`String`":"5:7809:256"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["width_or_options",{"generic":"Opt"}]],"output":{"resolved_path":{"name":"Vec","id":"5:7219:278","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::borrow::Cow","id":"5:789:121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Opt"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:827":{"id":"0:165:827","crate_id":0,"name":"fmt","span":{"filename":"src/word_separators.rs","begin":[160,4],"end":[167,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214:2793":{"id":"0:214:2793","crate_id":0,"name":"Word","span":{"filename":"src/core.rs","begin":[239,0],"end":[248,1]},"visibility":"public","docs":"A piece of wrappable text, including any trailing whitespace.\n\nA `Word` is an example of a [`Fragment`], so it has a width,\ntrailing whitespace, and potentially a penalty item.","links":{"`Fragment`":"0:10:2782"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:216:2796","0:217:2798","0:218:2800"],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:17","a:2:3338:4710-0:214:2793","a:2:42921:10878-0:214:2793","a:2:42920:10671-0:214:2793","a:2:33119:4554-0:214:2793","a:2:3303:260-0:214:2793","a:2:33060:248-0:214:2793","b:2:3081-0:214:2793","b:2:3946-0:214:2793","b:2:2772-0:214:2793","b:2:3087-0:214:2793","b:2:2775-0:214:2793","b:2:3077-0:214:2793","b:2:2804-0:214:2793","b:2:2807-0:214:2793","b:2:3092-0:214:2793","b:5:784-0:214:2793","0:24","0:225","0:233","0:223","0:220","0:230","0:14","0:228"]}}},"0:15:262":{"id":"0:15:262","crate_id":0,"name":"Target","span":{"filename":"src/core.rs","begin":[251,4],"end":[251,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"b:2:2772-0:262:2987":{"id":"b:2:2772-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3278"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:264":{"id":"0:264","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,9],"end":[185,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:265:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:784-0:330:2532":{"id":"b:5:784-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:4225","5:787:4226","5:788:4873"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:208-0:156:2521":{"id":"0:208-0:156:2521","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,17],"end":[229,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"refill::refill","name":"refill","id":"0:156:2521","glob":false}}},"0:198-0:98:2525":{"id":"0:198-0:98:2525","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"columns::wrap_columns","name":"wrap_columns","id":"0:98:2525","glob":false}}},"2:14057:31623":{"id":"2:14057:31623","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:40088"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:246:2988":{"id":"b:2:3077-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:3420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:36:827":{"id":"0:36:827","crate_id":0,"name":"fmt","span":{"filename":"src/word_splitters.rs","begin":[102,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[188,0],"end":[192,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10794:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:63:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2804-0:214:2793":{"id":"b:2:2804-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2806:27761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42921:10878-0:314:2530":{"id":"a:2:42921:10878-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:10878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:271:2534":{"id":"0:271:2534","crate_id":0,"name":"WrapAlgorithm","span":{"filename":"src/wrap_algorithms.rs","begin":[36,0],"end":[90,1]},"visibility":"public","docs":"Describes how to wrap words into lines.\n\nThe simplest approach is to wrap words one word at a time and\naccept the first way of wrapping which fit\n([`WrapAlgorithm::FirstFit`]). If the `smawk` Cargo feature is\nenabled, a more complex algorithm is available which will look at\nan entire paragraph at a time in order to find optimal line breaks\n([`WrapAlgorithm::OptimalFit`]).","links":{"`WrapAlgorithm::OptimalFit`":"0:274:3009","`WrapAlgorithm::FirstFit`":"0:272:3000"},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:272:3000","0:274:3009","0:277:2904"],"impls":["0:81","a:2:3338:4710-0:271:2534","a:2:42921:10878-0:271:2534","a:2:42920:10671-0:271:2534","a:2:33119:4554-0:271:2534","a:2:3303:260-0:271:2534","a:2:33060:248-0:271:2534","b:2:3081-0:271:2534","b:2:3946-0:271:2534","b:2:2772-0:271:2534","b:2:3087-0:271:2534","b:2:2775-0:271:2534","b:2:3077-0:271:2534","b:2:2804-0:271:2534","b:2:2807-0:271:2534","b:2:3092-0:271:2534","b:5:784-0:271:2534","0:77","0:79","0:282","0:88","0:286"]}}},"a:2:42920:10671-0:314:2530":{"id":"a:2:42920:10671-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:10671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[125,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:163:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13987:31717":{"id":"2:13987:31717","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13618:16103","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::split":"2:13981:3529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44848:7644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:857":{"id":"0:19:857","crate_id":0,"name":"from","span":{"filename":"src/core.rs","begin":[263,4],"end":[271,5]},"visibility":"public","docs":"Construct a `Word` from a string.\n\nA trailing stretch of `' '` is automatically taken to be the\nwhitespace part of the word.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["word",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39":{"id":"0:39","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[127,0],"end":[173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:40:2926"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2804-0:314:2530":{"id":"b:2:2804-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2806:27761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14002:31723":{"id":"2:14002:31723","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3338:4710-0:236:2533":{"id":"a:2:3338:4710-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:227:494":{"id":"0:227:494","crate_id":0,"name":"clone","span":{"filename":"src/core.rs","begin":[238,22],"end":[238,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:268:722":{"id":"0:268:722","crate_id":0,"name":"eq","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,16],"end":[185,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14017:36017":{"id":"2:14017:36017","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13618:16103","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::match_indices":"2:14014:2928"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44998:7825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:16101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3946-0:262:2987":{"id":"b:2:3946-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:258":{"id":"0:258","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,29],"end":[22,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:259:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:784-0:314:2530":{"id":"b:5:784-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:786:4225","5:787:4226","5:788:4873"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14024:3620":{"id":"2:14024:3620","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:330:2532":{"id":"b:2:3087-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3946-0:246:2988":{"id":"b:2:3946-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:266":{"id":"0:266","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,16],"end":[185,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:33062:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3092-0:246:2988":{"id":"b:2:3092-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:296:827":{"id":"0:296:827","crate_id":0,"name":"fmt","span":{"filename":"src/line_ending.rs","begin":[7,22],"end":[7,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14034:27905":{"id":"2:14034:27905","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14056:31622":{"id":"2:14056:31622","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:40088"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3338:4710-0:330:2532":{"id":"a:2:3338:4710-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:279:2023":{"id":"0:279:2023","crate_id":0,"name":"0","span":{"filename":"src/wrap_algorithms.rs","begin":[89,11],"end":[89,97]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"function_pointer":{"decl":{"inputs":[["words",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"resolved_path":{"name":"crate::core::Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}],["line_widths",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"primitive":"usize"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7219:278","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"resolved_path":{"name":"crate::core::Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}}}},"a:2:42921:10878-0:330:2532":{"id":"a:2:42921:10878-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:10878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5726:36720":{"id":"5:5726:36720","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:4011","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:4011","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3096:1850":{"id":"2:3096:1850","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:232:722":{"id":"0:232:722","crate_id":0,"name":"eq","span":{"filename":"src/core.rs","begin":[238,29],"end":[238,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:249:3256":{"id":"0:249:3256","crate_id":0,"name":"short_last_line_fraction","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[123,4],"end":[123,39]},"visibility":"public","docs":"When should the a single word on the last line be considered\n\"too short\"?\n\nIf the last line of the text consist of a single word and if\nthis word is shorter than `1 / short_last_line_fraction` of\nthe line width, then the final line will be considered \"short\"\nand `short_last_line_penalty` is added as an extra penalty.\n\nThe effect of this is to avoid a final line consisting of a\nsingle small word. For example, with a\n`short_last_line_penalty` of 25 (the default), a gap of up to\n5 columns will be seen as more desirable than having a final\nshort line.\n\n## Examples\n\n```\nuse textwrap::{wrap, wrap_algorithms, Options, WrapAlgorithm};\n\nlet text = \"This is a demo of the short last line penalty.\";\n\n// The first-fit algorithm leaves a single short word on the last line:\nassert_eq!(wrap(text, Options::new(37).wrap_algorithm(WrapAlgorithm::FirstFit)),\n           vec![\"This is a demo of the short last line\",\n                \"penalty.\"]);\n\n#[cfg(feature = \"smawk\")] {\nlet mut penalties = wrap_algorithms::Penalties::new();\n\n// Since \"penalty.\" is shorter than 25% of the line width, the\n// optimal-fit algorithm adds a penalty of 25. This is enough\n// to move \"line \" down:\nassert_eq!(wrap(text, Options::new(37).wrap_algorithm(WrapAlgorithm::OptimalFit(penalties))),\n           vec![\"This is a demo of the short last\",\n                \"line penalty.\"]);\n\n// We can change the meaning of \"short\" lines. Here, only words\n// shorter than 1/10th of the line width will be considered short:\npenalties.short_last_line_fraction = 10;\nassert_eq!(wrap(text, Options::new(37).wrap_algorithm(WrapAlgorithm::OptimalFit(penalties))),\n           vec![\"This is a demo of the short last line\",\n                \"penalty.\"]);\n\n// If desired, the penalty can also be disabled:\npenalties.short_last_line_fraction = 4;\npenalties.short_last_line_penalty = 0;\nassert_eq!(wrap(text, Options::new(37).wrap_algorithm(WrapAlgorithm::OptimalFit(penalties))),\n           vec![\"This is a demo of the short last line\",\n                \"penalty.\"]);\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"b:2:3081-0:271:2534":{"id":"b:2:3081-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:335:2904":{"id":"0:335:2904","crate_id":0,"name":"Custom","span":{"filename":"src/word_separators.rs","begin":[122,4],"end":[122,69]},"visibility":"default","docs":"Find words using a custom word separator","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:337:2023"]},"discriminant":null}}},"0:55:60":{"id":"0:55:60","crate_id":0,"name":"default","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[153,4],"end":[155,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2807-0:246:2988":{"id":"b:2:2807-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2809:27761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:331:3530":{"id":"0:331:3530","crate_id":0,"name":"AsciiSpace","span":{"filename":"src/word_separators.rs","begin":[55,4],"end":[55,14]},"visibility":"default","docs":"Find words by splitting on runs of `' '` characters.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::AsciiSpace;\n\nlet words = AsciiSpace.find_words(\"Hello   World!\").collect::<Vec<_>>();\nassert_eq!(words, vec![Word::from(\"Hello   \"),\n                       Word::from(\"World!\")]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[159,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:165:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:40:2926":{"id":"0:40:2926","crate_id":0,"name":"split_points","span":{"filename":"src/word_splitters.rs","begin":[143,4],"end":[172,5]},"visibility":"public","docs":"Return all possible indices where `word` can be split.\n\nThe indices are in the range `0..word.len()`. They point to\nthe index _after_ the split point, i.e., after `-` if\nsplitting on hyphens. This way, `word.split_at(idx)` will\nbreak the word into two well-formed pieces.\n\n# Examples\n\n```\nuse textwrap::WordSplitter;\nassert_eq!(WordSplitter::NoHyphenation.split_points(\"cannot-be-split\"), vec![]);\nassert_eq!(WordSplitter::HyphenSplitter.split_points(\"can-be-split\"), vec![4, 7]);\nassert_eq!(WordSplitter::Custom(|word| vec![word.len()/2]).split_points(\"middle\"), vec![3]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["word",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7219:278","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[113,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:38:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:147:2946":{"id":"0:147:2946","crate_id":0,"name":"word_splitter","span":{"filename":"src/options.rs","begin":[274,4],"end":[279,5]},"visibility":"public","docs":"Change [`self.word_splitter`]. The [`WordSplitter`] is used to\nfit part of a word into the current line when wrapping text.\n\nSee [`Options::break_words`] instead if you want to control the\nhandling of words longer than the line width.\n\n# Examples\n\n```\nuse textwrap::{wrap, Options, WordSplitter};\n\n// The default is WordSplitter::HyphenSplitter.\nlet options = Options::new(5);\nassert_eq!(wrap(\"foo-bar-baz\", &options),\n           vec![\"foo-\", \"bar-\", \"baz\"]);\n\n// The word is now so long that break_words kick in:\nlet options = Options::new(5)\n    .word_splitter(WordSplitter::NoHyphenation);\nassert_eq!(wrap(\"foo-bar-baz\", &options),\n           vec![\"foo-b\", \"ar-ba\", \"z\"]);\n\n// If you want to breaks at all, disable both:\nlet options = Options::new(5)\n    .break_words(false)\n    .word_splitter(WordSplitter::NoHyphenation);\nassert_eq!(wrap(\"foo-bar-baz\", &options),\n           vec![\"foo-bar-baz\"]);\n```\n\n[`self.word_splitter`]: #structfield.word_splitter","links":{"`WordSplitter`":"0:236:2533","`Options::break_words`":"0:144:2825"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["word_splitter",{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:236:2533":{"id":"b:2:3087-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3077-0:330:2532":{"id":"b:2:3077-0:330:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:3420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2772-0:246:2988":{"id":"b:2:2772-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3278"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:243:2023":{"id":"0:243:2023","crate_id":0,"name":"0","span":{"filename":"src/word_splitters.rs","begin":[88,11],"end":[88,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"function_pointer":{"decl":{"inputs":[["word",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7219:278","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}}}},"0:247:3193":{"id":"0:247:3193","crate_id":0,"name":"nline_penalty","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[26,4],"end":[26,28]},"visibility":"public","docs":"Per-line penalty. This is added for every line, which makes it\nexpensive to output more lines than the minimum required.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:314:2530":{"id":"0:314:2530","crate_id":0,"name":"Options","span":{"filename":"src/options.rs","begin":[8,0],"end":[33,1]},"visibility":"public","docs":"Holds configuration options for wrapping and filling text.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:316:2708","0:317:2520","0:318:3483","0:319:3725","0:320:2825","0:321:3560","0:322:3733","0:323:2946"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:137","a:2:3338:4710-0:314:2530","a:2:42921:10878-0:314:2530","a:2:42920:10671-0:314:2530","a:2:33119:4554-0:314:2530","a:2:3303:260-0:314:2530","a:2:33060:248-0:314:2530","b:2:3081-0:314:2530","b:2:3946-0:314:2530","b:2:2772-0:314:2530","b:2:3087-0:314:2530","b:2:2775-0:314:2530","b:2:3077-0:314:2530","b:2:2804-0:314:2530","b:2:3092-0:314:2530","b:5:784-0:314:2530","0:324","0:134","0:327","0:131"]}}},"2:3095:149":{"id":"2:3095:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32984:8368","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:237:2885":{"id":"0:237:2885","crate_id":0,"name":"NoHyphenation","span":{"filename":"src/word_splitters.rs","begin":[50,4],"end":[50,17]},"visibility":"default","docs":"Use this as a [`Options.word_splitter`] to avoid any kind of\nhyphenation:\n\n```\nuse textwrap::{wrap, Options, WordSplitter};\n\nlet options = Options::new(8).word_splitter(WordSplitter::NoHyphenation);\nassert_eq!(wrap(\"foo bar-baz\", &options),\n           vec![\"foo\", \"bar-baz\"]);\n```\n\n[`Options.word_splitter`]: super::Options::word_splitter","links":{"super::Options::word_splitter":"0:147:2946"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:241:2904":{"id":"0:241:2904","crate_id":0,"name":"Custom","span":{"filename":"src/word_splitters.rs","begin":[88,4],"end":[88,40]},"visibility":"default","docs":"Use a custom function as the word splitter.\n\nThis variant lets you implement a custom word splitter using\nyour own function.\n\n# Examples\n\n```\nuse textwrap::WordSplitter;\n\nfn split_at_underscore(word: &str) -> Vec<usize> {\n    word.match_indices('_').map(|(idx, _)| idx + 1).collect()\n}\n\nlet word_splitter = WordSplitter::Custom(split_at_underscore);\nassert_eq!(word_splitter.split_points(\"a_long_identifier\"),\n           vec![2, 7]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:243:2023"]},"discriminant":null}}},"2:3091:1852":{"id":"2:3091:1852","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2777:3276":{"id":"2:2777:3276","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:250:3259":{"id":"0:250:3259","crate_id":0,"name":"short_last_line_penalty","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[128,4],"end":[128,38]},"visibility":"public","docs":"Penalty for a last line with a single short word.\n\nSet this to zero if you do not want to penalize short last lines.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:89:60":{"id":"0:89:60","crate_id":0,"name":"default","span":{"filename":"src/wrap_algorithms.rs","begin":[194,4],"end":[196,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:857":{"id":"0:136:857","crate_id":0,"name":"from","span":{"filename":"src/options.rs","begin":[51,4],"end":[53,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["width",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:722":{"id":"0:163:722","crate_id":0,"name":"eq","span":{"filename":"src/word_separators.rs","begin":[149,4],"end":[156,5]},"visibility":"default","docs":"Compare two word separators.\n\n```\nuse textwrap::WordSeparator;\n\nassert_eq!(WordSeparator::AsciiSpace, WordSeparator::AsciiSpace);\n#[cfg(feature = \"unicode-linebreak\")] {\n    assert_eq!(WordSeparator::UnicodeBreakProperties,\n               WordSeparator::UnicodeBreakProperties);\n}\n```\n\nNote that `WordSeparator::Custom` values never compare equal:\n\n```\nuse textwrap::WordSeparator;\nuse textwrap::core::Word;\nfn word_separator(line: &str) -> Box<dyn Iterator<Item = Word<'_>> + '_> {\n    Box::new(line.split_inclusive(' ').map(Word::from))\n}\nassert_ne!(WordSeparator::Custom(word_separator),\n           WordSeparator::Custom(word_separator));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:2786":{"id":"0:12:2786","crate_id":0,"name":"whitespace_width","span":{"filename":"src/core.rs","begin":[227,4],"end":[227,38]},"visibility":"default","docs":"Displayed width of the whitespace that must follow the word\nwhen the word is not at the end of a line.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:5:784-0:236:2533":{"id":"b:5:784-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:4225","5:787:4226","5:788:4873"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3087-0:271:2534":{"id":"b:2:3087-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:146:3560":{"id":"0:146:3560","crate_id":0,"name":"wrap_algorithm","span":{"filename":"src/options.rs","begin":[236,4],"end":[241,5]},"visibility":"public","docs":"Change [`self.wrap_algorithm`].\n\nSee the [`WrapAlgorithm`] trait for details on the choices.\n\n[`self.wrap_algorithm`]: #structfield.wrap_algorithm","links":{"`WrapAlgorithm`":"0:271:2534"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["wrap_algorithm",{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3303:260-0:236:2533":{"id":"a:2:3303:260-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42921:10878-0:236:2533":{"id":"a:2:42921:10878-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:10878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:166":{"id":"0:166","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[170,0],"end":[200,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:167:1208","0:168:3531"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72-0:262:2987":{"id":"0:72-0:262:2987","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[23,40],"end":[23,53]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"import":{"source":"optimal_fit::OverflowError","name":"OverflowError","id":"0:262:2987","glob":false}}},"2:13939:350":{"id":"2:13939:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13940:31687","`u8`":"1:12505:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14022:36018":{"id":"2:14022:36018","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5743:3424":{"id":"5:5743:3424","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:3696":{"id":"0:288:3696","crate_id":0,"name":"CRLF","span":{"filename":"src/line_ending.rs","begin":[12,4],"end":[12,8]},"visibility":"default","docs":"_Carriage return and line feed_ – a line ending sequence\nhistorically used in Windows. Corresponds to the sequence\nof ASCII control characters `0x0D 0x0A` or `\\r\\n`","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[101,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:36:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,16],"end":[7,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2775-0:271:2534":{"id":"b:2:2775-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:3276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[35,16],"end":[35,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3077-0:287:2529":{"id":"b:2:3077-0:287:2529","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:287:2529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:3420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:33119:4554-0:236:2533":{"id":"a:2:33119:4554-0:236:2533","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:4554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:236:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13957:2818":{"id":"2:13957:2818","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12486:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44806:7820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13981:3529":{"id":"2:13981:3529","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13618:16103","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::split_whitespace":"2:13959:33668","str::rsplit":"2:13987:31717"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44830:7639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13934:36010":{"id":"2:13934:36010","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13932:36009"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:262:2987":{"id":"b:2:3081-0:262:2987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:262:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2804-0:271:2534":{"id":"b:2:2804-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2806:27761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:322:3733":{"id":"0:322:3733","crate_id":0,"name":"word_separator","span":{"filename":"src/options.rs","begin":[28,4],"end":[28,37]},"visibility":"public","docs":"The line breaking algorithm to use, see the [`WordSeparator`]\ntrait for an overview and possible implementations.","links":{"`WordSeparator`":"0:330:2532"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:33119:4554-0:314:2530":{"id":"a:2:33119:4554-0:314:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:4554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:314:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3338:4710-0:246:2988":{"id":"a:2:3338:4710-0:246:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:246:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13932:36009":{"id":"2:13932:36009","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3946-0:271:2534":{"id":"b:2:3946-0:271:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:271:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:784-0:214:2793":{"id":"b:5:784-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:786:4225","5:787:4226","5:788:4873"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:210-0:330:2532":{"id":"0:210-0:330:2532","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[232,0],"end":[232,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"word_separators::WordSeparator","name":"WordSeparator","id":"0:330:2532","glob":false}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[328,0],"end":[347,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Fragment","id":"0:10:2782","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:25:2708","0:26:2786","0:27:2789"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78:722":{"id":"0:78:722","crate_id":0,"name":"eq","span":{"filename":"src/wrap_algorithms.rs","begin":[112,4],"end":[119,5]},"visibility":"default","docs":"Compare two wrap algorithms.\n\n```\nuse textwrap::WrapAlgorithm;\n\nassert_eq!(WrapAlgorithm::FirstFit, WrapAlgorithm::FirstFit);\n#[cfg(feature = \"smawk\")] {\n    assert_eq!(WrapAlgorithm::new_optimal_fit(), WrapAlgorithm::new_optimal_fit());\n}\n```\n\nNote that `WrapAlgorithm::Custom` values never compare equal:\n\n```\nuse textwrap::WrapAlgorithm;\n\nassert_ne!(WrapAlgorithm::Custom(|words, line_widths| vec![words]),\n           WrapAlgorithm::Custom(|words, line_widths| vec![words]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2806:27761":{"id":"2:2806:27761","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:3000":{"id":"0:272:3000","crate_id":0,"name":"FirstFit","span":{"filename":"src/wrap_algorithms.rs","begin":[42,4],"end":[42,12]},"visibility":"default","docs":"Wrap words using a fast and simple algorithm.\n\nThis algorithm uses no look-ahead when finding line breaks.\nImplemented by [`wrap_first_fit()`], please see that function\nfor details and examples.","links":{"`wrap_first_fit()`":"0:90:3055"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2775-0:214:2793":{"id":"b:2:2775-0:214:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2777:3276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:330:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:339:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:71-0:65:2986":{"id":"0:71-0:65:2986","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[23,22],"end":[23,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"import":{"source":"optimal_fit::wrap_optimal_fit","name":"wrap_optimal_fit","id":"0:65:2986","glob":false}}},"2:13958:3536":{"id":"2:13958:3536","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44816:5487","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[238,22],"end":[238,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:214:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:227:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:14052:31619":{"id":"2:14052:31619","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40728:16164","Self::is_ascii":"2:14051:31099"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40728:16164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13973:3708":{"id":"2:13973:3708","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42829:202","prim@char":"1:12486:490","self::pattern":"2:13618:16103"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13952:31709":{"id":"2:13952:31709","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13951:3641","str::split_at_mut_checked":"2:13954:31713"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:23685:33646":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:1696:8584":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7980:6757":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:2816:4717":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"6:8267:9407":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:3110:6764":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:6606:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:44627:7803":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:8267:7149":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:14348:34149":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:683:8017":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:14520:6080":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:1933:8026":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:12082:5730":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"9:390:22477":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:6521:9073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:16362:6576":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11998:5714":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:2719:8034":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:6419:9024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:1230:35843":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:6026:8079":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:905:4826":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:5363:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:33062:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"18:635:5455":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:23235:11029":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:33804:4780":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3406:8041":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:40379:4805":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:6565:11032":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11309:5654":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:45084:7828":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:7929:10403":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:45888:7864":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:6904:6943":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:9594:8025":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:14554:7678":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5420:8872":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:3695:6769":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:41244:7595":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:15953:6450":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:14283:4935":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"5:7128:16134":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:4570:8053":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7578:8229":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"8:0:4373":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11319:37121":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:3141:5523":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11984:8048":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:1086:7047":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11720:5689":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:10141:23547":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:465:8383":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:44789:7819":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"0:0:2535":{"crate_id":0,"path":["textwrap"],"kind":"module"},"2:3025:16163":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:6623:9135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:48153:7991":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:11015:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:5007:8727":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:48034:7981":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"11:102:9575":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6173:6818":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:7986:9390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:8931:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6731:9172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:5682:8993":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:11025:8046":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:6042:6746":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:11283:8212":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:3078:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"18:491:5432":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:15829:6417":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:3608:4804":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"12:0:4377":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:14807:6140":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:9211:8215":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:12359:5764":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:5541:8928":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6953:6947":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:964:7304":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:9369:8227":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:11483:33764":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"11:2440:7323":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:45052:7827":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:2437:5508":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:5224:6792":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:45624:7854":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:2509:10751":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:46799:7872":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:0:4381":{"crate_id":17,"path":["object"],"kind":"module"},"1:2336:10737":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:41332:7742":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:1589:8514":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7521:7044":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:9764:30393":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:12505:1895":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:43651:4534":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:2802:4716":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"18:96:10373":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5488:8914":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:12787:5821":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:3576:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:47917:7976":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:3311:31037":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10793:5635":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"0:277:2904":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm","Custom"],"kind":"variant"},"17:14586:6089":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:688:10666":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:1563:8498":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12941:5840":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:12920:5837":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:45147:7738":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13145:5856":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:6790:9192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:4940:10831":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:14358:6056":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5449:6799":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:3720:7321":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:6658:6905":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5165:8767":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:13692:16108":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:42767:8050":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:282:35848":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:11457:5667":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:14796:6138":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:8656:8179":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4929:8690":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:2660:6726":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"11:842:10684":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:43157:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:16750:6674":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:13222:23560":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:8902:7302":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:15621:6365":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"11:1907:7327":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:14750:6128":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:41632:4938":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:506:5496":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:2366:7332":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"11:685:7321":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:32984:8368":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:5670:8988":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:12501:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:8308:9416":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8591:8181":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:46767:7868":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:22413:10942":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:8273:9408":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12056:5727":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:12511:1957":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:12493:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:45441:7852":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11617:5652":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11270:8211":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:10928:5647":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:8353:9427":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:7577:9378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:7729:7438":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4964:8704":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8749:10874":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:3817:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11508:7386":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:8152:4901":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:4924:4519":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:15531:6349":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:1577:7305":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6691:9158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:6844:4826":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:1514:8467":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:5810:9199":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:45113:7831":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12625:5806":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6408:6852":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:1632:8548":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:5727:5628":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:4300:9605":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:5012:4523":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11294:33534":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"0:214:2793":{"crate_id":0,"path":["textwrap","core","Word"],"kind":"struct"},"2:33030:7099":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:3045:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:22347:35229":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"18:754:5480":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:8284:9412":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:1624:4826":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:34556:4787":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:7628:7446":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:6130:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:5530:35848":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:535:10647":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:6071:8080":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:7308:9245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:1100:7314":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:15557:6355":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:7016:6955":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:45250:7838":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:45839:7862":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:16008:6464":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:507:5433":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:43181:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:16761:6675":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:4164:10818":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:10806:4541":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12537:5801":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5334:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:6696:6914":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:5676:8990":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5044:8747":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:9446:9605":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"5:1616:7304":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:5885:8071":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:4869:8662":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:896:6704":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"22:187:5225":{"crate_id":22,"path":["unicode_linebreak","BreakOpportunity"],"kind":"enum"},"17:16341:6573":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:43255:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:41816:4943":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:23827:7710":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:4829:8629":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:11355:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:40728:16164":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:13970:5963":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8023:10756":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:13140:3540":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:8273:8129":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:6748:9175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:8934:4915":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:9491:8102":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6421:6697":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:8233:23496":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:8448:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7386:7019":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:6998:6948":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:8572:7639":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:4363:10407":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:884:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:16171:6525":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:9473:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:2704:6728":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:48063:7984":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:48138:7990":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:3330:7328":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:3802:35171":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13757:5926":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:15121:6191":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:882:7302":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:12851:5832":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:5976:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:11958:5711":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6942:6946":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:42951:7630":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:11985:5713":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:10947:8249":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:44006:4533":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:15090:6185":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:3587:6768":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"16:6749:6702":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8209:5569":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:14031:5976":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:43017:7784":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"6:4792:8602":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:9219:4826":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:14627:6096":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7350:7017":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:772:7305":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:15148:6194":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:7416:7022":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:44406:9511":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:6830:8090":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:12042:7643":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:16209:6535":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:1620:7302":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"13:0:4371":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:7431:9298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:926:7306":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6302:6836":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6028:6743":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11302:9512":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:11401:5661":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:11346:33762":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2:12184:7648":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:6917:9238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:44676:7809":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"18:726:5475":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:2481:10740":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:7964:30461":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:4942:10833":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:4873:6781":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:6659:9149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:3660:4540":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:39082:4797":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:381:8009":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:960:7303":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:45428:7848":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:44998:7825":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:14483:6076":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:2499:10746":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:3344:4712":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:15010:6177":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:2920:6738":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:43072:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"5:5145:9605":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:769:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:41557:4933":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:15785:6405":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:8199:9403":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:1564:22556":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:583:5497":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:9242:8216":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4902:8675":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5462:8902":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:11944:8047":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:7656:4826":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:2590:6723":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:8000:6758":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6794:6929":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:2415:22596":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4976:8709":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:13124:7652":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:6625:6889":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:2466:7412":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:3051:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:12992:5845":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13635:5893":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:12502:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:1492:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:15973:6456":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:7159:6983":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:2900:6737":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:8249:9404":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:16283:6556":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:8502:4901":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:7745:7448":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:1931:8025":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:3449:8043":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:43092:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:5471:8908":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:1605:7303":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6723:9171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:3308:6709":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:7282:7010":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:12512:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:10713:30463":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:33592:4781":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:6833:10905":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:43292:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:46995:7888":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:6064:6748":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:3338:4710":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:8529:10755":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:5186:8769":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:24389:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5387:8856":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:7785:7453":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10031:23544":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:23286:11030":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:23627:33611":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:3772:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:12673:5809":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12550:5803":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5586:8947":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:1643:8556":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:40487:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:45459:7664":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:5441:8887":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:9329:8221":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:2733:16293":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:40555:7730":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:2215:7462":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4234:10825":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:12507:1883":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:23300:16216":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:40429:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:42855:7302":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:14947:6159":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:2348:37042":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:1727:8596":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:7316:9250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:13181:5859":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:4267:6775":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:47120:7902":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:7441:9872":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:10516:23559":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11971:5712":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5151:8766":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:11686:10756":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11016:5648":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:14375:6059":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:7907:7118":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:16798:6684":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"11:2420:4826":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:11805:5700":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:41826:4944":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:4855:4511":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12392:5767":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:8579:7828":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:47888:7975":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:11432:23573":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:34288:4546":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:491:8396":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12749:5818":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:13618:16103":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:45849:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:44636:7804":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13838:5941":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:10734:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:8320:23497":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"14:160:7290":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"11:351:10388":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:2896:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:9410:9515":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:8151:6761":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8585:8179":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6449:9041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"1:5115:10863":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:4694:6777":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13592:5889":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"11:1580:7324":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:8403:4917":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:11281:5653":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:3579:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:44182:7792":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:45815:7859":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:15769:6401":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11878:5651":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:41468:4919":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:3309:35917":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:12497:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:14738:6126":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:41497:4930":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:22863:10756":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"0:271:2534":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm"],"kind":"enum"},"18:623:37127":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:3129:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:5019:8733":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:26789:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:3364:7329":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:4120:10815":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:546:6695":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:33149:4713":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:6770:9184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:41176:7732":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:7907:7458":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:7548:4826":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:3314:31036":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:2162:7416":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:5839:16132":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:23893:7716":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:16822:5957":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"11:1900:7326":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:7938:7127":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:1872:8023":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:43479:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:43960:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:41488:4920":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"15:0:4379":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:41667:4941":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12066:5728":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:7797:7454":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:4498:35889":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:508:30466":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"9:480:22475":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:6507:9072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:13624:7629":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:7469:9309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:46884:7881":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:2684:6727":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:317:5489":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:14640:6097":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:14438:6070":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12204:5742":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:997:7313":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:5255:6793":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:2332:5632":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:517:8416":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6852:6937":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:1601:7325":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5265:8808":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:9305:8217":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:4496:8052":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:1250:10402":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:11515:5671":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:2435:22623":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:43140:7321":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:13361:5872":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:44747:7814":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12762:5819":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:680:5463":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:43027:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"18:538:5440":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:41642:4939":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:7586:9381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:5144:6789":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12840:5828":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:40507:4806":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"11:740:7304":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:39027:4796":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:7508:10408":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:2796:6732":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:40375:4803":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:5127:8764":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:5043:4524":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:4226:10823":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5107:8762":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:11421:5664":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:12272:9873":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:23371:11021":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:23926:7719":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:578:8449":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:8058:7135":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:23616:7690":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:15701:6382":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:14405:6062":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"18:598:37125":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:47349:7929":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:47975:7978":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:581:4729":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:6316:30476":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:22411:10756":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:16613:5940":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:5742:5629":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12510:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:8585:7200":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:41598:4946":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:13639:16101":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:1674:9870":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:3092:35844":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:47076:7900":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:40392:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7044:6750":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:14975:6165":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:47623:7939":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:23329:10756":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"0:3:582":{"crate_id":0,"path":["textwrap","core"],"kind":"module"},"17:11592:5612":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:5379:6797":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:671:7302":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:8039:8114":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:7410:30459":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:10796:4535":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13983:5964":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15931:6445":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:2724:6729":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:6495:8070":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:40447:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:45094:7829":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:7773:7451":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:3014:22624":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:1220:5498":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:8978:33741":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:16684:6657":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:11873:9610":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"11:1049:7316":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13909:5953":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:7568:7323":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:11007:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"0:90:3055":{"crate_id":0,"path":["textwrap","wrap_algorithms","wrap_first_fit"],"kind":"function"},"14:40:5927":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:3854:5512":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"15:288:10380":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:113:10376":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"9:53:9943":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:47490:7934":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:2228:5720":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:7758:3638":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:2652:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"0:274:3009":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm","OptimalFit"],"kind":"variant"},"11:2301:7047":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:8297:7414":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:43329:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:5271:8811":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12869:5878":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:1524:7302":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:44830:7639":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12163:5737":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:3834:6770":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:8043:37103":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:4844:6780":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:15160:6198":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:589:5443":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:523:8419":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:7832:7456":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:0:4372":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:6708:9167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:3520:4812":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:7756:28533":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:6638:9137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:22379:35221":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:6544:9086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:4956:6784":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:8014:6759":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:5282:8819":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:12491:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:41589:4936":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:43918:9510":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:14312:6047":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2:22466:10938":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:22381:35231":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:545:8431":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:12087:8111":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:7588:7445":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:3140:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:5325:8835":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4947:8698":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:8137:6760":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:3411:4802":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:2329:8030":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:45600:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2890:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:11058:8123":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:2173:7417":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:985:7310":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11320:8102":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:47511:7935":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4816:8619":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:12077:7644":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:16656:6650":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:14997:6176":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5428:8877":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:10167:23548":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:13370:7660":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:46814:7873":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:0:4376":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:929:10685":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:16520:6601":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:974:10684":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:10753:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"0:28:2825":{"crate_id":0,"path":["textwrap","core","break_words"],"kind":"function"},"5:6046:7323":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:4165:35848":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:9613:7628":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:15024:6178":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:2506:6719":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:4135:7323":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5319:8834":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8814:7796":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:2854:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:16019:6465":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:570:8444":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8630:8050":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:10823:5491":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:33060:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:15:2913":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:45635:16318":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:5282:6794":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:6162:7439":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:1370:7047":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:6700:9164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:9450:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:45865:7863":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:4178:10820":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:2990:6741":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"21:21:2707":{"crate_id":21,"path":["unicode_width","UnicodeWidthChar"],"kind":"trait"},"2:44800:7654":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:41423:7753":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"2:46966:7886":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:5507:8921":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:11066:8069":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:3296:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:10432:9961":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:8008:9391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"21:27:4875":{"crate_id":21,"path":["unicode_width","UnicodeWidthStr"],"kind":"trait"},"11:785:7306":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12234:5746":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:44806:7820":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11163:5651":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:16812:6685":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:34701:4789":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"10:36:8371":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:13331:7658":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:698:5466":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:8125:8123":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:45546:9595":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:3503:5509":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:6564:9102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:4150:10817":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7058:6959":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11777:5695":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:7919:7119":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6808:6742":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:6680:9155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:14821:6142":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:14327:6049":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:23593:7685":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:42033:4902":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:8457:4553":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5295:8824":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:47594:7938":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"6:1690:8583":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8740:8191":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"16:3987:5536":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:7814:10005":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"17:5131:5518":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"5:7714:10683":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:5641:8977":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:4636:16145":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:5593:8949":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13205:5861":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:43891:9501":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"14:31:7290":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:1631:7412":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:33051:7724":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"11:299:9577":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:9152:8210":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:5622:8062":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:1415:7320":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"20:15:5004":{"crate_id":20,"path":["smawk","Matrix"],"kind":"trait"},"17:11606:5651":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:14652:6098":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:5241:8796":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5603:8954":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:12437:8262":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:44776:7816":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:473:8388":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:15410:6303":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:3076:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:15939:6448":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:15905:6435":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:5999:8078":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13733:5912":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:47528:7936":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:16218:6537":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13890:5952":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8766:5413":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:9203:7302":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:2772:6731":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:659:5456":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11831:5675":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:3381:4784":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:8503:7190":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6713:6915":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:5348:6796":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9254:10910":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:2550:6721":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:6887:8094":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:12931:5839":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:6712:4903":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:2666:16216":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:7358:6752":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:7219:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:9336:27896":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:3944:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5288:8822":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:3096:35845":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:1636:7411":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:14666:10687":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11952:5710":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:5813:10893":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:4944:10834":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:7563:9369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11678:5684":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:11173:37115":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:10218:23549":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:6473:9050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6526:9074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:4334:10405":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:12499:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"18:613:37124":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:48100:7987":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:8852:10888":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:5001:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:15641:6373":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:45828:34646":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:472:5492":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:6640:6891":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"18:481:5431":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:1785:35848":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:37096:4794":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:2256:10647":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8596:10797":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:2246:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"9:500:7389":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:15106:6187":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:4212:10821":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:6584:11033":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:11006:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:15655:6376":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"11:2559:8369":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:6716:9170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:3086:35846":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:939:7323":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:10442:23557":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:48168:7992":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:5304:7439":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:14243:7668":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:14507:6077":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:2021:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:13818:5940":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:47461:7933":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:8261:9406":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12149:5736":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:9390:28966":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:706:5468":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:15887:6431":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:6480:9052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:2206:16226":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:44191:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:46934:7884":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4937:8692":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11553:5676":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:47222:7908":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:16377:6577":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:12115:7645":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8520:8046":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:14573:6088":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10843:5636":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:1118:7320":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:15997:6460":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12280:5753":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7789:37110":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:1627:7323":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5301:8827":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6611:9128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:1339:5500":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:16332:6571":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:5060:6786":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12736:5817":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:3088:9432":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:991:7312":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:16297:6558":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:5709:23483":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:1908:8024":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"18:80:10372":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:22362:35235":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:664:4990":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11291:37114":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11013:8238":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:23249:16216":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:13547:5885":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"17:16159:6522":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:23937:7720":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:41538:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:7454:9305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:45807:7857":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:7919:8112":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:22464:10756":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:12458:10670":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:15919:6442":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5381:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:9269:10909":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12605:5651":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14832:6143":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:14531:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:6443:9040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6866:23489":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:8226:8126":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:13354:7659":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:34422:4786":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:8104:10669":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7990:7132":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:3699:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4984:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:3304:7327":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:5217:8788":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12983:23690":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:15549:6354":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:3789:4811":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:45329:7842":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:45744:9513":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:41566:7757":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:5520:8922":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"0:236:2533":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter"],"kind":"enum"},"17:15418:6306":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"21:0:2537":{"crate_id":21,"path":["unicode_width"],"kind":"module"},"17:12976:5843":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:8636:23498":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:2403:7466":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:22472:10941":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:31409:5065":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:48054:7983":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:16786:6681":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:41187:33574":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:41691:4927":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6205:23485":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:10572:4532":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:15864:6426":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:4594:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:8296:9414":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:1675:8574":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:47141:7903":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"7:79:22470":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:10971:9608":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:2014:4989":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:43665:4543":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:23456:7682":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:881:10801":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"0:9:2772":{"crate_id":0,"path":["textwrap","core","display_width"],"kind":"function"},"2:14611:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:42880:5039":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:6440:23486":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:41146:7731":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12826:5823":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:14084:5989":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13781:5927":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:16701:6659":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:12104:30469":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"2:23023:10940":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:440:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:6256:6828":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:9169:8211":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:1401:7314":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"11:1005:7047":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"13:229:8363":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:7838:23494":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:15739:6396":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10419:8240":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:3085:4225":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:12498:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:1642:7327":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:9357:8225":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:46899:7882":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:11075:37117":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:15050:6180":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:11424:9522":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"2:42605:7620":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12776:5820":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:5648:8980":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5051:8749":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:41347:7744":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:45264:7840":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11503:5670":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"9:355:22491":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:4810:6779":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:1657:8567":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:2368:9585":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:14872:6147":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14114:6001":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:8096:7136":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6837:6935":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:1586:7306":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:4372:7302":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"11:2533:8364":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:1667:8573":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:5408:33952":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"6:5533:8923":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:13854:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:5139:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:8066:23495":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:1985:4988":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:12952:5841":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:3762:4807":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:6777:9185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:15714:6388":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12524:5800":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:3570:9605":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:5129:10864":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:8662:8188":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:2522:10753":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"17:15852:6420":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8262:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:42040:4903":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:43403:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:11828:8107":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"11:1105:7318":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:46831:7874":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:8546:7195":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:14574:7679":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:3351:8038":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:22484:7681":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:15896:6434":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"9:0:4374":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:12216:5744":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:1539:8481":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11157:30465":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:23700:33656":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:33119:4554":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:43658:4535":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:4582:7597":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:5742:8069":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:41252:7739":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:23509:7683":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"11:1920:7329":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:44898:7823":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:15836:6418":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:41236:7738":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:7578:7444":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7168:6984":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:44645:7806":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:10790:8042":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:39716:4799":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:11822:8258":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:42074:4910":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12249:5750":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:2349:7316":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:31820:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:35047:4791":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:14375:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11579:5679":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:538:8428":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5025:8736":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:0:4382":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:16595:5930":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:11867:9609":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:5057:8751":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:1023:7314":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11818:5701":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12335:5762":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10784:5631":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"11:1888:7323":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:47644:7940":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:16399:6583":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:3567:4551":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:14902:6152":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:3497:10783":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:7350:9269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:4830:9293":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:15812:6409":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:23197:11026":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:6765:9183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:8031:9402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5311:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:8569:4552":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:3406:4801":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:13266:23561":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:7267:35882":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:42959:7782":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:45749:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:11965:7641":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:47996:7979":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:10274:23551":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:1584:8512":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11757:23594":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:6233:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:46980:7887":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:11050:8190":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"2:10241:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:4562:9605":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:48089:7986":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:9158:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:6217:8070":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:12492:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:3720:5511":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:44737:7813":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:11098:8213":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12699:5814":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:5196:10870":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:2555:4388":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:4681:10843":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:8381:10788":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:6901:8098":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:12306:5757":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"18:670:5462":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"18:718:5472":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:9318:8218":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:4970:8706":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11851:5703":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:835:7307":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:12485:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:31847:4729":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"11:328:9580":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:5317:8061":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11598:30455":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:2378:23619":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:5479:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:1648:7328":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:16145:6516":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:4483:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:14692:6102":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:45104:7830":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:5649:6800":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:4222:10822":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:14859:6146":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:8437:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5230:8792":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:7883:6856":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:15496:6348":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12122:5734":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:10630:5483":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:689:5465":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10332:23553":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"0:239:2895":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter","HyphenSplitter"],"kind":"variant"},"17:16241:6550":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:6631:9136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13398:5875":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:5021:10830":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:12198:7649":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:3297:7302":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:10808:4542":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:903:5489":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:6717:7323":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:8528:7193":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7075:23490":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:14886:6150":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:6098:6809":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:42863:7321":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:6731:6925":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:46867:7880":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11358:23571":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:8549:4930":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13427:5876":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:3914:8047":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10597:5482":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:3538:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:12486:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"14:220:7298":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:16642:6646":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:23779:10756":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:12489:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:3573:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:908:5490":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:13554:5886":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"17:13028:5852":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"11:2323:7314":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:12508:1889":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:1123:35848":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:6823:9201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:497:8399":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:47059:7899":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:12683:7650":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:5341:8839":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:14612:6093":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:6890:6744":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:5417:6798":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:16084:6509":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:11752:7796":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"16:7765:7078":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2570:6722":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:45582:9512":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:22364:35226":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:48115:7988":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:2766:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:11897:7321":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:515:5430":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"0:43:2945":{"crate_id":0,"path":["textwrap","word_splitters","split_words"],"kind":"function"},"1:12496:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:43051:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:4342:10406":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:4492:9605":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:42911:5040":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:7891:7412":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:14708:6107":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:9781:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:44213:7800":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12798:23688":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:5196:8776":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:2880:6736":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:9182:8212":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:5088:8761":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11706:5687":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:6876:6940":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:31179:10800":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:40295:4814":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5622:8968":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:5249:8800":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:43440:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:23343:11020":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:3551:4527":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:42871:4826":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:8598:7203":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:5441:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:47946:7977":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:43672:4544":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:7401:37104":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:41840:4945":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:31462:4531":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:10549:5629":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13871:5947":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:15665:6377":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:33151:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"10:0:4375":{"crate_id":10,"path":["adler"],"kind":"module"},"11:1158:7320":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:15077:6184":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:41403:5487":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:5871:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:42807:7624":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:47721:7972":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:43985:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:8165:6751":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:10784:8038":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:10421:8239":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:387:8011":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:15844:6419":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12176:5738":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:6752:8089":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:41519:4922":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:4903:10843":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:22592:7681":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:8711:7212":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:430:10395":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"7:32:22463":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10938:37116":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:8248:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:7305:7011":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:6288:9605":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:2209:10740":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"2:3303:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:14335:6051":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:16132:6510":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6411:9022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:45570:9601":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6822:23488":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:4702:4529":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:564:8441":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:14533:5773":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:45235:7833":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:3353:8039":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12687:5813":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:47798:7973":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:559:8439":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:881:7313":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4957:8701":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:11337:9517":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:44816:5487":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:6652:9148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:7980:4898":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"18:765:27749":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12816:5513":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"15:327:9940":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:48043:7982":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:42999:7783":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:10798:4534":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:13290:5588":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:39137:4798":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:985:10686":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:44203:7796":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"11:396:10393":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:11902:5708":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:41365:7745":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:651:5433":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:11385:9518":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:8105:7137":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7508:7041":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:46846:7875":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"11:2380:7302":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:22335:35229":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:4312:10404":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:889:7406":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:23159:11025":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:16739:6673":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:12513:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:33044:4520":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:6882:9213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:10400:8024":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:23665:33651":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:9364:8226":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:7487:9319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4914:8684":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"11:434:10396":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:8209:6749":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:13471:5513":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:41548:4932":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:2137:7314":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:1214:10401":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"0:237:2885":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter","NoHyphenation"],"kind":"variant"},"17:12409:23664":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:10293:7773":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"18:521:27750":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:8642:10842":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:4998:8056":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:5502:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12319:5760":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8892:8057":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:7223:6997":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:5494:8916":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:12005:8049":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:47378:7930":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"11:873:7312":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:11339:33759":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"2:3403:4800":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:2860:6735":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:23021:10756":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:532:8425":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10803:5487":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5562:8940":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:5992:8074":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"0:272:3000":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm","FirstFit"],"kind":"variant"},"1:12453:9963":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:553:8436":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:2227:5501":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:10561:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:41619:4924":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:2400:7321":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:6958:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:2755:8033":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:643:5433":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:3556:4528":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:667:5414":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4881:8665":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:7539:5327":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:42942:5038":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:14072:5986":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:33026:7722":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:12135:5735":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:7852:10008":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"16:4983:6785":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:5629:8971":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:6269:6829":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:8330:9421":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:45356:7663":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:41215:7736":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10977:37118":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:23734:7704":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:5636:8066":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:2620:6724":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:40331:4813":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:16311:6565":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:6758:9182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:2950:6739":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:23247:33839":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"16:7542:7046":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:6543:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:14001:5972":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:10534:5628":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:48191:7993":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:3126:22626":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:6219:9605":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:12004:7642":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:5117:8763":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:600:8014":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:44419:9594":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:6813:9198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11081:29020":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10097:23545":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:968:7307":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15946:6449":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:11050:10760":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:13108:16278":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13055:5675":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:10296:23552":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:3456:7412":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:48074:7985":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:13408:7641":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:43946:33671":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"18:531:5437":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6493:9061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:7598:35915":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:47416:7932":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:1521:8470":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:42827:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:2208:16227":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:42621:10798":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:33061:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:23915:7718":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"0:31:2515":{"crate_id":0,"path":["textwrap","word_splitters"],"kind":"module"},"16:7807:37106":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:2105:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:47843:7974":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:1898:5198":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:4851:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:9438:8085":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:3298:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5658:8981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:6876:9212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:698:4826":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:13644:16100":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13537:5839":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:631:10663":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:8566:5487":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:5255:8802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:41610:4937":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:15475:6343":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:9759:8124":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:11922:7639":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:45122:7661":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"11:854:7310":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:1703:8587":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:576:10652":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:4617:16071":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3048:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:42649:9500":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:43968:4531":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5357:8841":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:1500:8462":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:7604:9384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:1597:8519":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:40537:4808":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:10987:8232":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:22868:10944":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15439:6314":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:5477:8911":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:1595:7322":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:4981:4521":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:16036:6472":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:47091:7901":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:16832:5962":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:45562:9599":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:5656:8067":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:4570:7596":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:12487:1917":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:8837:8203":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:726:7405":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:2769:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:44576:7802":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13349:5871":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6159:6815":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:15731:6393":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:2748:6730":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"22:0:2536":{"crate_id":22,"path":["unicode_linebreak"],"kind":"module"},"2:2142:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:23838:7711":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:3854:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:10246:23550":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5450:8893":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11527:5674":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:12469:29016":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6588:6886":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:14284:6040":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12028:5717":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:23641:7691":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7959:7130":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2112:5062":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:913:7305":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:45756:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11222:5652":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:41376:16263":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5036:8742":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:47399:7931":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:9433:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:23221:10756":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:895:7321":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:4241:6774":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:42026:7613":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:10802:4544":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:2282:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:8298:7153":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:45574:9602":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:47009:7889":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:3054:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7212:6996":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:3043:8037":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:7108:4925":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:13070:5651":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:13692:5903":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:11864:5704":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:6984:6762":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:7347:10004":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"16:7462:7033":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6738:37105":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8919:8209":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:8212:4509":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:13294:7655":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:14043:5977":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:5286:8061":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11926:5709":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:479:8391":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6337:6839":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:3461:4792":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:41528:4931":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:9509:8231":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13014:5850":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:14672:6101":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:16714:6665":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:8626:7205":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:44423:7637":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12962:23689":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14460:6071":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:12170:7647":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:11856:8110":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:10787:8040":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:2497:10745":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"11:1880:7302":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:43132:7302":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:2266:7418":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:23860:7713":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:6410:4923":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13193:5860":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:10394:23555":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:3057:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:11842:8108":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:16668:6652":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:12648:5807":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:1530:8475":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:5575:16087":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:12061:8259":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:5395:8861":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12018:5715":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:6239:6823":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:16198:6534":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"15:306:10384":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:2794:8036":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:45138:7595":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:7119:9586":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:15036:6179":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:42567:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:7368:9278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12108:5733":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:10427:33737":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:10778:5630":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:22325:4729":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:44757:7815":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:16507:5926":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:6389:6845":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:6672:9153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:5106:10862":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"0:241:2904":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter","Custom"],"kind":"variant"},"16:7969:7131":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"11:1064:22555":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:15679:6378":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:41580:4935":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1569:8500":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:16555:6631":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:13095:5854":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:2483:10741":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:3343:35916":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13385:5873":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:1711:8591":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:14547:6085":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:48230:8004":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:4404:6776":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:14917:6156":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10418:23556":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:9726:7629":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11042:33531":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:31447:5066":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13921:5956":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:45407:16115":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:12500:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:47272:7910":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:22890:7680":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:23816:7709":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"16:4902:6782":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:3441:6767":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:1884:4826":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:8110:10712":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:43901:4531":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:13041:5853":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:1855:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:9752:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:47549:7937":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:3308:4526":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12035:5720":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:7863:4928":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:5405:8867":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:15760:6400":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:10789:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:2820:6733":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:5085:6787":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:2966:6740":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12008:5568":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4890:8670":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:6716:8088":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"11:1914:7328":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12347:5763":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"0:48:2516":{"crate_id":0,"path":["textwrap","wrap_algorithms"],"kind":"module"},"2:41298:7741":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:23882:7715":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:13515:23563":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:16632:6645":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:44221:7801":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10564:5481":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:3376:4545":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:40544:7467":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:23849:7712":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:13570:23564":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:9465:8101":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:6763:35848":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:3917:8048":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:297:4011":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"15:394:22587":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"22:78:5239":{"crate_id":22,"path":["unicode_linebreak","BreakClass"],"kind":"enum"},"17:16323:6567":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:41259:16159":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:7648:4826":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:47158:7904":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:48017:7980":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:4733:4530":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:14416:6063":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:44655:7807":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:2029:9605":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:11699:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:1494:8459":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12583:5805":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:15064:6183":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:3852:10799":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:42921:10878":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:608:5450":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13854:5945":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:9377:8229":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"9:236:7796":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:3889:5528":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6123:6747":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:3391:4782":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:23727:9591":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:1625:8544":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:3048:22625":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:1507:8465":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13306:5869":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:8343:9425":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:3024:10756":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:7424:23492":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10368:23554":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:38972:4795":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:4056:7323":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7192:23491":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:35220:4793":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:6919:4947":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:7337:7015":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:23376:11019":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:44980:7824":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:1889:7412":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:13157:5857":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:13578:10735":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:16494:5912":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:22580:10756":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:6084:6804":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:1539:7321":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:5672:8068":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:15573:6356":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:4703:10844":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5318:6795":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:7118:16133":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:10996:8126":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:8236:8127":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:8612:6763":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:5482:8913":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5224:8789":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"11:1085:37096":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:2585:9429":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:44952:7647":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:15753:6399":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6970:6745":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"6:7414:9297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:23649:7692":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"11:2495:22551":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:5375:8851":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:1653:7329":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6462:23487":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:12504:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:12156:7646":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:10830:5771":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:12570:5804":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:44665:7808":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:42589:7618":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:10578:30392":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:13322:23562":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:16179:6528":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:14260:7671":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:15989:6459":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:15286:6200":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:8028:7133":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:47205:7907":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:22393:35224":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:41391:7746":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:42055:4906":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:2148:7414":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"14:202:16116":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:41202:7735":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:5223:16154":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:34489:4785":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:45774:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:7463:9308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:7259:7009":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:45281:7841":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:2539:8365":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:2668:16217":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"13:110:37099":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:6381:8997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:8516:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:3338:7326":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:45566:9600":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:34016:4783":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:1555:4826":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:5688:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"20:0:2034":{"crate_id":20,"path":["smawk"],"kind":"module"},"17:14220:6011":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:9455:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:4766:6778":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:6437:9037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:7361:9274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:7539:9359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:6531:16519":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:8648:8186":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13945:5960":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:5689:6801":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:47304:7912":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7495:7037":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:9284:10911":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15602:6364":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:40407:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:12503:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:16775:6679":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:1551:8490":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:33037:7723":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:13798:5930":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:4184:6773":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:6408:30475":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:13662:5899":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:15876:6427":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:9225:8072":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:2084:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:39:10694":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:10115:23546":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:14055:5978":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:7612:4826":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:12754:16096":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"9:176:9953":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:4210:7321":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:11055:7636":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12711:5815":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8281:8130":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:8319:9420":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11232:23574":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10729:5486":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:7758:16263":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5349:8840":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"11:809:7412":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:6392:7678":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:7909:5414":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:14845:6145":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:7809:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:13082:5652":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:15136:5839":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:40467:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:6440:8082":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:7731:5039":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6680:6911":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:23747:7705":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:34874:4790":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:41140:7595":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"9:445:22476":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:7838:10007":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:12509:1871":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6188:6819":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11566:5677":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:10966:9606":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:13933:5957":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:5757:6802":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8214:8124":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11065:5649":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:3669:30396":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:3851:7414":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12095:5732":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:2450:6710":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:5305:5520":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:2840:6734":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:7620:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:0:4380":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:2148:7316":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:44880:7822":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:15351:6251":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:1870:8022":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:16385:6580":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:3181:4993":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:155:6688":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:2816:9433":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"14:7:7290":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:6935:35848":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:10670:8210":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:212:7403":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12044:5723":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:8290:9413":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:45876:7334":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:7548:9362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:23871:7714":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:3308:28778":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:42064:4908":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"11:2551:37097":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:5113:6788":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:41461:7754":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:14400:7673":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:8681:8190":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:8483:7189":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:4934:4520":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:3707:7302":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"11:2121:7047":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:4120:6771":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:4990:4522":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:9195:8213":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:8044:8116":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:15963:6453":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:45752:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:44166:7789":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:6368:6690":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"11:798:7323":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:14140:6006":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12260:23663":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:10696:5485":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12723:5816":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:322:5490":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8511:8171":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:6183:16511":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:4415:8051":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11124:37120":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11539:5675":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:12080:8111":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:7716:37109":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:45214:16114":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"0:10:2782":{"crate_id":0,"path":["textwrap","core","Fragment"],"kind":"trait"},"11:2545:8366":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:5179:8768":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:5429:16084":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"6:5551:8934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12225:5745":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:8624:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:1489:8457":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13169:5858":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:11142:4105":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:11733:23593":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:5205:8781":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:42082:4912":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:12716:7651":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"11:830:7322":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7554:23493":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:14393:6060":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:563:5442":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:45129:7739":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11788:5697":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2859:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:7703:7447":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:16728:6668":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:3688:10776":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:14599:6091":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:8685:9278":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11448:5665":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:8255:9405":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5635:8974":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:11163:30468":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:14099:5995":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:12484:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:4781:10861":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:6144:23484":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:6902:9227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:41510:4921":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10487:23558":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"5:7556:7443":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12897:5835":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:15689:6379":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:43366:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4896:8672":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:45034:7826":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:15981:6457":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"14:214:7296":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:41225:7737":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:15540:6353":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:955:7322":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:8940:4916":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:33120:4714":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6502:22595":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:7292:35893":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:22902:35232":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:4929:6783":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:31441:4719":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:1684:8580":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:5198:6791":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:5549:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:12371:5765":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12906:5836":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:41360:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4990:8717":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:7391:9296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:6599:9123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:45766:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:44934:7646":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12860:5833":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:3540:4906":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:10794:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:47289:7911":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:7864:4929":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:15777:6403":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:2486:6718":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:4900:10865":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:14152:6009":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"11:708:7303":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:44174:7791":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13491:5880":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:45554:9597":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:3603:8182":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:11816:8103":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:1893:7412":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:586:8453":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:7949:6756":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:45558:9598":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:8371:8133":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:5172:6790":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:485:8394":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:9460:8100":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:8062:5771":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:2640:6725":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"18:735:27748":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11465:5668":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:15431:6313":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:10663:5484":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:8559:4943":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:23758:10814":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"11:1140:7319":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:8302:9415":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:10735:4540":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:47038:7898":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:8565:7198":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:11873:7302":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:5570:8942":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:41413:7747":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"6:6534:9079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:47173:7905":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:4172:10819":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8219:8125":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:3777:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11026:37119":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"14:165:22560":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"18:573:5433":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11475:23574":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"2:44728:7812":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:34355:4788":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:4575:35889":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:6296:4934":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:42755:7776":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:4019:8049":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13610:5892":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:10804:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:43148:4826":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:14299:6045":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:11442:8257":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:11630:5681":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:45393:7843":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:23562:7684":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:8637:9604":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:4332:9605":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:14269:6036":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:2530:6720":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:43218:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:7471:7036":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:8268:8031":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"10:44:7336":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:10976:8125":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:11209:33763":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:949:7412":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:41681:4942":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:43516:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:42733:33645":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:7518:9345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:6914:6944":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:42846:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:8908:8208":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"1:11921:10410":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:31473:33607":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:3800:35848":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"11:123:9576":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:2566:7447":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"14:187:22567":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:5878:8070":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13119:5855":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:46913:7883":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:42049:4905":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:47190:7906":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:8399:4918":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:5069:8760":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:3061:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6843:6936":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:6666:9150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:22590:10939":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:23115:11024":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:14773:6137":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:16187:6529":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:1636:7326":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:23904:7717":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:41443:10722":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:7341:9268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:1109:7316":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:2467:6712":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:12490:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:12506:1877":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:11386:23572":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:8289:8132":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4921:8688":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:1002:7302":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:14560:6086":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:7114:9587":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:7822:7455":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:4828:9291":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:8669:7099":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:47251:7909":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:8707:8054":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13719:5911":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:4189:4826":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:2649:8032":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:4816:10820":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3678:10754":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:42789:7621":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11691:5685":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:46951:7885":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:14933:6157":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:2406:5505":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:41339:7743":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:7826:10006":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"16:8179:7139":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:10792:122":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:42920:10671":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:45578:9603":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:8090:10668":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11034:33533":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:4114:10816":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13006:5848":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6111:6814":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:14346:6054":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:16264:6551":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:23577:9588":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:45550:9596":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3447:8042":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12886:5834":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:2327:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"9:422:22478":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:16026:6467":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14127:6005":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:6781:6928":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4842:8639":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:5579:16088":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:43553:7634":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:3933:7412":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:8223:7141":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:46782:7869":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:680:8015":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11653:5682":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:4350:10841":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:3404:8040":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"14:0:4378":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:1386:7316":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:14963:6163":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:3621:8045":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:10487:10498":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:12073:30873":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:7030:6957":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13958:5962":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:2792:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:7186:10936":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:9323:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:4152:6772":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:43930:7168":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:41651:4940":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:2087:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:44848:7644":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:13633:5468":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:3866:7416":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:4781:4510":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11114:5650":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"9:328:8372":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:3783:4809":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:7094:16132":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:4875:8663":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8376:2904":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:4529:9605":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:15586:6361":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:9576:7627":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"6:4997:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12293:5755":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:7372:6753":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:6740:9174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:15315:6220":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:14019:5973":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:10246:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:5460:7600":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:8014:9393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:4826:9289":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:12191:5741":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:10800:4543":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:46752:7865":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:7448:9303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:6573:6883":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:7332:9262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:2295:9582":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:44702:4919":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:45418:7844":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8024:8013":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:364:10391":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:4860:4512":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13451:5878":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:44715:7811":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:6462:9042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5366:8845":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4805:8611":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"}},"external_crates":{"20":{"name":"smawk","html_root_url":"https://docs.rs/smawk/0.3.2/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_linebreak","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_width","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}