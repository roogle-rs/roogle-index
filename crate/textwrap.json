{"root":"0:0:2741","crate_version":"0.16.0","includes_private":false,"index":{"0:19:1035":{"id":"0:19:1035","crate_id":0,"name":"new","span":{"filename":"src/word_separators.rs","begin":[176,4],"end":[186,5]},"visibility":"public","docs":"Create a new word separator.\n\nThe best available algorithm is used by default, i.e.,\n[`WordSeparator::UnicodeBreakProperties`] if available,\notherwise [`WordSeparator::AsciiSpace`].","links":{"`WordSeparator::UnicodeBreakProperties`":"0:177:2498","`WordSeparator::AsciiSpace`":"0:175:2430"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2419-0:219:1928":{"id":"b:2:2419-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2421:1919"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[226,0],"end":[232,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3164:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:121:255","0:122:595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:244:716":{"id":"0:244:716","crate_id":0,"name":"fmt","span":{"filename":"src/line_ending.rs","begin":[7,22],"end":[7,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9913:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9894:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:1035":{"id":"0:145:1035","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[313,4],"end":[324,5]},"visibility":"public","docs":"Creates a new [`Options`] with the specified width.\n\nThe other fields are given default values as follows:\n\n```\n# use textwrap::{LineEnding, Options, WordSplitter, WordSeparator, WrapAlgorithm};\n# let width = 80;\nlet options = Options::new(width);\nassert_eq!(options.line_ending, LineEnding::LF);\nassert_eq!(options.initial_indent, \"\");\nassert_eq!(options.subsequent_indent, \"\");\nassert_eq!(options.break_words, true);\n\n#[cfg(feature = \"unicode-linebreak\")]\nassert_eq!(options.word_separator, WordSeparator::UnicodeBreakProperties);\n#[cfg(not(feature = \"unicode-linebreak\"))]\nassert_eq!(options.word_separator, WordSeparator::AsciiSpace);\n\n#[cfg(feature = \"smawk\")]\nassert_eq!(options.wrap_algorithm, WrapAlgorithm::new_optimal_fit());\n#[cfg(not(feature = \"smawk\"))]\nassert_eq!(options.wrap_algorithm, WrapAlgorithm::FirstFit);\n\nassert_eq!(options.word_splitter, WordSplitter::HyphenSplitter);\n```\n\nNote that the default word separator and wrap algorithms\nchanges based on the available Cargo features. The best\navailable algorithms are used by default.","links":{"`Options`":"0:287:1933"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["width",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:263:2328":{"id":"b:5:687-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:689:2336","5:690:2337","5:691:4204"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12862:29533":{"id":"2:12862:29533","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12503:15598","`DoubleEndedIterator`":"2:7895:127","prim@char":"1:12032:450","str::split":"2:12856:2315"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43932:7717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:209:3221":{"id":"b:2:2726-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,27],"end":[185,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,40],"end":[214,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2942:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8989:10371-0:195:3222":{"id":"a:2:8989:10371-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8989:10371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:42:660":{"id":"0:42:660","crate_id":0,"name":"eq","span":{"filename":"src/word_splitters.rs","begin":[114,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:1980":{"id":"0:238:1980","crate_id":0,"name":"LF","span":{"filename":"src/line_ending.rs","begin":[15,4],"end":[15,6]},"visibility":"default","docs":"_Line feed_ – a line ending historically used in Unix.\n Corresponds to the ASCII control character `0x0A` or `\\n`","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:131:1936":{"id":"0:131:1936","crate_id":0,"name":"width","span":{"filename":"src/core.rs","begin":[306,4],"end":[308,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12823:29499":{"id":"2:12823:29499","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:2108":{"id":"2:12915:2108","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:174:1924":{"id":"b:2:2726-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5809-0:209:3221":{"id":"b:5:5809-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9943:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:299:716":{"id":"0:299:716","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[233,9],"end":[233,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9913:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9894:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:3489":{"id":"0:200:3489","crate_id":0,"name":"hyphen_penalty","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[131,4],"end":[131,29]},"visibility":"public","docs":"Penalty for lines ending with a hyphen.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:10-0:5:1922":{"id":"0:10-0:5:1922","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[210,37],"end":[210,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::indentation::indent","name":"indent","id":"0:5:1922","glob":false}}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[170,0],"end":[200,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:19:1035","0:20:2324"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2726-0:185:1926":{"id":"b:2:2726-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2726-0:219:1928":{"id":"b:2:2726-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:219:1928":{"id":"0:219:1928","crate_id":0,"name":"WrapAlgorithm","span":{"filename":"src/wrap_algorithms.rs","begin":[34,0],"end":[88,1]},"visibility":"public","docs":"Describes how to wrap words into lines.\n\nThe simplest approach is to wrap words one word at a time and\naccept the first way of wrapping which fit\n([`WrapAlgorithm::FirstFit`]). If the `smawk` Cargo feature is\nenabled, a more complex algorithm is available which will look at\nan entire paragraph at a time in order to find optimal line breaks\n([`WrapAlgorithm::OptimalFit`]).","links":{"`WrapAlgorithm::OptimalFit`":"0:222:3243","`WrapAlgorithm::FirstFit`":"0:220:2460"},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:220:2460","0:222:3243","0:225:3006"],"impls":["0:86","a:2:8989:10371-0:219:1928","a:2:2988:3962-0:219:1928","a:2:8988:10181-0:219:1928","a:2:2948:253-0:219:1928","a:2:2931:243-0:219:1928","b:2:2722-0:219:1928","b:2:2422-0:219:1928","b:2:3565-0:219:1928","b:2:2732-0:219:1928","b:2:2419-0:219:1928","b:2:2726-0:219:1928","b:2:2737-0:219:1928","b:5:687-0:219:1928","0:230","0:84","0:93","0:234","0:82"]}}},"a:2:8988:10181-0:235:1930":{"id":"a:2:8988:10181-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8988:10181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3565-0:235:1930":{"id":"b:2:3565-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:181:1749":{"id":"0:181:1749","crate_id":0,"name":"0","span":{"filename":"src/word_separators.rs","begin":[122,11],"end":[122,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"function_pointer":{"decl":{"inputs":[["line",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:3007","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Iterator","id":"2:8004:175","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"crate::core::Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}}}},"0:242":{"id":"0:242","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,16],"end":[7,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2943:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:146:1929":{"id":"0:146:1929","crate_id":0,"name":"line_ending","span":{"filename":"src/lib.rs","begin":[363,4],"end":[368,5]},"visibility":"public","docs":"Change [`self.line_ending`]. This specifies which of the\nsupported line endings should be used to break the lines of the\ninput text.\n\n# Examples\n\n```\nuse textwrap::{refill, LineEnding, Options};\n\nlet options = Options::new(15).line_ending(LineEnding::CRLF);\nassert_eq!(refill(\"This is a little example.\", options),\n           \"This is a\\r\\nlittle example.\");\n```\n\n[`self.line_ending`]: #structfield.line_ending","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["line_ending",{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195:3222":{"id":"0:195:3222","crate_id":0,"name":"Penalties","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[23,0],"end":[132,1]},"visibility":"public","docs":"Penalties for\n[`WrapAlgorithm::OptimalFit`](crate::WrapAlgorithm::OptimalFit)\nand [`wrap_optimal_fit`].\n\nThis wrapping algorithm in [`wrap_optimal_fit`] considers the\nentire paragraph to find optimal line breaks. When wrapping text,\n\"penalties\" are assigned to line breaks based on the gaps left at\nthe end of lines. The penalties are given by this struct, with\n[`Penalties::default`] assigning penalties that work well for\nmonospace text.\n\nIf you are wrapping proportional text, you are advised to assign\nyour own penalties according to your font size. See the individual\npenalties below for details.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"crate::WrapAlgorithm::OptimalFit":"0:222:3243","`wrap_optimal_fit`":"0:70:3220","`Penalties::default`":"0:60:60"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:196:3421","0:197:3452","0:198:3484","0:199:3487","0:200:3489"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:57","a:2:8989:10371-0:195:3222","a:2:2988:3962-0:195:3222","a:2:8988:10181-0:195:3222","a:2:2948:253-0:195:3222","a:2:2931:243-0:195:3222","b:2:2722-0:195:3222","b:2:2422-0:195:3222","b:2:3565-0:195:3222","b:2:2732-0:195:3222","b:2:2419-0:195:3222","b:2:2726-0:195:3222","b:2:2737-0:195:3222","b:5:687-0:195:3222","0:201","0:207","0:206","0:203","0:204","0:59"]}}},"2:12809:34352":{"id":"2:12809:34352","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12832:2170":{"id":"2:12832:2170","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43890:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:2434":{"id":"2:12833:2434","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43900:5648","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,29],"end":[7,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2941:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:687-0:235:1930":{"id":"b:5:687-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2336","5:690:2337","5:691:4204"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2421:1919":{"id":"2:2421:1919","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3565-0:287:1933":{"id":"b:2:3565-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,9],"end":[185,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9938:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:212:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12829:2900":{"id":"2:12829:2900","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12830:29523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:2115":{"id":"0:161:2115","crate_id":0,"name":"wrap","span":{"filename":"src/lib.rs","begin":[989,0],"end":[1002,1]},"visibility":"public","docs":"Wrap a line of text at a given width.\n\nThe result is a vector of lines, each line is of type [`Cow<'_,\nstr>`](Cow), which means that the line will borrow from the input\n`&str` if possible. The lines do not have trailing whitespace,\nincluding a final `'\\n'`. Please use the [`fill`] function if you\nneed a [`String`] instead.\n\nThe easiest way to use this function is to pass an integer for\n`width_or_options`:\n\n```\nuse textwrap::wrap;\n\nlet lines = wrap(\"Memory safety without garbage collection.\", 15);\nassert_eq!(lines, &[\n    \"Memory safety\",\n    \"without garbage\",\n    \"collection.\",\n]);\n```\n\nIf you need to customize the wrapping, you can pass an [`Options`]\ninstead of an `usize`:\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(15)\n    .initial_indent(\"- \")\n    .subsequent_indent(\"  \");\nlet lines = wrap(\"Memory safety without garbage collection.\", &options);\nassert_eq!(lines, &[\n    \"- Memory safety\",\n    \"  without\",\n    \"  garbage\",\n    \"  collection.\",\n]);\n```\n\n# Optimal-Fit Wrapping\n\nBy default, `wrap` will try to ensure an even right margin by\nfinding breaks which avoid short lines. We call this an\n“optimal-fit algorithm” since the line breaks are computed by\nconsidering all possible line breaks. The alternative is a\n“first-fit algorithm” which simply accumulates words until they no\nlonger fit on the line.\n\nAs an example, using the first-fit algorithm to wrap the famous\nHamlet quote “To be, or not to be: that is the question” in a\nnarrow column with room for only 10 characters looks like this:\n\n```\n# use textwrap::{WrapAlgorithm::FirstFit, Options, wrap};\n#\n# let lines = wrap(\"To be, or not to be: that is the question\",\n#                  Options::new(10).wrap_algorithm(FirstFit));\n# assert_eq!(lines.join(\"\\n\") + \"\\n\", \"\\\nTo be, or\nnot to be:\nthat is\nthe\nquestion\n# \");\n```\n\nNotice how the second to last line is quite narrow because\n“question” was too large to fit? The greedy first-fit algorithm\ndoesn’t look ahead, so it has no other option than to put\n“question” onto its own line.\n\nWith the optimal-fit wrapping algorithm, the previous lines are\nshortened slightly in order to make the word “is” go into the\nsecond last line:\n\n```\n# #[cfg(feature = \"smawk\")] {\n# use textwrap::{Options, WrapAlgorithm, wrap};\n#\n# let lines = wrap(\n#     \"To be, or not to be: that is the question\",\n#     Options::new(10).wrap_algorithm(WrapAlgorithm::new_optimal_fit())\n# );\n# assert_eq!(lines.join(\"\\n\") + \"\\n\", \"\\\nTo be,\nor not to\nbe: that\nis the\nquestion\n# \"); }\n```\n\nPlease see [`WrapAlgorithm`] for details on the choices.\n\n# Examples\n\nThe returned iterator yields lines of type `Cow<'_, str>`. If\npossible, the wrapped lines will borrow from the input string. As\nan example, a hanging indentation, the first line can borrow from\nthe input, but the subsequent lines become owned strings:\n\n```\nuse std::borrow::Cow::{Borrowed, Owned};\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(15).subsequent_indent(\"....\");\nlet lines = wrap(\"Wrapping text all day long.\", &options);\nlet annotated = lines\n    .iter()\n    .map(|line| match line {\n        Borrowed(text) => format!(\"[Borrowed] {}\", text),\n        Owned(text) => format!(\"[Owned]    {}\", text),\n    })\n    .collect::<Vec<_>>();\nassert_eq!(\n    annotated,\n    &[\n        \"[Borrowed] Wrapping text\",\n        \"[Owned]    ....all day\",\n        \"[Owned]    ....long.\",\n    ]\n);\n```\n\n## Leading and Trailing Whitespace\n\nAs a rule, leading whitespace (indentation) is preserved and\ntrailing whitespace is discarded.\n\nIn more details, when wrapping words into lines, words are found\nby splitting the input text on space characters. One or more\nspaces (shown here as “␣”) are attached to the end of each word:\n\n```text\n\"Foo␣␣␣bar␣baz\" -> [\"Foo␣␣␣\", \"bar␣\", \"baz\"]\n```\n\nThese words are then put into lines. The interword whitespace is\npreserved, unless the lines are wrapped so that the `\"Foo␣␣␣\"`\nword falls at the end of a line:\n\n```\nuse textwrap::wrap;\n\nassert_eq!(wrap(\"Foo   bar baz\", 10), vec![\"Foo   bar\", \"baz\"]);\nassert_eq!(wrap(\"Foo   bar baz\", 8), vec![\"Foo\", \"bar baz\"]);\n```\n\nNotice how the trailing whitespace is removed in both case: in the\nfirst example, `\"bar␣\"` becomes `\"bar\"` and in the second case\n`\"Foo␣␣␣\"` becomes `\"Foo\"`.\n\nLeading whitespace is preserved when the following word fits on\nthe first line. To understand this, consider how words are found\nin a text with leading spaces:\n\n```text\n\"␣␣foo␣bar\" -> [\"␣␣\", \"foo␣\", \"bar\"]\n```\n\nWhen put into lines, the indentation is preserved if `\"foo\"` fits\non the first line, otherwise you end up with an empty line:\n\n```\nuse textwrap::wrap;\n\nassert_eq!(wrap(\"  foo bar\", 8), vec![\"  foo\", \"bar\"]);\nassert_eq!(wrap(\"  foo bar\", 4), vec![\"\", \"foo\", \"bar\"]);\n```","links":{"`Options`":"0:287:1933","Cow":"5:692:116","`WrapAlgorithm`":"0:219:1928","`fill`":"0:153:2101","`String`":"5:7534:249"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["width_or_options",{"generic":"Opt"}]],"output":{"resolved_path":{"name":"Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::borrow::Cow","id":"5:692:116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Opt"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292:1943":{"id":"0:292:1943","crate_id":0,"name":"subsequent_indent","span":{"filename":"src/lib.rs","begin":[244,4],"end":[244,34]},"visibility":"public","docs":"Indentation used for subsequent lines of output. See the\n[`Options::subsequent_indent`] method.","links":{"`Options::subsequent_indent`":"0:148:1943"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"2:12839:2105":{"id":"2:12839:2105","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12901:34363":{"id":"2:12901:34363","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:30692":{"id":"2:12931:30692","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:36499"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2324":{"id":"0:20:2324","crate_id":0,"name":"find_words","span":{"filename":"src/word_separators.rs","begin":[192,4],"end":[199,5]},"visibility":"public","docs":"Find all words in `line`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["line",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:3007","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Iterator","id":"2:8004:175","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2449":{"id":"0:44:2449","crate_id":0,"name":"split_points","span":{"filename":"src/word_splitters.rs","begin":[143,4],"end":[172,5]},"visibility":"public","docs":"Return all possible indices where `word` can be split.\n\nThe indices are in the range `0..word.len()`. They point to\nthe index _after_ the split point, i.e., after `-` if\nsplitting on hyphens. This way, `word.split_at(idx)` will\nbreak the word into two well-formed pieces.\n\n# Examples\n\n```\nuse textwrap::WordSplitter;\nassert_eq!(WordSplitter::NoHyphenation.split_points(\"cannot-be-split\"), vec![]);\nassert_eq!(WordSplitter::HyphenSplitter.split_points(\"can-be-split\"), vec![4, 7]);\nassert_eq!(WordSplitter::Custom(|word| vec![word.len()/2]).split_points(\"middle\"), vec![3]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["word",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78-0:195:3222":{"id":"0:78-0:195:3222","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[21,55],"end":[21,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"import":{"source":"optimal_fit::Penalties","name":"Penalties","id":"0:195:3222","glob":false}}},"0:169:2377":{"id":"0:169:2377","crate_id":0,"name":"wrap_columns","span":{"filename":"src/lib.rs","begin":[1156,0],"end":[1207,1]},"visibility":"public","docs":"Wrap text into columns with a given total width.\n\nThe `left_gap`, `middle_gap` and `right_gap` arguments specify the\nstrings to insert before, between, and after the columns. The\ntotal width of all columns and all gaps is specified using the\n`total_width_or_options` argument. This argument can simply be an\ninteger if you want to use default settings when wrapping, or it\ncan be a [`Options`] value if you want to customize the wrapping.\n\nIf the columns are narrow, it is recommended to set\n[`Options::break_words`] to `true` to prevent words from\nprotruding into the margins.\n\nThe per-column width is computed like this:\n\n```\n# let (left_gap, middle_gap, right_gap) = (\"\", \"\", \"\");\n# let columns = 2;\n# let options = textwrap::Options::new(80);\nlet inner_width = options.width\n    - textwrap::core::display_width(left_gap)\n    - textwrap::core::display_width(right_gap)\n    - textwrap::core::display_width(middle_gap) * (columns - 1);\nlet column_width = inner_width / columns;\n```\n\nThe `text` is wrapped using [`wrap`] and the given `options`\nargument, but the width is overwritten to the computed\n`column_width`.\n\n# Panics\n\nPanics if `columns` is zero.\n\n# Examples\n\n```\nuse textwrap::wrap_columns;\n\nlet text = \"\\\nThis is an example text, which is wrapped into three columns. \\\nNotice how the final column can be shorter than the others.\";\n\n#[cfg(feature = \"smawk\")]\nassert_eq!(wrap_columns(text, 3, 50, \"| \", \" | \", \" |\"),\n           vec![\"| This is       | into three    | column can be  |\",\n                \"| an example    | columns.      | shorter than   |\",\n                \"| text, which   | Notice how    | the others.    |\",\n                \"| is wrapped    | the final     |                |\"]);\n\n// Without the `smawk` feature, the middle column is a little more uneven:\n#[cfg(not(feature = \"smawk\"))]\nassert_eq!(wrap_columns(text, 3, 50, \"| \", \" | \", \" |\"),\n           vec![\"| This is an    | three         | column can be  |\",\n                \"| example text, | columns.      | shorter than   |\",\n                \"| which is      | Notice how    | the others.    |\",\n                \"| wrapped into  | the final     |                |\"]);","links":{"`Options::break_words`":"0:149:1947","`wrap`":"0:161:2115","`Options`":"0:287:1933"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["columns",{"primitive":"usize"}],["total_width_or_options",{"generic":"Opt"}],["left_gap",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["middle_gap",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["right_gap",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Opt"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:2338":{"id":"0:267:2338","crate_id":0,"name":"penalty","span":{"filename":"src/core.rs","begin":[221,4],"end":[221,24]},"visibility":"public","docs":"Penalty string to insert if the word falls at the end of a line.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"0:289:1936":{"id":"0:289:1936","crate_id":0,"name":"width","span":{"filename":"src/lib.rs","begin":[236,4],"end":[236,20]},"visibility":"public","docs":"The width in columns at which the text will be wrapped.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:139:743":{"id":"0:139:743","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[263,4],"end":[274,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["options",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,16],"end":[214,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2943:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2732-0:287:1933":{"id":"b:2:2732-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:158:2206":{"id":"0:158:2206","crate_id":0,"name":"refill","span":{"filename":"src/lib.rs","begin":[798,0],"end":[817,1]},"visibility":"public","docs":"Refill a paragraph of wrapped text with a new width.\n\nThis function will first use the [`unfill`] function to remove\nnewlines from the text. Afterwards the text is filled again using\nthe [`fill`] function.\n\nThe `new_width_or_options` argument specify the new width and can\nspecify other options as well — except for\n[`Options::initial_indent`] and [`Options::subsequent_indent`],\nwhich are deduced from `filled_text`.\n\n# Examples\n\n```\nuse textwrap::refill;\n\n// Some loosely wrapped text. The \"> \" prefix is recognized automatically.\nlet text = \"\\\n> Memory\n> safety without garbage\n> collection.\n\";\n\nassert_eq!(refill(text, 20), \"\\\n> Memory safety\n> without garbage\n> collection.\n\");\n\nassert_eq!(refill(text, 40), \"\\\n> Memory safety without garbage\n> collection.\n\");\n\nassert_eq!(refill(text, 60), \"\\\n> Memory safety without garbage collection.\n\");\n```\n\nYou can also reshape bullet points:\n\n```\nuse textwrap::refill;\n\nlet text = \"\\\n- This is my\n  list item.\n\";\n\nassert_eq!(refill(text, 20), \"\\\n- This is my list\n  item.\n\");\n```","links":{"`Options::subsequent_indent`":"0:148:1943","`fill`":"0:153:2101","`unfill`":"0:157:2153","`Options::initial_indent`":"0:147:1940"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["filled_text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["new_width_or_options",{"generic":"Opt"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Opt"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12817:339":{"id":"2:12817:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12818:29501","`u8`":"1:12049:1639"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:34368":{"id":"2:12924:34368","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12464:133","`FromStr`":"2:12463:10382"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42161:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12463:10382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12463:10382","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[262,0],"end":[275,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:139:743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12897:34362":{"id":"2:12897:34362","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1927":{"id":"0:53:1927","crate_id":0,"name":"wrap_algorithms","span":{"filename":"src/wrap_algorithms.rs","begin":[1,0],"end":[411,1]},"visibility":"public","docs":"Word wrapping algorithms.\n\nAfter a text has been broken into words (or [`Fragment`]s), one\nnow has to decide how to break the fragments into lines. The\nsimplest algorithm for this is implemented by [`wrap_first_fit`]:\nit uses no look-ahead and simply adds fragments to the line as\nlong as they fit. However, this can lead to poor line breaks if a\nlarge fragment almost-but-not-quite fits on a line. When that\nhappens, the fragment is moved to the next line and it will leave\nbehind a large gap. A more advanced algorithm, implemented by\n[`wrap_optimal_fit`], will take this into account. The optimal-fit\nalgorithm considers all possible line breaks and will attempt to\nminimize the gaps left behind by overly short lines.\n\nWhile both algorithms run in linear time, the first-fit algorithm\nis about 4 times faster than the optimal-fit algorithm.","links":{"`Fragment`":"0:116:3223","`wrap_optimal_fit`":"0:70:3220","`wrap_first_fit`":"0:95:2431"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:76-0:70:3220","0:77-0:209:3221","0:78-0:195:3222","0:219:1928","0:95:2431"],"is_stripped":false}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,16],"end":[185,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2941:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[134,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:58:1035"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:277":{"id":"0:277","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,29],"end":[214,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2941:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2741":{"id":"0:0:2741","crate_id":0,"name":"textwrap","span":{"filename":"src/lib.rs","begin":[1,0],"end":[2058,1]},"visibility":"public","docs":"The textwrap library provides functions for word wrapping and\nindenting text.\n\n# Wrapping Text\n\nWrapping text can be very useful in command-line programs where\nyou want to format dynamic output nicely so it looks good in a\nterminal. A quick example:\n\n```\n# #[cfg(feature = \"smawk\")] {\nlet text = \"textwrap: a small library for wrapping text.\";\nassert_eq!(textwrap::wrap(text, 18),\n           vec![\"textwrap: a\",\n                \"small library for\",\n                \"wrapping text.\"]);\n# }\n```\n\nThe [`wrap`] function returns the individual lines, use [`fill`]\nis you want the lines joined with `'\\n'` to form a `String`.\n\nIf you enable the `hyphenation` Cargo feature, you can get\nautomatic hyphenation for a number of languages:\n\n```\n#[cfg(feature = \"hyphenation\")] {\nuse hyphenation::{Language, Load, Standard};\nuse textwrap::{wrap, Options, WordSplitter};\n\nlet text = \"textwrap: a small library for wrapping text.\";\nlet dictionary = Standard::from_embedded(Language::EnglishUS).unwrap();\nlet options = Options::new(18).word_splitter(WordSplitter::Hyphenation(dictionary));\nassert_eq!(wrap(text, &options),\n           vec![\"textwrap: a small\",\n                \"library for wrap-\",\n                \"ping text.\"]);\n}\n```\n\nSee also the [`unfill`] and [`refill`] functions which allow you to\nmanipulate already wrapped text.\n\n## Wrapping Strings at Compile Time\n\nIf your strings are known at compile time, please take a look at\nthe procedural macros from the [textwrap-macros] crate.\n\n## Displayed Width vs Byte Size\n\nTo word wrap text, one must know the width of each word so one can\nknow when to break lines. This library will by default measure the\nwidth of text using the _displayed width_, not the size in bytes.\nThe `unicode-width` Cargo feature controls this.\n\nThis is important for non-ASCII text. ASCII characters such as `a`\nand `!` are simple and take up one column each. This means that\nthe displayed width is equal to the string length in bytes.\nHowever, non-ASCII characters and symbols take up more than one\nbyte when UTF-8 encoded: `é` is `0xc3 0xa9` (two bytes) and `⚙` is\n`0xe2 0x9a 0x99` (three bytes) in UTF-8, respectively.\n\nThis is why we take care to use the displayed width instead of the\nbyte count when computing line lengths. All functions in this\nlibrary handle Unicode characters like this when the\n`unicode-width` Cargo feature is enabled (it is enabled by\ndefault).\n\n# Indentation and Dedentation\n\nThe textwrap library also offers functions for adding a prefix to\nevery line of a string and to remove leading whitespace. As an\nexample, the [`indent`] function allows you to turn lines of text\ninto a bullet list:\n\n```\nlet before = \"\\\nfoo\nbar\nbaz\n\";\nlet after = \"\\\n* foo\n* bar\n* baz\n\";\nassert_eq!(textwrap::indent(before, \"* \"), after);\n```\n\nRemoving leading whitespace is done with [`dedent`]:\n\n```\nlet before = \"\n    Some\n      indented\n        text\n\";\nlet after = \"\nSome\n  indented\n    text\n\";\nassert_eq!(textwrap::dedent(before), after);\n```\n\n# Cargo Features\n\nThe textwrap library can be slimmed down as needed via a number of\nCargo features. This means you only pay for the features you\nactually use.\n\nThe full dependency graph, where dashed lines indicate optional\ndependencies, is shown below:\n\n<img src=\"https://raw.githubusercontent.com/mgeisler/textwrap/master/images/textwrap-0.16.0.svg\">\n\n## Default Features\n\nThese features are enabled by default:\n\n* `unicode-linebreak`: enables finding words using the\n  [unicode-linebreak] crate, which implements the line breaking\n  algorithm described in [Unicode Standard Annex\n  #14](https://www.unicode.org/reports/tr14/).\n\n  This feature can be disabled if you are happy to find words\n  separated by ASCII space characters only. People wrapping text\n  with emojis or East-Asian characters will want most likely want\n  to enable this feature. See [`WordSeparator`] for details.\n\n* `unicode-width`: enables correct width computation of non-ASCII\n  characters via the [unicode-width] crate. Without this feature,\n  every [`char`] is 1 column wide, except for emojis which are 2\n  columns wide. See the [`core::display_width`] function for\n  details.\n\n  This feature can be disabled if you only need to wrap ASCII\n  text, or if the functions in [`core`] are used directly with\n  [`core::Fragment`]s for which the widths have been computed in\n  other ways.\n\n* `smawk`: enables linear-time wrapping of the whole paragraph via\n  the [smawk] crate. See the [`wrap_algorithms::wrap_optimal_fit`]\n  function for details on the optimal-fit algorithm.\n\n  This feature can be disabled if you only ever intend to use\n  [`wrap_algorithms::wrap_first_fit`].\n\n<!-- begin binary-sizes -->\n\nWith Rust 1.64.0, the size impact of the above features on your\nbinary is as follows:\n\n| Configuration                            |  Binary Size |    Delta |\n| :---                                     |         ---: |     ---: |\n| quick-and-dirty implementation           |       289 KB |     — KB |\n| textwrap without default features        |       305 KB |    16 KB |\n| textwrap with smawk                      |       317 KB |    28 KB |\n| textwrap with unicode-width              |       309 KB |    20 KB |\n| textwrap with unicode-linebreak          |       342 KB |    53 KB |\n\n<!-- end binary-sizes -->\n\nThe above sizes are the stripped sizes and the binary is compiled\nin release mode with this profile:\n\n```toml\n[profile.release]\nlto = true\ncodegen-units = 1\n```\n\nSee the [binary-sizes demo] if you want to reproduce these\nresults.\n\n## Optional Features\n\nThese Cargo features enable new functionality:\n\n* `terminal_size`: enables automatic detection of the terminal\n  width via the [terminal_size] crate. See the\n  [`Options::with_termwidth`] constructor for details.\n\n* `hyphenation`: enables language-sensitive hyphenation via the\n  [hyphenation] crate. See the [`word_splitters::WordSplitter`]\n  trait for details.\n\n[unicode-linebreak]: https://docs.rs/unicode-linebreak/\n[unicode-width]: https://docs.rs/unicode-width/\n[smawk]: https://docs.rs/smawk/\n[binary-sizes demo]: https://github.com/mgeisler/textwrap/tree/master/examples/binary-sizes\n[textwrap-macros]: https://docs.rs/textwrap-macros/\n[terminal_size]: https://docs.rs/terminal_size/\n[hyphenation]: https://docs.rs/hyphenation/","links":{"`dedent`":"0:6:1921","`char`":"1:12032:450","`core::display_width`":"0:115:2164","`refill`":"0:158:2206","`wrap_algorithms::wrap_optimal_fit`":"0:70:3220","`WordSeparator`":"0:174:1924","`fill`":"0:153:2101","`wrap`":"0:161:2115","`indent`":"0:5:1922","`unfill`":"0:157:2153","`core::Fragment`":"0:116:3223","`wrap_algorithms::wrap_first_fit`":"0:95:2431","`word_splitters::WordSplitter`":"0:185:1926","`core`":"0:109:532"},"attrs":["#![doc(html_root_url = \"https://docs.rs/textwrap/0.16.0\")]","#![forbid(unsafe_code)]","#![deny(missing_docs)]","#![deny(missing_debug_implementations)]","#![allow(clippy::redundant_field_names)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:35:1925","0:53:1927","0:109:532","0:9-0:6:1921","0:10-0:5:1922","0:34-0:174:1924","0:52-0:185:1926","0:99-0:219:1928","0:108-0:235:1930","0:287:1933","0:153:2101","0:157:2153","0:158:2206","0:161:2115","0:169:2377","0:172:2428"],"is_stripped":false}}},"2:12929:29318":{"id":"2:12929:29318","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:3223":{"id":"0:116:3223","crate_id":0,"name":"Fragment","span":{"filename":"src/core.rs","begin":[197,0],"end":[208,1]},"visibility":"public","docs":"A (text) fragment denotes the unit which we wrap into lines.\n\nFragments represent an abstract _word_ plus the _whitespace_\nfollowing the word. In case the word falls at the end of the line,\nthe whitespace is dropped and a so-called _penalty_ is inserted\ninstead (typically `\"-\"` if the word was hyphenated).\n\nFor wrapping purposes, the precise content of the word, the\nwhitespace, and the penalty is irrelevant. All we need to know is\nthe displayed width of each part, which this trait provides.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:117:1936","0:118:3396","0:119:3395"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"std::fmt::Debug","id":"2:9938:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:130"]}}},"a:2:8989:10371-0:209:3221":{"id":"a:2:8989:10371-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8989:10371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:281:660":{"id":"0:281:660","crate_id":0,"name":"eq","span":{"filename":"src/core.rs","begin":[214,29],"end":[214,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236:2178":{"id":"0:236:2178","crate_id":0,"name":"CRLF","span":{"filename":"src/line_ending.rs","begin":[12,4],"end":[12,8]},"visibility":"default","docs":"_Carriage return and line feed_ – a line ending sequence\nhistorically used in Windows. Corresponds to the sequence\nof ASCII control characters `0x0D 0x0A` or `\\r\\n`","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12812:34354":{"id":"2:12812:34354","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12810:34353"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:32800":{"id":"2:12838:32800","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44206:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:660":{"id":"0:15:660","crate_id":0,"name":"eq","span":{"filename":"src/word_separators.rs","begin":[149,4],"end":[156,5]},"visibility":"default","docs":"Compare two word separators.\n\n```\nuse textwrap::WordSeparator;\n\nassert_eq!(WordSeparator::AsciiSpace, WordSeparator::AsciiSpace);\n#[cfg(feature = \"unicode-linebreak\")] {\n    assert_eq!(WordSeparator::UnicodeBreakProperties,\n               WordSeparator::UnicodeBreakProperties);\n}\n```\n\nNote that `WordSeparator::Custom` values never compare equal:\n\n```\nuse textwrap::WordSeparator;\nuse textwrap::core::Word;\nfn word_separator(line: &str) -> Box<dyn Iterator<Item = Word<'_>> + '_> {\n    Box::new(line.split_inclusive(' ').map(Word::from))\n}\nassert_ne!(WordSeparator::Custom(word_separator),\n           WordSeparator::Custom(word_separator));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[188,0],"end":[192,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9943:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:177:2498":{"id":"0:177:2498","crate_id":0,"name":"UnicodeBreakProperties","span":{"filename":"src/word_separators.rs","begin":[119,4],"end":[119,26]},"visibility":"default","docs":"Split `line` into words using Unicode break properties.\n\nThis word separator uses the Unicode line breaking algorithm\ndescribed in [Unicode Standard Annex\n#14](https://www.unicode.org/reports/tr14/) to find legal places\nto break lines. There is a small difference in that the U+002D\n(Hyphen-Minus) and U+00AD (Soft Hyphen) don’t create a line break:\nto allow a line break at a hyphen, use\n[`WordSplitter::HyphenSplitter`](crate::WordSplitter::HyphenSplitter).\nSoft hyphens are not currently supported.\n\n# Examples\n\nUnlike [`WordSeparator::AsciiSpace`], the Unicode line\nbreaking algorithm will find line break opportunities between\nsome characters with no intervening whitespace:\n\n```\n#[cfg(feature = \"unicode-linebreak\")] {\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::UnicodeBreakProperties;\n\nassert_eq!(UnicodeBreakProperties.find_words(\"Emojis: 😂😍\").collect::<Vec<_>>(),\n           vec![Word::from(\"Emojis: \"),\n                Word::from(\"😂\"),\n                Word::from(\"😍\")]);\n\nassert_eq!(UnicodeBreakProperties.find_words(\"CJK: 你好\").collect::<Vec<_>>(),\n           vec![Word::from(\"CJK: \"),\n                Word::from(\"你\"),\n                Word::from(\"好\")]);\n}\n```\n\nA U+2060 (Word Joiner) character can be inserted if you want to\nmanually override the defaults and keep the characters together:\n\n```\n#[cfg(feature = \"unicode-linebreak\")] {\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::UnicodeBreakProperties;\n\nassert_eq!(UnicodeBreakProperties.find_words(\"Emojis: 😂\\u{2060}😍\").collect::<Vec<_>>(),\n           vec![Word::from(\"Emojis: \"),\n                Word::from(\"😂\\u{2060}😍\")]);\n}\n```\n\nThe Unicode line breaking algorithm will also automatically\nsuppress break breaks around certain punctuation characters::\n\n```\n#[cfg(feature = \"unicode-linebreak\")] {\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::UnicodeBreakProperties;\n\nassert_eq!(UnicodeBreakProperties.find_words(\"[ foo ] bar !\").collect::<Vec<_>>(),\n           vec![Word::from(\"[ foo ] \"),\n                Word::from(\"bar !\")]);\n}\n```","links":{"`WordSeparator::AsciiSpace`":"0:175:2430","crate::WordSplitter::HyphenSplitter":"0:188:1981"},"attrs":["#[cfg(feature = \"unicode-linebreak\")]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,29],"end":[7,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2482:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:247:660"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8988:10181-0:263:2328":{"id":"a:2:8988:10181-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8988:10181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:52-0:185:1926":{"id":"0:52-0:185:1926","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[216,0],"end":[216,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"word_splitters::WordSplitter","name":"WordSplitter","id":"0:185:1926","glob":false}}},"a:2:8988:10181-0:287:1933":{"id":"a:2:8988:10181-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8988:10181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:287:1933":{"id":"0:287:1933","crate_id":0,"name":"Options","span":{"filename":"src/lib.rs","begin":[234,0],"end":[260,1]},"visibility":"public","docs":"Holds configuration options for wrapping and filling text.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:289:1936","0:290:1929","0:291:1940","0:292:1943","0:293:1947","0:294:1950","0:295:1954","0:296:1958"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:143","a:2:8989:10371-0:287:1933","a:2:2988:3962-0:287:1933","a:2:8988:10181-0:287:1933","a:2:2948:253-0:287:1933","a:2:2931:243-0:287:1933","b:2:2722-0:287:1933","b:2:2422-0:287:1933","b:2:3565-0:287:1933","b:2:2732-0:287:1933","b:2:2419-0:287:1933","b:2:2726-0:287:1933","b:2:2737-0:287:1933","b:5:687-0:287:1933","0:300","0:137","0:297","0:140"]}}},"b:2:2422-0:219:1928":{"id":"b:2:2422-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2424:3502"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12930:29317":{"id":"2:12930:29317","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:35046":{"id":"5:5552:35046","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:3007","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:3007","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:34364":{"id":"2:12902:34364","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:29523":{"id":"2:12830:29523","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12829:2900"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12842:2898":{"id":"2:12842:2898","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2988:3962-0:185:1926":{"id":"a:2:2988:3962-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:3962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12845:2179":{"id":"2:12845:2179","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:3006":{"id":"0:179:3006","crate_id":0,"name":"Custom","span":{"filename":"src/word_separators.rs","begin":[122,4],"end":[122,69]},"visibility":"default","docs":"Find words using a custom word separator","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:181:1749"]},"discriminant":null}}},"0:6:1921":{"id":"0:6:1921","crate_id":0,"name":"dedent","span":{"filename":"src/indentation.rs","begin":[95,0],"end":[150,1]},"visibility":"public","docs":"Removes common leading whitespace from each line.\n\nThis function will look at each non-empty line and determine the\nmaximum amount of whitespace that can be removed from all lines:\n\n```\nuse textwrap::dedent;\n\nassert_eq!(dedent(\"\n    1st line\n      2nd line\n    3rd line\n\"), \"\n1st line\n  2nd line\n3rd line\n\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:195:3222":{"id":"b:5:687-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2336","5:690:2337","5:691:4204"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[131,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:87:1035","0:88:3280","0:89:2115"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3565-0:185:1926":{"id":"b:2:3565-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,29],"end":[214,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2482:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:281:660"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:147:1940":{"id":"0:147:1940","crate_id":0,"name":"initial_indent","span":{"filename":"src/lib.rs","begin":[388,4],"end":[393,5]},"visibility":"public","docs":"Change [`self.initial_indent`]. The initial indentation is\nused on the very first line of output.\n\n# Examples\n\nClassic paragraph indentation can be achieved by specifying an\ninitial indentation and wrapping each paragraph by itself:\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(16).initial_indent(\"    \");\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"    This is a\",\n                \"little example.\"]);\n```\n\n[`self.initial_indent`]: #structfield.initial_indent","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["indent",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:4546":{"id":"5:5537:4546","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:1950":{"id":"0:151:1950","crate_id":0,"name":"wrap_algorithm","span":{"filename":"src/lib.rs","begin":[485,4],"end":[496,5]},"visibility":"public","docs":"Change [`self.wrap_algorithm`].\n\nSee the [`wrap_algorithms::WrapAlgorithm`] trait for details on\nthe choices.\n\n[`self.wrap_algorithm`]: #structfield.wrap_algorithm","links":{"`wrap_algorithms::WrapAlgorithm`":"0:219:1928"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["wrap_algorithm",{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:660":{"id":"0:215:660","crate_id":0,"name":"eq","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,16],"end":[185,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227:1749":{"id":"0:227:1749","crate_id":0,"name":"0","span":{"filename":"src/wrap_algorithms.rs","begin":[87,11],"end":[87,97]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"function_pointer":{"decl":{"inputs":[["words",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"resolved_path":{"name":"crate::core::Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}],["line_widths",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"primitive":"usize"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"resolved_path":{"name":"crate::core::Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}}}},"0:296:1958":{"id":"0:296:1958","crate_id":0,"name":"word_splitter","span":{"filename":"src/lib.rs","begin":[259,4],"end":[259,35]},"visibility":"public","docs":"The method for splitting words. This can be used to prohibit\nsplitting words on hyphens, or it can be used to implement\nlanguage-aware machine hyphenation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:12806":{"id":"2:12806","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12807:872","2:12808:2107","2:12809:34352","2:12810:34353","2:12812:34354","2:12815:3613","2:12816:34355","2:12817:339","2:12818:29501","2:12819:2391","2:12821:29498","2:12823:29499","2:12825:29500","2:12827:34356","2:12828:34357","2:12829:2900","2:12830:29523","2:12831:2172","2:12832:2170","2:12833:2434","2:12834:32522","2:12835:32523","2:12836:2162","2:12837:34358","2:12838:32800","2:12839:2105","2:12842:2898","2:12845:2179","2:12848:3047","2:12852:4154","2:12856:2315","2:12859:29531","2:12862:29533","2:12865:2881","2:12868:34359","2:12871:29535","2:12874:29537","2:12877:29539","2:12880:29540","2:12883:3118","2:12886:34360","2:12889:3181","2:12892:34361","2:12895:2882","2:12897:34362","2:12899:2880","2:12901:34363","2:12902:34364","2:12903:34365","2:12906:2166","2:12909:28410","2:12912:2211","2:12915:2108","2:12918:34366","2:12921:34367","2:12924:34368","2:12926:29321","2:12927:30689","2:12928:29322","2:12929:29318","2:12930:29317","2:12931:30692","2:12932:30693","2:12933:30694","2:12934:34369","2:12936:10173","2:12937:34370"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:194:454":{"id":"0:194:454","crate_id":0,"name":"clone","span":{"filename":"src/word_splitters.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:3395":{"id":"0:119:3395","crate_id":0,"name":"penalty_width","span":{"filename":"src/core.rs","begin":[207,4],"end":[207,35]},"visibility":"default","docs":"Displayed width of the penalty that must be inserted if the\nword falls at the end of a line.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:5:687-0:287:1933":{"id":"b:5:687-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:689:2336","5:690:2337","5:691:4204"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,40],"end":[214,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12807:872":{"id":"2:12807:872","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:450"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:454":{"id":"0:276:454","crate_id":0,"name":"clone","span":{"filename":"src/core.rs","begin":[214,22],"end":[214,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2732-0:185:1926":{"id":"b:2:2732-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:263:2328":{"id":"0:263:2328","crate_id":0,"name":"Word","span":{"filename":"src/core.rs","begin":[215,0],"end":[224,1]},"visibility":"public","docs":"A piece of wrappable text, including any trailing whitespace.\n\nA `Word` is an example of a [`Fragment`], so it has a width,\ntrailing whitespace, and potentially a penalty item.","links":{"`Fragment`":"0:116:3223"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:265:2333","0:266:2334","0:267:2338"],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:123","a:2:8989:10371-0:263:2328","a:2:2988:3962-0:263:2328","a:2:8988:10181-0:263:2328","a:2:2948:253-0:263:2328","a:2:2931:243-0:263:2328","b:2:2722-0:263:2328","b:2:2422-0:263:2328","b:2:3565-0:263:2328","b:2:2732-0:263:2328","b:2:2419-0:263:2328","b:2:2726-0:263:2328","b:2:2737-0:263:2328","b:5:687-0:263:2328","0:272","0:274","0:269","0:279","0:130","0:282","0:284","0:277","0:120"]}}},"0:149:1947":{"id":"0:149:1947","crate_id":0,"name":"break_words","span":{"filename":"src/lib.rs","begin":[454,4],"end":[459,5]},"visibility":"public","docs":"Change [`self.break_words`]. This controls if words longer\nthan `self.width` can be broken, or if they will be left\nsticking out into the right margin.\n\nSee [`Options::word_splitter`] instead if you want to control\nhyphenation.\n\n# Examples\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(4).break_words(true);\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"This\",\n                \"is a\",\n                \"litt\",\n                \"le\",\n                \"exam\",\n                \"ple.\"]);\n```\n\n[`self.break_words`]: #structfield.break_words","links":{"`Options::word_splitter`":"0:152:1958"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["setting",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:3487":{"id":"0:199:3487","crate_id":0,"name":"short_last_line_penalty","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[128,4],"end":[128,38]},"visibility":"public","docs":"Penalty for a last line with a single short word.\n\nSet this to zero if you do not want to penalize short last lines.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"5:5543:35044":{"id":"5:5543:35044","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2422-0:209:3221":{"id":"b:2:2422-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2424:3502"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2737-0:185:1926":{"id":"b:2:2737-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2737-0:219:1928":{"id":"b:2:2737-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108-0:235:1930":{"id":"0:108-0:235:1930","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[222,0],"end":[222,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"line_ending::LineEnding","name":"LineEnding","id":"0:235:1930","glob":false}}},"b:2:2726-0:235:1930":{"id":"b:2:2726-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12821:29498":{"id":"2:12821:29498","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42018:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241:454":{"id":"0:241:454","crate_id":0,"name":"clone","span":{"filename":"src/line_ending.rs","begin":[7,9],"end":[7,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:195:3222":{"id":"b:2:2726-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12836:2162":{"id":"2:12836:2162","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44168:7876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:716":{"id":"0:68:716","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[189,4],"end":[191,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9913:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9894:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[120,0],"end":[129,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9938:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:85:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3565-0:195:3222":{"id":"b:2:3565-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2741:1615":{"id":"2:2741:1615","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42161:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2101":{"id":"0:153:2101","crate_id":0,"name":"fill","span":{"filename":"src/lib.rs","begin":[603,0],"end":[614,1]},"visibility":"public","docs":"Fill a line of text at a given width.\n\nThe result is a [`String`], complete with newlines between each\nline. Use the [`wrap`] function if you need access to the\nindividual lines.\n\nThe easiest way to use this function is to pass an integer for\n`width_or_options`:\n\n```\nuse textwrap::fill;\n\nassert_eq!(\n    fill(\"Memory safety without garbage collection.\", 15),\n    \"Memory safety\\nwithout garbage\\ncollection.\"\n);\n```\n\nIf you need to customize the wrapping, you can pass an [`Options`]\ninstead of an `usize`:\n\n```\nuse textwrap::{fill, Options};\n\nlet options = Options::new(15)\n    .initial_indent(\"- \")\n    .subsequent_indent(\"  \");\nassert_eq!(\n    fill(\"Memory safety without garbage collection.\", &options),\n    \"- Memory safety\\n  without\\n  garbage\\n  collection.\"\n);\n```","links":{"`Options`":"0:287:1933","`wrap`":"0:161:2115","`String`":"5:7534:249"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["width_or_options",{"generic":"Opt"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"Opt","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Opt"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8989:10371-0:235:1930":{"id":"a:2:8989:10371-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8989:10371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:40:716":{"id":"0:40:716","crate_id":0,"name":"fmt","span":{"filename":"src/word_splitters.rs","begin":[102,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9913:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9894:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2419-0:174:1924":{"id":"b:2:2419-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2421:1919"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8989:10371-0:287:1933":{"id":"a:2:8989:10371-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8989:10371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2722-0:185:1926":{"id":"b:2:2722-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2725:2082"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12837:34358":{"id":"2:12837:34358","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44178:7877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:2880":{"id":"2:12899:2880","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2431":{"id":"0:95:2431","crate_id":0,"name":"wrap_first_fit","span":{"filename":"src/wrap_algorithms.rs","begin":[345,0],"end":[369,1]},"visibility":"public","docs":"Wrap abstract fragments into lines with a first-fit algorithm.\n\nThe `line_widths` slice gives the target line width for each line\n(the last slice element is repeated as necessary). This can be\nused to implement hanging indentation.\n\nThe fragments must already have been split into the desired\nwidths, this function will not (and cannot) attempt to split them\nfurther when arranging them into lines.\n\n# First-Fit Algorithm\n\nThis implements a simple “greedy” algorithm: accumulate fragments\none by one and when a fragment no longer fits, start a new line.\nThere is no look-ahead, we simply take first fit of the fragments\nwe find.\n\nWhile fast and predictable, this algorithm can produce poor line\nbreaks when a long fragment is moved to a new line, leaving behind\na large gap:\n\n```\nuse textwrap::core::Word;\nuse textwrap::wrap_algorithms::wrap_first_fit;\nuse textwrap::WordSeparator;\n\n// Helper to convert wrapped lines to a Vec<String>.\nfn lines_to_strings(lines: Vec<&[Word<'_>]>) -> Vec<String> {\n    lines.iter().map(|line| {\n        line.iter().map(|word| &**word).collect::<Vec<_>>().join(\" \")\n    }).collect::<Vec<_>>()\n}\n\nlet text = \"These few words will unfortunately not wrap nicely.\";\nlet words = WordSeparator::AsciiSpace.find_words(text).collect::<Vec<_>>();\nassert_eq!(lines_to_strings(wrap_first_fit(&words, &[15.0])),\n           vec![\"These few words\",\n                \"will\",  // <-- short line\n                \"unfortunately\",\n                \"not wrap\",\n                \"nicely.\"]);\n\n// We can avoid the short line if we look ahead:\n#[cfg(feature = \"smawk\")]\nuse textwrap::wrap_algorithms::{wrap_optimal_fit, Penalties};\n#[cfg(feature = \"smawk\")]\nassert_eq!(lines_to_strings(wrap_optimal_fit(&words, &[15.0], &Penalties::new()).unwrap()),\n           vec![\"These few\",\n                \"words will\",\n                \"unfortunately\",\n                \"not wrap\",\n                \"nicely.\"]);\n```\n\nThe [`wrap_optimal_fit`] function was used above to get better\nline breaks. It uses an advanced algorithm which tries to avoid\nshort lines. This function is about 4 times faster than\n[`wrap_optimal_fit`].\n\n# Examples\n\nImagine you're building a house site and you have a number of\ntasks you need to execute. Things like pour foundation, complete\nframing, install plumbing, electric cabling, install insulation.\n\nThe construction workers can only work during daytime, so they\nneed to pack up everything at night. Because they need to secure\ntheir tools and move machines back to the garage, this process\ntakes much more time than the time it would take them to simply\nswitch to another task.\n\nYou would like to make a list of tasks to execute every day based\non your estimates. You can model this with a program like this:\n\n```\nuse textwrap::core::{Fragment, Word};\nuse textwrap::wrap_algorithms::wrap_first_fit;\n\n#[derive(Debug)]\nstruct Task<'a> {\n    name: &'a str,\n    hours: f64,   // Time needed to complete task.\n    sweep: f64,   // Time needed for a quick sweep after task during the day.\n    cleanup: f64, // Time needed for full cleanup if day ends with this task.\n}\n\nimpl Fragment for Task<'_> {\n    fn width(&self) -> f64 { self.hours }\n    fn whitespace_width(&self) -> f64 { self.sweep }\n    fn penalty_width(&self) -> f64 { self.cleanup }\n}\n\n// The morning tasks\nlet tasks = vec![\n    Task { name: \"Foundation\",  hours: 4.0, sweep: 2.0, cleanup: 3.0 },\n    Task { name: \"Framing\",     hours: 3.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Plumbing\",    hours: 2.0, sweep: 2.0, cleanup: 2.0 },\n    Task { name: \"Electrical\",  hours: 2.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Insulation\",  hours: 2.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Drywall\",     hours: 3.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Floors\",      hours: 3.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Countertops\", hours: 1.0, sweep: 1.0, cleanup: 2.0 },\n    Task { name: \"Bathrooms\",   hours: 2.0, sweep: 1.0, cleanup: 2.0 },\n];\n\n// Fill tasks into days, taking `day_length` into account. The\n// output shows the hours worked per day along with the names of\n// the tasks for that day.\nfn assign_days<'a>(tasks: &[Task<'a>], day_length: f64) -> Vec<(f64, Vec<&'a str>)> {\n    let mut days = Vec::new();\n    // Assign tasks to days. The assignment is a vector of slices,\n    // with a slice per day.\n    let assigned_days: Vec<&[Task<'a>]> = wrap_first_fit(&tasks, &[day_length]);\n    for day in assigned_days.iter() {\n        let last = day.last().unwrap();\n        let work_hours: f64 = day.iter().map(|t| t.hours + t.sweep).sum();\n        let names = day.iter().map(|t| t.name).collect::<Vec<_>>();\n        days.push((work_hours - last.sweep + last.cleanup, names));\n    }\n    days\n}\n\n// With a single crew working 8 hours a day:\nassert_eq!(\n    assign_days(&tasks, 8.0),\n    [\n        (7.0, vec![\"Foundation\"]),\n        (8.0, vec![\"Framing\", \"Plumbing\"]),\n        (7.0, vec![\"Electrical\", \"Insulation\"]),\n        (5.0, vec![\"Drywall\"]),\n        (7.0, vec![\"Floors\", \"Countertops\"]),\n        (4.0, vec![\"Bathrooms\"]),\n    ]\n);\n\n// With two crews working in shifts, 16 hours a day:\nassert_eq!(\n    assign_days(&tasks, 16.0),\n    [\n        (14.0, vec![\"Foundation\", \"Framing\", \"Plumbing\"]),\n        (15.0, vec![\"Electrical\", \"Insulation\", \"Drywall\", \"Floors\"]),\n        (6.0, vec![\"Countertops\", \"Bathrooms\"]),\n    ]\n);\n```\n\nApologies to anyone who actually knows how to build a house and\nknows how long each step takes :-)","links":{"`wrap_optimal_fit`":"0:70:3220"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["fragments",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}],["line_widths",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fragment","id":"0:116:3223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3565-0:263:2328":{"id":"b:2:3565-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3565-0:174:1924":{"id":"b:2:3565-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:126:3753":{"id":"0:126:3753","crate_id":0,"name":"break_apart","span":{"filename":"src/core.rs","begin":[262,4],"end":[301,5]},"visibility":"public","docs":"Break this word into smaller words with a width of at most\n`line_width`. The whitespace and penalty from this `Word` is\nadded to the last piece.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nassert_eq!(\n    Word::from(\"Hello!  \").break_apart(3).collect::<Vec<_>>(),\n    vec![Word::from(\"Hel\"), Word::from(\"lo!  \")]\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Self"}}}],["line_width",{"primitive":"usize"}]],"output":{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8004:175","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'b"}]},"c_variadic":false},"generics":{"params":[{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:29539":{"id":"2:12877:29539","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8989:10371-0:185:1926":{"id":"a:2:8989:10371-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8989:10371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3567:1630":{"id":"2:3567:1630","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39778:7783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203":{"id":"0:203","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2943:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2736:1617":{"id":"2:2736:1617","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42161:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:231:454":{"id":"0:231:454","crate_id":0,"name":"clone","span":{"filename":"src/wrap_algorithms.rs","begin":[33,9],"end":[33,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:2325":{"id":"0:47:2325","crate_id":0,"name":"split_words","span":{"filename":"src/word_splitters.rs","begin":[181,0],"end":[218,1]},"visibility":"public","docs":"Split words into smaller words according to the split points given\nby `word_splitter`.\n\nNote that we split all words, regardless of their length. This is\nto more cleanly separate the business of splitting (including\nautomatic hyphenation) from the business of word wrapping.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["words",{"generic":"I"}],["word_splitter",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8004:175","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7857:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"crate::core::Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76-0:70:3220":{"id":"0:76-0:70:3220","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[21,22],"end":[21,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"import":{"source":"optimal_fit::wrap_optimal_fit","name":"wrap_optimal_fit","id":"0:70:3220","glob":false}}},"b:2:2722-0:235:1930":{"id":"b:2:2722-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2725:2082"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:293:1947":{"id":"0:293:1947","crate_id":0,"name":"break_words","span":{"filename":"src/lib.rs","begin":[248,4],"end":[248,25]},"visibility":"public","docs":"Allow long words to be broken if they cannot fit on a line.\nWhen set to `false`, some lines may be longer than\n`self.width`. See the [`Options::break_words`] method.","links":{"`Options::break_words`":"0:149:1947"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"2:12819:2391":{"id":"2:12819:2391","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42018:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:34366":{"id":"2:12918:34366","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2737-0:195:3222":{"id":"b:2:2737-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:99-0:219:1928":{"id":"0:99-0:219:1928","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,0],"end":[219,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"wrap_algorithms::WrapAlgorithm","name":"WrapAlgorithm","id":"0:219:1928","glob":false}}},"b:2:2722-0:263:2328":{"id":"b:2:2722-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2725:2082"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12852:4154":{"id":"2:12852:4154","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42018:197","prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:3396":{"id":"0:118:3396","crate_id":0,"name":"whitespace_width","span":{"filename":"src/core.rs","begin":[203,4],"end":[203,38]},"visibility":"default","docs":"Displayed width of the whitespace that must follow the word\nwhen the word is not at the end of a line.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[152,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2773:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12933:30694":{"id":"2:12933:30694","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:36499"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2732-0:263:2328":{"id":"b:2:2732-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5553:2386":{"id":"5:5553:2386","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:60":{"id":"0:60:60","crate_id":0,"name":"default","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[153,4],"end":[155,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2988:3962-0:174:1924":{"id":"a:2:2988:3962-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:3962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12874:29537":{"id":"2:12874:29537","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:450","str::splitn":"2:12871:29535","self::pattern":"2:12503:15598"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44036:7720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12880:29540":{"id":"2:12880:29540","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2419-0:185:1926":{"id":"b:2:2419-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2421:1919"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[233,16],"end":[233,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:302:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12903:34365":{"id":"2:12903:34365","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12528:15595","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2732-0:219:1928":{"id":"b:2:2732-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12927:30689":{"id":"2:12927:30689","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39965:30662","Self::is_ascii":"2:12926:29321"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39965:30662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:1943":{"id":"0:148:1943","crate_id":0,"name":"subsequent_indent","span":{"filename":"src/lib.rs","begin":[424,4],"end":[429,5]},"visibility":"public","docs":"Change [`self.subsequent_indent`]. The subsequent indentation\nis used on lines following the first line of output.\n\n# Examples\n\nCombining initial and subsequent indentation lets you format a\nsingle paragraph as a bullet list:\n\n```\nuse textwrap::{wrap, Options};\n\nlet options = Options::new(12)\n    .initial_indent(\"* \")\n    .subsequent_indent(\"  \");\n#[cfg(feature = \"smawk\")]\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"* This is\",\n                \"  a little\",\n                \"  example.\"]);\n\n// Without the `smawk` feature, the wrapping is a little different:\n#[cfg(not(feature = \"smawk\"))]\nassert_eq!(wrap(\"This is a little example.\", options),\n           vec![\"* This is a\",\n                \"  little\",\n                \"  example.\"]);\n```\n\n[`self.subsequent_indent`]: #structfield.subsequent_indent","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["indent",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8988:10181-0:185:1926":{"id":"a:2:8988:10181-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8988:10181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2732-0:174:1924":{"id":"b:2:2732-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2737-0:235:1930":{"id":"b:2:2737-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,9],"end":[7,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:241:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:205:716":{"id":"0:205:716","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9913:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9894:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:2336":{"id":"5:689:2336","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:185:1926":{"id":"0:185:1926","crate_id":0,"name":"WordSplitter","span":{"filename":"src/word_splitters.rs","begin":[37,0],"end":[99,1]},"visibility":"public","docs":"The `WordSplitter` enum describes where words can be split.\n\nIf the textwrap crate has been compiled with the `hyphenation`\nCargo feature enabled, you will find a\n[`WordSplitter::Hyphenation`] variant. Use this struct for\nlanguage-aware hyphenation:\n\n```\n#[cfg(feature = \"hyphenation\")] {\n    use hyphenation::{Language, Load, Standard};\n    use textwrap::{wrap, Options, WordSplitter};\n\n    let text = \"Oxidation is the loss of electrons.\";\n    let dictionary = Standard::from_embedded(Language::EnglishUS).unwrap();\n    let options = Options::new(8).word_splitter(WordSplitter::Hyphenation(dictionary));\n    assert_eq!(wrap(text, &options), vec![\"Oxida-\",\n                                          \"tion is\",\n                                          \"the loss\",\n                                          \"of elec-\",\n                                          \"trons.\"]);\n}\n```\n\nPlease see the documentation for the [hyphenation] crate for more\ndetails.\n\n[hyphenation]: https://docs.rs/hyphenation/","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:186:2565","0:188:1981","0:190:3006"],"impls":["0:43","a:2:8989:10371-0:185:1926","a:2:2988:3962-0:185:1926","a:2:8988:10181-0:185:1926","a:2:2948:253-0:185:1926","a:2:2931:243-0:185:1926","b:2:2722-0:185:1926","b:2:2422-0:185:1926","b:2:3565-0:185:1926","b:2:2732-0:185:1926","b:2:2419-0:185:1926","b:2:2726-0:185:1926","b:2:2737-0:185:1926","b:5:687-0:185:1926","0:41","0:193","0:39"]}}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:202:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2737-0:263:2328":{"id":"b:2:2737-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2422-0:263:2328":{"id":"b:2:2422-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2424:3502"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3565-0:219:1928":{"id":"b:2:3565-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2722-0:209:3221":{"id":"b:2:2722-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2725:2082"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[113,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2482:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:660"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:117:1936":{"id":"0:117:1936","crate_id":0,"name":"width","span":{"filename":"src/core.rs","begin":[199,4],"end":[199,27]},"visibility":"default","docs":"Displayed width of word represented by this fragment.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:225:3006":{"id":"0:225:3006","crate_id":0,"name":"Custom","span":{"filename":"src/wrap_algorithms.rs","begin":[87,4],"end":[87,98]},"visibility":"default","docs":"Custom wrapping function.\n\nUse this if you want to implement your own wrapping algorithm.\nThe function can freely decide how to turn a slice of\n[`Word`]s into lines.\n\n# Example\n\n```\nuse textwrap::core::Word;\nuse textwrap::{wrap, Options, WrapAlgorithm};\n\nfn stair<'a, 'b>(words: &'b [Word<'a>], _: &'b [usize]) -> Vec<&'b [Word<'a>]> {\n    let mut lines = Vec::new();\n    let mut step = 1;\n    let mut start_idx = 0;\n    while start_idx + step <= words.len() {\n      lines.push(&words[start_idx .. start_idx+step]);\n      start_idx += step;\n      step += 1;\n    }\n    lines\n}\n\nlet options = Options::new(10).wrap_algorithm(WrapAlgorithm::Custom(stair));\nassert_eq!(wrap(\"First, second, third, fourth, fifth, sixth\", options),\n           vec![\"First,\",\n                \"second, third,\",\n                \"fourth, fifth, sixth\"]);\n```","links":{"`Word`":"0:263:2328"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:227:1749"]},"discriminant":null}}},"a:2:8988:10181-0:219:1928":{"id":"a:2:8988:10181-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8988:10181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:220:2460":{"id":"0:220:2460","crate_id":0,"name":"FirstFit","span":{"filename":"src/wrap_algorithms.rs","begin":[40,4],"end":[40,12]},"visibility":"default","docs":"Wrap words using a fast and simple algorithm.\n\nThis algorithm uses no look-ahead when finding line breaks.\nImplemented by [`wrap_first_fit`], please see that function for\ndetails and examples.","links":{"`wrap_first_fit`":"0:95:2431"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:247:660":{"id":"0:247:660","crate_id":0,"name":"eq","span":{"filename":"src/line_ending.rs","begin":[7,29],"end":[7,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2931:243-0:287:1933":{"id":"a:2:2931:243-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:235:1930":{"id":"0:235:1930","crate_id":0,"name":"LineEnding","span":{"filename":"src/line_ending.rs","begin":[8,0],"end":[16,1]},"visibility":"public","docs":"Supported line endings. Like in the Rust standard library, two line\nendings are supported: `\\r\\n` and `\\n`","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:236:2178","0:238:1980"],"impls":["0:102","a:2:8989:10371-0:235:1930","a:2:2988:3962-0:235:1930","a:2:8988:10181-0:235:1930","a:2:2948:253-0:235:1930","a:2:2931:243-0:235:1930","b:2:2722-0:235:1930","b:2:2422-0:235:1930","b:2:3565-0:235:1930","b:2:2732-0:235:1930","b:2:2419-0:235:1930","b:2:2726-0:235:1930","b:2:2737-0:235:1930","b:5:687-0:235:1930","0:248","0:243","0:242","0:240","0:246","0:249","0:245"]}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,29],"end":[22,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2941:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:297":{"id":"0:297","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[233,9],"end":[233,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9938:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:299:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12808:2107":{"id":"2:12808:2107","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:34360":{"id":"2:12886:34360","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12503:15598","`DoubleEndedIterator`":"2:7895:127","prim@char":"1:12032:450","str::matches":"2:12883:3118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44136:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12937:34370":{"id":"2:12937:34370","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4737:34370"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44231:7793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:35042":{"id":"5:5536:35042","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:3007","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:3007","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:35045":{"id":"5:5551:35045","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8989:10371-0:174:1924":{"id":"a:2:8989:10371-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8989:10371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[18,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:341"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2740:134":{"id":"2:2740:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32438:8392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:302:454":{"id":"0:302:454","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[233,16],"end":[233,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:660":{"id":"0:208:660","crate_id":0,"name":"eq","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,29],"end":[22,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8988:10181-0:195:3222":{"id":"a:2:8988:10181-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8988:10181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12926:29321":{"id":"2:12926:29321","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:35043":{"id":"5:5540:35043","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,16],"end":[185,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2482:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:215:660"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[33,9],"end":[33,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:231:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2948:253-0:174:1924":{"id":"a:2:2948:253-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:193":{"id":"0:193","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:194:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:224:1749":{"id":"0:224:1749","crate_id":0,"name":"0","span":{"filename":"src/wrap_algorithms.rs","begin":[55,15],"end":[55,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:12892:34361":{"id":"2:12892:34361","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12503:15598","`DoubleEndedIterator`":"2:7895:127","prim@char":"1:12032:450","str::match_indices":"2:12889:3181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44082:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2422-0:235:1930":{"id":"b:2:2422-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2424:3502"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2722-0:287:1933":{"id":"b:2:2722-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2725:2082"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12928:29322":{"id":"2:12928:29322","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2988:3962-0:263:2328":{"id":"a:2:2988:3962-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:3962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8989:10371-0:219:1928":{"id":"a:2:8989:10371-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8989:10371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,40],"end":[7,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2726-0:263:2328":{"id":"b:2:2726-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:290:1929":{"id":"0:290:1929","crate_id":0,"name":"line_ending","span":{"filename":"src/lib.rs","begin":[238,4],"end":[238,31]},"visibility":"public","docs":"Line ending used for breaking lines.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:12834:32522":{"id":"2:12834:32522","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12835:32523"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44188:7878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:29320":{"id":"5:5554:29320","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12929:29318"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:3280":{"id":"0:88:3280","crate_id":0,"name":"new_optimal_fit","span":{"filename":"src/wrap_algorithms.rs","begin":[155,4],"end":[157,5]},"visibility":"public","docs":"New [`WrapAlgorithm::OptimalFit`] with default penalties. This\nworks well for monospace text.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"`WrapAlgorithm::OptimalFit`":"0:222:3243"},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,27],"end":[185,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2942:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[277,0],"end":[281,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:142:743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8988:10181-0:209:3221":{"id":"a:2:8988:10181-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8988:10181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:133:3395":{"id":"0:133:3395","crate_id":0,"name":"penalty_width","span":{"filename":"src/core.rs","begin":[320,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:1940":{"id":"0:291:1940","crate_id":0,"name":"initial_indent","span":{"filename":"src/lib.rs","begin":[241,4],"end":[241,31]},"visibility":"public","docs":"Indentation used for the first line of output. See the\n[`Options::initial_indent`] method.","links":{"`Options::initial_indent`":"0:147:1940"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"b:2:3565-0:209:3221":{"id":"b:2:3565-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:192:1749":{"id":"0:192:1749","crate_id":0,"name":"0","span":{"filename":"src/word_splitters.rs","begin":[88,11],"end":[88,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"function_pointer":{"decl":{"inputs":[["word",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}}}},"0:89:2115":{"id":"0:89:2115","crate_id":0,"name":"wrap","span":{"filename":"src/wrap_algorithms.rs","begin":[165,4],"end":[188,5]},"visibility":"public","docs":"Wrap words according to line widths.\n\nThe `line_widths` slice gives the target line width for each\nline (the last slice element is repeated as necessary). This\ncan be used to implement hanging indentation.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["words",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}],["line_widths",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"primitive":"usize"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[41,16],"end":[41,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2943:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2931:243-0:195:3222":{"id":"a:2:2931:243-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2419-0:195:3222":{"id":"b:2:2419-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2421:1919"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:123":{"id":"0:123","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[234,0],"end":[302,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:125:743","0:126:3753"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,22],"end":[7,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9938:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:244:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:175:2430":{"id":"0:175:2430","crate_id":0,"name":"AsciiSpace","span":{"filename":"src/word_separators.rs","begin":[55,4],"end":[55,14]},"visibility":"default","docs":"Find words by splitting on runs of `' '` characters.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::AsciiSpace;\n\nlet words = AsciiSpace.find_words(\"Hello   World!\").collect::<Vec<_>>();\nassert_eq!(words, vec![Word::from(\"Hello   \"),\n                       Word::from(\"World!\")]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:183:454":{"id":"0:183:454","crate_id":0,"name":"clone","span":{"filename":"src/word_separators.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12912:2211":{"id":"2:12912:2211","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[125,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2482:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:660"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:222:3243":{"id":"0:222:3243","crate_id":0,"name":"OptimalFit","span":{"filename":"src/wrap_algorithms.rs","begin":[55,4],"end":[55,25]},"visibility":"default","docs":"Wrap words using an advanced algorithm with look-ahead.\n\nThis wrapping algorithm considers the entire paragraph to find\noptimal line breaks. When wrapping text, \"penalties\" are\nassigned to line breaks based on the gaps left at the end of\nlines. See [`Penalties`] for details.\n\nThe underlying wrapping algorithm is implemented by\n[`wrap_optimal_fit`], please see that function for examples.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"`Penalties`":"0:195:3222","`wrap_optimal_fit`":"0:70:3220"},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:224:1749"]},"discriminant":null}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[304,0],"end":[323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Fragment","id":"0:116:3223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:131:1936","0:132:3396","0:133:3395"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:255":{"id":"0:121:255","crate_id":0,"name":"Target","span":{"filename":"src/core.rs","begin":[227,4],"end":[227,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"0:134:1947":{"id":"0:134:1947","crate_id":0,"name":"break_words","span":{"filename":"src/core.rs","begin":[330,0],"end":[343,1]},"visibility":"public","docs":"Forcibly break words wider than `line_width` into smaller words.\n\nThis simply calls [`Word::break_apart`] on words that are too\nwide. This means that no extra `'-'` is inserted, the word is\nsimply broken into smaller pieces.","links":{"`Word::break_apart`":"0:126:3753"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["words",{"generic":"I"}],["line_width",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7857:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234":{"id":"0:234","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[33,16],"end":[33,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2943:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2732-0:209:3221":{"id":"b:2:2732-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2732-0:235:1930":{"id":"b:2:2732-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2948:253-0:185:1926":{"id":"a:2:2948:253-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2422-0:195:3222":{"id":"b:2:2422-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2424:3502"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2931:243-0:219:1928":{"id":"a:2:2931:243-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:265:2333":{"id":"0:265:2333","crate_id":0,"name":"word","span":{"filename":"src/core.rs","begin":[217,4],"end":[217,21]},"visibility":"public","docs":"Word content.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"a:2:2988:3962-0:195:3222":{"id":"a:2:2988:3962-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:3962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2737-0:174:1924":{"id":"b:2:2737-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:3220":{"id":"0:70:3220","crate_id":0,"name":"wrap_optimal_fit","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[302,0],"end":[389,1]},"visibility":"public","docs":"Wrap abstract fragments into lines with an optimal-fit algorithm.\n\nThe `line_widths` slice gives the target line width for each line\n(the last slice element is repeated as necessary). This can be\nused to implement hanging indentation.\n\nThe fragments must already have been split into the desired\nwidths, this function will not (and cannot) attempt to split them\nfurther when arranging them into lines.\n\n# Optimal-Fit Algorithm\n\nThe algorithm considers all possible break points and picks the\nbreaks which minimizes the gaps at the end of each line. More\nprecisely, the algorithm assigns a cost or penalty to each break\npoint, determined by `cost = gap * gap` where `gap = target_width -\nline_width`. Shorter lines are thus penalized more heavily since\nthey leave behind a larger gap.\n\nWe can illustrate this with the text “To be, or not to be: that is\nthe question”. We will be wrapping it in a narrow column with room\nfor only 10 characters. The [greedy\nalgorithm](super::wrap_first_fit) will produce these lines, each\nannotated with the corresponding penalty:\n\n```text\n\"To be, or\"   1² =  1\n\"not to be:\"  0² =  0\n\"that is\"     3² =  9\n\"the\"         7² = 49\n\"question\"    2² =  4\n```\n\nWe see that line four with “the” leaves a gap of 7 columns, which\ngives it a penalty of 49. The sum of the penalties is 63.\n\nThere are 10 words, which means that there are `2_u32.pow(9)` or\n512 different ways to typeset it. We can compute\nthe sum of the penalties for each possible line break and search\nfor the one with the lowest sum:\n\n```text\n\"To be,\"     4² = 16\n\"or not to\"  1² =  1\n\"be: that\"   2² =  4\n\"is the\"     4² = 16\n\"question\"   2² =  4\n```\n\nThe sum of the penalties is 41, which is better than what the\ngreedy algorithm produced.\n\nSearching through all possible combinations would normally be\nprohibitively slow. However, it turns out that the problem can be\nformulated as the task of finding column minima in a cost matrix.\nThis matrix has a special form (totally monotone) which lets us\nuse a [linear-time algorithm called\nSMAWK](https://lib.rs/crates/smawk) to find the optimal break\npoints.\n\nThis means that the time complexity remains O(_n_) where _n_ is\nthe number of words. Compared to\n[`wrap_first_fit`](super::wrap_first_fit), this function is about\n4 times slower.\n\nThe optimization of per-line costs over the entire paragraph is\ninspired by the line breaking algorithm used in TeX, as described\nin the 1981 article [_Breaking Paragraphs into\nLines_](http://www.eprg.org/G53DOC/pdfs/knuth-plass-breaking.pdf)\nby Knuth and Plass. The implementation here is based on [Python\ncode by David\nEppstein](https://github.com/jfinkels/PADS/blob/master/pads/wrap.py).\n\n# Errors\n\nIn case of an overflow during the cost computation, an `Err` is\nreturned. Overflows happens when fragments or lines have infinite\nwidths (`f64::INFINITY`) or if the widths are so large that the\ngaps at the end of lines have sizes larger than `f64::MAX.sqrt()`\n(approximately 1e154):\n\n```\nuse textwrap::core::Fragment;\nuse textwrap::wrap_algorithms::{wrap_optimal_fit, OverflowError, Penalties};\n\n#[derive(Debug, PartialEq)]\nstruct Word(f64);\n\nimpl Fragment for Word {\n    fn width(&self) -> f64 { self.0 }\n    fn whitespace_width(&self) -> f64 { 1.0 }\n    fn penalty_width(&self) -> f64 { 0.0 }\n}\n\n// Wrapping overflows because 1e155 * 1e155 = 1e310, which is\n// larger than f64::MAX:\nassert_eq!(wrap_optimal_fit(&[Word(0.0), Word(0.0)], &[1e155], &Penalties::default()),\n           Err(OverflowError));\n```\n\nWhen using fragment widths and line widths which fit inside an\n`u64`, overflows cannot happen. This means that fragments derived\nfrom a `&str` cannot cause overflows.\n\n**Note:** Only available when the `smawk` Cargo feature is\nenabled.","links":{"super::wrap_first_fit":"0:95:2431"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["fragments",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}],["line_widths",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"slice":{"primitive":"f64"}}}}],["penalties",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42161:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fragment","id":"0:116:3223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:716":{"id":"0:17:716","crate_id":0,"name":"fmt","span":{"filename":"src/word_separators.rs","begin":[160,4],"end":[167,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9913:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9894:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:660":{"id":"0:83:660","crate_id":0,"name":"eq","span":{"filename":"src/wrap_algorithms.rs","begin":[110,4],"end":[117,5]},"visibility":"default","docs":"Compare two wrap algorithms.\n\n```\nuse textwrap::WrapAlgorithm;\n\nassert_eq!(WrapAlgorithm::FirstFit, WrapAlgorithm::FirstFit);\n#[cfg(feature = \"smawk\")] {\n    assert_eq!(WrapAlgorithm::new_optimal_fit(), WrapAlgorithm::new_optimal_fit());\n}\n```\n\nNote that `WrapAlgorithm::Custom1` values never compare equal:\n\n```\nuse textwrap::WrapAlgorithm;\n\nassert_ne!(WrapAlgorithm::Custom(|words, line_widths| vec![words]),\n           WrapAlgorithm::Custom(|words, line_widths| vec![words]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:287:1933":{"id":"b:2:2726-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2948:253-0:263:2328":{"id":"a:2:2948:253-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:122:595":{"id":"0:122:595","crate_id":0,"name":"deref","span":{"filename":"src/core.rs","begin":[229,4],"end":[231,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3164:123","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12818:29501":{"id":"2:12818:29501","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1639"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2722-0:195:3222":{"id":"b:2:2722-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2725:2082"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2948:253-0:219:1928":{"id":"a:2:2948:253-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,9],"end":[214,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9938:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:271:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2988:3962-0:287:1933":{"id":"a:2:2988:3962-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:3962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12848:3047":{"id":"2:12848:3047","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42018:197","prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:3181":{"id":"2:12889:3181","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12503:15598","`DoubleEndedIterator`":"2:7895:127","prim@char":"1:12032:450","str::rmatch_indices":"2:12892:34361"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44064:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:2882":{"id":"2:12895:2882","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2419-0:235:1930":{"id":"b:2:2419-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2421:1919"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8988:10181-0:174:1924":{"id":"a:2:8988:10181-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8988:10181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:209:3221":{"id":"0:209:3221","crate_id":0,"name":"OverflowError","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[186,0],"end":[186,25]},"visibility":"public","docs":"Overflow error during the [`wrap_optimal_fit`] computation.","links":{"`wrap_optimal_fit`":"0:70:3220"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:8989:10371-0:209:3221","a:2:2988:3962-0:209:3221","a:2:8988:10181-0:209:3221","a:2:2948:253-0:209:3221","a:2:2931:243-0:209:3221","b:2:2722-0:209:3221","b:2:2422-0:209:3221","b:2:3565-0:209:3221","b:2:2732-0:209:3221","b:2:2419-0:209:3221","b:2:2726-0:209:3221","b:2:2737-0:209:3221","b:5:5809-0:209:3221","0:214","0:217","0:216","0:67","0:213","0:69","0:211"]}}},"0:109:532":{"id":"0:109:532","crate_id":0,"name":"core","span":{"filename":"src/core.rs","begin":[1,0],"end":[433,1]},"visibility":"public","docs":"Building blocks for advanced wrapping functionality.\n\nThe functions and structs in this module can be used to implement\nadvanced wrapping functionality when the [`wrap`](super::wrap) and\n[`fill`](super::fill) function don't do what you want.\n\nIn general, you want to follow these steps when wrapping\nsomething:\n\n1. Split your input into [`Fragment`]s. These are abstract blocks\n   of text or content which can be wrapped into lines. See\n   [`WordSeparator`](crate::word_separators::WordSeparator) for\n   how to do this for text.\n\n2. Potentially split your fragments into smaller pieces. This\n   allows you to implement things like hyphenation. If you use the\n   `Word` type, you can use [`WordSplitter`](crate::WordSplitter)\n   enum for this.\n\n3. Potentially break apart fragments that are still too large to\n   fit on a single line. This is implemented in [`break_words`].\n\n4. Finally take your fragments and put them into lines. There are\n   two algorithms for this in the\n   [`wrap_algorithms`](crate::wrap_algorithms) module:\n   [`wrap_optimal_fit`](crate::wrap_algorithms::wrap_optimal_fit)\n   and [`wrap_first_fit`](crate::wrap_algorithms::wrap_first_fit).\n   The former produces better line breaks, the latter is faster.\n\n5. Iterate through the slices returned by the wrapping functions\n   and construct your lines of output.\n\nPlease [open an issue](https://github.com/mgeisler/textwrap/) if\nthe functionality here is not sufficient or if you have ideas for\nimproving it. We would love to hear from you!","links":{"super::fill":"0:153:2101","crate::word_separators::WordSeparator":"0:174:1924","`Fragment`":"0:116:3223","`break_words`":"0:134:1947","super::wrap":"0:161:2115","crate::WordSplitter":"0:185:1926","crate::wrap_algorithms::wrap_optimal_fit":"0:70:3220","crate::wrap_algorithms":"0:53:1927","crate::wrap_algorithms::wrap_first_fit":"0:95:2431"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:115:2164","0:116:3223","0:263:2328","0:134:1947"],"is_stripped":false}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[127,0],"end":[173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:44:2449"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5:1922":{"id":"0:5:1922","crate_id":0,"name":"indent","span":{"filename":"src/indentation.rs","begin":[52,0],"end":[75,1]},"visibility":"public","docs":"Indent each line by the given prefix.\n\n# Examples\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\"First line.\\nSecond line.\\n\", \"  \"),\n           \"  First line.\\n  Second line.\\n\");\n```\n\nWhen indenting, trailing whitespace is stripped from the prefix.\nThis means that empty lines remain empty afterwards:\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\"First line.\\n\\n\\nSecond line.\\n\", \"  \"),\n           \"  First line.\\n\\n\\n  Second line.\\n\");\n```\n\nNotice how `\"\\n\\n\\n\"` remained as `\"\\n\\n\\n\"`.\n\nThis feature is useful when you want to indent text and have a\nspace between your prefix and the text. In this case, you _don't_\nwant a trailing space on empty lines:\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\"foo = 123\\n\\nprint(foo)\\n\", \"# \"),\n           \"# foo = 123\\n#\\n# print(foo)\\n\");\n```\n\nNotice how `\"\\n\\n\"` became `\"\\n#\\n\"` instead of `\"\\n# \\n\"` which\nwould have trailing whitespace.\n\nLeading and trailing whitespace coming from the text itself is\nkept unchanged:\n\n```\nuse textwrap::indent;\n\nassert_eq!(indent(\" \\t  Foo   \", \"->\"), \"-> \\t  Foo   \");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["prefix",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:3613":{"id":"2:12815:3613","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12058:2438"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:28410":{"id":"2:12909:28410","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248":{"id":"0:248","crate_id":0,"name":null,"span":{"filename":"src/line_ending.rs","begin":[7,40],"end":[7,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2942:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2737-0:209:3221":{"id":"b:2:2737-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:58:1035":{"id":"0:58:1035","crate_id":0,"name":"new","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[141,4],"end":[149,5]},"visibility":"public","docs":"Default penalties for monospace text.\n\nThe penalties here work well for monospace text. This is\nbecause they expect the gaps at the end of lines to be roughly\nin the range `0..100`. If the gaps are larger, the\n`overflow_penalty` and `hyphen_penalty` become insignificant.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2732-0:195:3222":{"id":"b:2:2732-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:132:3396":{"id":"0:132:3396","crate_id":0,"name":"whitespace_width","span":{"filename":"src/core.rs","begin":[313,4],"end":[315,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12827:34356":{"id":"2:12827:34356","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1534","str::slice_mut_unchecked":"2:12828:34357","crate::ops::Index":"2:3227:4616"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:691:4204":{"id":"5:691:4204","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[283,0],"end":[542,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:145:1035","0:146:1929","0:147:1940","0:148:1943","0:149:1947","0:150:1954","0:151:1950","0:152:1958"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12859:29531":{"id":"2:12859:29531","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12319:7714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-0:209:3221":{"id":"0:77-0:209:3221","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[21,40],"end":[21,53]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"smawk\")]"],"deprecation":null,"inner":{"import":{"source":"optimal_fit::OverflowError","name":"OverflowError","id":"0:209:3221","glob":false}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[194,0],"end":[194,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","source","description","cause","type_id"],"trait":{"name":"Error","id":"2:2784:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[191,0],"end":[195,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2773:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:94:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:115:2164":{"id":"0:115:2164","crate_id":0,"name":"display_width","span":{"filename":"src/core.rs","begin":[175,0],"end":[185,1]},"visibility":"public","docs":"Compute the display width of `text` while skipping over ANSI\nescape sequences.\n\n# Examples\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(display_width(\"Café Plain\"), 10);\nassert_eq!(display_width(\"\\u{1b}[31mCafé Rouge\\u{1b}[0m\"), 10);\n```\n\n**Note:** When the `unicode-width` Cargo feature is disabled, the\nwidth of a `char` is determined by a crude approximation which\nsimply counts chars below U+1100 as 1 column wide, and all other\ncharacters as 2 columns wide. With the feature enabled, function\nwill correctly deal with [combining characters] in their\ndecomposed form (see [Unicode equivalence]).\n\nAn example of a decomposed character is “é”, which can be\ndecomposed into: “e” followed by a combining acute accent: “◌́”.\nWithout the `unicode-width` Cargo feature, every `char` below\nU+1100 has a width of 1. This includes the combining accent:\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(display_width(\"Cafe Plain\"), 10);\n#[cfg(feature = \"unicode-width\")]\nassert_eq!(display_width(\"Cafe\\u{301} Plain\"), 10);\n#[cfg(not(feature = \"unicode-width\"))]\nassert_eq!(display_width(\"Cafe\\u{301} Plain\"), 11);\n```\n\n## Emojis and CJK Characters\n\nCharacters such as emojis and [CJK characters] used in the\nChinese, Japanese, and Korean langauges are seen as double-width,\neven if the `unicode-width` feature is disabled:\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(display_width(\"😂😭🥺🤣✨😍🙏🥰😊🔥\"), 20);\nassert_eq!(display_width(\"你好\"), 4);  // “Nǐ hǎo” or “Hello” in Chinese\n```\n\n# Limitations\n\nThe displayed width of a string cannot always be computed from the\nstring alone. This is because the width depends on the rendering\nengine used. This is particularly visible with [emoji modifier\nsequences] where a base emoji is modified with, e.g., skin tone or\nhair color modifiers. It is up to the rendering engine to detect\nthis and to produce a suitable emoji.\n\nA simple example is “❤️”, which consists of “❤” (U+2764: Black\nHeart Symbol) followed by U+FE0F (Variation Selector-16). By\nitself, “❤” is a black heart, but if you follow it with the\nvariant selector, you may get a wider red heart.\n\nA more complex example would be “👨‍🦰” which should depict a man\nwith red hair. Here the computed width is too large — and the\nwidth differs depending on the use of the `unicode-width` feature:\n\n```\nuse textwrap::core::display_width;\n\nassert_eq!(\"👨‍🦰\".chars().collect::<Vec<char>>(), ['\\u{1f468}', '\\u{200d}', '\\u{1f9b0}']);\n#[cfg(feature = \"unicode-width\")]\nassert_eq!(display_width(\"👨‍🦰\"), 4);\n#[cfg(not(feature = \"unicode-width\"))]\nassert_eq!(display_width(\"👨‍🦰\"), 6);\n```\n\nThis happens because the grapheme consists of three code points:\n“👨” (U+1F468: Man), Zero Width Joiner (U+200D), and “🦰”\n(U+1F9B0: Red Hair). You can see them above in the test. With\n`unicode-width` enabled, the ZWJ is correctly seen as having zero\nwidth, without it is counted as a double-width character.\n\n## Terminal Support\n\nModern browsers typically do a great job at combining characters\nas shown above, but terminals often struggle more. As an example,\nGnome Terminal version 3.38.1, shows “❤️” as a big red heart, but\nshows \"👨‍🦰\" as “👨🦰”.\n\n[combining characters]: https://en.wikipedia.org/wiki/Combining_character\n[Unicode equivalence]: https://en.wikipedia.org/wiki/Unicode_equivalence\n[CJK characters]: https://en.wikipedia.org/wiki/CJK_characters\n[emoji modifier sequences]: https://unicode.org/emoji/charts/full-emoji-modifiers.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2931:243-0:263:2328":{"id":"a:2:2931:243-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:39":{"id":"0:39","crate_id":0,"name":null,"span":{"filename":"src/word_splitters.rs","begin":[101,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9938:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:40:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12825:29500":{"id":"2:12825:29500","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2737-0:287:1933":{"id":"b:2:2737-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:690:2337":{"id":"5:690:2337","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:253-0:235:1930":{"id":"a:2:2948:253-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/core.rs","begin":[214,22],"end":[214,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:276:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:271:716":{"id":"0:271:716","crate_id":0,"name":"fmt","span":{"filename":"src/core.rs","begin":[214,9],"end":[214,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9913:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9894:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12871:29535":{"id":"2:12871:29535","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:15598","str::rsplitn":"2:12874:29537"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44018:7719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12810:34353":{"id":"2:12810:34353","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:35042","5:5537:4546","5:5540:35043","5:5543:35044","5:5551:35045","5:5552:35046","5:5553:2386","5:5554:29320","5:5555:29319"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:9-0:6:1921":{"id":"0:9-0:6:1921","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[210,29],"end":[210,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::indentation::dedent","name":"dedent","id":"0:6:1921","glob":false}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms.rs","begin":[90,0],"end":[118,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2482:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:83:660"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:157:2153":{"id":"0:157:2153","crate_id":0,"name":"unfill","span":{"filename":"src/lib.rs","begin":[690,0],"end":[742,1]},"visibility":"public","docs":"Unpack a paragraph of already-wrapped text.\n\nThis function attempts to recover the original text from a single\nparagraph of text produced by the [`fill`] function. This means\nthat it turns\n\n```text\ntextwrap: a small\nlibrary for\nwrapping text.\n```\n\nback into\n\n```text\ntextwrap: a small library for wrapping text.\n```\n\nIn addition, it will recognize a common prefix and a common line\nending among the lines.\n\nThe prefix of the first line is returned in\n[`Options::initial_indent`] and the prefix (if any) of the the\nother lines is returned in [`Options::subsequent_indent`].\n\nLine ending is returned in [`Options::line_ending`]. If line ending\ncan not be confidently detected (mixed or no line endings in the\ninput), [`LineEnding::LF`] will be returned.\n\nIn addition to `' '`, the prefixes can consist of characters used\nfor unordered lists (`'-'`, `'+'`, and `'*'`) and block quotes\n(`'>'`) in Markdown as well as characters often used for inline\ncomments (`'#'` and `'/'`).\n\nThe text must come from a single wrapped paragraph. This means\nthat there can be no empty lines (`\"\\n\\n\"` or `\"\\r\\n\\r\\n\"`) within\nthe text. It is unspecified what happens if `unfill` is called on\nmore than one paragraph of text.\n\n# Examples\n\n```\nuse textwrap::{LineEnding, unfill};\n\nlet (text, options) = unfill(\"\\\n* This is an\n  example of\n  a list item.\n\");\n\nassert_eq!(text, \"This is an example of a list item.\\n\");\nassert_eq!(options.initial_indent, \"* \");\nassert_eq!(options.subsequent_indent, \"  \");\nassert_eq!(options.line_ending, LineEnding::LF);\n```","links":{"`LineEnding::LF`":"0:238:1980","`Options::subsequent_indent`":"0:148:1943","`fill`":"0:153:2101","`Options::initial_indent`":"0:147:1940","`Options::line_ending`":"0:146:1929"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:716":{"id":"0:212:716","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[185,9],"end":[185,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9913:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9894:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182":{"id":"0:182","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:183:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:197:3452":{"id":"0:197:3452","crate_id":0,"name":"overflow_penalty","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[70,4],"end":[70,31]},"visibility":"public","docs":"Per-character cost for lines that overflow the target line width.\n\nWith a default value of 50², every single character costs as\nmuch as leaving a gap of 50 characters behind. This is because\nwe assign as cost of `gap * gap` to a short line. When\nwrapping monospace text, we can overflow the line by 1\ncharacter in extreme cases:\n\n```\nuse textwrap::core::Word;\nuse textwrap::wrap_algorithms::{wrap_optimal_fit, Penalties};\n\nlet short = \"foo \";\nlet long = \"x\".repeat(50);\nlet length = (short.len() + long.len()) as f64;\nlet fragments = vec![Word::from(short), Word::from(&long)];\nlet penalties = Penalties::new();\n\n// Perfect fit, both words are on a single line with no overflow.\nlet wrapped = wrap_optimal_fit(&fragments, &[length], &penalties).unwrap();\nassert_eq!(wrapped, vec![&[Word::from(short), Word::from(&long)]]);\n\n// The words no longer fit, yet we get a single line back. While\n// the cost of overflow (`1 * 2500`) is the same as the cost of the\n// gap (`50 * 50 = 2500`), the tie is broken by `nline_penalty`\n// which makes it cheaper to overflow than to use two lines.\nlet wrapped = wrap_optimal_fit(&fragments, &[length - 1.0], &penalties).unwrap();\nassert_eq!(wrapped, vec![&[Word::from(short), Word::from(&long)]]);\n\n// The cost of overflow would be 2 * 2500, whereas the cost of\n// the gap is only `49 * 49 + nline_penalty = 2401 + 1000 =\n// 3401`. We therefore get two lines.\nlet wrapped = wrap_optimal_fit(&fragments, &[length - 2.0], &penalties).unwrap();\nassert_eq!(wrapped, vec![&[Word::from(short)],\n                         &[Word::from(&long)]]);\n```\n\nThis only happens if the overflowing word is 50 characters\nlong _and_ if the word overflows the line by exactly one\ncharacter. If it overflows by more than one character, the\noverflow penalty will quickly outgrow the cost of the gap, as\nseen above.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"a:2:2988:3962-0:209:3221":{"id":"a:2:2988:3962-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:3962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2722-0:219:1928":{"id":"b:2:2722-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2725:2082"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:190:3006":{"id":"0:190:3006","crate_id":0,"name":"Custom","span":{"filename":"src/word_splitters.rs","begin":[88,4],"end":[88,40]},"visibility":"default","docs":"Use a custom function as the word splitter.\n\nThis varian lets you implement a custom word splitter using\nyour own function.\n\n# Examples\n\n```\nuse textwrap::WordSplitter;\n\nfn split_at_underscore(word: &str) -> Vec<usize> {\n    word.match_indices('_').map(|(idx, _)| idx + 1).collect()\n}\n\nlet word_splitter = WordSplitter::Custom(split_at_underscore);\nassert_eq!(word_splitter.split_points(\"a_long_identifier\"),\n           vec![2, 7]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:192:1749"]},"discriminant":null}}},"2:12816:34355":{"id":"2:12816:34355","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2419-0:263:2328":{"id":"b:2:2419-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2421:1919"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2948:253-0:195:3222":{"id":"a:2:2948:253-0:195:3222","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2422-0:174:1924":{"id":"b:2:2422-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2424:3502"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174:1924":{"id":"0:174:1924","crate_id":0,"name":"WordSeparator","span":{"filename":"src/word_separators.rs","begin":[42,0],"end":[123,1]},"visibility":"public","docs":"Describes where words occur in a line of text.\n\nThe simplest approach is say that words are separated by one or\nmore ASCII spaces (`' '`). This works for Western languages\nwithout emojis. A more complex approach is to use the Unicode line\nbreaking algorithm, which finds break points in non-ASCII text.\n\nThe line breaks occur between words, please see\n[`WordSplitter`](crate::WordSplitter) for options of how to handle\nhyphenation of individual words.\n\n# Examples\n\n```\nuse textwrap::core::Word;\nuse textwrap::WordSeparator::AsciiSpace;\n\nlet words = AsciiSpace.find_words(\"Hello World!\").collect::<Vec<_>>();\nassert_eq!(words, vec![Word::from(\"Hello \"), Word::from(\"World!\")]);\n```","links":{"crate::WordSplitter":"0:185:1926"},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:175:2430","0:177:2498","0:179:3006"],"impls":["0:18","a:2:8989:10371-0:174:1924","a:2:2988:3962-0:174:1924","a:2:8988:10181-0:174:1924","a:2:2948:253-0:174:1924","a:2:2931:243-0:174:1924","b:2:2722-0:174:1924","b:2:2422-0:174:1924","b:2:3565-0:174:1924","b:2:2732-0:174:1924","b:2:2419-0:174:1924","b:2:2726-0:174:1924","b:2:2737-0:174:1924","b:5:687-0:174:1924","0:182","0:14","0:16","0:184"]}}},"0:85:716":{"id":"0:85:716","crate_id":0,"name":"fmt","span":{"filename":"src/wrap_algorithms.rs","begin":[121,4],"end":[128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9913:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9894:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2419-0:287:1933":{"id":"b:2:2419-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2421:1919"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12828:34357":{"id":"2:12828:34357","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1534","crate::ops::IndexMut":"2:3231:4617","str::slice_unchecked":"2:12827:34356"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:174:1924":{"id":"b:5:687-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2336","5:690:2337","5:691:4204"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:103:341":{"id":"0:103:341","crate_id":0,"name":"as_str","span":{"filename":"src/line_ending.rs","begin":[21,4],"end":[26,5]},"visibility":"public","docs":"Turns this [`LineEnding`] value into its ASCII representation.","links":{"`LineEnding`":"0:235:1930"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2988:3962-0:235:1930":{"id":"a:2:2988:3962-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:3962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8989:10371-0:263:2328":{"id":"a:2:8989:10371-0:263:2328","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8989:10371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2728:743":{"id":"2:2728:743","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2725:2082":{"id":"2:2725:2082","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2699:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9938:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:205:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:294:1950":{"id":"0:294:1950","crate_id":0,"name":"wrap_algorithm","span":{"filename":"src/lib.rs","begin":[251,4],"end":[251,37]},"visibility":"public","docs":"Wrapping algorithm to use, see the implementations of the\n[`wrap_algorithms::WrapAlgorithm`] trait for details.","links":{"`wrap_algorithms::WrapAlgorithm`":"0:219:1928"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:2931:243-0:209:3221":{"id":"a:2:2931:243-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:35:1925":{"id":"0:35:1925","crate_id":0,"name":"word_splitters","span":{"filename":"src/word_splitters.rs","begin":[1,0],"end":[314,1]},"visibility":"public","docs":"Word splitting functionality.\n\nTo wrap text into lines, long words sometimes need to be split\nacross lines. The [`WordSplitter`] enum defines this\nfunctionality.","links":{"`WordSplitter`":"0:185:1926"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:185:1926","0:47:2325"],"is_stripped":false}}},"b:2:2722-0:174:1924":{"id":"b:2:2722-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2725:2082"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2988:3962-0:219:1928":{"id":"a:2:2988:3962-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:3962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2948:253-0:287:1933":{"id":"a:2:2948:253-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12868:34359":{"id":"2:12868:34359","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12503:15598","str::split":"2:12856:2315","prim@char":"1:12032:450","str::split_terminator":"2:12865:2881"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43982:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/word_separators.rs","begin":[159,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9938:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5811:1592":{"id":"5:5811:1592","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:2565":{"id":"0:186:2565","crate_id":0,"name":"NoHyphenation","span":{"filename":"src/word_splitters.rs","begin":[50,4],"end":[50,17]},"visibility":"default","docs":"Use this as a [`Options.word_splitter`] to avoid any kind of\nhyphenation:\n\n```\nuse textwrap::{wrap, Options, WordSplitter};\n\nlet options = Options::new(8).word_splitter(WordSplitter::NoHyphenation);\nassert_eq!(wrap(\"foo bar-baz\", &options),\n           vec![\"foo\", \"bar-baz\"]);\n```\n\n[`Options.word_splitter`]: super::Options::word_splitter","links":{"super::Options::word_splitter":"0:152:1958"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:125:743":{"id":"0:125:743","crate_id":0,"name":"from","span":{"filename":"src/core.rs","begin":[239,4],"end":[247,5]},"visibility":"public","docs":"Construct a `Word` from a string.\n\nA trailing stretch of `' '` is automatically taken to be the\nwhitespace part of the word.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["word",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Word","id":"0:263:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34-0:174:1924":{"id":"0:34-0:174:1924","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"word_separators::WordSeparator","name":"WordSeparator","id":"0:174:1924","glob":false}}},"0:152:1958":{"id":"0:152:1958","crate_id":0,"name":"word_splitter","span":{"filename":"src/lib.rs","begin":[530,4],"end":[541,5]},"visibility":"public","docs":"Change [`self.word_splitter`]. The\n[`word_splitters::WordSplitter`] is used to fit part of a word\ninto the current line when wrapping text.\n\nSee [`Options::break_words`] instead if you want to control the\nhandling of words longer than the line width.\n\n# Examples\n\n```\nuse textwrap::{wrap, Options, WordSplitter};\n\n// The default is WordSplitter::HyphenSplitter.\nlet options = Options::new(5);\nassert_eq!(wrap(\"foo-bar-baz\", &options),\n           vec![\"foo-\", \"bar-\", \"baz\"]);\n\n// The word is now so long that break_words kick in:\nlet options = Options::new(5)\n    .word_splitter(WordSplitter::NoHyphenation);\nassert_eq!(wrap(\"foo-bar-baz\", &options),\n           vec![\"foo-b\", \"ar-ba\", \"z\"]);\n\n// If you want to breaks at all, disable both:\nlet options = Options::new(5)\n    .break_words(false)\n    .word_splitter(WordSplitter::NoHyphenation);\nassert_eq!(wrap(\"foo-bar-baz\", &options),\n           vec![\"foo-bar-baz\"]);\n```\n\n[`self.word_splitter`]: #structfield.word_splitter","links":{"`word_splitters::WordSplitter`":"0:185:1926","`Options::break_words`":"0:149:1947"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["word_splitter",{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:1954":{"id":"0:150:1954","crate_id":0,"name":"word_separator","span":{"filename":"src/lib.rs","begin":[466,4],"end":[477,5]},"visibility":"public","docs":"Change [`self.word_separator`].\n\nSee [`word_separators::WordSeparator`] for details on the choices.\n\n[`self.word_separator`]: #structfield.word_separator","links":{"`word_separators::WordSeparator`":"0:174:1924"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["word_separator",{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12883:3118":{"id":"2:12883:3118","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12503:15598","`DoubleEndedIterator`":"2:7895:127","prim@char":"1:12032:450","str::rmatches":"2:12886:34360"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44118:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:1981":{"id":"0:188:1981","crate_id":0,"name":"HyphenSplitter","span":{"filename":"src/word_splitters.rs","begin":[68,4],"end":[68,18]},"visibility":"default","docs":"`HyphenSplitter` is the default `WordSplitter` used by\n[`Options::new`](super::Options::new). It will split words on\nexisting hyphens in the word.\n\nIt will only use hyphens that are surrounded by alphanumeric\ncharacters, which prevents a word like `\"--foo-bar\"` from\nbeing split into `\"--\"` and `\"foo-bar\"`.\n\n# Examples\n\n```\nuse textwrap::WordSplitter;\n\nassert_eq!(WordSplitter::HyphenSplitter.split_points(\"--foo-bar\"),\n           vec![6]);\n```","links":{"super::Options::new":"0:145:1035"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12932:30693":{"id":"2:12932:30693","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:36499"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:2166":{"id":"2:12906:2166","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:34369":{"id":"2:12934:34369","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4739:34369"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44213:7794","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:2881":{"id":"2:12865:2881","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12503:15598","str::split":"2:12856:2315","prim@char":"1:12032:450","`DoubleEndedIterator`":"2:7895:127","str::rsplit_terminator":"2:12868:34359"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43964:7870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:29319":{"id":"5:5555:29319","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12930:29317"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2422-0:185:1926":{"id":"b:2:2422-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2424:3502"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2931:243-0:185:1926":{"id":"a:2:2931:243-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:687-0:185:1926":{"id":"b:5:687-0:185:1926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSplitter","id":"0:185:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2336","5:690:2337","5:691:4204"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:202:454":{"id":"0:202:454","crate_id":0,"name":"clone","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2419-0:209:3221":{"id":"b:2:2419-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2421:1919"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:295:1954":{"id":"0:295:1954","crate_id":0,"name":"word_separator","span":{"filename":"src/lib.rs","begin":[255,4],"end":[255,37]},"visibility":"public","docs":"The line breaking algorithm to use, see\n[`word_separators::WordSeparator`] trait for an overview and\npossible implementations.","links":{"`word_separators::WordSeparator`":"0:174:1924"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:5:687-0:219:1928":{"id":"b:5:687-0:219:1928","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WrapAlgorithm","id":"0:219:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2336","5:690:2337","5:691:4204"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:87:1035":{"id":"0:87:1035","crate_id":0,"name":"new","span":{"filename":"src/wrap_algorithms.rs","begin":[137,4],"end":[147,5]},"visibility":"public","docs":"Create new wrap algorithm.\n\nThe best wrapping algorithm is used by default, i.e.,\n[`WrapAlgorithm::OptimalFit`] if available, otherwise\n[`WrapAlgorithm::FirstFit`].","links":{"`WrapAlgorithm::OptimalFit`":"0:222:3243","`WrapAlgorithm::FirstFit`":"0:220:2460"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:2334":{"id":"0:266:2334","crate_id":0,"name":"whitespace","span":{"filename":"src/core.rs","begin":[219,4],"end":[219,27]},"visibility":"public","docs":"Whitespace to insert if the word does not fall at the end of a line.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"a:2:2931:243-0:174:1924":{"id":"a:2:2931:243-0:174:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WordSeparator","id":"0:174:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:94:60":{"id":"0:94:60","crate_id":0,"name":"default","span":{"filename":"src/wrap_algorithms.rs","begin":[192,4],"end":[194,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2422-0:287:1933":{"id":"b:2:2422-0:287:1933","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:3961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Options","id":"0:287:1933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2424:3502"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[22,29],"end":[22,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2482:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Penalties","id":"0:195:3222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:208:660"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12936:10173":{"id":"2:12936:10173","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4740:10173"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44222:7677","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:743":{"id":"0:142:743","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[278,4],"end":[280,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["width",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2424:3502":{"id":"2:2424:3502","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12856:2315":{"id":"2:12856:2315","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12503:15598","`DoubleEndedIterator`":"2:7895:127","prim@char":"1:12032:450","str::split_whitespace":"2:12834:32522","str::rsplit":"2:12862:29533"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43914:7712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:2428":{"id":"0:172:2428","crate_id":0,"name":"fill_inplace","span":{"filename":"src/lib.rs","begin":[1260,0],"end":[1293,1]},"visibility":"public","docs":"Fill `text` in-place without reallocating the input string.\n\nThis function works by modifying the input string: some `' '`\ncharacters will be replaced by `'\\n'` characters. The rest of the\ntext remains untouched.\n\nSince we can only replace existing whitespace in the input with\n`'\\n'` (there is no space for `\"\\r\\n\"`), we cannot do hyphenation\nnor can we split words longer than the line width. We also need to\nuse `AsciiSpace` as the word separator since we need `' '`\ncharacters between words in order to replace some of them with a\n`'\\n'`. Indentation is also ruled out. In other words,\n`fill_inplace(width)` behaves as if you had called [`fill`] with\nthese options:\n\n```\n# use textwrap::{core, LineEnding, Options, WordSplitter, WordSeparator, WrapAlgorithm};\n# let width = 80;\nOptions::new(width)\n    .break_words(false)\n    .line_ending(LineEnding::LF)\n    .word_separator(WordSeparator::AsciiSpace)\n    .wrap_algorithm(WrapAlgorithm::FirstFit)\n    .word_splitter(WordSplitter::NoHyphenation);\n```\n\nThe wrap algorithm is [`WrapAlgorithm::FirstFit`] since this\nis the fastest algorithm — and the main reason to use\n`fill_inplace` is to get the string broken into newlines as fast\nas possible.\n\nA last difference is that (unlike [`fill`]) `fill_inplace` can\nleave trailing whitespace on lines. This is because we wrap by\ninserting a `'\\n'` at the final whitespace in the input string:\n\n```\nlet mut text = String::from(\"Hello   World!\");\ntextwrap::fill_inplace(&mut text, 10);\nassert_eq!(text, \"Hello  \\nWorld!\");\n```\n\nIf we didn't do this, the word `World!` would end up being\nindented. You can avoid this if you make sure that your input text\nhas no double spaces.\n\n# Performance\n\nIn benchmarks, `fill_inplace` is about twice as fast as [`fill`].\nPlease see the [`linear`\nbenchmark](https://github.com/mgeisler/textwrap/blob/master/benchmarks/linear.rs)\nfor details.","links":{"`fill`":"0:153:2101","`WrapAlgorithm::FirstFit`":"0:220:2460"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["text",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["width",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:3484":{"id":"0:198:3484","crate_id":0,"name":"short_last_line_fraction","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[123,4],"end":[123,39]},"visibility":"public","docs":"When should the a single word on the last line be considered\n\"too short\"?\n\nIf the last line of the text consist of a single word and if\nthis word is shorter than `1 / short_last_line_fraction` of\nthe line width, then the final line will be considered \"short\"\nand `short_last_line_penalty` is added as an extra penalty.\n\nThe effect of this is to avoid a final line consisting of a\nsingle small word. For example, with a\n`short_last_line_penalty` of 25 (the default), a gap of up to\n5 columns will be seen as more desirable than having a final\nshort line.\n\n## Examples\n\n```\nuse textwrap::{wrap, wrap_algorithms, Options, WrapAlgorithm};\n\nlet text = \"This is a demo of the short last line penalty.\";\n\n// The first-fit algorithm leaves a single short word on the last line:\nassert_eq!(wrap(text, Options::new(37).wrap_algorithm(WrapAlgorithm::FirstFit)),\n           vec![\"This is a demo of the short last line\",\n                \"penalty.\"]);\n\n#[cfg(feature = \"smawk\")] {\nlet mut penalties = wrap_algorithms::Penalties::new();\n\n// Since \"penalty.\" is shorter than 25% of the line width, the\n// optimal-fit algorithm adds a penalty of 25. This is enough\n// to move \"line \" down:\nassert_eq!(wrap(text, Options::new(37).wrap_algorithm(WrapAlgorithm::OptimalFit(penalties))),\n           vec![\"This is a demo of the short last\",\n                \"line penalty.\"]);\n\n// We can change the meaning of \"short\" lines. Here, only words\n// shorter than 1/10th of the line width will be considered short:\npenalties.short_last_line_fraction = 10;\nassert_eq!(wrap(text, Options::new(37).wrap_algorithm(WrapAlgorithm::OptimalFit(penalties))),\n           vec![\"This is a demo of the short last line\",\n                \"penalty.\"]);\n\n// If desired, the penalty can also be disabled:\npenalties.short_last_line_fraction = 4;\npenalties.short_last_line_penalty = 0;\nassert_eq!(wrap(text, Options::new(37).wrap_algorithm(WrapAlgorithm::OptimalFit(penalties))),\n           vec![\"This is a demo of the short last line\",\n                \"penalty.\"]);\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"2:12831:2172":{"id":"2:12831:2172","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43884:7727","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:34367":{"id":"2:12921:34367","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:15598"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:7704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:253-0:209:3221":{"id":"a:2:2948:253-0:209:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OverflowError","id":"0:209:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2931:243-0:235:1930":{"id":"a:2:2931:243-0:235:1930","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LineEnding","id":"0:235:1930","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12835:32523":{"id":"2:12835:32523","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12834:32522"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44197:7879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2735:134":{"id":"2:2735:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:196:3421":{"id":"0:196:3421","crate_id":0,"name":"nline_penalty","span":{"filename":"src/wrap_algorithms/optimal_fit.rs","begin":[26,4],"end":[26,28]},"visibility":"public","docs":"Per-line penalty. This is added for every line, which makes it\nexpensive to output more lines than the minimum required.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}}},"paths":{"1:1821:8033":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:6898:9329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:7343:9360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:6531:7075":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:30778:32830":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:47423:7963":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:43932:7717":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:660:5617":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:5574:6871":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:40445:7793":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:48232:8003":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:5435:6929":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:14145:6266":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:46118:7921":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:11088:5820":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:9479:5481":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"10:44:7451":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:3251:5668":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:5743:6945":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:10822:8049":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:8920:10405":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:7434:10191":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:1917:7444":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:11178:9503":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:14989:6504":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:4050:5370":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10726:35655":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11395:5847":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:9602:9846":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:4613:6911":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:3160:32119":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:5104:8976":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:22331:10526":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:10373:5438":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:533:5452":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:15244:6566":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8476:8182":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11945:5932":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12701:6002":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:15013:6508":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15680:6703":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:6070:5462":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:42101:4674":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:39514:4627":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:47629:7993":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:2972:2336":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:856:7427":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"11:364:5360":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"11:396:5362":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:30686:4552":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10775:5794":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:6583:7079":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:40724:4251":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10172:5645":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:5004:8927":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:8226:8160":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"0:116:3223":{"crate_id":0,"path":["textwrap","core","Fragment"],"kind":"trait"},"1:6983:9945":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12828:6009":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:12574:15603":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"22:0:2743":{"crate_id":22,"path":["unicode_width"],"kind":"module"},"6:4535:8733":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:43858:7864":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:13309:5449":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:3387:4620":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13787:6198":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:6896:5474":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:44883:7905":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:39717:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:6960:7142":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:46016:7917":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2931:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:8358:32733":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:1024:5370":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:13648:6170":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:15003:6507":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:46715:7941":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:4167:10329":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:2368:10248":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:3027:4598":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:40765:4255":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:15192:6551":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:8011:10290":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:1301:7431":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:2331:15699":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:8281:7332":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:2305:21621":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:557:8022":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:8562:8188":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:46149:7922":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:5033:8941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:4440:8689":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:3031:3919":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:7736:7260":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:4742:10322":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:43304:7848":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"9:177:9838":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:15990:6778":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:945:7429":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:3806:4157":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11321:5792":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:12047:796":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"0:95:2431":{"crate_id":0,"path":["textwrap","wrap_algorithms","wrap_first_fit"],"kind":"function"},"17:401:5653":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:14757:6434":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:8551:8187":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11426:5850":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:1878:15708":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:9951:3960":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:4151:10012":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:574:5594":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13869:6208":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:1439:7438":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12052:5939":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:9196:9510":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4724:8790":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:47003:7957":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13961:6221":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:6545:7077":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:4527:6908":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:1514:8489":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:4543:8738":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:15062:6519":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12445:5986":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:16098:6806":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:7613:7256":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:23160:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:40742:7808":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:9651:22547":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:1819:5206":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:10716:5793":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:3032:6892":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:13504:6136":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:2536:8388":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:2722:6861":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:595:5575":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7884:22494":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:15842:6042":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:40409:7790":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:2352:9412":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4698:8788":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12103:5946":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:4610:8772":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:10430:8189":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:13156:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:6563:5432":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:3672:5388":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:5753:8077":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:10940:7717":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:43796:7859":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:3600:6897":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:16160:6817":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:11779:5897":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:12517:5629":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12324:5969":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"11:883:7430":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4854:8847":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12718:22556":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:1639:8572":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6156:7009":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4375:8643":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11041:5792":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10974:5812":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:15527:6660":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:22679:32826":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11014:5816":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:6871:5416":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4428:8686":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4388:8653":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:7644:8021":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4434:8687":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:5727:6944":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:5384:22481":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:23222:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:11576:5872":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"13:0:3784":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:6100:9149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:10618:35661":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:40468:15651":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:9147:8210":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13478:6131":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6666:9217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:0:3794":{"crate_id":17,"path":["object"],"kind":"module"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:15301:6582":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4616:8774":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:6610:5472":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:40856:4261":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:609:5611":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:363:8020":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:9624:22530":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:9955:3957":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11645:5878":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:4947:8888":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:32499:7777":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:5322:6927":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:13935:6217":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:10940:8105":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:43089:3949":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:43900:5648":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:12052:1638":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:6560:5357":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:6159:9165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:45970:7915":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11155:5826":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:4335:3946":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:548:8452":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:39553:4626":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:40532:7802":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5928:9053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:481:5592":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"15:288:9991":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:42410:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:43067:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:10559:5790":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"11:1923:7445":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:12284:7733":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13383:6103":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:10986:8192":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:11620:15592":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"0:186:2565":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter","NoHyphenation"],"kind":"variant"},"17:16016:6784":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:4038:10311":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:44665:9503":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:43838:7863":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4989:8918":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4847:8845":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:15117:6533":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:32485:7776":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:1094:5657":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:12366:22676":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:7006:7153":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10471:35660":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:542:8449":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:3195:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:10905:7716":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:39771:4621":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:14778:6444":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:48167:8000":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:42449:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"11:837:7424":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:8181:6891":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13909:6214":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:48243:8004":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:7041:7157":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11507:5865":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:2380:6847":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:12528:15595":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"11:673:7419":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:15384:6604":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:2548:6854":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13235:6077":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:4469:10331":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:928:10192":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:5756:5393":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:7901:8037":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:2991:4114":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:12028:15762":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:22702:7756":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:614:35663":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:6813:9275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:44082:7873":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:15200:6552":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:588:10172":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:43783:4237":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:43809:7860":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:42092:4157":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:42161:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:3655:5687":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"0:219:1928":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm"],"kind":"enum"},"6:6071:9136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4789:8815":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:15519:6657":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:3315:6895":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:6430:8081":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11476:5857":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:2586:5455":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:14497:6322":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:4585:6910":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:21956:32859":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:3239:8043":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:3323:10287":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:42067:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:6893:7137":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:40560:7803":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:44921:7910":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:14208:6274":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:2413:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:14878:6480":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12345:5973":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:8300:8160":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:4569:10349":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:22066:10259":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:3738:7522":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:4519:3932":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6467:7066":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:588:8473":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5891:9041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:43504:9493":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:9164:8211":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"11:2423:4157":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:2942:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:12127:5948":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:1697:8607":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:3324:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7782:7262":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:483:8412":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10667:35662":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:42212:7438":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:43828:7862":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:42984:9485":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11767:5896":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:23067:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13254:6082":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:7580:5477":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:12048:792":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:4806:15646":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:11197:8086":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:2321:6838":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:9918:22553":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:8828:8191":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:4745:6914":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6268:35650":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:4921:6920":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:1901:5106":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:3232:6837":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:7599:5479":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"9:486:21474":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:9186:31574":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:12037:1501":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:12042:690":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:3065:5682":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:1496:8481":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:102:8382":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:2256:9403":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:30425:10302":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:23346:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:7015:7156":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6248:9194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"11:1025:7431":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:11019:7719":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:3039:4602":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13707:6184":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:7838:5105":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:12264:5965":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:8004:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8535:8058":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:5154:5401":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:2939:3941":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:14170:6270":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13448:6119":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:40:5366":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"0:225:3006":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm","Custom"],"kind":"variant"},"16:4053:6903":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:11605:31551":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:12410:5981":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:3732:8050":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8866:4157":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:21914:10259":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:9957:3958":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:40695:4240":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:9274:5206":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:15557:6667":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15321:6588":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4755:8799":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7651:7257":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10315:5652":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12140:5949":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:15087:6527":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:1562:7444":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:31282:4127":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:43726:7854":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:15079:6524":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:4821:10319":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:9597:32730":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:4100:5393":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:1883:7419":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:44633:9495":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3980:10307":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:3069:4607":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:742:7421":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:41833:9484":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:2205:5422":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8352:8057":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:903:5406":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:634:7518":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:6543:10400":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:14346:6304":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6318:7052":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:3090:4612":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:3397:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:22792:7768":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:41206:7690":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:9891:22533":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12784:6006":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7621:22492":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:41244:4225":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:5969:9074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11113:5822":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:15903:6763":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:903:7419":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:62:16023":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:1115:10008":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:8220:7876":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12230:5955":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"0:115:2164":{"crate_id":0,"path":["textwrap","core","display_width"],"kind":"function"},"5:7316:35497":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:46525:7935":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:42488:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:1528:8494":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:3196:35492":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:3164:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"7:31:21461":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:5082:8062":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:3049:21624":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:12503:15598":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:6226:7031":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:12746:6004":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:44316:7881":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:43884:7727":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:10154:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:7350:10010":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:10202:7709":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:40366:7677":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:12396:5978":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13856:6205":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:22643:7749":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:2088:7552":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:9026:8206":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12572:5992":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:8157:8049":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"15:327:9825":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:48342:8011":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:22505:7746":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:7618:5406":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:43657:7850":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:10840:28744":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:4584:8760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"11:1676:5364":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:6513:7067":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:10067:5642":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11313:8238":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:3225:7442":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:830:5375":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:14194:6273":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8403:5574":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"11:2151:7433":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:6844:7131":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"18:644:5594":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:7689:5483":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:10247:9612":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4351:8626":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:21638:7745":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10016:22531":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:8167:7323":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:736:26685":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:4491:10332":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"9:450:21475":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:3936:10304":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:3241:8044":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:3035:4604":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:4641:6912":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:3607:7438":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:41770:7695":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4676:8786":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"1:7923:8113":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:7643:10259":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:8207:5648":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:14822:6474":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:538:5601":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:4529:8730":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:951:7430":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:12898:22557":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4488:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:8134:7319":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7708:6889":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:44222:7677":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:3146:4625":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:7474:7239":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:4906:10356":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:1758:8030":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:22345:15698":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:46769:7943":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:7622:9378":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:2696:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:44345:7888":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:44213:7794":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:2979:34064":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:21455:10259":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:12046:795":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:4480:8712":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:15356:6596":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:9941:117":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:21299:32865":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8286:10330":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:1913:17428":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:9559:22532":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"11:2548:8390":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:849:7438":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:3394:5393":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:22:730":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:1315:7437":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:2948:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:4806:6916":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:21301:32867":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:3414:4624":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5044:8947":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:6079:9137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5910:9043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:8001:8114":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:2359:6846":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:14843:6479":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:3059:4605":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:2354:10244":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:44946:7911":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:1664:8591":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:11340:8091":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:7853:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:3227:4616":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"18:707:5629":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:8115:7316":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:47771:7994":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12380:5976":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:14312:6291":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:580:8468":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6818:7130":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:40866:4245":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:4028:10310":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12999:6023":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:3460:5670":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:5388:15583":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:11619:8095":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:5363:6928":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:45904:7912":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:48304:8009":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:43964:7870":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:0:1526":{"crate_id":1,"path":["std"],"kind":"module"},"17:11714:5890":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6600:22487":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:886:5377":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:40513:7801":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:46571:7937":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6263:9205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:3074:4609":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11226:5834":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12560:5991":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:11657:5880":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:15868:6733":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:8984:8200":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:5877:5388":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:40527:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:5963:6971":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:880:7423":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:21313:32869":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"0:263:2328":{"crate_id":0,"path":["textwrap","core","Word"],"kind":"struct"},"5:4411:5393":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:40756:4254":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"11:687:7438":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:2690:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:8169:10258":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:4473:8708":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:7342:35652":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:5051:8062":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:507:5594":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:4381:5395":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:46973:7956":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:12548:5990":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:13724:6187":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:7330:4157":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10896:5802":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:12319:7714":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:2941:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4860:8850":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:22291:15698":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"11:1566:21555":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:39695:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:2696:6860":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:8989:10371":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:9415:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:3830:6900":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:7136:10015":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:43872:7867":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:15279:6577":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:7634:5410":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:1760:8031":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"11:123:5358":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:11269:5812":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6711:9241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:14786:6445":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:43914:7712":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:1650:8580":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"14:202:15611":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11563:5871":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:6117:5393":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:15177:6549":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:16032:6789":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:1550:7442":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:2600:5439":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5085:8962":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:41235:4223":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:7306:5380":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:5974:9075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:5650:5404":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:2953:3940":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:3482:3956":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:43296:7847":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12244:5960":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:0:3785":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13463:6125":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11675:5882":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11617:5875":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:2933:21622":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:46349:7930":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:15108:6532":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13162:6060":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:11453:5489":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:1501:8483":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:10582:10259":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:5632:5467":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:3047:4603":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8959:8196":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:755:5641":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:43757:7857":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:22391:10516":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:46219:7925":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7391:22491":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8274:8053":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6425:7063":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:6426:4220":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:44509:7896":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:4304:3945":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12797:6008":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:435:5655":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:1270:7166":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:9949:3959":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:636:5616":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:16087:6805":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:13695:6182":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:6943:9351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:521:26687":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:42153:7705":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:10197:10264":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:1521:8491":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:44136:7875":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:3837:8052":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:4774:6915":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:5395:8067":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4578:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:5121:6926":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:119:16077":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4666:8785":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4745:8792":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"11:430:10002":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:42144:4673":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:4455:3925":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:7402:4215":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:1718:8615":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:7267:4686":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:48205:8001":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12510:5988":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:4446:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10962:5810":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:1576:8524":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"11:1887:4157":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4998:8924":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:15631:6688":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:328:8386":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6687:7103":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12486:5987":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:5009:8929":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:11047:7721":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:40607:5426":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:1810:1185":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11590:5873":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:4738:8791":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:30652:4551":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:3427:33184":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:1541:5388":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:14455:6315":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:4417:6905":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:4:1111":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:3994:10309":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:811:5406":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:7510:7548":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:4719:6913":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:2702:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:1632:8568":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:3086:4611":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:5661:5393":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:42332:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11168:22583":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:2236:35530":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:13083:6041":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:4939:1098":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:2996:4116":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5921:9051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:7855:8108":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:1507:8486":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6386:7059":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:4252:7419":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:5885:9038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8200:4262":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:3510:10279":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:41262:4229":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:11537:8052":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6915:6881":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:16123:6811":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"18:590:5604":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7534:6885":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"0:172:2428":{"crate_id":0,"path":["textwrap","fill_inplace"],"kind":"function"},"2:44294:15609":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:32478:7218":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:2784:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:42016:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"18:599:35666":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:6332:6870":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:47881:7995":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:7497:7546":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12153:5950":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:23191:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:7559:7550":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"11:1107:7435":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10569:35657":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:2403:7438":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:46401:7932":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:2766:6863":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13633:6166":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11991:5936":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:2472:6851":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:531:5598":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:6361:7056":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:2864:6867":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:3443:8048":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:3442:3942":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:7692:9395":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:44474:7891":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:10828:7714":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:14470:6319":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6569:6878":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:4583:3935":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:7346:7541":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:40714:4250":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:8006:3006":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4808:8823":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:13322:6092":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:12202:22675":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8891:8195":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:41254:4227":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5829:8998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:4450:3924":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13026:6029":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:1892:9410":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"11:2443:5388":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:1909:703":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:8990:7703":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12659:22534":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:7422:7542":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:652:5594":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:1789:5406":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:3818:5406":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:7645:9384":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:8146:8152":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:43265:7839":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"11:1910:7443":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:23315:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:7276:4157":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:12310:5968":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:14399:6308":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:15645:6690":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:10881:22565":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:2973:35487":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:9813:22551":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:7598:9374":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:10988:5813":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:7632:3922":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:7931:7522":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"0:153:2101":{"crate_id":0,"path":["textwrap","fill"],"kind":"function"},"1:10473:5482":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:149:5355":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:11593:8239":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:48419:8014":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"11:1066:21554":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:43746:7856":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:12035:1148":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:10422:5788":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:5431:8069":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:6604:4157":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:1703:8608":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:1537:8499":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:2907:6869":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:42751:3951":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:44118:7874":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:44331:7886":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:1591:8536":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10535:8043":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:4020:5388":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:21627:10259":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:5415:8068":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:16170:6087":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:46201:7924":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"14:215:7415":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:1538:4157":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:15943:6060":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:6804:9272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5068:8954":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14181:6271":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:6114:9151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"0:185:1926":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter"],"kind":"enum"},"17:12091:5945":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:8385:10367":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:7610:9376":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13976:6224":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:4603:8770":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:6376:22486":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"0:220:2460":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm","FirstFit"],"kind":"variant"},"17:2169:22609":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:8314:4233":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:40423:7791":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11536:5869":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:15235:6563":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:15566:6669":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:42229:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10207:5646":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:2435:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:14904:6486":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:10155:8216":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:44629:9494":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:40544:32791":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13273:6083":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"11:710:7420":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:46927:7955":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:15689:6705":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:15367:6597":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:4889:6919":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:42084:7438":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:43717:7852":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:44410:7890":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:3000:3918":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:3184:7419":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:22558:7747":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:15125:6535":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:47239:7961":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:9678:22537":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:2773:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:16076:6800":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:7717:10178":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:42994:3947":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:8239:7218":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:15546:6666":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:12508:7704":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:40686:4239":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13584:6141":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:12921:5971":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10925:22566":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:40704:4249":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:0:3789":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:8842:8192":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:4639:9260":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:9790:22550":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:2622:8039":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:12872:6011":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:4977:8909":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:504:5386":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:4182:5393":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:48357:8012":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11817:22651":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:4647:8784":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:16004:6782":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:13297:6087":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:10307:5435":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:8545:7419":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:5866:6962":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:48327:8010":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4922:8877":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:15374:6599":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13218:6075":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4461:8699":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:43890:7868":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:12058:2438":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:2653:10259":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:6819:9276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:1072:7437":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6415:7062":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:3043:4601":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:40461:7794":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:9048:28735":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:22627:9414":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:44709:7902":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:21636:10435":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4968:8903":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:12044:7725":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:8988:10181":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:212:5368":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:1203:5659":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4455:8696":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"11:2124:7166":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:922:7424":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:9895:3956":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6222:9179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:3366:4223":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"0:190:3006":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter","Custom"],"kind":"variant"},"2:42765:3960":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:2993:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43040:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:7732:10179":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:21508:10259":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:2825:4390":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:14698:6382":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:6718:9245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:14373:6306":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:7503:6884":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6189:7014":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12930:22558":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:281:3007":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:42134:4675":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:3231:4617":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11027:5767":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:5344:5370":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13419:6108":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"0:188:1981":{"crate_id":0,"path":["textwrap","word_splitters","WordSplitter","HyphenSplitter"],"kind":"variant"},"6:6837:9286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:10097:8214":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:10390:5439":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:46495:7934":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:42744:3950":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:2618:6857":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:5982:9080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:5088:6925":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:44362:7889":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:4635:9256":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:9410:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:13676:6177":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4595:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:11998:9848":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:3563:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:11045:5485":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:3343:5406":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:10162:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:23377:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"11:875:7429":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:40794:4242":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4914:8872":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7054:7160":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4824:8831":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:14266:6284":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:4740:10320":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:48278:8007":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:2526:6853":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:15133:6537":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:2197:5664":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:5588:6874":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:7556:9373":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:10757:9514":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:13809:6199":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:11399:5848":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"9:0:3787":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:11382:9519":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:41917:32819":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:12053:1635":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:12463:10382":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:5123:8985":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:12523:15596":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:7668:8098":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:6596:10402":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:2542:8389":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"13:226:8381":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:1546:8505":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:6169:9168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:6811:10432":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7318:7197":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"14:0:3791":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:5945:4241":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8936:10407":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:2699:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:2524:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:14413:6311":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:10785:7712":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:1151:10009":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:5015:8930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6136:9159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:7865:8109":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:3797:6899":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:10538:8045":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:7895:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"21:78:4313":{"crate_id":21,"path":["unicode_linebreak","BreakClass"],"kind":"enum"},"17:15980:6777":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:7948:3964":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:11355:8092":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:7848:8107":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:10968:28733":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:15432:6641":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12536:5989":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:10657:5792":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"13:110:35644":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"0:0:2741":{"crate_id":0,"path":["textwrap"],"kind":"module"},"15:306:9995":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:569:8463":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:15337:6591":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:7694:6888":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:6861:5415":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:14324:6293":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:11612:8095":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:10035:5776":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4523:8728":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4556:8744":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6868:9312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:15287:6580":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:939:7427":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13395:6106":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:7450:5397":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:42220:4157":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:30720:32832":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:40393:32821":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:501:8420":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:2562:8393":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:2703:9407":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"19:0:1128":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:4814:8825":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:42607:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11497:5864":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:7754:8105":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:11307:8087":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:4915:10357":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"10:36:8395":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:42758:3959":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12290:5966":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:15725:6709":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6228:9180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:3199:8041":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13056:6033":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:1773:633":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:40574:10228":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"12:0:3790":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:42527:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:3163:28922":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10950:5807":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:10736:7419":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11412:5849":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:47959:7996":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:44178:7877":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:41976:7698":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:7548:7549":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:15311:6585":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:9128:8086":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:654:16436":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"0:47:2325":{"crate_id":0,"path":["textwrap","word_splitters","split_words"],"kind":"function"},"16:4835:6917":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:16134:6813":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:45994:7916":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:4783:8812":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:1545:5406":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:7572:4218":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8281:9504":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:7180:2171":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:4574:3934":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:15507:6654":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:533:8443":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:6658:9212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:4231:8054":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:8190:4248":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:43049:3947":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:46593:7938":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:11170:28731":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:48252:8005":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12459:5812":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:4798:5459":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:8872:8072":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:12031:1031":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:4884:8858":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:46849:7944":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:7820:4235":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14921:6487":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13684:6179":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:2383:7419":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:6792:7129":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:1455:4157":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:4637:9258":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:5897:9042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:32586:4117":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:4462:6906":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"22:28:4630":{"crate_id":22,"path":["unicode_width","UnicodeWidthStr"],"kind":"trait"},"2:12268:7732":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11001:5814":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10337:5778":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:1896:5406":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:12045:794":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4776:8811":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40433:7792":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:11126:5823":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13285:6086":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:7492:7247":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:914:7420":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:10867:7715":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:4744:10323":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"21:0:2742":{"crate_id":21,"path":["unicode_linebreak"],"kind":"module"},"2:3192:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:4311:8055":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13754:6190":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:3098:4614":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:475:8407":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12255:5964":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:10831:28742":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:5867:9025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:7843:8106":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:10978:7718":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"11:1160:7437":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:3198:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:6484:5388":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:9021:8205":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:6204:7016":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8292:8167":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:14296:6287":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:46449:7933":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:6047:9124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:32438:8392":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:10852:22564":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"0:134:1947":{"crate_id":0,"path":["textwrap","core","break_words"],"kind":"function"},"1:5971:5467":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:2183:9399":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:44891:7907":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:42293:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11476:8050":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:690:5626":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:14221:6275":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:10760:7438":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:4383:8056":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13121:6056":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11727:5892":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:4497:6907":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:7523:5402":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:16180:6092":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:6913:9336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8858:8194":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:22277:10525":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:6279:7050":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4932:8883":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4496:8716":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:5067:853":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4800:8819":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:3217:7444":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:5381:8063":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"15:0:3792":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:15480:6642":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6691:9235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4830:8834":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4129:10011":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:48289:8008":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:4988:33176":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8232:8162":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:96:9984":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:39739:4619":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5859:9023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:39613:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:12596:5994":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:42254:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:9945:3951":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:10095:8215":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:7296:5388":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:113:9987":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:11701:5887":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:5017:6923":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:45948:7914":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:5780:8078":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6741:9263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13742:6188":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:2832:6866":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"9:330:8396":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:5403:5776":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:4893:8861":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:21529:7745":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:10915:5804":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:1087:35643":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:7722:6879":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:6927:9345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:6346:7054":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:12033:1655":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:6401:6872":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"11:2498:21550":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:9730:22548":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:727:5636":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:832:7439":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:2670:6859":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:2031:5660":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:6961:9354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:44848:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:3052:4608":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:2319:634":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:43249:7836":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:44904:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:22420:10517":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:10944:7501":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:5905:6965":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:5612:6876":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:22154:10520":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:511:5656":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11144:8190":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:8237:10299":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:3280:8046":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:21282:32857":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:44830:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11243:5837":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:2504:6852":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:5995:6828":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:4172:7678":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:4773:5677":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:14509:6329":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:43274:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:12043:692":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:1505:7420":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:12387:22677":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:8796:8189":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:4630:3937":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:22238:10522":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:11290:5487":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:3888:6901":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:1516:7421":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:790:5372":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:46379:7931":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:15612:6683":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:22289:33022":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:1743:657":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:14765:6437":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:2469:5406":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:7375:4157":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:5419:5777":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:5746:8074":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:1051:7433":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6889:9326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6059:9129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:4378:3923":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:12758:6005":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6499:6890":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:3201:8042":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:40826:4259":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:719:5633":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"18:0:3795":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:11034:3111":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:12049:1639":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:22756:32796":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:909:7439":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:13896:6213":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:11459:5852":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:3094:4613":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:7529:5575":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4870:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:8213:7712":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:48083:7998":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:1556:7443":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:8195:7325":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2329:15698":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:2985:4112":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:12584:5993":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:40494:15652":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:2644:6858":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:15961:6070":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:4710:8789":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:47085:7958":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"0:169:2377":{"crate_id":0,"path":["textwrap","wrap_columns"],"kind":"function"},"0:158:2206":{"crate_id":0,"path":["textwrap","refill"],"kind":"function"},"17:261:5651":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:3188:3963":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:0:3793":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:8050:7310":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:1040:7166":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:22818:10303":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:9968:22554":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:44036:7720":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:7633:9382":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:10792:8108":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:44499:7892":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11604:5874":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:42204:7419":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:1063:7433":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:11065:5819":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:11978:5935":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:3080:4610":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:7660:7258":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:11158:8191":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:15:3167":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:12418:5983":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:4050:10314":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:6162:5466":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:867:7422":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:5955:9073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:47209:7960":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5023:8935":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10510:5789":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:7816:4236":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:10953:8070":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12009:5792":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14485:5971":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:5004:5393":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:15710:6708":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:3103:4615":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"18:624:35664":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:41006:4263":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13491:6135":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:482:5451":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:1534:7419":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4841:8842":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:46238:7926":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:11469:5854":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:3735:8051":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:7828:7270":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4955:8893":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11549:5870":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12273:6009":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:5760:22483":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:5798:6949":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:8904:10406":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:6781:9265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:2380:10254":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:3479:3944":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:7286:4247":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:43489:7849":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:6013:15997":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:4092:7438":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12850:5672":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12191:5953":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:5648:6935":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:40644:4237":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:489:8415":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:40381:7787":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:22785:9417":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:6368:4266":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:46078:7919":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:8311:4230":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:42568:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:14896:6485":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:700:4157":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12614:22555":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:7028:5421":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:10592:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6456:7065":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:1486:7423":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:46547:7936":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:3425:8163":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:9943:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:14950:6495":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:39629:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"18:671:5623":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12432:5985":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:42371:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:47273:7962":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:563:8460":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"11:1007:7166":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:22667:7754":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:4986:6922":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:3402:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:16049:6791":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:8072:7311":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:43736:7855":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:15267:6574":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"11:1142:7436":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4703:10331":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:7906:8111":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:11370:8094":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7102:22490":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6742:7116":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:1536:7521":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:918:7421":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:11816:5493":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:44649:9499":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:14156:6268":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:7604:9375":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:637:8023":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:39792:7785":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13202:6071":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:9101:7704":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:44542:7737":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:43508:7710":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:5816:6954":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:45924:7913":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:41747:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13663:6175":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:5392:15584":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:43982:7871":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:14099:6256":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5146:8991":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:357:8019":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:2228:5667":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:5639:8071":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:44488:15610":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:15212:6558":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:3687:5370":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:893:5388":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:2975:9400":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:4401:8663":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:9938:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:14385:6307":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:681:5624":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12115:5947":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"8:0:3786":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:4196:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:7768:6877":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4516:8725":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:12050:1636":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:5075:8957":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:4625:10309":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:7663:8096":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:4042:10312":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:5673:6875":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:11439:5851":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:7090:7165":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:7544:7252":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:12734:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:2938:3961":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:5117:8982":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"11:2569:7542":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:7668:9390":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:7467:7543":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"0:157:2153":{"crate_id":0,"path":["textwrap","unfill"],"kind":"function"},"16:6352:7055":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:10738:8225":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:22611:7748":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:10242:5647":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:8320:4234":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"9:357:21490":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:13129:32507":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11215:9518":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:21510:10434":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:14934:6492":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:6194:8080":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"10:0:3788":{"crate_id":10,"path":["adler"],"kind":"module"},"2:48263:8006":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:12039:1620":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:7523:7251":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:6879:7135":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"0:35:1925":{"crate_id":0,"path":["textwrap","word_splitters"],"kind":"module"},"1:8493:10381":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:859:4157":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:6249:5467":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:6934:9348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13948:6219":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:3177:3943":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:6540:8082":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:2352:7433":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:1873:4385":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:7513:7250":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:2144:5386":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:2911:5458":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11800:5899":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:41804:10300":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5049:6924":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:7915:8112":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:40817:4258":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:40673:4248":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10432:35659":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:9034:8208":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:5568:9166":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:7702:9397":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:495:8418":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:5982:6978":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6243:7037":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12972:6022":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"9:393:21476":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:46303:7928":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"3:0:477":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"11:2231:5857":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:22719:32807":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:3753:7524":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:640:8025":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:31254:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:22806:7769":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:48223:8002":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:11981:8245":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:10520:35658":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:2662:8040":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:15535:6661":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:7792:22493":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:2284:21595":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:596:8477":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:43708:7851":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:15493:6648":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:41229:4222":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2202:8036":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:8973:8197":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:39965:30662":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:40372:7786":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:15659:6697":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:40617:7804":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:44018:7719":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:14439:6313":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:40842:4260":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:3005:4600":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:41787:7697":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:3408:4622":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"0:161:2115":{"crate_id":0,"path":["textwrap","wrap"],"kind":"function"},"1:4964:10363":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:43286:7843":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:7367:4157":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:26255:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:5634:6931":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:14041:6230":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:1477:7422":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13989:6225":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:30692:4553":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:44206:7734":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:2706:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7597:35647":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:7371:9363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:46100:7920":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:9913:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:13094:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:3500:10257":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:40664:4238":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:6764:9264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13765:6191":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:22740:32820":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:2370:10249":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:555:8455":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:1131:35480":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:44645:9498":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:21457:10438":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"11:1903:7442":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6753:7117":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:9069:9506":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:8991:28413":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:12245:7731":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:8154:7320":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:351:9999":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:3594:7419":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8814:8190":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:46617:7939":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"11:800:5388":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4364:8635":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:16146:6816":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:12684:5744":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:40480:7796":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"18:80:9983":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4686:8787":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:13365:6102":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:4603:3936":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:40453:7677":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:7568:6887":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:3915:6902":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:15589:6682":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:12051:1637":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"18:515:5591":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:7679:9391":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:11546:7723":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:12055:1694":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:7003:5417":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:6686:5370":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:46668:7940":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:22068:10436":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:14633:6331":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:9759:22549":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11052:5793":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:46179:7923":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13436:6116":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:21516:10437":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12029:5938":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13516:6139":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11690:5886":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:4862:6918":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12180:5952":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:3584:5671":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:23853:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11485:5860":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:42076:7419":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:44231:7793":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:1567:7445":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:9943:22536":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:7540:8242":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:5152:8994":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:6944:35648":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:7269:35653":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:44637:9496":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:1596:8538":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13922:6216":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:0:532":{"crate_id":2,"path":["core"],"kind":"module"},"5:3230:35495":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:7365:9361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:9971:7823":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:7554:6886":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4902:8867":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:15329:6589":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6696:7104":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"14:160:7410":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7067:7163":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:5830:6955":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:15160:6541":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"14:165:21559":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"14:40:6057":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:40637:7805":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:15184:6550":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:2426:3801":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:14969:6496":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:2788:6864":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:39653:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:47163:7959":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:2518:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:12038:1534":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:12166:5951":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:3670:10301":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:621:4387":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:9953:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:7284:4674":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"11:2369:7448":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"11:787:7423":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"15:394:21586":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:9894:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:1691:8604":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:2154:7525":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:2744:6862":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:1558:8514":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:10767:8107":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:5111:8979":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:46048:7918":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:10780:8230":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:46746:7942":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"14:221:7417":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:14087:6254":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4566:8751":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:4529:3933":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:39673:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:6552:4243":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:14021:6229":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:7639:9383":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:5571:10387":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:10405:5444":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:16062:6797":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:13347:6094":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:3988:10308":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:15294:6581":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:13107:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:4764:8804":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:2554:35642":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:1902:4386":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:1710:8611":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:699:5627":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:5712:6941":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:32492:3933":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"5:2048:7522":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:5130:8988":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12356:5974":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:11449:5724":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"0:109:532":{"crate_id":0,"path":["textwrap","core"],"kind":"module"},"17:14359:6305":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:11051:5486":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13407:6107":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:9947:3950":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:12014:28740":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:527:8440":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10137:5644":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:7284:7540":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:8326:8171":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:3764:6898":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:7738:10217":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:10762:9516":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:6530:5370":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21245:4127":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:1891:5388":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:12474:5792":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:39600:4618":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:6466:5471":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:21919:10440":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:5026:7682":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:11579:7724":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:48129:7999":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:2518:8038":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:40774:4265":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:8097:7314":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:40807:4257":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:12003:10180":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:9742:3948":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:15855:6056":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"9:52:9828":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:1604:8543":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:4628:8783":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10293:5648":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"20:0:1760":{"crate_id":20,"path":["smawk"],"kind":"module"},"6:1674:8597":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:23098:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:7862:7274":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:4549:8741":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:15747:6715":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:23253:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:44437:7736":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:44168:7876":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"11:2140:7431":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:2339:6840":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:12056:1244":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:10532:8041":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:16109:6807":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:2416:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:8137:4218":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13309:6090":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:44840:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11256:5838":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:836:7419":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:2406:6848":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:21284:32861":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:13298:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:4967:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:11666:5881":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:10608:5791":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:30884:32835":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:23284:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4449:8694":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:4238:15637":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:22425:10515":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:5052:8949":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:41020:4264":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:3461:6896":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:6351:10528":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"14:31:7410":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:44522:7900":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"11:774:7422":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2693:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:44661:9502":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:11215:5832":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:11141:5824":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:48380:8013":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:13347:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:7651:9385":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:41995:7700":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"9:507:7504":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:7360:35651":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10785:35654":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6968:22489":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:299:8383":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:5696:22482":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"21:188:4299":{"crate_id":21,"path":["unicode_linebreak","BreakOpportunity"],"kind":"enum"},"1:645:10175":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:7857:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:1780:4548":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:3278:8045":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"11:434:10003":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:3010:4597":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:1603:7441":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:30708:3947":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:15345:6592":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:43257:7838":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:507:8423":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11755:5895":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:4184:7679":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:8850:7419":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:21267:32862":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:21944:7744":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:10338:31380":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"11:2304:7166":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:43818:7861":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:13832:6204":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:574:8465":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:44064:7872":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:41213:4219":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:22376:10259":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:11033:7720":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:8308:8169":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11523:5867":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:44933:7450":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:43024:7289":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"18:582:4127":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8330:9245":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:2482:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11294:5840":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:15671:6699":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:6086:9138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:4700:10358":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"0:53:1927":{"crate_id":0,"path":["textwrap","wrap_algorithms"],"kind":"module"},"6:6700:9236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:2574:6855":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:44188:7878":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:10578:5483":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:3966:10306":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:7657:9386":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:8205:22495":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11194:22584":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:40487:7797":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"14:7:7410":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4908:8869":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:3015:4596":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:14662:6351":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"0:287:1933":{"crate_id":0,"path":["textwrap","Options"],"kind":"struct"},"17:14282:6285":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:7026:5475":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:256:5650":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:766:26686":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:42646:7707":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13097:6042":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:46256:7927":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:7128:8208":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:6083:21594":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:41940:7826":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:40733:4252":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:48021:7997":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"7:78:21468":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:40996:4262":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:6261:7047":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:2943:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"14:187:21566":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12220:5672":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:2209:10241":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7436:6982":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14122:6265":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:6120:9154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6901:6880":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13882:5904":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:13402:10193":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11369:5846":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:7481:32791":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:2983:34065":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:3191:7443":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:22694:7755":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2654:15656":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11307:5841":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:2450:6850":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:6682:9229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:13181:7742":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:3064:4606":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:7582:7253":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10051:5777":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:44684:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:14887:6484":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:15101:6530":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1734:8620":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4878:8857":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:44641:9497":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"22:22:3664":{"crate_id":22,"path":["unicode_width","UnicodeWidthChar"],"kind":"trait"},"1:1054:7431":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:40785:4256":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:14251:6280":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:32474:7775":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:4159:10013":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:44657:9501":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:3251:7445":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"9:426:21477":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:41953:8053":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:12032:450":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:2428:6849":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10076:8032":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:5941:9062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:4180:10014":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:23408:7773":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:6842:5404":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:1687:5393":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:11345:5845":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:15253:6567":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:14235:6278":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:9860:22552":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:7866:3965":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:4557:6909":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4506:8722":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11632:5877":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:3930:10305":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:39778:7783":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13145:6057":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"11:844:10192":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6929:7139":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:3021:4599":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:2062:7524":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"20:15:4401":{"crate_id":20,"path":["smawk","Matrix"],"kind":"trait"},"17:15027:6509":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:7388:9372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:266:5370":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6485:6873":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:15037:6510":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:21255:32862":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:1570:8522":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13334:6093":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:5939:6822":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:5992:5401":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:1685:5370":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:4949:6921":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:44721:15801":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:536:6826":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:7616:9377":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6041:22485":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10941:5805":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:8453:7843":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"0:222:3243":{"crate_id":0,"path":["textwrap","wrap_algorithms","WrapAlgorithm","OptimalFit"],"kind":"variant"},"1:12044:797":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:1968:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:44197:7879":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:5832:4253":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:1796:8032":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:14426:6312":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:2988:3962":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:3166:28909":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2881:6868":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6798:9270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15049:6513":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11932:5931":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:15733:6712":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"7:0:1684":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:123:16078":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:12301:5967":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:9014:8204":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:23129:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:2969:21623":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:2596:6856":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:43012:32834":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:2326:7431":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:6017:22484":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7462:7238":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:5661:6940":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:10803:5795":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12335:5971":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:1682:8598":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:11388:9520":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:9474:8106":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10102:5643":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:12054:847":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:22262:10259":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"16:2810:6865":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:4219:15567":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:22199:10521":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:5825:5461":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:14057:6235":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:6107:9150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:11516:8051":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:4212:5393":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:12077:5941":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:6558:9413":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5992:9087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"9:237:7843":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:2474:9404":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:11061:7722":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:1286:7433":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10813:35656":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11743:5894":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:12208:7728":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6721:22488":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:2487:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"18:564:5603":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:3491:28312":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:4928:5679":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:13182:6070":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:4444:5395":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12953:6019":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:1424:7419":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:6146:5449":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:6128:9156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:5500:8070":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:15224:6559":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:11958:5934":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5140:8989":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:44653:9500":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:1495:7439":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:491:5593":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:6012:9103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:1582:7440":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:7380:31697":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:4344:6904":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:41220:4220":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:14001:6226":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"}},"external_crates":{"20":{"name":"smawk","html_root_url":"https://docs.rs/smawk/0.3.1/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_width","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_linebreak","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}