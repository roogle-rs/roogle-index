{"root":"0:0:1994","crate_version":"0.5.0","includes_private":false,"index":{"a:1:31996:236-0:155:1973":{"id":"a:1:31996:236-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5622:34732":{"id":"5:5622:34732","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13247:33385"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5623:34733":{"id":"5:5623:34733","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13248:33386"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[704,0],"end":[712,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:119:1992":{"id":"0:119:1992","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13163:2287":{"id":"1:13163:2287","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13248:33386":{"id":"1:13248:33386","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:170:1972":{"id":"b:1:3727-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13156:29753":{"id":"1:13156:29753","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43671:6831","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13189:33517":{"id":"1:13189:33517","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12325:458","self::pattern":"1:12812:2466","str::rsplitn":"1:13192:33519"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43483:6826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:161:1971":{"id":"b:1:2888-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2323"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13195:33521":{"id":"1:13195:33521","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13255:36923":{"id":"1:13255:36923","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4904:36923"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43696:6776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:37619":{"id":"5:5611:37619","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2906:136":{"id":"1:2906:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31924:10697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:7:1969":{"id":"0:7:1969","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[328,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:2138","0:24:598","0:44:2183","0:46:673"],"is_stripped":false}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99:2254":{"id":"0:99:2254","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[564,4],"end":[567,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:2611-0:170:1972":{"id":"a:1:41612:2611-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:46:673":{"id":"0:46:673","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[229,0],"end":[237,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:161:1971":{"id":"b:1:2898-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:161:1971":{"id":"0:161:1971","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[513,0],"end":[519,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:3146:6682-0:161:1971","a:1:41612:2611-0:161:1971","a:1:3111:246-0:161:1971","a:1:32053:2593-0:161:1971","a:1:31996:236-0:161:1971","a:1:41611:2612-0:161:1971","b:1:3727-0:161:1971","b:1:2898-0:161:1971","b:1:2892-0:161:1971","b:1:2615-0:161:1971","b:1:2618-0:161:1971","b:1:2903-0:161:1971","b:1:2888-0:161:1971","b:5:727-0:161:1971","0:92","0:169","0:167"]}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[538,0],"end":[583,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1985","0:96:2250","0:97:1986","0:98:2285","0:99:2254","0:100:1981","0:102:1993"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:114-0:161:1971":{"id":"0:114-0:161:1971","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1971","glob":false}}},"b:1:2903-0:170:1972":{"id":"b:1:2903-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31996:236-0:170:1972":{"id":"a:1:31996:236-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:161:1971":{"id":"b:1:2892-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:155:1973":{"id":"b:1:2903-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13124:36899":{"id":"1:13124:36899","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13125:36900":{"id":"1:13125:36900","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13149:2140":{"id":"1:13149:2140","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43349:2176","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13130:33459":{"id":"1:13130:33459","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12360:6811"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13153:29692":{"id":"1:13153:29692","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13152:29729"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43662:6832","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13192:33519":{"id":"1:13192:33519","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12325:458","str::splitn":"1:13189:33517","self::pattern":"1:12812:2466"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43501:6825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13198:33522":{"id":"1:13198:33522","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13220:36915":{"id":"1:13220:36915","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13236:36919":{"id":"1:13236:36919","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1985":{"id":"0:95:1985","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[540,4],"end":[543,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13244:2155":{"id":"1:13244:2155","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:780":{"id":"0:112:780","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[718,4],"end":[720,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13245:33382":{"id":"1:13245:33382","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39481:6676","Self::is_ascii":"1:13244:2155"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39481:6676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:170:1972":{"id":"b:1:2615-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2358"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:1153":{"id":"0:86:1153","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:170:1972":{"id":"a:1:3111:246-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13247:33385":{"id":"1:13247:33385","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:731:29346":{"id":"5:731:29346","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13233:36918":{"id":"1:13233:36918","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13239:36920":{"id":"1:13239:36920","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13252:36922":{"id":"1:13252:36922","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4906:36922"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43678:6778","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5605:2315":{"id":"5:5605:2315","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2250":{"id":"0:96:2250","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[546,4],"end":[549,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13134:2177":{"id":"1:13134:2177","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41519:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:2138":{"id":"0:22:2138","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13152:29729":{"id":"1:13152:29729","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13153:29692"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43653:6819","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:37617":{"id":"5:5604:37617","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2456","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:295:2456","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:37621":{"id":"5:5620:37621","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:295:2456","`String`":"5:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2456","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:598":{"id":"0:24:598","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:729:7588":{"id":"5:729:7588","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[522,0],"end":[536,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13150:10392":{"id":"1:13150:10392","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43355:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1153","0:87:2313","0:88:1981","0:91:1993"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3111:246-0:155:1973":{"id":"a:1:3111:246-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3111:246-0:161:1971":{"id":"a:1:3111:246-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5619:37620":{"id":"5:5619:37620","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:155:1973":{"id":"b:1:2618-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:29341"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13230:33523":{"id":"1:13230:33523","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3729:1770":{"id":"1:3729:1770","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39295:10344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13177:29726":{"id":"1:13177:29726","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12628:6833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13246:33384":{"id":"1:13246:33384","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13210:36910":{"id":"1:13210:36910","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12812:2466","`DoubleEndedIterator`":"1:8205:129","prim@char":"4:12325:458","str::match_indices":"1:13207:36909"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43547:6830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1973":{"id":"0:155:1973","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:3146:6682-0:155:1973","a:1:41612:2611-0:155:1973","a:1:3111:246-0:155:1973","a:1:32053:2593-0:155:1973","a:1:31996:236-0:155:1973","a:1:41611:2612-0:155:1973","b:1:3727-0:155:1973","b:1:2898-0:155:1973","b:1:2892-0:155:1973","b:1:2615-0:155:1973","b:1:2618-0:155:1973","b:1:2903-0:155:1973","b:1:2888-0:155:1973","0:159"]}}},"1:13166:6739":{"id":"1:13166:6739","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41519:190","prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:1972":{"id":"0:170:1972","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[603,0],"end":[616,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3146:6682-0:170:1972","a:1:41612:2611-0:170:1972","a:1:3111:246-0:170:1972","a:1:32053:2593-0:170:1972","a:1:31996:236-0:170:1972","a:1:41611:2612-0:170:1972","b:1:3727-0:170:1972","b:1:2898-0:170:1972","b:1:2892-0:170:1972","b:1:2615-0:170:1972","b:1:2618-0:170:1972","b:1:2903-0:170:1972","b:1:2888-0:170:1972","b:5:5854-0:170:1972","0:110","0:108","0:111","0:106","0:183"]}}},"b:1:2888-0:155:1973":{"id":"b:1:2888-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2323"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13127:36901":{"id":"1:13127:36901","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13125:36900"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13157:29530":{"id":"1:13157:29530","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:161:1971":{"id":"b:1:2615-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2358"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:2612-0:170:1972":{"id":"a:1:41611:2612-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13180:33515":{"id":"1:13180:33515","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12812:2466","`DoubleEndedIterator`":"1:8205:129","prim@char":"4:12325:458","str::split":"1:13174:2307"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43397:6821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2907:1755":{"id":"1:2907:1755","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13121":{"id":"1:13121","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13122:974","1:13123:2291","1:13124:36899","1:13125:36900","1:13127:36901","1:13130:33459","1:13131:36902","1:13132:334","1:13133:33488","1:13134:2177","1:13136:32953","1:13138:32954","1:13140:32955","1:13142:36903","1:13143:36904","1:13144:33507","1:13145:33508","1:13146:33511","1:13147:33512","1:13149:2140","1:13150:10392","1:13151:2160","1:13152:29729","1:13153:29692","1:13154:8032","1:13155:36905","1:13156:29753","1:13157:29530","1:13160:2286","1:13163:2287","1:13166:6739","1:13170:2153","1:13174:2307","1:13177:29726","1:13180:33515","1:13183:36906","1:13186:36907","1:13189:33517","1:13192:33519","1:13195:33521","1:13198:33522","1:13201:2261","1:13204:36908","1:13207:36909","1:13210:36910","1:13213:36911","1:13215:36912","1:13217:36913","1:13219:36914","1:13220:36915","1:13221:36916","1:13224:36917","1:13227:2309","1:13230:33523","1:13233:36918","1:13236:36919","1:13239:36920","1:13242:36921","1:13244:2155","1:13245:33382","1:13246:33384","1:13247:33385","1:13248:33386","1:13249:33388","1:13250:33389","1:13251:33390","1:13252:36922","1:13254:12373","1:13255:36923"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:98:2285":{"id":"0:98:2285","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[558,4],"end":[561,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:2611-0:161:1971":{"id":"a:1:41612:2611-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:170:1972":{"id":"b:1:2892-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13142:36903":{"id":"1:13142:36903","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12331:1672","str::slice_mut_unchecked":"1:13143:36904","crate::ops::Index":"1:39126:2487"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13145:33508":{"id":"1:13145:33508","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13144:33507","str::split_at_mut_checked":"1:13147:33512"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:115-0:170:1972":{"id":"0:115-0:170:1972","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1972","glob":false}}},"1:13147:33512":{"id":"1:13147:33512","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13146:33511"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:161:1971":{"id":"b:1:3727-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2898-0:170:1972":{"id":"b:1:2898-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:2612-0:161:1971":{"id":"a:1:41611:2612-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:727-0:161:1971":{"id":"b:5:727-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:7588","5:730:29345","5:731:29346"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13201:2261":{"id":"1:13201:2261","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12812:2466","`DoubleEndedIterator`":"1:8205:129","prim@char":"4:12325:458","str::rmatches":"1:13204:36908"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43583:6827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13155:36905":{"id":"1:13155:36905","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43643:6820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13204:36908":{"id":"1:13204:36908","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12812:2466","`DoubleEndedIterator`":"1:8205:129","prim@char":"4:12325:458","str::matches":"1:13201:2261"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43601:6828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13217:36913":{"id":"1:13217:36913","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13144:33507":{"id":"1:13144:33507","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13146:33511","str::split_at_mut":"1:13145:33508"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13219:36914":{"id":"1:13219:36914","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13221:36916":{"id":"1:13221:36916","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12838:6807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13242:36921":{"id":"1:13242:36921","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12773:135","`FromStr`":"1:12772:2461"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12772:2461","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12772:2461","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13227:2309":{"id":"1:13227:2309","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:91:1993":{"id":"0:91:1993","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1979":{"id":"0:117:1979","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:2593-0:161:1971":{"id":"a:1:32053:2593-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32053:2593-0:170:1972":{"id":"a:1:32053:2593-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5603":{"id":"5:5603","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5604:37617","5:5605:2315","5:5608:37618","5:5611:37619","5:5619:37620","5:5620:37621","5:5621:2207","5:5622:34732","5:5623:34733"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:155:1973":{"id":"b:1:3727-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:161:1971":{"id":"b:1:2903-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2620:29341":{"id":"1:2620:29341","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2617:2358":{"id":"1:2617:2358","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13146:33511":{"id":"1:13146:33511","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13147:33512"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13160:2286":{"id":"1:13160:2286","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2313":{"id":"0:87:2313","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13224:36917":{"id":"1:13224:36917","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2183":{"id":"0:44:2183","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[223,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[715,0],"end":[715,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","source","cause","description"],"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13122:974":{"id":"1:13122:974","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12325:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[523,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13132:334":{"id":"1:13132:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13133:33488","`u8`":"4:12342:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:155:1973":{"id":"b:1:2898-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3146:6682-0:161:1971":{"id":"a:1:3146:6682-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:6682","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3146:6682-0:170:1972":{"id":"a:1:3146:6682-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:6682","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:109:810":{"id":"0:109:810","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[705,4],"end":[711,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:170:1972":{"id":"b:1:2888-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2323"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:2612-0:155:1973":{"id":"a:1:41611:2612-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5854-0:170:1972":{"id":"b:5:5854-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13138:32954":{"id":"1:13138:32954","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13136:32953":{"id":"1:13136:32953","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41519:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:2611-0:155:1973":{"id":"a:1:41612:2611-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13186:36907":{"id":"1:13186:36907","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12812:2466","str::split":"1:13174:2307","prim@char":"4:12325:458","str::split_terminator":"1:13183:36906"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43447:6822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:155:1973":{"id":"b:1:2892-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3106:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13213:36911":{"id":"1:13213:36911","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[649,0],"end":[702,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5608:37618":{"id":"5:5608:37618","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2901:136":{"id":"1:2901:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:118:1984":{"id":"0:118:1984","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13143:36904":{"id":"1:13143:36904","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12331:1672","crate::ops::IndexMut":"1:3387:2488","str::slice_unchecked":"1:13142:36903"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13251:33390":{"id":"1:13251:33390","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:980:42198"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13131:36902":{"id":"1:13131:36902","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:462":{"id":"0:168:462","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13154:8032":{"id":"1:13154:8032","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43633:6818","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5856:1730":{"id":"5:5856:1730","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:730:29345":{"id":"5:730:29345","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2902:1757":{"id":"1:2902:1757","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:161:1971":{"id":"a:1:31996:236-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2894:810":{"id":"1:2894:810","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13151:2160":{"id":"1:13151:2160","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43365:6817","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1993":{"id":"0:102:1993","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[577,4],"end":[582,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1994":{"id":"0:0:1994","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1969","0:114-0:161:1971","0:115-0:170:1972","0:116-0:155:1973","0:117:1979","0:118:1984","0:119:1992"],"is_stripped":false}}},"1:13170:2153":{"id":"1:13170:2153","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41519:190","prim@char":"4:12325:458","self::pattern":"1:12812:2466"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:170:1972":{"id":"b:1:2618-0:170:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:29341"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13183:36906":{"id":"1:13183:36906","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12812:2466","str::split":"1:13174:2307","prim@char":"4:12325:458","`DoubleEndedIterator`":"1:8205:129","str::rsplit_terminator":"1:13186:36907"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43429:6824","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13215:36912":{"id":"1:13215:36912","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:2207":{"id":"5:5621:2207","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:2593-0:155:1973":{"id":"a:1:32053:2593-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:155:1973":{"id":"b:1:2615-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2358"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2618-0:161:1971":{"id":"b:1:2618-0:161:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:29341"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3146:6682-0:155:1973":{"id":"a:1:3146:6682-0:155:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:6682","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13254:12373":{"id":"1:13254:12373","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4907:12373"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43687:6777","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13140:32955":{"id":"1:13140:32955","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1986":{"id":"0:97:1986","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[552,4],"end":[555,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13123:2291":{"id":"1:13123:2291","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13133:33488":{"id":"1:13133:33488","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12342:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1981":{"id":"0:88:1981","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1981":{"id":"0:100:1981","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[570,4],"end":[574,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:780":{"id":"0:107:780","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[650,4],"end":[701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13174:2307":{"id":"1:13174:2307","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12812:2466","`DoubleEndedIterator`":"1:8205:129","prim@char":"4:12325:458","str::split_whitespace":"1:13152:29729","str::rsplit":"1:13180:33515"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43379:6823","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[717,0],"end":[721,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2891:2323":{"id":"1:2891:2323","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2865:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1973":{"id":"0:116-0:155:1973","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1973","glob":false}}},"1:13207:36909":{"id":"1:13207:36909","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12812:2466","`DoubleEndedIterator`":"1:8205:129","prim@char":"4:12325:458","str::rmatch_indices":"1:13210:36910"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43529:6829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13249:33388":{"id":"1:13249:33388","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:980:42198"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13250:33389":{"id":"1:13250:33389","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:980:42198"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:3571:12357":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"20:527:7950":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"17:3264:8002":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:14051:8843":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5212:11108":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5502:11238":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:14449:8927":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:5716:18016":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:45945:10484":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:39308:8309":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:718:8362":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:14912:9096":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:44378:179":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"11:883:9950":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:921:7596":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:15023:9114":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:8317:11737":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:564:10764":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"11:2403:7590":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:2508:9446":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"11:1025:9951":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:21962:17561":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:11755:8543":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:44290:149":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:21674:17902":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13922:8826":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:43264:8185":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:6554:2446":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:1888:8082":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"16:2902:24195":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5565:11259":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:43797:10390":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:1827:8079":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:42748:10377":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:13723:8788":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:42736:156":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:42530:136":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:7339:11585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:12818:2454":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:22946:10328":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"4:9382:11756":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:12238:8601":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:4821:8014":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:11715:8537":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:11153:7972":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:3599:12360":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:21441:32544":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:6026:7472":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:13701:151":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13015:7433":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11467:8516":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:45281:10417":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5390:11179":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:7655:2448":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15836:9327":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:7480:2495":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:3842:9477":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:21507:17559":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:40279:8133":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:11810:10091":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:3157:2449":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"16:4940:9498":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5781:9465":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"20:632:2528":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"5:4149:7590":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12030:8001":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:43975:10401":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6940:7490":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11026:25141":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:1610:8061":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13235:8691":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:41914:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:46451:10530":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:10941:138":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:14271:8893":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:11179:8173":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:41612:2611":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:46468:10531":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:735:29309":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:40723:8160":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:10471:156":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:4281:17966":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:5831:7497":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:4531:9485":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:613:38463":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11702:8536":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:10897:11757":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"4:3844:10090":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:44109:6806":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:9886:25124":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"20:681:2532":{"crate_id":20,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"4:11185:7614":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:14025:8839":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"20:470:2530":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"4:5196:10101":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2062:10266":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:14311:8897":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:10950:127":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"5:7632:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:2304:9690":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:8155:9846":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12342:8609":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:8150:8084":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10317:7423":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:15944:8690":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:31987:8114":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:7081:18036":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"4:4142:17946":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13797:8806":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:45588:10451":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:13664:10304":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:14298:8896":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:31966:9747":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:6730:18028":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:1536:8057":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13753:8797":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"21:198:2582":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"1:4360:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:4824:10951":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13473:8725":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:2665:200":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5236:11116":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:8253:11722":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"9:238:10377":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:7910:25068":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"11:2352:9953":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"4:5781:10110":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:5927:9521":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:6600:36853":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:3337:10084":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:3778:9475":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:22782:29419":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:10050:6871":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:1565:10823":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:21684:17556":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:6398:7523":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:12838:6807":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:42230:6853":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13526:8738":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13344:7453":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:43601:6828":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11621:7412":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11788:8548":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:14066:8846":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:573:8340":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:6681:2495":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:14977:9106":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:39958:6786":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:11865:8000":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:43954:12502":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:4771:9492":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:8515:6823":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:11593:35288":{"crate_id":4,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"17:14475:8929":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:42719:7810":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:1865:8081":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:10313:8109":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"4:2041:197":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"22:879:29335":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"6:4864:10984":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:7389:11613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:11651:10134":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:39158:209":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"16:6634:7531":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:43687:6777":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:23023:10335":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"20:306:2512":{"crate_id":20,"path":["unicode_bidi","TextSource"],"kind":"trait"},"17:9916:25125":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:5560:10107":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"5:4074:2446":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"18:521:29311":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5160:11087":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:8167:164":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:42727:7811":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:11345:10253":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:12886:12495":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"11:364:8045":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:0:543":{"crate_id":1,"path":["core"],"kind":"module"},"5:218:10032":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5376:11171":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:7266:33354":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:43696:6776":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:517:10739":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:12340:881":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:22674:7647":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:295:2456":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5643:11297":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:5902:10118":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"20:642:2529":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"22:636:7937":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"4:8582:11754":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:1527:7594":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:40037:6775":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12328:8605":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12089:8591":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:359:10059":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:465:8054":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:6149:7659":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:8206:7611":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"4:640:10065":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:1171:36823":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"11:1566:24126":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:14933:9101":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:2282:10075":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7648:9784":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:11831:10092":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:531:8341":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:870:7592":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:280:36853":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:0:979":{"crate_id":6,"path":["libc"],"kind":"module"},"5:2289:38290":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"9:424:24048":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:21996:32547":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:31996:236":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:22913:10325":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"6:7584:11698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:10715:30174":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:15197:9146":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:4741:12383":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:5653:11298":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:8006:11708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"11:1066:24125":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13399:8712":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"20:667:2531":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"1:1863:11756":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:12508:8625":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:3172:9704":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:896:2446":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:2741:10080":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13387:8709":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12621:8631":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:12808:8641":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:2701:194":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:22315:17902":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:15463:9212":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:2680:32715":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"21:290:38526":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"1:41517:193":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:11743:8540":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:11359:8194":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:30210:12103":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:16105:9396":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"15:394:24159":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:8197:11720":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:2562:10698":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:22831:10320":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:2383:7589":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:37723:12343":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:41545:7589":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:3339:10085":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:5064:11080":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:45780:10461":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:570:10767":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:32845:12335":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:5307:9504":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:5472:11229":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:1581:2495":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"19:0:1248":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:8247:11721":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:2044:196":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:6504:9595":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:8073:9837":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:9254:7619":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:41836:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:32054:6686":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:2039:12318":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:7446:11620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:13756:2489":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:5477:11231":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:44093:6798":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"6:6706:11484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:14260:8892":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:3348:2590":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:15342:9180":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:1812:675":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:43214:8182":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12516:8627":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:4802:9493":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:3033:36819":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:578:10772":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"9:0:2428":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:6402:18037":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:1207:7981":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:6542:11403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:15383:9194":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:15456:9210":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:6947:2499":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:8118:9841":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:31973:10341":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:2528:9447":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:6813:9644":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11102:8495":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6505:11389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:42766:7813":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:3162:12141":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4402:12375":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:6658:8138":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:33256:12336":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:32659:9700":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5225:11112":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:44297:218":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:2175:25184":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"21:266:2567":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"17:10915:38451":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:44117:6805":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12289:8603":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:7412:10051":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:5457:11220":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:15390:9195":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:7942:7618":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"11:1582:9958":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:14599:8951":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:7710:12410":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:2872:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:45360:10426":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:9220:18034":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:3319:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6721:11488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"4:8309:7633":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:591:17834":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6342:38445":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:41423:29406":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4916:11010":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:23012:10334":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:14545:8937":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:11140:6833":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:15720:9300":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6098:25057":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:12348:1861":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"16:7686:9785":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:14111:8851":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"11:1896:2492":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:43185:8178":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:2666:10078":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:1449:155":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:9313:10229":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"0:117:1979":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"4:11682:8105":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"20:0:1995":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"17:11269:25158":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:40081:10350":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10573:38457":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:10969:33201":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:46232:10523":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:4761:11610":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:40018:6782":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:6636:11454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:2231:7561":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:11932:6814":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:31998:243":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:5756:9512":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:4050:17940":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:4986:8015":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:4787:10924":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:11313:8507":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13064:8656":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:10669:10084":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:13024:25133":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:8294:11731":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:43125:8176":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:80:7953":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:10472:33265":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"4:5227:10101":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:21957:17902":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:15289:9165":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:5960:9528":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:8046:17873":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:2512:12306":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"4:6446:219":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:5367:25054":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:4309:7589":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:10264:6854":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:954:9950":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:8175:9847":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:8534:8088":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:8828:8094":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:43225:8183":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:14212:8887":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:6398:10110":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:4543:6862":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"11:2140:9951":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:10607:33363":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:11647:8532":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:3648:7589":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:43965:10397":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11730:8539":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:13477:204":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:40256:8130":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:15734:9302":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"11:2423:2495":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:3116:2483":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:12360:6811":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:9401:10131":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:46019:10486":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:3473:8003":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13814:8809":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13855:8813":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:22876:17902":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"21:312:2581":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"4:9374:10121":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:46430:10529":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"20:705:2534":{"crate_id":20,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"16:6433:7527":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13899:8821":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:40228:7658":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:7656:25066":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:40764:8166":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:7412:11614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:4104:36853":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:5046:11069":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12464:25251":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"15:288:8026":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13272:8704":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:45413:10433":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:10714:8558":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"11:1887:2495":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:1692:10906":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15799:9320":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:16249:9429":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"4:10187:10368":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:1686:10905":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:485:10717":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:5526:10102":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:11747:8110":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:8026:17839":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:22968:10330":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:4891:10994":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:3590:6789":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:6295:10303":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:12328:1269":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:14994:9108":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:5385:7399":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:8528:8086":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:11075:33361":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:11405:8514":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11256:8501":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"4:2460:17897":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"5:6421:18038":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:872:8370":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:14587:8944":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:4094:17943":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7799:7547":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:33798:12342":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:40270:7660":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:1191:8065":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:7955:10063":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:39288:10343":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:3153:6684":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:22762:29410":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:6657:11466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:430:8049":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:11042:8491":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:45818:10463":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5370:11170":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"14:214:9941":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13594:8758":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:40371:8148":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:40381:8150":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:5722:9466":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:41678:7590":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"18:689:8359":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6278:7505":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:14246:8890":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5802:25055":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:4932:11014":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:6798:10128":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:11115:7978":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:10294:8081":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:7402:8063":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:5306:11150":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:40011:6781":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:41670:7589":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:12408:7432":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"14:165:24132":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:5283:11142":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"20:424:8317":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"1:9292:2610":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:6519:11390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:8626:10203":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"11:1603:9959":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:30461:2485":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:9300:7622":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:2862:162":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:10203:6789":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:4502:9484":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:8236:7635":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:5974:7617":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:16050:8704":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:5107:9503":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:10254:6850":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:21419:7676":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:10920:10247":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"4:9396:10130":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"4:9147:8100":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:12543:8629":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:4427:10095":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:10252:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:10511:7665":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:12308:33173":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:8155:10148":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2355:7463":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:2280:137":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"11:710:7595":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:42711:7808":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:4696:6863":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:4613:220":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:15992:9375":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:11634:8531":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:43483:6826":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:765:29310":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12201:8600":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:45801:10462":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:643:8340":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:7851:10258":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11242:7983":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:8126:12421":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:40187:7654":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:7380:8062":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:581:7676":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:1680:10902":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:9272:33178":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:1890:8083":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"9:53:7563":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:2053:11773":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:6532:9597":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:11567:8522":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:12478:8620":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:15206:9147":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:22382:17645":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7144:25064":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:4502:36852":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:7538:17851":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:8093:9838":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:3965:2495":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:12346:1776":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"16:5846:9518":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:2612:9451":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:1707:10913":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:623:38464":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:15176:9141":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13832:8810":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:13450:29886":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:1910:8059":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:1535:10804":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:7559:9781":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:10506:12457":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:46534:10537":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:5108:17994":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:14414:8915":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13606:8761":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:11665:10136":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:46602:10541":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:76:1788":{"crate_id":1,"path":["core","u32"],"kind":"module"},"5:671:10033":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:3614:9474":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:883:7594":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6665:25061":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4973:6771":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:7582:12406":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6263:9570":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:43379:6823":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:45495:10438":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:2207:10041":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:6849:9656":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:22746:10309":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:1593:8058":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5624:11288":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:11825:8551":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:11270:161":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:5528:11240":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:1639:10878":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:9118:10221":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7741:7545":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:43643:6820":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:22935:10327":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:16151:9409":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:7984:11707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:5146:423":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:6509:185":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:7580:9782":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:40300:8140":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:532:10748":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:2434:17887":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11497:7994":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:365:10061":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:8622:148":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11877:7429":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:11331:6826":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5102:11082":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:8061:10147":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6560:7529":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:45396:10432":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:15624:9274":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:15678:9294":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:7509:9768":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5400:7400":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:4797:6865":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:2199:128":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"18:481:8338":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:43296:8188":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:6746:11492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:15116:9123":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:3782:17939":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:3551:10088":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:40131:10357":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"5:3872:2492":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:2708:9455":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:44101:6803":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:43662:6832":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"11:787:7594":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:860:9434":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:11089:7977":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:3022:225":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:1075:9957":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:40004:6780":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4909:11006":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:523:10742":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:1671:10896":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:12328:12463":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:7338:33348":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11510:8518":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:5897:7499":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:39948:6785":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12175:8596":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13877:8820":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11128:8468":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:542:7476":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:44315:206":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6047:9537":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:11547:8426":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:7689:33254":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:8855:10220":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:10877:7973":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8631:12419":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11537:8519":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:4152:17947":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"20:496:2532":{"crate_id":20,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"20:201:2213":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"4:8702:10212":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:4044:17941":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:15646:9279":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15058:7454":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"11:1087:38432":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:10903:238":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:5591:113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:11773:8545":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:46523:10536":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:8226:25069":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:11235:10132":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:10700:32715":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:15368:9190":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:45670:10455":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:7546:11679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10018:25108":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:40200:7655":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:5546:11251":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:7485:11636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:2702:10077":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:4612:17968":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:7372:2495":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"20:520:7948":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"4:8439:7636":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:4634:17969":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"11:434:8050":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4622:10273":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6629:11453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:4423:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:700:2495":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13424:8715":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5290:11144":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12572:7403":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:3355:140":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:403:8371":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12707:8019":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:40730:8161":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:484:33352":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"9:482:24045":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:2631:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:37888:12346":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:4346:10094":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"9:502:10018":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:6606:8022":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:6160:24167":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:2418:9442":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:1559:10821":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:22659:7670":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:4243:8089":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:42551:6861":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:15039:9117":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11799:7996":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"20:449:136":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"5:1480:7590":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"9:357:24061":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:497:10722":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"18:706:6809":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13211:8690":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:6311:33345":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:2940:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"5:2526:11749":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:15356:9187":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:1726:36853":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:4863:17956":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:8601:8086":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:23034:10336":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:5588:11266":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:9105:7614":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"6:6441:11357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:12628:6833":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"8:0:2427":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:4824:458":{"crate_id":1,"path":["core","char"],"kind":"module"},"6:4971:11031":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:41536:172":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:1043:9690":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:9346:7640":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:44307:226":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:4959:11026":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:10381:12021":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"4:931:17852":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:5415:11190":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:5039:11067":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"11:396:8047":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:2037:7987":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:39893:6777":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6079:7478":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:351:8042":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:39969:6776":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"13:0:2426":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:6650:11465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:1327:9953":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:513:8373":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:11407:10015":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:46664:10543":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:3244:36023":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12768:25109":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:5006:9500":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13375:8708":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:8265:11724":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:3832:2446":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"6:5344:11159":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:4469:7652":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:12574:6836":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:15748:9309":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:15249:9155":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:7314:11567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:43204:8181":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5320:11154":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:6039:7607":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:4614:9488":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:21473:32551":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:7602:11701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:9190:18033":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"20:611:8330":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"17:10905:7974":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:45928:10483":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:1923:8061":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:553:10759":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6648:9606":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:6435:11354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:3597:8004":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:9205:18032":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6621:11452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:7539:9469":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:586:10776":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:15445:9209":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"0:0:1994":{"crate_id":0,"path":["idna"],"kind":"module"},"16:867:8369":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:14079:8847":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:3669:8387":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:6491:11378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:43397:6821":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:12345:1794":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:13046:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:8228:10152":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12863:8643":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:8773:10215":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:14325:8900":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:10672:10086":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:7575:11695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:15760:9311":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:2448:17891":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:12326:1822":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:31997:2592":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:33452:12340":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:12827:6809":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:11166:8496":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:3029:11746":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:5347:9505":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:13187:8676":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:3533:10196":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:9305:7638":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"13:229:7555":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:5457:18072":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:5181:11089":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13972:8560":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:21505:17902":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:39218:213":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:46508:10535":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:2854:9462":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:21456:32557":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:8211:7610":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:7330:11579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:473:10711":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:12833:6808":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"0:7:1969":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"9:330:10701":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:39258:12353":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:39180:211":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:3608:17900":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:11075:7415":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:44129:7667":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:4867:17959":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:299:8037":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9671:25107":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:3847:10091":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"10:0:2429":{"crate_id":10,"path":["adler"],"kind":"module"},"4:6655:7625":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:1829:8080":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:2836:12102":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:44417:10416":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:46380:10527":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:9139:7589":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13785:8804":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:6417:11341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:6880:11530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:22855:12155":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6895:9658":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:45343:10425":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:7489:6713":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11574:7561":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:2151:9953":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7061:9680":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:7891:33356":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:4108:17945":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:5277:11139":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:10978:33191":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:10887:38450":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"20:197:2541":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"1:22117:17557":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:943:7589":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:737:189":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"7:31:24032":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:2865:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:9131:7615":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"16:7132:9689":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:45649:10454":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:40055:10349":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"22:0:2556":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"4:3382:10087":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:5002:11048":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6729:11489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:14788:9004":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:22469:17638":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:8130:12420":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:2989:10081":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:8301:9858":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:2554:38431":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:9807:25112":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:11252:6821":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:5409:36853":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:41561:2495":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:917:7595":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:11770:10090":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:13626:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"16:2878:9463":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:3502:11756":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:925:9944":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12671:8017":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"4:8220:10151":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:1465:7589":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:45620:10453":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:7052:9677":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:15266:9162":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:6609:11445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:6615:8161":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:8630:11595":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:8838:7589":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:43306:8189":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:40739:8162":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:4265:8090":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:1356:9957":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:597:8374":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:3429:17928":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:7528:9777":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6588:9599":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:10247:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:6784:7626":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:39909:6784":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:3245:8059":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:15324:9176":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:2203:7990":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:1557:7596":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:43876:10395":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:1517:10793":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:10666:10082":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:46497:10534":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:3106:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:12353:8613":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:15151:9133":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:42223:6852":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:5713:11516":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:10399:6817":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:16079:9390":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"4:3949:10092":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:9884:780":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:44125:6800":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"18:680:8357":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12659:8632":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:10137:25105":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:33138:12339":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:7633:38440":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:3599:35603":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5244:11120":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:42449:11846":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:11029:7615":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"22:43:29333":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"1:44348:10409":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13581:8757":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12824:25131":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"20:8:2536":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"4:11252:11761":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:10068:25111":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:0:2434":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:2114:10040":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:12189:8005":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12433:7433":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:2323:24194":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:1485:10780":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:3037:36816":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"0:46:673":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"1:42216:6850":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:11899:35401":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:3014:24197":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:839:7589":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:4747:17945":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"14:40:8691":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"21:301:2580":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"6:5407:1218":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10671:38452":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:11290:8175":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:2249:10269":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11858:8190":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:7823:25067":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:4102:17944":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6782:25062":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:3554:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:12388:8615":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:11493:8517":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:4348:10271":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5466:11226":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:13437:8716":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:832:8057":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11051:8492":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:2548:9448":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:8259:9747":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"4:12325:458":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:3332:12348":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:5717:2498":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:39899:10345":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:6060:18086":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:3387:2488":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:8492:7654":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:8607:10201":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:21475:32555":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:39295:10344":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"16:7111:9687":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11373:8195":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:643:10067":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:8652:10097":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:41613:6847":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:1546:7595":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:7998:8558":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"11:1142:9956":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:22291:17643":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:4979:11036":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:3725:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"6:1653:10889":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:2548:8036":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10185:7419":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:11086:33346":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:7813:9788":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"20:534:7951":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"4:3472:8163":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"11:1676:38429":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:2542:10695":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:8029:11719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:3026:7588":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:2670:133":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:5167:32849":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:8200:127":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11345:6825":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:6927:9662":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:7597:10055":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:589:8344":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10266:6855":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:4856:9495":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:6412:25059":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:12076:8590":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:22329:17644":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:6409:11339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:3358:141":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15569:9255":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:2859:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:1585:10837":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:22427:17902":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:12043:8587":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"11:2443:2446":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:5020:11057":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5122:11084":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:39985:6778":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12584:7972":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:4424:9482":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:5052:17989":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:948:9949":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:5453:18071":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:22474:17636":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"15:327:7551":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:6574:7530":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:5483:11232":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:6698:11481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"4:5273:203":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"16:6300:9572":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:5895:10114":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:43903:10297":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:4882:9496":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:41992:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"20:542:2214":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"6:4837:10961":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:6847:8142":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:22957:10329":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"4:12337:887":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"16:4560:9486":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:12278:8010":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:7714:2492":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:9755:25104":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:742:7596":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:1007:9690":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:42504:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:15333:9179":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:12343:1782":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:10893:17902":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:10878:10241":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:39977:6777":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:41953:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:8282:11729":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6678:11472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:14968:9102":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11524:7995":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6948:7533":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:45328:10424":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:4294:8092":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7397:38442":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:2450:17892":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:39935:6783":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:14356:8906":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:624:6986":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:0:2435":{"crate_id":17,"path":["object"],"kind":"module"},"4:8522:6818":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"6:4800:10933":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:2838:9461":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:40238:8125":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:7452:11622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"0:22:2138":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"4:1599:8059":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11595:7426":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:10818:7972":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:4156:17948":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:732:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:12111:33347":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:21578:7668":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:7444:8102":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:23001:10333":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:21458:32553":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:3279:8058":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13363:8705":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:14723:8953":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12851:7436":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:6619:10124":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:4830:9494":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:3238:7589":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:9723:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:491:8339":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:11688:8535":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:15010:9109":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:39481:6676":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:6900:11544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:8685:17998":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:12331:1672":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:5247:954":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:10251:7421":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4924:11012":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:3481:210":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:11676:8104":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:123:7556":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13146:8667":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:13568:8753":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:7366:11595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12362:8614":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:3284:37942":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"7:0:1851":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6976:7535":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:1155:8064":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:10260:6853":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:45442:10435":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"3:0:2425":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12300:25250":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:3661:7590":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"22:449:38539":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"4:11906:10137":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:830:10034":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:33971:9709":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:39046:12362":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:6317:9575":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:46040:10487":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:12350:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"6:7348:11586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:15769:9315":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:8040:17840":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:22343:12305":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:41445:10371":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:41695:195":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:12335:717":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:9178:10222":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:536:17824":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:22844:10321":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:15410:9201":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12107:7403":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:9905:31856":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:8288:11730":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:39082:12359":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:8328:11738":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:44147:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:7954:17902":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:42966:11854":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:40103:12392":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:5581:11264":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"21:259:38527":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"16:7549:9780":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:45907:10482":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:5788:10111":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6379:11314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:15400:9198":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:12341:862":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"16:5863:25056":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:10256:6851":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"16:7618:7540":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12530:8013":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:6478:11369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:5630:11291":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:10997:8490":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:41257:169":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"15:0:2433":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:7467:11626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"4:12339:875":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"6:479:10714":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6664:11467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:11887:7643":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:5862:11756":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11063:8494":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:1518:7592":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6821:11518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11016:7975":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4876:10987":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:40121:10351":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:7461:11625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11189:8497":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:2394:9441":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5445:11211":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:837:9944":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:7561:11686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:31962:10340":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:40093:6817":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:11367:7415":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4942:11020":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6524:11391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:22253:17642":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:7604:7539":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:328:8040":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:7119:36861":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:43501:6825":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13412:8714":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:43761:12501":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:16138:9403":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:2478:9445":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5260:11128":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:11012:33184":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10982:25140":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:6353:7520":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8163:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:14091:8848":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:651:8340":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:1577:8067":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13553:8747":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:3544:12354":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:32083:6685":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"11:673:7589":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:13497:8729":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5617:11285":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:1496:10785":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:2432:11775":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"16:4976:9499":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:40341:8145":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:14038:8841":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:16187:9418":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:33197:12337":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:40247:8128":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:2757:11752":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:43365:6817":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:5352:11160":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:43547:6830":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12949:8375":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:42459:6860":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:4952:11023":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:39143:212":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:1939:651":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"22:669:7384":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"16:6466:9591":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:7659:8157":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:25886:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:40:2491":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:41622:10289":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"11:1107:9955":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:9402:2454":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11898:8554":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:15814:9321":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:9293:10228":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:14131:8852":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:507:8340":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"11:1891:2446":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:8216:9851":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:3184:12350":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"4:3287:10082":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:12514:6837":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:40754:8165":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:4501:10096":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7306:38444":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:4743:9491":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:11300:11762":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:23486:235":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:15701:9295":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:8750:10377":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"4:12330:1638":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:12323:405":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"17:14402:8913":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:4712:17986":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:2835:17902":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13116:8663":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:16235:9428":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"4:9386:233":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:5665:11305":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6775:11502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"22:470:7930":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"9:447:24046":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8313:177":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:1098:7980":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:15214:9149":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:6007:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:150:7382":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:43355:2542":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:6136:219":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:43653:6819":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:1917:8060":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12251:8009":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:40288:8134":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:2992:6989":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:44121:6799":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:734:12142":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:11891:8191":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"4:4273:8091":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:852:7590":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:3618:17920":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:41570:2608":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:5540:10106":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:4759:11608":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"4:12336:733":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:8460:10089":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"16:7695:9786":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:10564:8098":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:42488:9815":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:43671:6831":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:22553:10305":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:6962:7534":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:42951:10381":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:11557:8521":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:9409:161":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:2374:9440":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:16198:9419":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"4:12342:1800":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:21686:7668":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13999:8836":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:11571:10254":{"crate_id":4,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"1:43349:2176":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:40745:8163":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12422:8011":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"21:145:2216":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"4:9259:115":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:5205:10276":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"4:12276:10261":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:4500:7653":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:45702:10457":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:1490:10782":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13766:8799":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:44369:10414":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:7473:7486":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:11198:10221":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5134:11085":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:14503:8933":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"18:635:8356":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:30493:29411":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:11812:8549":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:15313:9172":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:21560:17555":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:1580:10835":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"20:696:2533":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"1:41295:10283":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:14386:8909":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13046:8653":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:6874:11529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:5075:9502":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:2951:136":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:13325:7446":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:46078:10489":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:5671:11307":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:12329:333":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:3271:8060":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13485:8728":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:10622:38455":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:15822:9324":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:4944:17955":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:5742:9508":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:5266:11131":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:14189:8878":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:6447:11358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:15473:9217":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:726:7395":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"22:534:7936":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"4:726:153":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:33625:12341":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10092:25129":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:30467:6892":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:41611:2612":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:8502:8153":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:22341:29450":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:39920:29420":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:7609:10057":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:506:17820":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"4:12324:1149":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"21:67:2215":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"6:4870:10985":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:3352:139":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"22:948:29336":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"16:4913:9497":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5436:11205":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:3192:12352":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:43251:8121":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:256:8369":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:44097:6801":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:7422:37940":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:2868:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:15:2403":{"crate_id":1,"path":["core","write"],"kind":"macro"},"14:0:2432":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:1830:2492":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:15582:9261":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:14436:8926":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:9910:7662":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:5029:17987":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:1663:10895":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:14284:8895":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:12349:1371":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:3029:8382":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:32085:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:15521:9254":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:42072:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13946:8827":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:7014:25063":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:16269:8714":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:7429:11615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:22979:10331":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"5:870:17853":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:754:8368":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:862:2495":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:9088:8098":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:40158:8121":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:234:225":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:15655:9281":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12494:8622":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:5382:11174":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7006:9666":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:8145:8251":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"5:3250:37939":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:8539:17938":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:4770:6688":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:1976:1312":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"11:844:17852":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:43828:10394":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:42513:6860":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12150:8594":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:40506:8153":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:7645:2447":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:942:9947":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10258:6852":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:1942:6984":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:41686:2495":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"12:0:2431":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:4239:11756":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"22:386:7382":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"1:1946:6890":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:22606:10306":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:46322:10525":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"10:36:10700":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:3559:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8625:12418":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:6924:2498":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:45687:10456":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:32473:9703":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:7392:2446":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"11:687:7590":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:113:7959":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:5385:202":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"16:3329:9472":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13844:8812":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:15778:9317":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:3027:36815":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"20:599:38469":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"4:5576:10108":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"18:598:38461":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12454:8618":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:2496:652":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:4468:11756":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:46477:10532":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:11341:7985":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5769:9517":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:30836:195":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:44182:12512":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:12297:17841":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:4352:9481":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:14847:9056":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:6035:8129":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:608:8351":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:7594:12423":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:41758:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:11604:7630":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:41875:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:1699:10909":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4885:10992":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:7452:7609":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10170:7400":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:10902:11759":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:32053:2593":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:14177:8876":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:40530:8155":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5329:11157":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:14752:8973":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:0:485":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:6727:10125":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:40322:8143":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:6749:9630":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:1510:10790":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:45296:10420":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:40178:8122":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:5700:9464":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:14986:9107":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:0:2436":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12557:7415":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:6120:25058":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:15616:9273":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:5014:11054":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11443:8515":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:15078:9118":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7379:38446":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:40332:7661":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6442:9588":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:6689:11475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:7527:2457":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:43988:6810":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:4587:9487":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:11048:7589":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:7621:10058":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11841:7999":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12969:8646":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:8136:9843":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6872:9657":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"21:0:1996":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"1:3584:33054":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"11:2569:2457":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:40357:8147":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:1621:10866":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:6853:11778":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:40309:8141":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:6164:11756":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:4269:11756":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:6066:8020":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:10710:7971":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:1496:2495":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:41311:12430":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:12597:8630":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"4:10907:10148":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:261:8370":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:6738:11491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:41339:7806":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:45567:10450":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:698:7394":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:2089:7635":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:8258:2180":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:43286:8187":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:42970:8171":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:538:10751":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11354:8512":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:559:10762":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:14463:8928":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:7094:36864":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:22396:12305":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"11:800:2446":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:5415:9506":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:7321:2608":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:14575:7433":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:10997:10109":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"4:12292:7644":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:42209:6851":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:22209:17641":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:13674:8763":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6427:7525":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:43583:6827":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:11072:7590":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:6471:11367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:45538:10441":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:4164:17950":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:3111:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:45428:10434":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:10262:205":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:22115:17902":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:10931:7634":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:5677:11310":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:14855:9059":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:9241:10223":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:41497:10286":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12647:8016":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:22724:29433":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:1605:8060":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:4757:11606":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"4:3247:36702":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:9161:10112":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:31980:6863":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"16:2728:9456":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:16176:9417":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"11:1883:7589":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:9700:33268":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"14:31:9936":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:12590:6838":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:45878:10481":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5557:11257":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"9:392:24047":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:3196:9437":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:659:7961":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:10720:38456":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:14876:9067":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:4259:11756":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:2609:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13455:8724":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:14147:8857":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7755:7546":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:9445:10231":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:15126:9124":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11324:8509":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:41457:10093":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:6335:7489":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:3337:12349":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"16:7857:9796":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:10202:225":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"4:912:8057":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:1628:10870":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11142:7403":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:40050:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:1064:36853":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:6768:11501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"4:8472:17901":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:11217:8174":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"0:24:598":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"4:11209:33196":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:4062:9480":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:8162:7634":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:10828:38458":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:2103:10039":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:6957:2500":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:13986:8835":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:8575:10093":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:42476:30072":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:6456:25060":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:10960:10089":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:46409:10528":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11853:8553":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:563:7391":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:14516:8934":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:8184:138":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:45990:10485":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:5774:219":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13738:8792":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:5914:7504":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:6763:11500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"11:875:9949":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:5031:11062":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5296:11147":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:45751:10460":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6620:9605":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:5922:2446":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:7363:2490":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:2236:7598":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:3807:10039":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:648:17836":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:4080:17942":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:6597:11440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4965:11028":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:21429:32544":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:4897:10997":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12127:8593":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"11:856:9947":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:437:8372":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:1160:9957":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11605:7427":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:8259:11723":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:2438:9443":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:2636:9452":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:3250:36711":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"14:7:9936":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"22:1034:29337":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"5:6763:36853":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5536:11245":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:5314:11153":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:9369:186":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:40151:10358":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:21487:32549":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:3475:9473":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5489:11234":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:2788:9459":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"9:178:7578":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:1311:9690":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:417:184":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:4383:12374":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"22:728:38539":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"1:2128:188":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6532:11396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:40209:7657":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:3565:12355":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:15596:9267":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"20:432:2537":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"4:9326:33193":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:3635:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:7841:8374":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11674:8534":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:7537:11676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:9527:8082":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:10534:38454":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:5852:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:12900:7439":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:41553:7590":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:4921:10100":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:9427:10132":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:7888:9800":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"11:811:2492":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"21:228:2217":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"17:15635:9278":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:491:10719":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5515:11239":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"4:1584:2446":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6231:9567":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"10:44:7562":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:12792:8445":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:16032:8694":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:43277:8186":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:45509:10439":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12695:8633":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"4:11217:7667":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:43940:10396":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:2684:9454":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:3104:6680":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:14235:8888":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:12344:10293":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:33315:12338":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:37833:12345":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:6714:11487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"4:11092:33337":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:4686:11776":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:22797:29414":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:12812:2466":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"14:202:2445":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:7516:11662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:42111:7807":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:44405:9964":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:43529:6829":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:33079:2450":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:43447:6822":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:13502:10299":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:41601:2609":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:2338:9438":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"0:119:1992":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"16:2768:9458":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5083:11081":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10155:7399":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:15418:9202":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:8306:11733":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:1723:10918":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:96:7956":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:46572:10539":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:45734:10459":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:2598:10076":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:16259:8709":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"4:1066:9953":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:46488:10533":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:5336:11158":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:11419:7403":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:10617:12478":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:1593:10842":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:5038:17988":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:7595:12424":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:41630:225":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:7306:11562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:9984:25127":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:3792:7635":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:21558:17902":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:15273:9163":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12399:8616":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:2234:7993":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:7497:9767":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10769:38453":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"23:0:2557":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"18:670:7966":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:5361:11164":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:11497:33358":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"22:752:7938":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"17:12213:8007":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:30482:6860":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:41279:10281":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:5598:11271":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:15434:9205":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:15608:9270":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:39126:2487":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:12724:25130":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:5817:7494":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:21566:17558":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"15:306:8031":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:21984:7669":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5219:11109":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:12347:943":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"5:7048:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:7730:2493":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:43678:6778":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:7910:33343":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:11610:8101":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:3146:6682":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"16:2660:9453":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:30863:7676":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:15426:9204":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:8205:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5250:11122":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:15222:9151":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"11:2369:9962":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:46057:10488":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:6758:9631":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:42033:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4811:10941":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:5995:9531":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:5645:10109":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"16:2572:9449":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:10683:32717":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:2707:201":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:4826:17968":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:15168:9138":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:45463:10436":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:11914:10137":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:1577:7589":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13774:8801":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:44356:10411":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:45605:10452":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:774:7592":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:15138:9127":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:43811:10393":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:13644:10303":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:16212:9423":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"4:8304:10153":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:5052:11071":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13089:8657":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:2592:9450":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:40772:8168":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:7472:2495":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:2285:10242":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:43429:6824":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:7436:2495":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"0:118:1984":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"1:2510:12305":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"11:2469:2492":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"4:10989:10147":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:1342:9951":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:45311:10421":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11392:7986":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6991:38439":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:1978:763":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"4:3380:10086":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:3925:9479":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:6915:11555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:8172:10149":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"16:4718:9490":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:22924:10326":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"5:3305:8061":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:10463:152":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:12332:1760":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:13308:7444":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:8788:18011":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:9391:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:1971:6985":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:44113:6804":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:6802:9643":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6788:11509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:14341:8902":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:41479:10284":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:2506:2364":{"crate_id":4,"path":["std","io"],"kind":"module"},"17:10759:7403":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13959:8830":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:9265:10224":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:3187:12351":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:15102:9122":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:926:17854":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2748:9457":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:5191:11096":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:14012:8838":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:11915:25226":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:16223:9425":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"4:9155:2495":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:3636:12361":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"20:655:2530":{"crate_id":20,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"4:6343:7623":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:12225:8008":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:12551:6839":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2612:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:9858:25123":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:7727:7543":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5423:11195":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:8188:9850":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:8341:11742":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6480:7528":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:14868:9066":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:12338:869":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"14:160:9936":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:4865:17958":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:8669:31855":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3301:12358":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:5064:11756":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:46549:10538":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:14560:8941":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:15281:9164":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"22:966:7942":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"16:6543:9598":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:6120:10110":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:22990:10332":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"16:4641:9489":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11583:8527":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"20:511:2533":{"crate_id":20,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"1:45480:10437":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:44394:10415":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:15190:9144":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1503:10788":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:11764:8544":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12318:8375":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:6858:11777":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:16093:9394":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:13538:8741":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:2856:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:4617:10272":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:46625:10542":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"4:7973:10138":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:4985:11038":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:5636:11294":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:43633:6818":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:9737:25106":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:8202:7549":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11661:8533":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:6756:11499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:4992:11041":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:7295:12073":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10350:7424":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:10221:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6811:11515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:5958:11756":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:45524:10440":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:4:1231":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"16:2998:9471":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:12772:2461":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"11:2536:10694":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:2309:7601":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"7:78:24039":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:46155:10522":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:22690:7671":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:11637:10133":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:43338:6816":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"4:6853:232":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:43194:8180":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:5200:11101":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:8300:11732":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"4:8448:7637":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"16:2458:9444":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:10315:10232":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:6385:9585":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7570:9470":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:39198:214":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:7085:9681":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:10439:7401":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:46351:10526":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12264:8602":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:3899:9478":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:14372:8907":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10218:7420":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:3397:2492":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:16069:9389":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:12683:8018":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"4:8509:6817":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"13:110:38434":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:38467:12347":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"11:102:10693":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13252:8694":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:6562:11419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:40716:8159":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"20:482:2531":{"crate_id":20,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"1:44293:163":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:39992:6779":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:545:10754":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6494:9594":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:6670:11470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:9718:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:43782:10385":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:43325:2459":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"4:5453:128":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:10612:7969":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:6460:11359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:35847:9710":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:5929:7616":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:40218:8123":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:1588:2492":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:39130:8115":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13509:8730":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12056:8589":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11214:7982":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:14529:8935":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:5174:11088":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:45719:10458":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:9094:198":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:10044:25128":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:31924:10697":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:11227:8499":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:42758:7812":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:7355:9727":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:14489:8930":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:4823:17990":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"4:2289:17884":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:45375:10427":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:13292:7440":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:46587:10540":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:8176:2591":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:45833:10464":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:1547:10813":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5112:11083":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12371:8644":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"14:187:24139":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"22:1122:8309":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"14:220:9943":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:7553:7605":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"11:0:2430":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:22738:10308":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:3741:36853":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"11:2124:9690":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10661:7970":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:8587:17967":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:4468:9483":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:22713:10307":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:12929:8644":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"21:319:8313":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"5:2197:17820":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:8351:11744":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:22824:11779":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:9781:25122":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:7882:7636":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:560:10064":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:40066:12406":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3209:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:0:1664":{"crate_id":4,"path":["std"],"kind":"module"},"4:9695:8084":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"4:3289:10083":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:30429:2484":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:5037:9501":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:5146:11086":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9938:25126":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:2303:24168":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:44006:2455":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:41797:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:906:2492":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:12485:25252":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:39238:215":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:1526:10798":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:11097:6823":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"11:1903:8058":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11293:25159":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:8012:11710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:46277:10524":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:9688:137":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:43176:8177":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:22:795":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"20:319:17902":{"crate_id":20,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"4:12344:1788":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"16:5686:7493":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:22441:17637":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"0:44:2183":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"4:3024:136":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:1057:9951":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:4438:36852":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:276:2579":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"11:1051:9953":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:2808:9460":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:8271:11725":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:2326:9951":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:3242:9705":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:8844:8097":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:8314:17931":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:7569:10052":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"20:620:2527":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"17:15931:8676":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:12993:25132":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:6219:33350":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:5217:7607":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:4336:10270":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:15376:9193":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10524:7967":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10419:7425":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"18:538:7389":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:44105:6802":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:15957:9345":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:7590:7538":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"20:457:2529":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"17:16165:9412":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:7428:25065":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:2936:24196":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:37778:12344":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:5400:11185":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:10284:7422":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:16121:9401":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"4:10455:113":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"18:515:8337":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:7444:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13173:8675":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:3810:9476":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:15301:9171":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:40516:8154":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:7098:9684":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10954:25139":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:7359:11591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:4750:6864":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:12887:7437":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:8593:10200":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7769:9787":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:15092:9121":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:7978:10140":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12443:8617":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:44171:10406":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:7168:10229":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:41719:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}