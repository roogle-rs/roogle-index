{"root":"0:0:1830","crate_version":"0.5.0","includes_private":false,"index":{"b:1:2456-0:155:1809":{"id":"b:1:2456-0:155:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32719:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2458:29255"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:114-0:161:1807":{"id":"0:114-0:161:1807","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1807","glob":false}}},"0:0:1830":{"id":"0:0:1830","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1805","0:114-0:161:1807","0:115-0:170:1808","0:116-0:155:1809","0:117:1815","0:118:1820","0:119:1828"],"is_stripped":false}}},"5:5561:2148":{"id":"5:5561:2148","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[704,0],"end":[712,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:42372:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:748"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:118:1820":{"id":"0:118:1820","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42372:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12934:1986":{"id":"1:12934:1986","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42231:191","prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12599:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2978:246-0:155:1809":{"id":"a:1:2978:246-0:155:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12885":{"id":"1:12885","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12886:878","1:12887:2124","1:12888:36745","1:12889:36746","1:12891:36747","1:12894:33159","1:12895:36748","1:12896:333","1:12897:34783","1:12898:2010","1:12900:32272","1:12902:32273","1:12904:32274","1:12906:36749","1:12907:36750","1:12908:34802","1:12909:34803","1:12910:34806","1:12911:34807","1:12913:1973","1:12914:10403","1:12915:1993","1:12916:29476","1:12917:29417","1:12918:7991","1:12919:36751","1:12920:29429","1:12921:32909","1:12924:2119","1:12927:2120","1:12930:6567","1:12934:1986","1:12938:2140","1:12941:29421","1:12944:34810","1:12947:36752","1:12950:36753","1:12953:34812","1:12956:34814","1:12959:34816","1:12962:34817","1:12965:2094","1:12968:36754","1:12971:36755","1:12974:36756","1:12977:36757","1:12979:36758","1:12981:36759","1:12983:36760","1:12984:36761","1:12985:36762","1:12988:36763","1:12991:2142","1:12994:34818","1:12997:36764","1:13000:36765","1:13003:36766","1:13006:36767","1:13008:1988","1:13009:34715","1:13010:33861","1:13011:33862","1:13012:33863","1:13013:34718","1:13014:34719","1:13015:34720","1:13016:36768","1:13018:12299","1:13019:36769"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:100:1817":{"id":"0:100:1817","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[570,4],"end":[574,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42372:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2771-0:170:1808":{"id":"b:1:2771-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:138","1:2775:1624"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98:2118":{"id":"0:98:2118","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[558,4],"end":[561,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:695:29261":{"id":"5:695:29261","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2766-0:155:1809":{"id":"b:1:2766-0:155:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2769:138","1:2770:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3578-0:170:1808":{"id":"b:1:3578-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32719:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3576:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3580:1639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12888:36745":{"id":"1:12888:36745","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12924:2119":{"id":"1:12924:2119","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12985:36762":{"id":"1:12985:36762","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12604:6636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2458:29255":{"id":"1:2458:29255","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1809":{"id":"0:155:1809","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:42353:2446-0:155:1809","a:1:42354:2445-0:155:1809","a:1:32718:237-0:155:1809","a:1:32775:2426-0:155:1809","a:1:2978:246-0:155:1809","b:1:3578-0:155:1809","b:1:2456-0:155:1809","b:1:2760-0:155:1809","b:1:2756-0:155:1809","b:1:2766-0:155:1809","b:1:2771-0:155:1809","b:1:2453-0:155:1809","0:159"]}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2807:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2771-0:155:1809":{"id":"b:1:2771-0:155:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:138","1:2775:1624"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13000:36765":{"id":"1:13000:36765","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32718:237-0:161:1807":{"id":"a:1:32718:237-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32718:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12886:878":{"id":"1:12886:878","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12897:34783":{"id":"1:12897:34783","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12089:1648"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12962:34817":{"id":"1:12962:34817","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12599:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[538,0],"end":[583,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1821","0:96:2083","0:97:1822","0:98:2118","0:99:2087","0:100:1817","0:102:1829"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2978:246-0:161:1807":{"id":"a:1:2978:246-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2456-0:170:1808":{"id":"b:1:2456-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32719:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2458:29255"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12983:36760":{"id":"1:12983:36760","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13009:34715":{"id":"1:13009:34715","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40202:29374","Self::is_ascii":"1:13008:1988"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40202:29374","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13013:34718":{"id":"1:13013:34718","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:39191"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1817":{"id":"0:88:1817","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42372:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5577:2040":{"id":"5:5577:2040","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12918:7991":{"id":"1:12918:7991","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44366:6647","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12916:29476":{"id":"1:12916:29476","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12917:29417"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44386:6648","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12971:36755":{"id":"1:12971:36755","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12579:2301","`DoubleEndedIterator`":"1:7960:131","prim@char":"4:12072:453","str::rmatch_indices":"1:12974:36756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44262:6658","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2146":{"id":"0:87:2146","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:2087":{"id":"0:99:2087","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[564,4],"end":[567,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12913:1973":{"id":"1:12913:1973","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44082:2009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13012:33863":{"id":"1:13012:33863","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13018:12299":{"id":"1:13018:12299","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4759:12299"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44420:6605","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12968:36754":{"id":"1:12968:36754","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12579:2301","`DoubleEndedIterator`":"1:7960:131","prim@char":"4:12072:453","str::matches":"1:12965:2094"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44334:6657","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12599:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1829":{"id":"0:102:1829","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[577,4],"end":[582,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42372:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32718:237-0:170:1808":{"id":"a:1:32718:237-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32718:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12917:29417":{"id":"1:12917:29417","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12916:29476"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44395:6661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2760-0:161:1807":{"id":"b:1:2760-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2762:748"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2762:748":{"id":"1:2762:748","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12921:32909":{"id":"1:12921:32909","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:696:29262":{"id":"5:696:29262","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:457":{"id":"0:168:457","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[522,0],"end":[536,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2807:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2774:138":{"id":"1:2774:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32648:10640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:5559":{"id":"5:5559","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5560:37455","5:5561:2148","5:5564:37456","5:5567:37457","5:5575:37458","5:5576:37459","5:5577:2040","5:5578:33859","5:5579:33860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1044","0:87:2146","0:88:1817","0:91:1829"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12900:32272":{"id":"1:12900:32272","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42231:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2759:2156":{"id":"1:2759:2156","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2733:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2756-0:170:1808":{"id":"b:1:2756-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2759:2156"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12944:34810":{"id":"1:12944:34810","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12579:2301","`DoubleEndedIterator`":"1:7960:131","prim@char":"4:12072:453","str::split":"1:12938:2140"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44130:6650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12599:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13019:36769":{"id":"1:13019:36769","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4756:36769"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44429:6604","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13011:33862":{"id":"1:13011:33862","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12914:10403":{"id":"1:12914:10403","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44088:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32775:2426-0:155:1809":{"id":"a:1:32775:2426-0:155:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32775:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12915:1993":{"id":"1:12915:1993","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44098:6646","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12894:33159":{"id":"1:12894:33159","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12127:6640"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12904:32274":{"id":"1:12904:32274","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1815":{"id":"0:117:1815","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42372:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12938:2140":{"id":"1:12938:2140","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12579:2301","`DoubleEndedIterator`":"1:7960:131","prim@char":"4:12072:453","str::split_whitespace":"1:12916:29476","str::rsplit":"1:12944:34810"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44112:6652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13008:1988":{"id":"1:13008:1988","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:692-0:161:1807":{"id":"b:5:692-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:688:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:694:7695","5:695:29261","5:696:29262"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12895:36748":{"id":"1:12895:36748","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1044":{"id":"0:86:1044","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2083":{"id":"0:96:2083","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[546,4],"end":[549,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5578:33859":{"id":"5:5578:33859","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13011:33862"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3578-0:155:1809":{"id":"b:1:3578-0:155:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32719:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3576:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3580:1639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2453-0:161:1807":{"id":"b:1:2453-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32719:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2455:2191"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:588":{"id":"0:24:588","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:7020:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12907:36750":{"id":"1:12907:36750","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12078:1544","crate::ops::IndexMut":"1:3240:2288","str::slice_unchecked":"1:12906:36749"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12941:29421":{"id":"1:12941:29421","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12395:6662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13016:36768":{"id":"1:13016:36768","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4758:36768"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44411:6606","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1822":{"id":"0:97:1822","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[552,4],"end":[555,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42353:2446-0:161:1807":{"id":"a:1:42353:2446-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42353:2446","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5579:33860":{"id":"5:5579:33860","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13012:33863"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12911:34807":{"id":"1:12911:34807","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:12910:34806"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12950:36753":{"id":"1:12950:36753","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12579:2301","str::split":"1:12938:2140","prim@char":"4:12072:453","str::split_terminator":"1:12947:36752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44180:6651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12599:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5575:37458":{"id":"5:5575:37458","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1971":{"id":"0:22:1971","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12947:36752":{"id":"1:12947:36752","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12579:2301","str::split":"1:12938:2140","prim@char":"4:12072:453","`DoubleEndedIterator`":"1:7960:131","str::rsplit_terminator":"1:12950:36753"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44162:6653","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13006:36767":{"id":"1:13006:36767","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12540:137","`FromStr`":"1:12539:2296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12539:2296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12539:2296","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1821":{"id":"0:95:1821","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[540,4],"end":[543,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12887:2124":{"id":"1:12887:2124","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1809":{"id":"0:116-0:155:1809","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1809","glob":false}}},"1:12920:29429":{"id":"1:12920:29429","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44404:6660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2775:1624":{"id":"1:2775:1624","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:1807":{"id":"0:161:1807","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[513,0],"end":[519,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:42353:2446-0:161:1807","a:1:42354:2445-0:161:1807","a:1:32718:237-0:161:1807","a:1:32775:2426-0:161:1807","a:1:2978:246-0:161:1807","b:1:3578-0:161:1807","b:1:2456-0:161:1807","b:1:2760-0:161:1807","b:1:2756-0:161:1807","b:1:2766-0:161:1807","b:1:2771-0:161:1807","b:1:2453-0:161:1807","b:5:692-0:161:1807","0:169","0:92","0:167"]}}},"b:5:5833-0:170:1808":{"id":"b:5:5833-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10018:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32719:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5831:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5835:1601"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2766-0:170:1808":{"id":"b:1:2766-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2769:138","1:2770:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2807:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12889:36746":{"id":"1:12889:36746","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12919:36751":{"id":"1:12919:36751","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44376:6649","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2760-0:155:1809":{"id":"b:1:2760-0:155:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2762:748"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:107:721":{"id":"0:107:721","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[650,4],"end":[701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9988:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9969:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13014:34719":{"id":"1:13014:34719","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:39191"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2770:1626":{"id":"1:2770:1626","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5564:37456":{"id":"5:5564:37456","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2756-0:161:1807":{"id":"b:1:2756-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2759:2156"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2455:2191":{"id":"1:2455:2191","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42353:2446-0:170:1808":{"id":"a:1:42353:2446-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42353:2446","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12891:36747":{"id":"1:12891:36747","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12889:36746"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5567:37457":{"id":"5:5567:37457","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[715,0],"end":[715,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2818:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32775:2426-0:170:1808":{"id":"a:1:32775:2426-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32775:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12984:36761":{"id":"1:12984:36761","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12988:36763":{"id":"1:12988:36763","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13015:34720":{"id":"1:13015:34720","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:39191"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[523,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:694:7695":{"id":"5:694:7695","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:2769:138":{"id":"1:2769:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12997:36764":{"id":"1:12997:36764","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12599:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12910:34806":{"id":"1:12910:34806","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:12911:34807"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32718:237-0:155:1809":{"id":"a:1:32718:237-0:155:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32718:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42354:2445-0:155:1809":{"id":"a:1:42354:2445-0:155:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42354:2445","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2456-0:161:1807":{"id":"b:1:2456-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32719:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2458:29255"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5560:37455":{"id":"5:5560:37455","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:282:2291","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:282:2291","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:748":{"id":"0:109:748","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[705,4],"end":[711,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42372:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1829":{"id":"0:91:1829","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42372:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12977:36757":{"id":"1:12977:36757","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2973:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:44:2016":{"id":"0:44:2016","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[223,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42354:2445-0:170:1808":{"id":"a:1:42354:2445-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42354:2445","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12906:36749":{"id":"1:12906:36749","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12078:1544","str::slice_mut_unchecked":"1:12907:36750","crate::ops::Index":"1:39848:2287"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[649,0],"end":[702,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10013:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12908:34802":{"id":"1:12908:34802","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:12910:34806","str::split_at_mut":"1:12909:34803"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:721":{"id":"0:112:721","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[718,4],"end":[720,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9988:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9969:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2453-0:155:1809":{"id":"b:1:2453-0:155:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32719:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2455:2191"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32775:2426-0:161:1807":{"id":"a:1:32775:2426-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32775:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3578-0:161:1807":{"id":"b:1:3578-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32719:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3576:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3580:1639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12953:34812":{"id":"1:12953:34812","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12579:2301","str::rsplitn":"1:12956:34814"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44216:6655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12965:2094":{"id":"1:12965:2094","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12579:2301","`DoubleEndedIterator`":"1:7960:131","prim@char":"4:12072:453","str::rmatches":"1:12968:36754"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44316:6656","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12974:36756":{"id":"1:12974:36756","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12579:2301","`DoubleEndedIterator`":"1:7960:131","prim@char":"4:12072:453","str::match_indices":"1:12971:36755"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44280:6659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12599:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12994:34818":{"id":"1:12994:34818","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12599:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2766-0:161:1807":{"id":"b:1:2766-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2769:138","1:2770:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2771-0:161:1807":{"id":"b:1:2771-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:138","1:2775:1624"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7:1805":{"id":"0:7:1805","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[328,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1971","0:24:588","0:44:2016","0:46:659"],"is_stripped":false}}},"1:12959:34816":{"id":"1:12959:34816","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13003:36766":{"id":"1:13003:36766","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12599:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12909:34803":{"id":"1:12909:34803","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12908:34802","str::split_at_mut_checked":"1:12911:34807"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1828":{"id":"0:119:1828","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42372:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13010:33861":{"id":"1:13010:33861","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2756-0:155:1809":{"id":"b:1:2756-0:155:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2759:2156"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5835:1601":{"id":"5:5835:1601","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12981:36759":{"id":"1:12981:36759","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2978:246-0:170:1808":{"id":"a:1:2978:246-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42354:2445-0:161:1807":{"id":"a:1:42354:2445-0:161:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42354:2445","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2760-0:170:1808":{"id":"b:1:2760-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2762:748"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12896:333":{"id":"1:12896:333","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12897:34783","`u8`":"4:12089:1648"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5576:37459":{"id":"5:5576:37459","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:282:2291","`String`":"5:7597:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:282:2291","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12930:6567":{"id":"1:12930:6567","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42231:191","prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12956:34814":{"id":"1:12956:34814","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12072:453","str::splitn":"1:12953:34812","self::pattern":"1:12579:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44234:6654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12599:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[717,0],"end":[721,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10018:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42353:2446-0:155:1809":{"id":"a:1:42353:2446-0:155:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42353:2446","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:46:659":{"id":"0:46:659","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[229,0],"end":[237,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3580:1639":{"id":"1:3580:1639","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40016:10361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2453-0:170:1808":{"id":"b:1:2453-0:170:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32719:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2455:2191"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:170:1808":{"id":"0:170:1808","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[603,0],"end":[616,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:42353:2446-0:170:1808","a:1:42354:2445-0:170:1808","a:1:32718:237-0:170:1808","a:1:32775:2426-0:170:1808","a:1:2978:246-0:170:1808","b:1:3578-0:170:1808","b:1:2456-0:170:1808","b:1:2760-0:170:1808","b:1:2756-0:170:1808","b:1:2766-0:170:1808","b:1:2771-0:170:1808","b:1:2453-0:170:1808","b:5:5833-0:170:1808","0:108","0:110","0:183","0:111","0:106"]}}},"0:115-0:170:1808":{"id":"0:115-0:170:1808","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1808","glob":false}}},"1:12927:2120":{"id":"1:12927:2120","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12599:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12979:36758":{"id":"1:12979:36758","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12991:2142":{"id":"1:12991:2142","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12579:2301"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12584:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12898:2010":{"id":"1:12898:2010","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42231:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12902:32273":{"id":"1:12902:32273","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"18:581:7765":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12422:7970":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:5321:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:14986:9041":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13738:8726":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:8265:11666":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"20:667:2364":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"4:11230:10159":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"9:481:23961":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:14723:8887":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:44366:6647":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"16:7103:38207":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:586:10719":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4891:10937":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:2079:9965":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:3100:9636":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:46124:10433":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:5825:7583":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:8310:8030":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:7359:11533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12929:8578":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:5415:11132":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"11:1066:24041":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:32684:10357":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:10032:6684":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:2992:7695":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"13:226:7666":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:6650:11407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6116:9508":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:12070:403":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"16:6376:9530":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12485:25167":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:6099:9505":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:45034:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13766:8733":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4870:10928":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"11:434:8004":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:41044:7751":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6858:9611":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:14051:8777":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5483:11174":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:46056:10430":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"11:1051:9883":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:5662:24972":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:9076:7718":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11293:25074":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:13235:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:21614:17472":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:10946:7425":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11405:8449":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:43921:8113":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"15:0:2266":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:33567:12261":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:1723:10861":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12388:8549":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:38500:12270":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:2733:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:15646:9213":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:6275:7719":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:6417:11283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:6377:17958":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:3013:6510":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"16:6895:9615":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:4937:9433":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:22838:29404":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:2641:9386":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:15102:9056":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:9155:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:30668:12028":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:13024:25048":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:4256:12301":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:2201:7702":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:2554:38198":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:9485:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:40029:8244":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:8268:7744":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:2983:2318":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:7389:11555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:867:7698":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:39879:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:16151:9343":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"20:520:7907":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"17:10155:7511":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6282:9525":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:22048:7758":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13497:8663":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"20:432:2370":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"1:42169:10011":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:11352:7720":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:48129:10473":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:4464:10014":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:10382:7421":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:7547:29431":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:11385:10038":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:43469:7772":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4992:10984":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:11430:8047":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6965:10134":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13509:8664":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:5316:7511":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:21405:32655":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"22:534:7901":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"1:30956:29445":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:7429:38203":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:3576:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:44088:2375":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11063:8429":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"22:449:7303":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"18:718:8297":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:7330:11521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:1098:7939":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:46487:10446":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"11:2369:9892":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:12863:8577":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:1136:38021":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:7574:9982":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:1025:9881":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:3417:12280":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:42355:6676":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15078:9052":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:5555:9445":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:3250:37559":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:8604:8036":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"6:5039:11009":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:3315:10002":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:2733:9999":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:41457:8100":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:41435:8097":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:11139:8130":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:10022:6680":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:12949:8310":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:13208:31896":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:2054:7725":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:3570:33852":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:2529:9381":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:7270:7597":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:40991:8070":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:2917:24112":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:9030:7715":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:11018:6650":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:8080:10058":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:6396:17959":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:42303:2328":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:6729:11431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:149:7319":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:1621:10809":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5014:10997":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"20:599:38228":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"4:909:8010":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:5376:11113":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:533:7387":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:15426:9138":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:1063:9883":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"20:197:2374":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"1:13457:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:7931:10053":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:22023:17478":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:12530:7972":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:2284:24084":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"4:7070:11999":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:31494:7765":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12724:25045":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:8253:11664":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5502:11180":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"4:10847:10052":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"4:6068:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:945:9879":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:688:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"20:319:17815":{"crate_id":20,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"4:4312:10012":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:6151:7400":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:951:9880":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:44130:6650":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:4518:9420":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:7595:7658":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7523:7654":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:7938:7724":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"0:24:588":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"1:2447:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:6597:11382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:2993:38033":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:725:17815":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"4:1975:708":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:32805:6513":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:34037:12264":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:8881:7712":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:44737:2290":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:4190:10301":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:5696:7610":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:13422:10333":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:8197:11662":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:12095:12387":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:33978:12262":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"20:696:2366":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"4:11424:8046":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:13186:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11324:8444":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:7377:9976":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"9:0:2261":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:2399:9375":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:43293:6690":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:7537:11618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:670:7925":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:8428:10015":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:4240:8033":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:2730:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:2693:9998":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:3442:8100":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:44411:6606":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:1510:10733":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:4879:7396":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4837:10904":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:5536:11187":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"4:621:6816":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5046:11011":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:8300:11674":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:40202:29374":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:5489:11176":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:46327:10441":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:9737:25021":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"4:9196:10136":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13387:8643":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:44542:10404":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:44316:6656":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:7516:11604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4916:10953":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:13832:8744":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:2489:9379":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:22381:17561":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:15039:9051":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:5794:7358":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:11657:8126":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:5557:11199":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:7485:11578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:42343:2443":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:11058:10126":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:2121:10173":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"10:36:10643":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:21388:32658":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:21561:17476":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"3:0:2258":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:4781:17908":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"4:357:9983":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:22887:10349":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:12341:6665":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7400:7650":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:14091:8782":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:697:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:0:2268":{"crate_id":17,"path":["object"],"kind":"module"},"6:7306:11504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5277:11081":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:44836:6631":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:44706:10412":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:5568:9450":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:765:29225":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:8029:11661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14066:8780":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:75:1646":{"crate_id":1,"path":["core","u32"],"kind":"module"},"5:6929:2333":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:4572:9422":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:12044:17756":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"21:198:2415":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"17:15701:9229":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:5413:17993":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"10:0:2262":{"crate_id":10,"path":["adler"],"kind":"module"},"5:1795:2325":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:10137:25020":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:7223:8044":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12824:25046":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10251:7533":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6462:24976":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12621:8565":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:5290:11086":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:7446:11562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:6409:11281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:21620:17475":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12647:7975":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:11654:10042":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:22780:29457":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:9160:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:13512:2322":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:7960:131":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5122:11026":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12175:8530":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:30924:2320":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:5581:10024":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:6691:7411":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:4355:9415":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:5901:2278":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:8294:11673":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4924:10955":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6698:11423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:40912:7745":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12659:8566":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"4:12092:1647":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"18:521:29226":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:4040:2278":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13235:8625":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:1430:7696":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7932:9773":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:9178:10037":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:7931:2424":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"9:446:23962":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:41012:8077":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:2319:9371":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:922:9874":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:14260:8826":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:15190:9078":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"11:787:7699":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:41451:8099":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:14855:8993":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:3600:8322":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11467:8451":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14560:8875":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11743:8475":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:43255:6689":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:48340:10479":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:1639:10821":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:22529:17553":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"4:8304:8028":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:10449:7450":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"14:165:24048":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6394:7981":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"4:8291:6652":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:1628:10813":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:42617:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:22730:7737":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:9213:10137":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"4:4392:10013":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:15383:9128":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"21:319:8248":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"1:45121:10426":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:12357:6667":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:8282:11671":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:1596:8012":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:6678:11414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11341:7944":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:2365:12232":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:15418:9136":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12969:8580":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9755:25019":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:21559:17815":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:5485:7604":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:43712:8106":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:4761:9427":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:14341:8836":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:3056:12276":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:5225:11054":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:1917:8013":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11227:8435":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:22060:32656":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:10237:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"16:7914:9771":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:21612:17815":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6362:7641":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6422:7321":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:16105:9330":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"4:12078:1544":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:8055:9678":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6062:9503":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:22818:29456":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13424:8649":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:3234:34616":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13986:8769":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:42191:10315":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:1824:8021":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:12127:8527":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:791:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:15521:9188":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"0:46:659":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"4:9069:10133":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:7562:9980":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:7467:11568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4965:10971":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:7881:12344":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11547:8361":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:31467:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:1445:7697":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:15390:9129":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:7620:2280":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:40950:8062":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:7922:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:39939:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:213:7332":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12043:8521":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:43508:7774":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11367:7527":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11661:8468":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:10277:7755":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"9:329:10644":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:3216:37557":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:48313:10477":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:22900:10350":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5472:11171":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:1029:7334":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11788:8483":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:0:480":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:9102:33080":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:33801:2283":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:12087:801":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:7822:17786":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:11583:8462":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"7:0:1693":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5580:9398":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:7412:11556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:5601:24971":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:44071:6645":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:5984:7749":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:14414:8849":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:6491:11320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11595:7538":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:13899:8755":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:5581:11206":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:8224:7727":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"5:7679:2325":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:6243:7405":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:22880:11718":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:8236:10007":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:8369:10105":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10814:7696":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:10838:7697":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"22:966:7318":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"1:46457:10445":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:46701:10453":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:3273:10000":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11097:6655":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:481:8273":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:1826:8022":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"6:5630:11233":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:12225:7967":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:14503:8867":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:42539:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:7089:7384":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:4248:17879":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:6664:11409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:48412:10485":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:14489:8864":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10997:8425":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:6821:11460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11102:8431":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:15822:9258":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:40772:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"11:1891:2278":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:6849:9608":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12707:7978":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"4:5209:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:7987:7708":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:7351:12347":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10720:38213":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"11:2140:9881":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:4464:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:7885:12343":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:640:9989":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:41083:8085":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:14463:8862":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:40642:29478":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:15266:9096":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:13844:8746":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6478:11311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:48465:10488":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:14246:8824":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:4123:17862":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:46557:10448":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:3399:17842":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:5919:24974":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:3406:9406":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5617:11227":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:22715:7759":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3061:12277":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:7350:12346":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:43272:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:13064:8590":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:5336:11100":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:40803:10367":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:7461:11567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:261:8305":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5219:11051":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:2254:38058":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:12900:7551":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:13399:8646":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:2231:7668":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:3601:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"14:0:2265":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12887:7549":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:473:10654":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:48488:10489":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"4:10719:129":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:5352:11102":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:7020:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:8012:7725":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:44395:6661":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:6077:7616":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:15734:9236":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:47193:10463":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12443:8551":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:16223:9359":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:12362:8548":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:47347:10466":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:43461:7771":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9886:25039":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:6768:11443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:7467:12333":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:11557:8456":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:13594:8692":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:5665:11247":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6562:11361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:12127:6640":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:15957:9279":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:44420:6605":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11825:8486":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:13272:8638":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:41991:10312":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:3211:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:5244:11062":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:3545:9407":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:12039:7734":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:40921:7747":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12150:8528":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:5045:17913":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:3451:12285":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:5346:9439":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:5897:24973":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:6745:7644":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:10887:38211":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:10870:33106":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11075:7527":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6244:24975":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:15206:9081":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:8564:17930":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:22:735":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:4813:9429":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:3237:33719":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:102:10636":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:7417:7707":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13785:8738":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:36569:9641":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:6646:9587":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7176:38208":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:14912:9030":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:597:8309":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:1809:661":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:4011:17855":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7376:9712":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13972:8494":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"18:113:7918":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10877:7932":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:4716:11548":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:437:8307":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:43478:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:939:9877":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:7695:2326":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:9472:7420":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"11:1603:9889":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:3436:32461":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:6624:17948":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:12395:6662":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:14038:8775":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:3819:2328":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:5649:11458":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"16:7306:9699":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:8004:10057":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:11335:7427":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"22:669:7497":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"1:40631:6612":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:22802:10338":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:2749:9391":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:32718:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:538:10694":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:10666:11701":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"4:5512:10023":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:12095:1703":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:13384:117":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:1581:2278":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11605:7539":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"22:1122:8244":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"21:259:38284":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"17:15092:9055":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:40614:6605":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:6629:11395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:7113:7414":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:14386:8843":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:22449:12231":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:10534:38217":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:5134:11027":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:1676:7328":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:15214:9083":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13674:8697":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:43708:11793":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:22170:17815":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:10487:7422":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"4:11358:8043":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:14449:8861":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"11:364:7324":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:4119:17861":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10350:7536":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:9460:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:15273:9097":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11647:8467":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:32648:10640":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:4674:9424":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:2172:9966":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:1307:9881":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:2553:9382":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"11:2562:10641":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:8069:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:15313:9106":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:532:10691":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:6892:17957":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:39919:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:10481:7455":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:12055:33088":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2971:6508":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"5:7437:2328":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:11558:10009":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:363:9984":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"4:12091:1646":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:4985:10981":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:3856:9412":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"20:201:2046":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"20:511:2366":{"crate_id":20,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"6:1535:10747":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:15010:9043":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11574:7668":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:48527:10490":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:6759:7645":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:44634:10328":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5260:11070":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:10218:7532":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"4:7731:9985":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"8:0:2260":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"13:0:2259":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:47081:10461":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:8109:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:15799:9254":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:10447:10004":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:40843:10368":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:40707:6606":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:2419:9376":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:7686:7418":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:8954:10127":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:21403:32646":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:2978:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:10230:115":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:12264:8536":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:9671:25022":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:42023:12353":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"15:327:7662":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:12077:1511":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"11:1087:38199":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:4787:9428":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13814:8743":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5407:1108":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:21349:7765":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6447:11300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:659:7920":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:15778:9251":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:7507:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:42135:29454":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:903:2325":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:34520:12268":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:6441:11299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:10671:11703":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5671:11249":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:1559:10764":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:527:7909":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"6:5382:11116":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:12584:7931":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:44404:6660":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:42656:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:538:7501":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:15456:9144":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:5616:7605":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:43961:8118":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:15249:9089":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:15635:9212":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"22:1034:29252":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"17:15463:9146":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6435:11296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5320:11096":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12543:8563":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:8085:7723":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"6:7429:11557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"7:31:23948":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:1483:7698":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:22524:17555":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"4:2982:7395":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:32807:116":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:46208:10436":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:40959:8065":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:2689:9388":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:3333:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13473:8659":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:42428:2328":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"16:5630:7608":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:3051:12275":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:10018:25023":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12433:7545":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:3773:9964":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11115:7937":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:2789:9393":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:2740:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:14111:8785":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10044:25043":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:5174:11030":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:6507:8098":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:4601:6693":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:8461:17917":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:3993:9413":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"11:883:9880":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:1653:10832":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6331:9529":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:559:10705":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12300:25165":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"22:728:7303":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"5:3237:8013":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:2326:9881":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:39848:2287":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:22609:10334":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:8923:8042":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:15222:9085":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:8288:11672":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11128:8403":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13211:8624":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:9150:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:40899:7744":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:3190:12274":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:2995:24113":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:7802:17754":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:40:2324":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12371:8578":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"10:44:7669":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:2724:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:1862:8023":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15473:9151":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:7328:2323":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:6880:11472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:41476:8101":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:698:7506":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:2203:7949":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:38610:12272":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:3039:9635":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11242:7942":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:4547:6692":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"20:642:2362":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"6:4864:10927":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:5025:7358":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:15616:9207":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:3177:9370":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:5865:7979":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:2999:38025":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:10747:33091":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:9122:7730":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:38555:12271":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:6689:11417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:14284:8829":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:15931:8610":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"4:482:7386":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:40870:8058":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6268:7639":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:43950:8117":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:7837:10052":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:44840:6635":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"21:266:2400":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"1:40759:6603":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"20:611:8265":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"4:10700:7724":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"18:635:8291":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:3411:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:22303:17559":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:6941:24979":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:46156:10434":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6738:11433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:5677:11252":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12289:8537":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:22258:17558":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:7492:2292":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:10069:8023":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:6038:18006":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:5834:10031":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:7918:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:7345:8015":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:2271:7385":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:13606:8695":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"11:299:7996":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:21386:32643":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:4401:7360":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:4131:17864":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:10383:7448":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:5163:10016":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3024:2282":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:5496:10022":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:10906:6662":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13959:8764":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:491:10662":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:9017:10128":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"9:237:10388":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:7367:7345":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:22746:7760":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:16165:9346":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:10887:7713":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"4:8549:10120":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:8097:9788":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"20:457:2362":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"16:5278:9438":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:15197:9080":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:1896:2325":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:42312:2442":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"16:5521:9399":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:43201:6689":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:44719:6639":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:4733:9426":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11026:25056":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:48067:10472":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:2859:6819":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"11:1910:8012":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6811:24978":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:8363:17880":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:7491:9716":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:3354:10004":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:835:7340":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"14:214:9871":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:2818:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:6413:8075":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"11:1923:8014":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"4:9964:10379":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:10689:10153":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"11:700:2328":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"22:948:29251":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"17:15944:8624":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"11:742:7701":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:10710:140":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:4396:6691":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:46078:10431":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:6677:17950":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:12604:6636":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:42007:10314":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10284:7534":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:5645:9451":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13723:8722":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"11:2542:10638":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:5870:8066":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:1156:8017":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"11:856:9877":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6669:9588":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11042:8426":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:5527:115":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"15:394:24075":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:5699:7358":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:46364:10443":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:636:9961":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:2588:9997":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:5541:9441":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"0:44:2016":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"4:7816:17755":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:46776:10455":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:6979:7413":{"crate_id":4,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:44828:6630":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:42734:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6788:38204":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:41466:7446":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:10466:7390":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:6621:10034":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12089:8525":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"0:7:1805":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"4:7996:10056":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:7482:9715":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:12593:6638":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:573:8275":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:7518:7362":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:16235:9362":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:6408:9536":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"4:7982:7709":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:1461:2328":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:10647:10148":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"4:3589:17834":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:3201:2423":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:465:8008":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"22:752:7313":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"4:11413:10041":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"22:386:7319":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"5:4232:7358":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:9858:25038":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:12096:1254":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:16079:9324":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"9:423:23964":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:42695:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"11:2352:9883":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"11:328:7999":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:1590:8011":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:2234:7952":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:80:7912":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2353:638":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12107:7515":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:6542:11345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:3811:10008":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:10156:11957":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"4:5652:17935":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:2883:24111":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5160:11029":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:3363:2325":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:5175:7367":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"14:160:9866":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4811:10884":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:2450:17810":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"16:6737:7601":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:13116:8597":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:42209:10317":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:7537:7656":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:32695:10358":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:4800:10876":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"21:312:2414":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"1:3423:12282":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:13260:10330":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:44058:2294":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4971:10974":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11051:8427":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:5720:10025":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:9916:25040":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:8385:10106":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:41228:8091":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4787:10867":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:6532:11338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13855:8747":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:12023:10165":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:7951:9776":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7444:9714":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:16069:9323":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"4:12094:853":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"0:117:1815":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"11:2304:9621":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:2355:9373":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:48360:10481":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:5713:7615":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:7586:7368":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"20:470:2363":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"1:3396:12279":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:30892:2319":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:9651:721":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"17:4821:7973":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:40670:6613":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:3356:10005":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:11045:7712":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:564:10707":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5020:11000":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:6636:11396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:41242:8092":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:6714:11429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:42972:6682":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13015:7545":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:5296:11089":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:14587:8878":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:7386:7649":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:16032:8628":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:44844:6633":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13455:8658":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:15301:9105":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5083:11023":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"11:430:8003":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:589:8279":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:1607:8014":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:8259:11665":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11354:8447":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:3271:8014":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:5674:2331":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:5476:10021":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"16:4545:9421":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:22393:31681":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"21:67:2048":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"9:356:23977":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:39852:8053":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:7452:11564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:2516:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:1593:10785":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5400:11127":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:40680:6614":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:8285:6646":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"5:2995:11688":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:2276:17797":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"16:4871:9431":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:39189:12273":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:8278:8090":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"16:7684:9730":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:531:8276":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5031:11004":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11497:7953":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:12075:1158":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:4825:17873":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:11095:10037":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"4:3579:17813":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:4237:12300":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:4017:17854":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"0:119:1828":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"16:6610:9575":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:2035:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:1522:7701":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:3741:9409":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11256:8436":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:9672:32895":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5598:11213":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:4322:7742":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:2807:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:4876:10930":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10524:7926":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:1887:2328":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:706:6638":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:3003:38026":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:4386:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:11635:7733":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:11142:7515":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:45021:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"21:301:2413":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"1:44022:8122":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:2492:11691":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:10669:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:14079:8781":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:1040:9621":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:0:535":{"crate_id":1,"path":["core"],"kind":"module"},"4:880:7699":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:10952:7426":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:41000:8071":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:15023:9048":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:8022:24984":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:8526:10388":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:6929:9620":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:6900:11486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:3205:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:12083:697":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:11153:7931":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:14575:7545":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:44032:8123":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:8306:11675":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12478:8554":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11621:7524":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:4825:6599":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"20:306:2345":{"crate_id":20,"path":["unicode_bidi","TextSource"],"kind":"trait"},"16:5794:9464":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"21:276:2412":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"16:4702:9425":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:48351:10480":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:3707:7334":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:4718:11550":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"22:470:7307":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"17:11269:25073":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:3838:2325":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:2424:17800":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:12650:12416":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:5052:11013":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:1925:11714":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:914:7700":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:14876:9001":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"11:1566:24042":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:8381:12341":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:10026:6682":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:4061:17857":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12695:8567":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:4491:9419":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:9938:25041":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:1501:8010":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"7:78:23955":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:6142:7358":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:40016:10361":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:3916:10010":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:10020:6679":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:43218:29418":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:1574:7696":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"21:0:1832":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"6:1692:10849":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7452:24981":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11443:8450":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:15748:9243":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:6379:11256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:5827:10028":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:40788:29431":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:46679:10452":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"11:811:2325":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:6788:11451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:1686:10848":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:7339:11527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:424:8252":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"1:41069:8084":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:5250:11064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:44000:8120":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:42051:7767":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:9145:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:10444:10002":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:2665:9387":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:4283:9414":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"20:681:2365":{"crate_id":20,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"17:11877:7541":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:2440:17805":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:44334:6657":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:7366:11537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:8328:11680":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14189:8812":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5423:11137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:4109:17860":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:2558:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:7926:8026":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:4075:17859":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:47317:10465":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:7401:2328":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"11:396:7326":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:8996:17955":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15126:9058":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:6134:7600":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:6811:11457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:46725:10454":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:14372:8841":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13753:8731":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:2496:2197":{"crate_id":4,"path":["std","io"],"kind":"module"},"16:5298:24970":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"20:620:2360":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"4:8631:10125":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:9057:2444":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:6575:7334":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:15720:9234":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:3177:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2363:12231":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:4433:9417":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:1578:2328":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:11518:10008":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:5713:7406":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:44852:6628":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12768:25024":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11812:8484":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10954:25054":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:5636:11236":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"11:0:2263":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"11:2536:10637":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4942:10963":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:2266:139":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"6:6524:11333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:5409:17992":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10905:7933":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:46633:10450":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:7984:11649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:5462:10017":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:12281:6666":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:8620:8039":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"16:0:2267":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:7366:9403":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:1699:10852":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:43940:8116":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:42578:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12030:7960":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:43490:10388":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"21:145:2049":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"4:12088:797":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:22018:17815":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:43230:9745":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"4:1968:6815":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"16:2573:9383":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:10441:10000":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:6030:9500":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:6608:11717":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:2769:9392":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:7387:37553":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:6882:9612":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:8341:11684":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:13402:7402":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"16:2859:9396":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:10661:7929":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:4210:8031":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12464:25166":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:47111:10462":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:39768:12287":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:7445:2328":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:4886:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:6756:11441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:5038:9436":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"22:43:29248":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"1:44832:6632":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:6773:7646":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7653:9726":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:7414:7651":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:5191:11038":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:728:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:22480:17815":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:795:7337":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:7971:9777":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:1680:10845":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10439:7513":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:46823:10456":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:6775:11444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:11089:7936":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:16138:9337":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"4:1054:9881":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:10863:6652":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"5:4272:7696":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:41484:8103":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:1496:10728":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:44162:6653":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:6657:2328":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:588:17749":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6152:7631":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:3240:33708":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:6670:11412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"14:187:24055":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5528:11182":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:1707:10856":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5565:11201":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:10028:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:15678:9228":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:536:7587":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:44848:6634":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:8351:11686":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:282:2291":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:48450:10487":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"11:837:9874":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:42372:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:12539:2296":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"11:351:8000":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:44492:12422":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:735:29224":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10317:7535":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6045:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11915:25141":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13308:7556":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:41969:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:33381:9631":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7355:9711":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:43693:10392":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:5390:11121":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:15992:9309":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:22853:29443":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:3814:10009":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:4675:453":{"crate_id":1,"path":["core","char"],"kind":"module"},"1:9970:6617":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"20:705:2367":{"crate_id":20,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"6:1547:10756":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:16093:9328":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:14847:8990":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12683:7977":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:44112:6652":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:6460:11301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:6017:7367":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11524:7954":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:12084:802":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:43191:11785":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:8425:32859":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:8012:11652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"21:228:2050":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"6:485:10660":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:7976:129":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:40714:6607":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:32719:2425":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:928:17767":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:11125:8129":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4885:10935":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11189:8433":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:4706:17859":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:1885:8024":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"6:1503:10731":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:8271:11667":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:15368:9124":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:14545:8871":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:875:9879":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:7245:6541":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10068:25026":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:46309:10440":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:46655:10451":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:5266:11073":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:15168:9072":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:7064:7381":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:10088:8051":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"4:12090:1645":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:3159:12283":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"11:800:2278":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11510:8453":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:14298:8830":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:2736:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:8406:11537":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:5389:130":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"5:2274:7705":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:2439:9377":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"15:306:7990":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"11:1903:8011":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:7667:7416":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:3614:7696":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:7627:10162":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:47035:10460":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:6378:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"18:491:8274":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:22769:10336":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:44042:8124":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:41218:8090":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:8915:7696":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:1580:10778":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:2304:24110":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"11:1107:9885":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:6874:11471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10828:38215":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:7409:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:2688:12027":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:14025:8773":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10982:25055":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:21742:7757":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12251:7968":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:21633:7757":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:9089:10134":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:48397:10484":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12508:8559":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:11166:8432":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12189:7964":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:42461:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"18:507:8275":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:10738:33093":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:3175:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"11:687:7697":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:3317:10003":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:6725:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:4353:7743":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:3245:8011":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:2175:25099":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:8090:17845":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:891:7342":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:1671:10839":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:32776:6514":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"18:0:2269":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:3020:6512":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"5:4202:7358":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"20:449:138":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"1:10229:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:5112:11025":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10272:12381":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:859:2328":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:7294:9698":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:1804:637":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:22662:10335":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:40726:6608":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:43930:8115":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:10769:38210":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:4464:7360":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12076:8524":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"20:655:2363":{"crate_id":20,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"17:12056:8523":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:836:7696":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11392:7945":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:11077:7756":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:6546:9561":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:7314:11509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:22342:17560":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:39864:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6692:9589":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:15760:9245":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11715:8472":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:15176:9075":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:6602:8079":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:6621:11394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:23944:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:30945:6689":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:46603:10449":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:46509:10447":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:21417:32651":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:5146:11028":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:4468:10303":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:1663:10838":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13292:7552":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:42354:2445":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:7706:24983":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:39959:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:46287:10439":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:44607:10406":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:832:8010":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:42287:7696":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:7348:11528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:545:10697":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"20:496:2365":{"crate_id":20,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"4:6547:7410":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:44262:6658":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13412:8648":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10671:38216":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:673:7696":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:7335:9402":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:32702:6692":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:10092:25044":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:3561:6617":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:3406:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:7616:8309":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5653:11240":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:14131:8786":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:4232:8032":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:3029:12066":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"11:2403:7697":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"4:2268:9996":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:46257:10438":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:44429:6604":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12408:7544":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"0:118:1820":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"4:6511:10033":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:5624:11230":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:44386:6648":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:2729:9390":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4952:10966":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:8215:7726":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"18:598:38221":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:42951:6680":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6254:9522":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:43453:7769":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:3211:8012":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13526:8672":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:1526:10741":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:7357:2278":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:10247:33811":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:39979:12278":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:40863:10369":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:42965:6681":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"22:0:2389":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"17:12993:25047":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:1582:9888":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:7602:11643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:7754:10045":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12353:8547":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:15058:7566":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:21740:17473":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:15116:9057":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:40833:7439":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:11579:10010":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:7415:8094":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:9168:2289":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:2671:7390":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:15596:9201":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:13375:8642":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11313:8442":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:3260:9405":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"11:2569:2292":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:5331:7512":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:22366:17815":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"4:6330:7406":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:1511:7700":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:623:38222":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:22911:12079":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:32688:9678":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:10090:10139":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:48386:10483":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"14:31:9866":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:1602:8013":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:40982:7750":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:267:7334":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:44180:6651":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11016:7934":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:1120:8016":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:47271:10464":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5588:11208":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:12089:1648":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:8478:10117":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:11858:7433":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:42958:6679":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4932:10957":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"18:680:8292":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12792:8381":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12516:8561":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"5:1492:7699":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:1565:10766":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:42420:7697":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"14:7:9866":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:5499:9397":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:7637:7726":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:6609:11387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10419:7537":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11730:8474":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:10945:8108":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:7551:7657":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:12579:2301":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:10612:7928":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:22495:17554":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:9677:7752":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13877:8754":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"20:8:2369":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"1:10018:130":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:11419:7515":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"9:52:7670":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:1939:6814":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:14235:8822":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:7575:11637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:11290:9944":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:6519:11332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:7324:9707":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:8351:10011":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:7345:9710":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:39901:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:4113:7358":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:8981:17953":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6599:9574":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:5329:11099":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"4:7960:140":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"19:0:1138":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:3240:2288":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"14:202:2277":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:415:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:4720:11552":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:6724:9593":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:7118:2442":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:15608:9204":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:12599:6637":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6471:11309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:7534:9977":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:33919:12263":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:5006:9435":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:513:8308":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13325:7558":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11567:8457":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5212:11050":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:34174:12266":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:8358:11696":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:14516:8868":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:16121:9335":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:11674:8469":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:1207:7940":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:46012:10428":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:44860:7756":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"0:0:1830":{"crate_id":0,"path":["idna"],"kind":"module"},"4:11112:11705":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:45075:10420":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:4902:17869":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:4069:17858":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:3522:10006":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:4844:9430":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:12318:6668":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:14977:9040":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"9:501:9947":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:40699:6605":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:2068:9964":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:12071:1040":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:2422:11716":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"6:497:10665":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:14212:8821":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:5861:7714":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:22172:17474":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:11661:10042":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:10710:7930":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:48371:10482":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:12810:121":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:2459:9378":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10399:6646":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:6763:11442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:8006:11650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13553:8681":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14788:8938":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:48191:10474":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:12201:8534":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:44696:10408":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:9299:8024":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"11:2469:2325":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:6919:2332":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:9035:117":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:8247:11663":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13774:8735":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:40890:8059":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:4431:7358":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:26344:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:1717:7358":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"21:290:38285":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"5:1542:8018":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:41428:8096":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:14436:8860":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"22:636:7902":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"4:4821:17870":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:9235:33109":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:10185:7531":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:7152:9658":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:5344:11101":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:9490:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13568:8687":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:2548:7995":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"11:2443:2278":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:7584:11640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:47879:10470":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:12085:799":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:4784:17881":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:10759:7515":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:5064:11022":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:43912:8112":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:3488:12286":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:43246:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:1517:10736":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:4648:6694":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"0:22:1971":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"16:2979:9404":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:15289:9099":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:48237:10475":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:3017:138":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:12079:1629":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"12:0:2264":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:47737:10469":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:256:8304":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12851:7548":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:40009:10360":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"23:0:2390":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"1:4621:6516":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:15769:9249":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:3504:10101":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:4592:7438":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:2657:7392":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:7565:9717":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:44878:132":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:542:2047":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"1:34347:12267":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:515:8272":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:42278:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"9:391:23963":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:47381:10467":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:11069:33102":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:41442:8098":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:5706:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:44082:2009":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:15410:9135":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:15624:9208":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:14599:8885":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:45083:10422":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:578:10715":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:15:2236":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:517:10682":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:46032:10429":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:5643:11239":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:726:7507":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:5477:11173":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:6706:11426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:8013:2013":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:4202:10302":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:16259:8643":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:4473:10304":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5181:11031":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:12111:10324":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:11111:6654":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:43987:8058":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:570:10710":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:39804:12284":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:4070:7334":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6803:9597":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"15:288:7985":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:9807:25027":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:3275:10001":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:4986:7974":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:2617:9385":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:40657:6611":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:12076:332":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:4214:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:4968:9434":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:3597:7963":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"9:177:7685":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:1585:10780":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:15655:9215":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:8870:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:14968:9036":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:3758:7725":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4909:10949":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:45024:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:5457:11162":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:8907:7713":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:8402:10108":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:1934:10170":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:44216:6655":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11537:8454":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:12086:800":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:11647:33119":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"18:651:8275":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:34693:9640":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:14147:8791":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:10030:6683":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13485:8662":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:3264:7961":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:10659:17815":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:12093:1644":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:8248:17814":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:12072:453":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:16050:8638":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:9467:8026":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:2973:119":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"16:4399:9416":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:40940:7748":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"20:0:1831":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"17:15324:9110":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:6505:11331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:44824:6627":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:1911:12244":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:4824:10894":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5314:11095":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:12082:695":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:11799:7955":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:10855:10024":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:6431:7642":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:5466:11168":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"22:879:29250":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"16:3709:9408":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:40930:8060":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:44234:6654":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"11:2423:2328":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:16187:9352":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:44513:10396":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13344:7565":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:46226:10437":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13252:8628":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:42353:2446":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:6721:11430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"18:563:7503":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:4047:17856":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:5361:11106":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:1883:7696":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6445:9537":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:3830:9411":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:7597:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:6613:7445":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:3010:8317":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:40815:12317":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"11:1160:9887":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:11160:11706":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:44376:6649":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6215:7636":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:44902:10417":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:3208:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:1691:7334":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14994:9042":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:33860:12265":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:7730:17815":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:8966:17954":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:15445:9143":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:44528:10401":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:1485:10723":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:46877:10458":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:22794:10337":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:10013:121":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:45096:10425":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:12808:8575":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:16198:9353":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:5985:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:9041:10129":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:14356:8840":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:10339:8040":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:8378:2281":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:14529:8869":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:45105:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:4984:421":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:44856:6629":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13538:8675":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:6915:11497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11773:8480":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:15342:9114":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:2438:17804":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:7869:9767":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:1142:9886":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:10729:10007":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"20:632:2361":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"17:403:8306":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"20:482:2364":{"crate_id":20,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"4:1585:2325":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"11:2383:7696":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"20:534:7910":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"16:4649:9423":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:48435:10486":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:7337:2328":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"11:774:7698":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:7503:17766":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12213:7966":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4959:10969":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:11702:8471":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"18:608:8286":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:45132:9894":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:9984:25042":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:15376:9127":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:40777:10366":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:11056:8110":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:15138:9061":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13999:8770":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:553:10702":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:43500:7773":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:4261:8034":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:44685:12423":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:42437:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11853:8488":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:1321:9887":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:41093:8087":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:8315:17852":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:42364:10320":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:7561:11628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"11:2124:9621":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:5306:11092":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:6227:7402":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:4572:17882":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:22395:12231":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:42157:10382":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:5005:29810":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:42412:7696":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:6438:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11701:6643":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:2723:11694":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:16212:9357":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:6657:11408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:1276:9621":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:523:10685":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:4:1121":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:42295:7697":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:4823:17872":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:4462:9418":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:5370:11112":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6230:9519":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5515:11181":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:12572:7515":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:2450:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:46854:10457":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:5084:859":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:5445:11153":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11634:8466":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:11495:7429":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11841:7958":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:11130:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:3685:2278":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11865:7959":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:2819:9394":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:11624:8125":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"14:40:8625":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:13173:8609":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:6529:2278":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10170:7512":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:15333:9113":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:3749:17853":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:14271:8827":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:4537:7437":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:42814:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:5002:10991":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"11:123:7322":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4897:10940":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13581:8691":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:9081:7728":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:0:883":{"crate_id":6,"path":["libc"],"kind":"module"},"17:15400:9132":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:7749:10043":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:7774:7422":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:42775:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5200:11043":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:14402:8847":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:7948:10054":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:15814:9255":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:726:12067":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:6201:7634":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:46186:10435":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:11399:10039":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:6348:7640":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:40740:6610":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:9817:6700":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:8931:2328":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:5238:9437":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11764:8479":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:38445:12269":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5236:11058":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:8012:9781":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:7610:2279":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:7697:7399":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:12097:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:47531:10468":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:12557:7527":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:11493:8452":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11214:7941":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:40691:6604":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:6579:24977":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:6221:7638":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:10024:6681":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:754:8303":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:4112:7697":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:32720:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:14933:9035":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:3627:7697":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:8614:7696":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"16:2375:9374":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:31013:29473":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"18:96:7915":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:15434:9139":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:9988:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14311:8831":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13797:8740":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:1007:9621":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:5132:10016":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11755:8478":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:1841:1195":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:9969:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:2552:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:13146:8601":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:5759:9461":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:7619:24982":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:32709:8052":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:8377:8028":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:7984:9780":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:42500:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5283:11084":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12494:8556":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:15356:9121":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12671:7976":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:48331:10478":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:645:17751":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:46346:10442":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:30930:6722":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13946:8761":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:8864:8040":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:21359:32648":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:33195:9634":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:12318:8310":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:479:10657":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:12073:1664":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"16:6292:9526":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13363:8639":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6908:9618":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6320:9528":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7225:24980":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:15569:9189":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:7194:38206":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:689:8294":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:44671:10407":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:2835:9395":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:7467:33798":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:8937:10026":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:3773:9410":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:2469:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:11898:8489":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:2001:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:14752:8907":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:2687:17815":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10573:38214":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:13187:8610":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:918:7701":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:10935:7424":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:893:2278":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:6052:7406":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:5959:24083":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"11:2151:9883":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:40620:10362":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:46411:10444":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:47989:10471":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:2336:7575":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7998:7660":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12238:8535":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:4550:17881":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:3472:7358":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:44098:6646":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:8317:11679":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:0:1536":{"crate_id":4,"path":["std"],"kind":"module"},"5:5831:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:8894:10126":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:849:7697":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:4907:9432":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:908:7696":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:15151:9067":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:1292:9883":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12597:8564":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:42853:7768":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:42229:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:5043:10307":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:2509:9380":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:6896:2331":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:14325:8834":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:10983:8109":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:5365:7334":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7609:9718":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:6746:11434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"4:9048:33094":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:40733:6609":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:43861:8111":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:5726:9454":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:643:8275":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:1072:9887":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:637:9987":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:16249:9363":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:22435:17562":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:9781:25037":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12399:8550":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:2727:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"5:6739:7334":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:1887:8025":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"16:2709:9389":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:3473:7962":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:45144:10427":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:557:9986":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:41021:8078":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:45042:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"16:5878:7589":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12454:8552":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12328:8539":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:8387:12342":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:44013:8121":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:5846:9470":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:44559:10405":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:2037:7946":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:14177:8810":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:1811:6720":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:44280:6659":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:41034:8080":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:6141:38205":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:48275:10476":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14868:9000":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"13:109:38200":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:40968:8067":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:41053:8082":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10622:38212":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:31118:29449":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:1533:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:1446:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:1393:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:4650:17899":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:10676:10053":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"4:723:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12278:7969":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"14:220:9873":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5436:11147":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:13046:8587":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4979:10979":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5546:11193":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:16269:8648":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:46102:10432":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:32775:2426":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"5:2162:7351":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13922:8760":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13437:8650":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:8298:6647":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:4996:17907":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:44913:12429":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:2521:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:1490:10725":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:3204:7696":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:3015:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"17:14475:8863":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7889:9768":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12342:8543":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:15582:9195":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:2032:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:6555:9562":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:710:7700":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:46957:10459":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:6188:9518":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:12584:2289":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:14012:8772":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:613:38220":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:21371:32648":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:2593:9384":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:21731:17815":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:7546:11621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:15281:9098":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:15836:9261":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:5906:7398":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10915:38218":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:504:7351":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5102:11024":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:7921:8186":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:10818:7931":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:4987:17906":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:16176:9351":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:13089:8591":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11688:8470":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"11:844:17767":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}