{"root":"0:0:1817","crate_version":"0.5.0","includes_private":false,"index":{"1:12719:867":{"id":"1:12719:867","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12034:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[704,0],"end":[712,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2583:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:739"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24:580":{"id":"0:24:580","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6954:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1796":{"id":"0:116-0:155:1796","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1796","glob":false}}},"1:12846:36245":{"id":"1:12846:36245","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4613:36245"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44168:6590","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2832:253-0:155:1796":{"id":"a:1:2832:253-0:155:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:686:28355":{"id":"5:686:28355","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2657:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2606-0:161:1794":{"id":"b:1:2606-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2609:2147"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12720:2115":{"id":"1:12720:2115","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12739:36225":{"id":"1:12739:36225","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12040:1531","str::slice_mut_unchecked":"1:12740:36226","crate::ops::Index":"1:3112:2278"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12754:2110":{"id":"1:12754:2110","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1962":{"id":"0:22:1962","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2624:134":{"id":"1:2624:134","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32351:10514","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2606-0:155:1796":{"id":"b:1:2606-0:155:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2609:2147"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[538,0],"end":[583,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1808","0:96:2074","0:97:1809","0:98:2109","0:99:2078","0:100:1804","0:102:1816"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12836:36243":{"id":"1:12836:36243","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12376:133","`FromStr`":"1:12375:2287"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12375:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12375:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:2139":{"id":"5:5532:2139","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5546:36905":{"id":"5:5546:36905","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2109":{"id":"0:98:2109","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[558,4],"end":[561,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1029":{"id":"0:86:1029","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12771:28549":{"id":"1:12771:28549","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12231:6645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12813:36236":{"id":"1:12813:36236","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:651":{"id":"0:46:651","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[229,0],"end":[237,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12843:36244":{"id":"1:12843:36244","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4615:36244"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44150:6592","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12748:7990":{"id":"1:12748:7990","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44105:6630","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12815:36238":{"id":"1:12815:36238","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12440:6621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8879:2432-0:155:1796":{"id":"a:1:8879:2432-0:155:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8879:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8879:2432-0:170:1795":{"id":"a:1:8879:2432-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8879:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:119:1815":{"id":"0:119:1815","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12743:1964":{"id":"1:12743:1964","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12034:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43821:2000","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1804":{"id":"0:88:1804","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12814:36237":{"id":"1:12814:36237","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5548:2031":{"id":"5:5548:2031","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12764:1977":{"id":"1:12764:1977","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41931:197","prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12789:34179":{"id":"1:12789:34179","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5549:33093":{"id":"5:5549:33093","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12841:33096"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2303-0:170:1795":{"id":"b:1:2303-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2305:28348"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:100:1804":{"id":"0:100:1804","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[570,4],"end":[574,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12729:339":{"id":"1:12729:339","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12730:34144","`u8`":"4:12051:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[522,0],"end":[536,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2657:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1029","0:87:2137","0:88:1804","0:91:1816"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8878:2433-0:161:1794":{"id":"a:1:8878:2433-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8878:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:115-0:170:1795":{"id":"0:115-0:170:1795","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1795","glob":false}}},"1:12768:2131":{"id":"1:12768:2131","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12415:2291","`DoubleEndedIterator`":"1:7785:127","prim@char":"4:12034:448","str::split_whitespace":"1:12746:28548","str::rsplit":"1:12774:34173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43851:6635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1808":{"id":"0:95:1808","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[540,4],"end":[543,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1816":{"id":"0:102:1816","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[577,4],"end":[582,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12827:36240":{"id":"1:12827:36240","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12733:29175":{"id":"1:12733:29175","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41931:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2610-0:155:1796":{"id":"b:1:2610-0:155:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12749:36227":{"id":"1:12749:36227","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44115:6632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2815:243-0:170:1795":{"id":"a:1:2815:243-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12838:1979":{"id":"1:12838:1979","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:685:28354":{"id":"5:685:28354","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12740:36226":{"id":"1:12740:36226","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12040:1531","crate::ops::IndexMut":"1:3116:2279","str::slice_unchecked":"1:12739:36225"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12721:36221":{"id":"1:12721:36221","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12730:34144":{"id":"1:12730:34144","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12051:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1809":{"id":"0:97:1809","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[552,4],"end":[555,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1816":{"id":"0:91:1816","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8879:2432-0:161:1794":{"id":"a:1:8879:2432-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8879:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12727:32422":{"id":"1:12727:32422","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11970:6625"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:161:1794":{"id":"b:5:682-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2316:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:7797","5:685:28354","5:686:28355"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12737:29177":{"id":"1:12737:29177","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5806:1589":{"id":"5:5806:1589","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12824:34181":{"id":"1:12824:34181","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:7797":{"id":"5:684:7797","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:3450-0:170:1795":{"id":"b:1:3450-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3452:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12783:34175":{"id":"1:12783:34175","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12034:448","self::pattern":"1:12415:2291","str::rsplitn":"1:12786:34177"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43955:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2074":{"id":"0:96:2074","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[546,4],"end":[549,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:1794":{"id":"0:161:1794","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[513,0],"end":[519,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:8879:2432-0:161:1794","a:1:2832:253-0:161:1794","a:1:2872:2411-0:161:1794","a:1:2815:243-0:161:1794","a:1:8878:2433-0:161:1794","b:1:2300-0:161:1794","b:1:2303-0:161:1794","b:1:2610-0:161:1794","b:1:2616-0:161:1794","b:1:3450-0:161:1794","b:1:2606-0:161:1794","b:1:2621-0:161:1794","b:5:682-0:161:1794","0:167","0:92","0:169"]}}},"1:12795:2085":{"id":"1:12795:2085","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12415:2291","`DoubleEndedIterator`":"1:7785:127","prim@char":"4:12034:448","str::rmatches":"1:12798:36230"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44055:6639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12774:34173":{"id":"1:12774:34173","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12415:2291","`DoubleEndedIterator`":"1:7785:127","prim@char":"4:12034:448","str::split":"1:12768:2131"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43869:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12833:36242":{"id":"1:12833:36242","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12741:34163":{"id":"1:12741:34163","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12742:34164"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2303-0:155:1796":{"id":"b:1:2303-0:155:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2305:28348"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2316:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12780:36229":{"id":"1:12780:36229","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12415:2291","str::split":"1:12768:2131","prim@char":"4:12034:448","str::split_terminator":"1:12777:36228"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43919:6634","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12804:36232":{"id":"1:12804:36232","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12415:2291","`DoubleEndedIterator`":"1:7785:127","prim@char":"4:12034:448","str::match_indices":"1:12801:36231"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44019:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12718":{"id":"1:12718","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12719:867","1:12720:2115","1:12721:36221","1:12722:36222","1:12724:36223","1:12727:32422","1:12728:36224","1:12729:339","1:12730:34144","1:12731:2001","1:12733:29175","1:12735:29176","1:12737:29177","1:12739:36225","1:12740:36226","1:12741:34163","1:12742:34164","1:12743:1964","1:12744:10278","1:12745:1984","1:12746:28548","1:12747:28568","1:12748:7990","1:12749:36227","1:12750:28914","1:12751:31656","1:12754:2110","1:12757:2111","1:12760:6553","1:12764:1977","1:12768:2131","1:12771:28549","1:12774:34173","1:12777:36228","1:12780:36229","1:12783:34175","1:12786:34177","1:12789:34179","1:12792:34180","1:12795:2085","1:12798:36230","1:12801:36231","1:12804:36232","1:12807:36233","1:12809:36234","1:12811:36235","1:12813:36236","1:12814:36237","1:12815:36238","1:12818:36239","1:12821:2133","1:12824:34181","1:12827:36240","1:12830:36241","1:12833:36242","1:12836:36243","1:12838:1979","1:12839:35295","1:12840:33095","1:12841:33096","1:12842:33097","1:12843:36244","1:12845:12086","1:12846:36245"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12724:36223":{"id":"1:12724:36223","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12722:36222"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2300-0:161:1794":{"id":"b:1:2300-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2302:2182"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:99:2078":{"id":"0:99:2078","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[564,4],"end":[567,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12786:34177":{"id":"1:12786:34177","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12034:448","str::splitn":"1:12783:34175","self::pattern":"1:12415:2291"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43973:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:739":{"id":"0:109:739","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[705,4],"end":[711,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2872:2411-0:155:1796":{"id":"a:1:2872:2411-0:155:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2872:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2625:1612":{"id":"1:2625:1612","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2872:2411-0:170:1795":{"id":"a:1:2872:2411-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2872:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12745:1984":{"id":"1:12745:1984","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43837:6629","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:36903":{"id":"5:5535:36903","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2657:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7:1792":{"id":"0:7:1792","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[328,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1962","0:24:580","0:44:2007","0:46:651"],"is_stripped":false}}},"b:1:2300-0:155:1796":{"id":"b:1:2300-0:155:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2302:2182"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2612:739":{"id":"1:2612:739","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2300-0:170:1795":{"id":"b:1:2300-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2302:2182"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2606-0:170:1795":{"id":"b:1:2606-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2609:2147"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12735:29176":{"id":"1:12735:29176","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2619:134":{"id":"1:2619:134","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:1:2610-0:170:1795":{"id":"b:1:2610-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2621-0:170:1795":{"id":"b:1:2621-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2624:134","1:2625:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2815:243-0:161:1794":{"id":"a:1:2815:243-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8878:2433-0:170:1795":{"id":"a:1:8878:2433-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8878:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12777:36228":{"id":"1:12777:36228","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12415:2291","str::split":"1:12768:2131","prim@char":"4:12034:448","`DoubleEndedIterator`":"1:7785:127","str::rsplit_terminator":"1:12780:36229"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43901:6636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12798:36230":{"id":"1:12798:36230","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12415:2291","`DoubleEndedIterator`":"1:7785:127","prim@char":"4:12034:448","str::matches":"1:12795:2085"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44073:6640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12811:36235":{"id":"1:12811:36235","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2303-0:161:1794":{"id":"b:1:2303-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2305:28348"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:112:712":{"id":"0:112:712","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[718,4],"end":[720,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:712":{"id":"0:107:712","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[650,4],"end":[701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1817":{"id":"0:0:1817","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1792","0:114-0:161:1794","0:115-0:170:1795","0:116-0:155:1796","0:117:1802","0:118:1807","0:119:1815"],"is_stripped":false}}},"b:1:3450-0:161:1794":{"id":"b:1:3450-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3452:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12818:36239":{"id":"1:12818:36239","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12821:2133":{"id":"1:12821:2133","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12722:36222":{"id":"1:12722:36222","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12830:36241":{"id":"1:12830:36241","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2621-0:155:1796":{"id":"b:1:2621-0:155:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2624:134","1:2625:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5804-0:170:1795":{"id":"b:5:5804-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9841:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5802:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5806:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[715,0],"end":[715,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","description","cause","source","type_id"],"trait":{"name":"Error","id":"1:2668:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12731:2001":{"id":"1:12731:2001","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41931:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12747:28568":{"id":"1:12747:28568","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12746:28548"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44134:6644","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12760:6553":{"id":"1:12760:6553","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41931:197","prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12839:35295":{"id":"1:12839:35295","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39878:28739","Self::is_ascii":"1:12838:1979"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39878:28739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[523,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12792:34180":{"id":"1:12792:34180","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5547:36906":{"id":"5:5547:36906","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2282","`String`":"5:7529:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5550:33094":{"id":"5:5550:33094","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12842:33097"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12845:12086":{"id":"1:12845:12086","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4616:12086"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44159:6591","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2620:1614":{"id":"1:2620:1614","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2872:2411-0:161:1794":{"id":"a:1:2872:2411-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2872:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2832:253-0:170:1795":{"id":"a:1:2832:253-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2616-0:161:1794":{"id":"b:1:2616-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2619:134","1:2620:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:1807":{"id":"0:118:1807","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530":{"id":"5:5530","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5531:36902","5:5532:2139","5:5535:36903","5:5538:36904","5:5546:36905","5:5547:36906","5:5548:2031","5:5549:33093","5:5550:33094"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:155:1796":{"id":"0:155:1796","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:8879:2432-0:155:1796","a:1:2832:253-0:155:1796","a:1:2872:2411-0:155:1796","a:1:2815:243-0:155:1796","a:1:8878:2433-0:155:1796","b:1:2300-0:155:1796","b:1:2303-0:155:1796","b:1:2610-0:155:1796","b:1:2616-0:155:1796","b:1:3450-0:155:1796","b:1:2606-0:155:1796","b:1:2621-0:155:1796","0:159"]}}},"0:117:1802":{"id":"0:117:1802","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8878:2433-0:155:1796":{"id":"a:1:8878:2433-0:155:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8878:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12841:33096":{"id":"1:12841:33096","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:36902":{"id":"5:5531:36902","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2282","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2282","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2827:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12746:28548":{"id":"1:12746:28548","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12747:28568"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44125:6631","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12757:2111":{"id":"1:12757:2111","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2137":{"id":"0:87:2137","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[649,0],"end":[702,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2302:2182":{"id":"1:2302:2182","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12728:36224":{"id":"1:12728:36224","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12742:34164":{"id":"1:12742:34164","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12741:34163"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12842:33097":{"id":"1:12842:33097","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12751:31656":{"id":"1:12751:31656","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12034:448","self::pattern":"1:12415:2291"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:36904":{"id":"5:5538:36904","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2305:28348":{"id":"1:2305:28348","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2616-0:170:1795":{"id":"b:1:2616-0:170:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2619:134","1:2620:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:170:1795":{"id":"0:170:1795","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[603,0],"end":[616,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8879:2432-0:170:1795","a:1:2832:253-0:170:1795","a:1:2872:2411-0:170:1795","a:1:2815:243-0:170:1795","a:1:8878:2433-0:170:1795","b:1:2300-0:170:1795","b:1:2303-0:170:1795","b:1:2610-0:170:1795","b:1:2616-0:170:1795","b:1:3450-0:170:1795","b:1:2606-0:170:1795","b:1:2621-0:170:1795","b:5:5804-0:170:1795","0:111","0:110","0:108","0:106","0:183"]}}},"1:3452:1627":{"id":"1:3452:1627","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39691:10236","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2610-0:161:1794":{"id":"b:1:2610-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2621-0:161:1794":{"id":"b:1:2621-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2624:134","1:2625:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12744:10278":{"id":"1:12744:10278","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12034:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43827:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12809:36234":{"id":"1:12809:36234","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2609:2147":{"id":"1:2609:2147","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2583:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2832:253-0:161:1794":{"id":"a:1:2832:253-0:161:1794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:44:2007":{"id":"0:44:2007","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[223,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3450-0:155:1796":{"id":"b:1:3450-0:155:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3452:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:168:452":{"id":"0:168:452","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12801:36231":{"id":"1:12801:36231","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12415:2291","`DoubleEndedIterator`":"1:7785:127","prim@char":"4:12034:448","str::rmatch_indices":"1:12804:36232"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44001:6641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:161:1794":{"id":"0:114-0:161:1794","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1794","glob":false}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[717,0],"end":[721,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9841:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12750:28914":{"id":"1:12750:28914","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44143:6643","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12840:33095":{"id":"1:12840:33095","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2815:243-0:155:1796":{"id":"a:1:2815:243-0:155:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2616-0:155:1796":{"id":"b:1:2616-0:155:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2619:134","1:2620:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12807:36233":{"id":"1:12807:36233","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:10617:8467":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:9851:212":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:5023:11047":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:45953:10307":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4789:10929":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:4207:7468":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:3493:33584":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:14325:9193":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:1682:10714":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:2913:7501":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9052:24334":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:12047:790":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"11:364:7436":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:363:9862":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11508:24359":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10293:7620":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:46652:10330":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:39608:220":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:6837:11398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:14379:9213":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:5088:9325":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:2364:207":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:4986:9322":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13547:8975":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:6196:7820":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:12281:8676":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10662:8475":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:11970:6625":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10060:8425":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4434:10803":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5044:11059":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:32391:9568":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:4841:10956":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"20:658:2351":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"4:4493:17679":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:785:7447":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:7598:11486":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:1041:9511":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"20:197:2361":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"16:4719:9313":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:5928:11165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:3813:2315":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:9638:6683":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:12294:8677":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:22202:29029":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:12497:8725":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6386:9412":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:10266:7950":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"9:393:23279":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6485:7742":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11911:8609":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11952:8613":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:2519:9875":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1537:10616":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:3502:17610":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:11382:8551":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:7768:7760":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6243:9398":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:14222:9173":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12751:8762":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:3191:36140":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:42125:7798":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:12005:17553":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:2353:11539":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"16:4745:9314":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:14174:9136":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:22607:10211":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:44253:10271":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:44436:10283":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:6164:7511":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:10824:9885":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:3232:9260":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:2837:2308":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:8546:7168":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:504:8306":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12811:8770":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:48279:10361":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:8205:24299":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:7492:9858":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:1644:629":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:1674:10713":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:21214:31439":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:11614:9920":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:3212:8012":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13102:8832":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12532:8729":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:12180:6648":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12912:8806":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:10759:11528":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:3282:260":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6901:7746":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:5939:7685":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:3225:36141":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13011:8816":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"14:202:2268":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9329:6629":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"11:2569:2283":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:40336:6599":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13869:9057":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:4053:9303":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:4686:10901":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:42133:2318":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"16:6401:7741":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:43202:7873":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12889:8797":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:9022:7819":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:929:17564":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:44159:6591":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:5859:11135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:1551:8010":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12544:8731":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:10580:7528":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4939:1092":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:46086:10312":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13982:9083":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:2538:11834":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:48200:10356":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:719:8295":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:14336:9197":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12423:8707":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13633:9020":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:22112:17356":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"4:12034:448":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:9836:117":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"21:259:37272":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"1:41148:8098":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:40637:8061":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:3162:32944":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:11309:7821":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:40426:6589":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:3364:12073":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6961:11466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:21421:17612":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:10432:8039":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:1064:9773":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:6346:17755":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"14:165:23363":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:44459:6624":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:2933:23426":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13967:9081":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:43827:2362":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11359:24480":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:44150:6592":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"0:22:1962":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"1:7706:12141":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:7333:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10215:7554":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:2583:141":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:6968:24293":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:9712:37202":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12725:8758":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:2149:9845":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"0:46:651":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"5:7417:2283":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:9853:6666":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:14347:9198":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:2369:131":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"18:599:37207":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:48294:10362":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:7756:2413":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:563:10576":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:43795:2285":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:41175:8101":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:5973:7512":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:837:7168":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:21368:17612":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:13222:7508":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10751:7643":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:4052:17661":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:7445:7472":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:8687:24346":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12008:7658":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:7849:9931":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:4800:7502":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:724:150":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:3602:7798":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:883:9770":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:4247:7168":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:7391:24295":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5634:9331":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:10852:6633":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:690:8292":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:4406:7468":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:2978:35979":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:7679:11503":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"4:7902:7810":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:5830:9344":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:5049:9324":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:5989:226":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:6100:11261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11352:8546":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:6222:11291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:46286:10319":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:542:10565":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7128:10012":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:10946:7271":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"9:237:10263":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:48160:10352":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:7733:17552":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13891:9063":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"20:646:2350":{"crate_id":20,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"4:7879:136":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"6:1632:10684":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"20:447:2349":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"4:940:9767":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"21:291:37273":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"4:12057:1691":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"4:6545:17745":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:4439:7470":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12374:8682":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:3280:9882":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:48241:10359":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:4153:8031":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:2864:9284":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:2369:9782":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:3031:12070":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11138:8528":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:8826:24350":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12672:8486":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:2696:9277":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:9792:232":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:10166:24387":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:12599:8740":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:1450:2318":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"20:0:1818":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"4:8552:8038":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:2948:134":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:44125:6631":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:7529:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5015:11042":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:1521:10608":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:4744:17669":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:41157:7552":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:6107:11262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:23321:10228":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:44785:213":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"11:2443:2269":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"18:590:8277":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4932:10995":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:5897:11154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:45931:10306":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:11621:9920":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:646:17548":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:40557:8057":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:5798:7712":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"20:510:7912":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"11:2562:10515":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:2043:7826":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:30565:2309":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:4806:9316":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:1563:8012":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:46786:10333":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7534:9293":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:2968:36219":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:10157:10018":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:44143:6643":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:119:17882":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4666:10899":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12087:8628":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:4070:10180":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:46175:10316":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10441:8449":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:3049:23428":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:1604:10660":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:1917:8012":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"4:7844:8025":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"18:644:8273":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:2178:7954":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:7543:2270":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:6128:11268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:1075:7944":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:1639:10688":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:1511:7802":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10431:8448":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:5397:9899":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:42961:9635":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:43733:8118":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:9661:37200":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:21370:17273":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:8714:24347":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:44777:233":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10535:8460":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:11152:7974":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7621:24296":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:12120:6649":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:7616:11489":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:1596:10655":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:699:7611":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"14:215:9761":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:22338:17350":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:13452:8892":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:40445:10241":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:1820:8023":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:1542:2269":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:2832:253":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:46484:10325":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:491:8272":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:42005:2318":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:12040:1531":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:41929:200":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:12738:8760":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:3325:17639":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:3655:8320":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:4585:9310":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:700:2318":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:11112:8527":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"22:0:2376":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"6:4745:10906":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:11245:8563":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:580:10584":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:7436:7699":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:44574:6617":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:5052:11061":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:5755:9909":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:14111:9120":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:6083:23398":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:9753:7937":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:39691:10236":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"16:2907:9286":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:10647:8472":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11063:7969":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:12052:1633":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"11:1603:9779":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:44134:6644":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:8138:7827":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"11:687:7798":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:8115:9663":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:2978:12061":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9522:7933":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:11292:7533":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:14069:9109":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:6479:2269":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:6079:11249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:1568:8013":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:30621:6672":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:6086:11250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:42167:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:48215:10357":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:4774:9315":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:8979:24355":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:39878:28739":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:22289:17612":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"4:4182:8033":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:5121:9326":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:1651:6703":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12226:8657":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11216:8535":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:8227:8027":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:44858:10300":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:2548:9271":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:6868:11424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:40655:8066":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:39526:219":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:673:7168":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:6998:7487":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"22:948:28345":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"5:4015:2269":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:5384:24285":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:4917:17704":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:43901:6636":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:43821:2000":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:6700:11348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10917:8513":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6268:37196":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7651:9605":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:11047:7531":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:3830:9300":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:2304:9511":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:7660:9606":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7736:9607":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:5661:9340":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:10085:7946":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:4505:6677":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:7782:9608":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:2537:17612":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:3186:8011":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:12059:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"16:4344:9304":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:2905:12051":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13423:8872":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:44621:128":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:10508:8458":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:2663:9877":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:41866:9889":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:9973:8423":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"7:0:1681":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:7476:28885":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6017:24288":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:4321:227":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:5502:9902":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:588:17546":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:22698:11541":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:46193:10317":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12453:8716":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:7388:11484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:4361:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:22540:7838":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4449:10810":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:43683:8115":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13612:9015":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:48020:10348":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11743:8572":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9351:7638":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:946:9769":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:4682:6585":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:80:7917":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:41853:10257":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12960:8811":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:2596:9273":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:6898:7519":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:11053:7532":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"13:0:2250":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:5645:2321":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:22:726":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"6:6764:11376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:521:28320":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:10490:17612":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:2427:2188":{"crate_id":4,"path":["std","io"],"kind":"module"},"21:320:8246":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"11:1896:2315":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:1903:6798":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"21:228:2041":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"4:5310:126":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:9276:8023":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:41717:12150":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:12935:8807":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:2644:9275":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12946:8809":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:47818:10345":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:527:10556":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"14:160:9756":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:638:9865":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"9:507:7273":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"22:1122:8242":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"6:6071:11248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"22:43:28342":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"1:42559:7869":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:4058:10179":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11338:24479":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:39427:12074":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12306:8680":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6792:9477":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:40678:8069":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:42931:6672":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:7554:2271":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"22:752:7425":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"5:3246:8013":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5829:11110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:9456:37201":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:11818:7539":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:13793:9040":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:14356:9200":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:0:2258":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:434:8305":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:43211:153":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:8815:7813":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"18:766:28319":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:2536:10511":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"22:879:28344":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"1:48264:10360":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12253:8666":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:9476:8025":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12209:8649":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10448:7770":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:8275:9889":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:3797:9299":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:1840:185":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:3461:9296":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:3062:12064":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:1481:7800":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:6985:11819":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12555:8732":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:5956:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:14157:9129":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:31195:7866":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:9489:37199":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:6804:11384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5982:11192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:8:2356":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"4:4742:17667":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:40306:28896":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13724:9033":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:12000:7835":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:8282:11519":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:8454:10263":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"4:881:7800":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:6228:11292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:3241:9880":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:1531:8017":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:8404:9995":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:46055:10311":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:12157:6651":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:9049:32313":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:47146:10339":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:40919:8089":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:5941:11174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13245:8856":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:4478:6502":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6346:7738":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:483:10528":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:6008:17802":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:624:37208":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"22:1034:28346":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"4:5570:11278":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:357:9861":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"11:2124:9511":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:4835:9317":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:9845:6663":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:13211:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"14:0:2256":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:5969:11186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:41746:7868":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:10673:7960":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:10727:8480":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6361:9409":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:1591:10653":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5885:11150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:7651:11497":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"11:1676:7440":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:4496:10832":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:14014:9091":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:2936:9526":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:2974:12060":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:6934:11460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:42921:11608":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:43775:8122":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:2657:122":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:10931:6638":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:30605:6705":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10638:8471":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"20:472:2351":{"crate_id":20,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"18:614:37209":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:2825:251":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4535:10849":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:10100:7856":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"11:2554:37186":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:2815:243":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:489:10531":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:44411:10282":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"15:394:23390":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:43645:8110":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:2574:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:2919:12055":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:4557:9309":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"11:811:2315":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:856:9767":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:261:7444":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:41119:8094":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:40487:12103":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:3327:12072":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6531:7980":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11536:7650":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:2931:12054":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:7023:7490":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:1910:699":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:43919:6634":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:13039:31608":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:1558:10631":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:9035:10012":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"4:3990:17655":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6279:7733":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4947:11000":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:2987:12063":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:44282:10279":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:1761:8021":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"16:6929:7748":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:8167:9670":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:2297:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:4889:9319":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:14515:9240":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:2406:208":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:21551:7858":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:21195:31448":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:629:9841":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:894:2269":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:43594:8109":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2406:9265":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:2623:9876":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:3557:2269":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12268:8672":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:2915:2274":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:4351:10742":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:9999:8396":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:1691:10720":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:47896:10346":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:22980:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:536:7689":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:4641:9312":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:40577:8058":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:11607:33133":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:2580:159":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"18:113:7923":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:22524:7860":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12779:8766":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:4746:17670":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:8238:17649":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:7747:162":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:42520:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:40407:6596":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:44073:6640":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11720:24361":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:1961:10051":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:641:9867":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:10228:8439":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:5117:11094":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:6560:7433":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:42688:6662":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:14101:9117":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:12048:791":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"16:7006:9498":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:1007:9511":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:4628:10897":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:42481:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:1546:2315":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:6114:11263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:8386:17714":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:2970:11511":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:11315:8042":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:10537:9880":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"0:118:1807":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"17:14077:9112":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:3565:7968":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:10479:7272":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:10540:9882":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:504:7461":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:7792:24297":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12699:8755":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:41660:167":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:6189:9393":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:44001:6641":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:12045:688":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:46910:10335":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:41700:10192":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:12032:399":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:48066:10349":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:11390:8046":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8879:2432":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:6687:9451":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:3512:17631":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"16:6696:9452":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:6428:8096":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:13803:9041":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:23197:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:41683:10190":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12238:8660":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:14523:9243":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:5149:7477":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:7070:6527":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4556:10859":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10140:24386":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:1126:36145":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"21:313:2401":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"1:44425:12220":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:12035:1652":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:44019:6642":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:6889:11438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11618:8563":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:0:1523":{"crate_id":4,"path":["std"],"kind":"module"},"1:23042:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:4862:9318":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8210:12139":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:5634:7512":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:2832:9283":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:42695:6664":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:12053:1634":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"5:5987:7477":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:11217:11532":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"4:8331:11357":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:7530:8307":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:4210:7844":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:2284:23399":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"4:8293:9983":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:43654:8111":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11956:10200":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:14479:9236":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:7518:7478":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:557:9864":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:7600:7524":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4977:11021":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:2923:12053":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:5140:11101":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:14135:9124":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:2201:135":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:7381:33018":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"6:4808:10937":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4870:10967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6600:24291":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:6263:11317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:5715:8065":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:8878:2433":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:44479:2281":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13677:9025":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:8007:7824":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"6:4401:10779":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:8803:205":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"16:8281:9678":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:4998:11036":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:7343:11472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:10942:9930":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"4:8287:17677":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:2209:7957":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:8195:9671":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"22:470:7419":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"16:2380:9264":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:875:9769":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:1265:9511":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:10764:11530":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"4:5827:7504":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:7645:11496":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:47708:10344":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12646:8746":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:7669:9923":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13852:9052":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:837:9764":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:9811:140":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:22719:10224":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4603:10884":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"15:327:7764":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11972:8623":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:9187:32765":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:7370:2318":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:4878:10970":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:5435:9329":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11662:8565":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:14270:9174":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:22204:12020":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:40730:7852":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12112:8633":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:46940:10336":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"21:198:2402":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"18:0:2260":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:40779:8085":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:32412:8051":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"16:4417:9305":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:11357:9917":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:23228:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:13839:9046":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:11236:158":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"9:426:23280":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4710:10903":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:3764:9298":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"20:319:17612":{"crate_id":20,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"1:21827:17612":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"4:5573:17732":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:7694:7756":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13216:8853":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13555:8978":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12622:8745":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13711:9028":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:6439:8077":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:10604:8466":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:22067:17355":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:43186:7870":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:43026:6673":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:3049:123":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12971:8812":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4968:11015":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"4:8214:6635":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:2827:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:6819:11388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6879:9483":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12984:8814":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:7503:9292":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4783:10926":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:12646:117":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:11180:7857":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:7301:7455":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:2880:6500":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:9173:7634":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:7856:7825":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"5:1110:8015":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:41908:10195":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:1055:9771":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:12231:6645":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:10740:6645":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:9913:8417":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:2877:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:9391:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:10697:6635":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:44374:10204":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:40646:8064":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"18:538:7606":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:2810:9282":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:1501:10600":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"13:226:7768":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:2969:23427":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:9197:11524":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:844:17564":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:4030:17657":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:9791:37205":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:8134:9666":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:2894:9524":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:11273:8542":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:2618:9274":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4388:10769":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4480:10828":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"21:67:2039":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"1:43223:10263":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:4908:17703":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:22333:17352":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:2722:9278":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:41142:8097":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4516:10841":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:6813:17754":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:4902:10185":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:2057:9844":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:2321:9261":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:2012:7951":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:3932:17652":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:12435:6622":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:1874:6797":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"6:596:10594":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:9897:24369":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:4776:10925":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8248:31858":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3448:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:44841:177":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:42986:6672":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:9103:7632":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:1407:152":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:8097:9661":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:7866:9932":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"6:1734:10736":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:3293:12067":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10469:7641":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:123:7434":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"4:10955:9902":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:6047:11236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"14:31:9756":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:23259:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:2970:12059":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:8921:17750":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:40322:6597":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:5802:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:42362:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"11:1582:9778":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10098:8427":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:9095:183":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"8:0:2251":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11940:12184":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:44602:7857":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"18:736:28318":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3077:137":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"0:0:1817":{"crate_id":0,"path":["idna"],"kind":"module"},"1:10060:153":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:8905:17751":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11368:8548":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:8843:7814":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:2709:6802":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:44767:225":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"21:145:2040":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"4:4966:17710":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:14025:9095":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:9100:240":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:11539:9888":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:12041:1617":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:22175:17612":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:39566:218":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:5383:9895":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:4529:10846":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:21981:17271":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:868:7799":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12791:8767":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:8797:8039":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:44590:6619":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:40909:8088":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:4045:7444":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:21857:7859":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:46864:10334":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"20:486:2352":{"crate_id":20,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"4:5242:209":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"5:4999:7468":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:42142:202":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10187:8434":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"4:5448:111":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:23766:242":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:7633:11494":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12712:8757":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"21:266:2387":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"4:6542:9912":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10739:7964":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:40627:7849":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11789:8576":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"20:413:8250":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"4:10794:7825":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:48104:10350":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:9493:31855":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:22669:28893":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:5033:11053":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:9824:24367":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:0:473":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:10113:7947":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:7279:8014":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:4571:17696":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4830:10948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:3065:8315":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13056:8825":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13974:9082":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:12429:6623":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:10323:111":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:3733:7826":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"20:421:2357":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"6:4893:10974":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:44646:10292":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:3338:2315":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:11846:8586":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:14043:9099":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:1822:8024":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"9:357:23293":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:47176:10340":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11174:24478":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"22:636:7907":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"16:5403:7616":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:41989:7168":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:46240:10318":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11049:8522":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:10769:9931":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:2316:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:3396:7468":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:2294:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4523:10844":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:13175:8848":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:21197:31436":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:22244:17359":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:22592:28886":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:46338:10321":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2982:12062":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:4864:31347":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"11:430:8002":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:40440:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:4458:6676":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:12039:1498":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"17:10629:8470":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:4847:10959":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7067:9508":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:10779:8106":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:9868:8416":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:1434:7798":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:3032:9294":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:1883:7168":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:7522:7505":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9763:37198":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:582:7866":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9071:7616":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"11:328:7998":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6376:24290":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:13004:146":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:2822:2410":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"16:8239:9568":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"4:5053:9894":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10789:24454":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:44578:6616":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:13827:9043":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:10095:12178":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:2964:9531":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:3734:9886":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:10945:6637":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:2967:7797":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"10:36:10517":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:10052:149":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:48317:10363":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4676:10900":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"9:177:7787":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:23290:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:7523:9601":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"20:602:8263":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"1:46138:10314":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:919:7802":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:8979:113":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:2231:36051":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:1557:8011":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13759:7668":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:5637:7468":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"4:8992:32370":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:6844:9479":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"20:611:2347":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"17:9446:7931":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:1066:23357":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11296:7975":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:15:2227":{"crate_id":1,"path":["core","write"],"kind":"macro"},"5:2178:7803":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:40358:6590":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:1967:204":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6248:11306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"11:2231:7770":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:12155:8643":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:48180:10354":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:6927:11457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:3748:9844":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:825:7450":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:6813:11387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:10534:9878":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"4:5782:7815":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:44582:6620":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10279:8441":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:9608:7935":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:4627:17656":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:6226:9395":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:3201:9878":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:149:7431":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:2428:9266":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:3888:9301":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4506:10838":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:7474:9589":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"20:532:2038":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"1:40530:10243":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:8233:8029":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:531:8274":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:3168:33543":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:7284:2429":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"22:966:7430":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"17:10699:8478":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:8327:9986":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:40755:8082":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:3672:17650":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"20:501:2353":{"crate_id":20,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"4:3737:9887":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"20:633:2349":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"16:6332:7736":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:44299:10280":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9841:126":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:7916:9934":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:40550:10244":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"4:910:8009":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7884:24298":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:40381:6593":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:44570:6615":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"11:1107:9775":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:46015:10309":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:40707:8076":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4854:10961":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:14034:9098":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:43869:6633":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:8892:10005":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:6318:9408":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:9373:7618":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:4800:10933":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:14146:9128":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:4376:7470":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:7785:127":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:8859:8041":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:5995:7691":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:43426:10267":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"4:8974:7816":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"4:5417:9900":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:6691:11347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:13066:211":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"16:8154:9667":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:482:7492":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:10097:8050":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:654:18241":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:5910:11155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12659:8749":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"9:330:10518":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:13315:2312":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10495:7629":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:2823:6494":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"4:11146:7813":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:8851:7168":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:40346:6600":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:5588:9287":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:8012:17642":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4922:10989":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"11:434:8003":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:6741:11375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12466:8718":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:6681:7444":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12173:8644":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:5123:11097":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:26168:272":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:39684:10235":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11075:8526":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:4087:7798":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:9148:10014":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:7240:8092":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:14309:9189":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:6169:11280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:9618:37206":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10317:8442":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10411:8446":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:14164:9131":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:21869:31446":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:5743:9341":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:3282:9883":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:46316:10320":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:9793:6603":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:21549:17270":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:1296:9771":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:5648:9335":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:44168:6590":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:2542:10512":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:2371:17602":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:4169:17676":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:1744:653":{"crate_id":4,"path":["std","env"],"kind":"module"},"17:14091:9114":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:7932:7826":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3116:2279":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:5084:9894":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2869:6496":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:2206:7491":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:43673:8114":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:23166:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4566:10866":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:10298:7496":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:7839:8184":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:3982:17654":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:261:8303":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:2577:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:11199:9915":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:43233:7874":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:4394:7543":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12514:8728":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:2400:201":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:10281:7557":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:7568:7752":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"4:952:9770":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:6432:9911":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:7581:7522":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4428:10802":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13203:8852":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6261:7702":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:3165:33546":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:774:7799":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10215:7949":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10024:7936":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4902:10980":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:1681:1179":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"11:1891:2269":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"11:1142:9776":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"15:306:7989":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:7513:9600":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:2212:12021":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"4:3484:6603":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"11:2548:7994":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:5867:11137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11024:8520":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:12016:32753":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:42702:6665":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:6012:11215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:2450:9267":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4455:10812":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:660:7925":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:5905:9354":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:46037:10310":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:8880:2431":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:31167:202":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"9:450:23278":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:4461:10815":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:32351:10514":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:13086:8828":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:11172:33581":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:44598:6614":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:915:7801":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:12420:2280":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:7365:11473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:12033:1025":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:42057:6659":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:2210:12020":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:3441:7967":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:12486:12213":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"14:221:9763":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:533:7493":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:4325:10181":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:7668:11502":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:2586:264":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:9481:7526":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:46530:10327":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:40933:8090":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:1749:12035":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:3203:9879":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:13923:9070":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"11:1903:8010":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4814:10939":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:8766:24348":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6513:9420":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:5866:9351":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:3368:8098":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:6251:7512":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:4:1105":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:11595:7834":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:4641:11372":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"9:52:7772":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11873:8594":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"4:2601:7496":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:2766:9280":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:11001:8519":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:8301:8027":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:9165:10015":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:4543:10854":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:582:8307":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:5727:7710":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:22304:17351":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"4:7907:7809":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"11:1566:23358":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4473:10824":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12998:8815":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:2911:9525":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:43765:8121":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:2150:24412":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"23:0:2377":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"4:6468:7516":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:10099:10017":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:495:10534":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:6456:9418":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12474:8720":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:22653:28880":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:10198:8436":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:2526:9270":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:4462:9306":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:2504:9269":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:11458:8123":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:9138:7633":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:2943:12056":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:40520:7545":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:42949:29592":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:12375:2287":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:42977:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:11394:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10950:8516":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:6718:11357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:32499:6501":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6569:7744":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:32387:10232":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:11449:24358":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13877:9060":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:12124:8634":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:40599:7846":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10341:8443":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:21158:7866":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:40687:8070":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:4082:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:2899:9521":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"15:288:7984":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"11:2423:2318":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"18:515:8270":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10715:7963":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:6450:7551":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"4:1970:203":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:1535:7168":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:2587:7498":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"22:386:7431":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"5:2698:11517":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:6299:226":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:9934:8421":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:9472:712":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"4:10842:33578":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11328:8544":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:10371:7958":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:13287:8863":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:4532:448":{"crate_id":1,"path":["core","char"],"kind":"module"},"17:12485:8723":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10421:8356":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"0:44:2007":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"4:10078:8022":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:923:9764":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:5828:7850":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:8849:24351":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:4823:17666":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:44268:10276":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:7838:2004":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:742:7802":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13898:9065":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:2889:11872":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:13260:148":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:9004:24356":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:3996:17656":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:2872:2411":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:13488:8923":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:22471:10209":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"11:1887:2318":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:1718:10731":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:9847:6664":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:9855:6667":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:41980:170":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"17:12438:8711":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:39542:216":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:8563:10003":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:5627:226":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:475:8007":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:3315:9295":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:1419:7168":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7318:9548":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:3968:17653":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:43720:8057":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4738:10905":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13275:7647":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:2200:630":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:5612:9289":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:7262:2313":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:622:6799":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4595:10879":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4616:10888":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4955:11005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:4375:10759":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:10959:8127":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:42066:10198":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:43809:6628":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:75:1634":{"crate_id":1,"path":["core","u32"],"kind":"module"},"6:6781:11377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:574:10581":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:11491:8124":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:1310:9777":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:4637:11368":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:12037:1142":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:3287:143":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:46116:10313":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:22151:17357":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"16:3915:9302":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:1680:7444":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5075:11069":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:7604:11487":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:2151:9773":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:12766:8765":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:46386:10322":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:1650:10696":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:12058:1238":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:9849:6665":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6658:11324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:22705:10223":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:7657:11498":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:12046:793":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"5:7325:2318":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:1710:10727":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6818:9478":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:10890:8108":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:44115:6632":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10127:8428":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:787:7800":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:3243:9881":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11087:7971":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:7644:17612":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:30797:28891":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6583:9427":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:8960:10006":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:13017:161":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:4764:10918":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:11384:8045":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:44658:12226":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:40279:6591":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:41997:7798":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:11455:7535":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:22615:10212":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:7429:17563":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:41133:8096":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:3312:31368":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:40669:7851":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13041:8821":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7054:9505":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:7739:17583":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"5:7271:2318":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7708:7758":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:13229:8854":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:11983:10043":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"4:7690:7528":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:47022:10337":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:6742:9464":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:9306:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:1514:10606":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:11390:7977":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"18:671:7930":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:8795:24349":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13114:8834":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:6856:2322":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:7894:175":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:7556:11485":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:6525:7444":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:47566:10343":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:9469:135":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:22580:10210":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:2670:9276":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:14500:9239":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:10817:8107":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:21180:31441":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:7613:2315":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:44828:10297":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:12577:8739":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:10970:32749":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:7718:17551":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:21423:17269":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:7362:2318":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:4488:10830":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11816:8582":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"4:5748:9906":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:7613:9604":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:1507:10603":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10384:8445":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"14:40:8610":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:707:6623":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:42440:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:5673:9288":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:46706:10332":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:7360:37194":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:7028:7520":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13950:9074":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:45861:10303":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:40400:6595":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:40473:10242":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:10782:10032":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"4:8147:7828":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"6:533:10559":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:42206:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11282:7646":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:32405:6675":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:1772:10048":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:8353:9893":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:4044:17659":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:10013:7620":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:7371:11475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:5339:7444":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8204:12138":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4908:10981":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:46156:10315":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:21540:17612":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:2139:7461":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:681:8290":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13779:9037":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4364:10751":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11587:7653":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4989:11030":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"18:636:8289":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"4:8494:17727":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:10686:8476":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:10973:8128":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:3083:139":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:10804:136":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:9110:158":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:6415:9415":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:1160:9777":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:39586:221":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:6112:7468":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:7896:125":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"19:0:1122":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:44105:6630":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:42323:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:2974:35980":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:3220:8010":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"11:1087:37187":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:1910:8011":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:40457:28885":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2788:9281":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5955:11185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:2826:250":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:9973:10254":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"11:1923:8013":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"11:102:10510":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:10833:33575":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:6960:9487":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:6646:239":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:4404:6675":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:7862:9620":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:14119:9121":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"20:439:134":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"11:299:7995":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:43441:11616":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:207:7443":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"11:2403:7798":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:6898:11441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4578:10872":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:2469:2315":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"4:1759:8020":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"16:2881:9285":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12025:7660":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:5104:11088":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:710:7801":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"4:8221:6630":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:8208:6629":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:12137:8635":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:548:10568":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:7292:12130":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:481:8271":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4584:10875":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:40366:6591":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:42681:6663":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:43746:8119":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9278:7637":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:41126:8095":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11574:7651":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:6041:24289":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:5760:24287":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:11227:8539":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:6148:7508":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:3600:9297":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:7692:11507":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6159:11277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:800:2269":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:727:7612":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:1051:9773":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"11:2326:9771":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:41830:28890":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:6445:11540":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:1500:7801":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:11478:9886":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:2884:2273":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9208:7635":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12063:8624":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:8985:10007":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"22:449:7415":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"4:5130:210":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:41889:10193":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:0:2259":{"crate_id":17,"path":["object"],"kind":"module"},"1:21979:17612":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:43851:6635":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:6352:7740":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:0:872":{"crate_id":6,"path":["libc"],"kind":"module"},"5:1019:7444":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:4131:8030":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14283:9180":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:7639:11495":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:4527:9308":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:1576:10641":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11491:8560":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5992:11199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:10475:7527":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:40393:6594":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"20:306:2335":{"crate_id":20,"path":["unicode_bidi","TextSource"],"kind":"trait"},"17:9853:24368":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:4040:17658":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:9070:7831":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:8050:9657":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:6425:9416":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:22258:12020":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13136:8845":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:1073:9777":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:2381:17607":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:904:2315":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:1558:7468":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:13990:9084":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13163:8847":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:11036:7530":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:2469:11514":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:4105:12087":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:7755:9930":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"0:119:1815":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"1:32398:10233":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:48356:10364":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12185:8647":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"18:652:8273":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13907:9066":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:1025:9771":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:4233:9890":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10930:8515":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:10500:245":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:6072:7506":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:44820:10295":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11408:24357":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:6499:7743":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:14127:9123":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:3445:9884":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13568:8985":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:7622:11490":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11163:8529":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:123:17883":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:11192:8308":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:7492:9597":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:3112:2278":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:4860:10964":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:2590:263":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:48189:10355":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:1472:7799":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:7743:142":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:507:8273":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:7544:9602":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:8867:2318":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10037:8424":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:4705:17678":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14057:9106":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:10241:7639":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13668:9021":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:46508:10326":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"15:0:2257":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6545:9426":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:14470:9234":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:44566:6612":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:39630:222":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11099:7972":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:5322:9327":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9243:7636":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:8191:7845":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:13686:9026":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:48169:10353":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:23104:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:609:8284":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:7541:10040":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:47360:10342":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10904:7965":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:3682:7444":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"11:832:8009":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:11532:12033":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:1570:10639":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:42401:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:6798:11382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5152:11106":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4440:10805":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:10740:10027":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:9565:7934":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:3938:17651":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12075:8627":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:1784:2315":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:574:8273":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:755:8301":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:23011:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:400:8304":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:4177:7468":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:10548:8461":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9575:37203":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:4698:10902":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"20:672:2352":{"crate_id":20,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"1:0:528":{"crate_id":1,"path":["core"],"kind":"module"},"12:0:2255":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13817:9042":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13189:8849":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"20:460:2350":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"4:9015:10011":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"13:110:37188":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"20:590:37215":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"6:1528:10611":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:4385:9892":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:40769:8083":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:555:10571":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"11:2352:9773":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:8927:24353":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:2744:9279":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:43955:6638":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:46554:10328":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"20:623:2348":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"1:3986:7468":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:4843:417":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:8991:2280":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:62:17828":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:6943:11463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:5419:7617":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"0:24:580":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"17:13915:9068":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"10:0:2253":{"crate_id":10,"path":["adler"],"kind":"module"},"6:1913:19233":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10963:8517":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:5387:17789":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11202:8531":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:45841:10302":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:40294:6598":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:2251:7806":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:40698:8075":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"4:12044:686":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:5641:9903":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:5111:11091":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:12044:7667":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:9027:7829":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4824:10945":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:8201:2272":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:96:7920":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:47100:10338":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:46605:10329":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"21:0:1819":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"11:2383:7168":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:9922:8419":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:9986:7942":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:5696:24286":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:2472:9268":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4549:10856":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12686:8754":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:48226:10358":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:43755:8120":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:11518:9887":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:13260:8860":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:1664:10707":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:8309:9984":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12831:8771":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7582:7753":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:860:2318":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:30691:28882":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"4:7664:9921":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:7645:9863":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:40739:8080":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11992:7654":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:40586:7845":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:5574:7706":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10457:8454":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:46683:10331":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:42284:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:10313:7562":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:44870:9784":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"5:35:2314":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12197:8648":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:13576:8986":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:4253:6674":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"16:4613:9311":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:4330:10182":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:7462:7827":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:12440:6621":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:7462:9855":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:11342:9916":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:9960:7941":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:10340:33172":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9781:7938":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:47210:10341":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5009:11041":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"0:7:1792":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"1:7176:12144":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:11372:9919":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:12038:338":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"7:31:23264":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:6866:2323":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:12415:2291":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:13694:9027":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:11160:10004":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:6612:7517":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:22632:28904":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:14297:9186":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:14421:9219":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:0:2254":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:9311:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"0:117:1802":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"4:8201:8088":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:44055:6639":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:5974:11187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4647:10898":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"9:0:2252":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6915:7747":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:4179:7843":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:6666:11329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:8002:9936":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:5433:9901":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:14537:9246":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:4860:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5891:11153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6156:9390":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:2875:6498":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:11935:8610":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:43694:8116":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:12056:842":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:6467:9419":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4914:10984":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:10772:8481":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:44446:10287":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:2927:12052":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"20:517:7914":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"6:7610:11488":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:46432:10323":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:7710:12140":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"14:7:9756":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:881:7452":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:23135:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"14:187:23370":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:7629:2316":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:13091:10206":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:40374:6592":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:4884:10971":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:8829:10004":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:12055:1632":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:9651:7620":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:21212:31444":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:415:181":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:39705:8242":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:6253:8073":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11262:8541":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:3073:2412":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:1496:10598":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:3589:7168":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:850:7798":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:234:232":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"3:0:2249":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:4639:11370":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:43194:7872":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:11711:7647":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:6204:7718":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"22:728:7415":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"16:6944:37191":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:7041:9502":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"11:396:7438":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7597:37192":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:1281:9773":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:3299:12069":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:2339:7677":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6721:24292":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:45985:10308":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6711:11353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12099:8631":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:6913:11448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:12049:792":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:3080:138":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:2958:9530":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:41167:8099":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5085:11074":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:2203:9874":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:14461:9230":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:276:2282":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:10249:11780":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:5963:9360":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:9105:241":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"22:534:7906":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"17:10367:8444":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"11:351:7999":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:7702:11509":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:7311:36072":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:8873:9904":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:8477:9998":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:6598:17747":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:43973:6637":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11125:7973":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:13025:8819":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:44883:10301":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:10648:7168":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:42047:2430":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"7:78:23271":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:43241:7875":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:14084:9113":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:5872:2269":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:45885:10304":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:8158:9885":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"16:5712:7707":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"21:276:2399":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"16:5816:7717":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:1797:8022":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:10672:7798":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4724:10904":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11688:24360":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11640:8308":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5146:11103":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:12050:788":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"16:7342:37195":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:11317:8543":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:8954:24354":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:4449:7544":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:5004:11039":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:2369:17601":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:11762:8575":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:5383:17788":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10589:8464":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:44231:12219":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"10:44:7771":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:3232:7966":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:45907:10305":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:42245:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:43004:134":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:30633:28879":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:43663:8113":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11887:8595":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:7137:8043":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:44594:6613":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10521:8459":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:8937:17752":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:4497:9307":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:47958:10347":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:21442:7858":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:6120:11266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7269:37193":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:2668:134":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:6359:182":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:4943:848":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:3427:9979":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:40285:10237":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:22190:17358":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"11:2140:9771":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:1697:10723":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7102:24294":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:8181:7762":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:14317:9192":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:6753:9465":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:5982:7978":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:2946:232":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"17:13149:8846":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:8896:24352":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:6837:2321":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:22556:7861":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13299:8870":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"21:302:2400":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"6:6059:11241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10576:8463":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13740:9036":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:23073:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:14435:9221":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7015:9501":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:2953:12058":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:39652:12065":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5017:9323":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:9087:7617":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11548:8562":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:48142:10351":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:507:10539":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6893:7703":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:4949:9321":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:8536:8035":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:4702:17705":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:21168:31441":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:7554:7751":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:564:7608":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:6682:11341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:6599:2318":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:40608:7848":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:6954:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:21429:17272":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:256:8302":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:44347:10281":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:44586:6618":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10981:7620":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12847:8776":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:7505:9860":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:30338:11835":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:11236:8540":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:1703:10724":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:2210:17594":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:40617:8059":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10562:8462":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:42074:232":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:10988:7814":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7722:7759":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:5363:9328":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:1546:10622":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:7341:7808":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:3692:2318":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1146:8016":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:1490:8009":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:9129:9915":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:2574:9272":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:1539:2318":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:5542:7468":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:43837:6629":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:4755:10913":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:43445:8104":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:46462:10324":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:501:10536":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:4313:9891":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:22731:11873":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:42117:7168":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:21832:17275":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:40720:8078":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:8660:24333":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:8072:9658":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:22418:10208":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:9498:7853":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:7462:9588":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:14002:9090":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:1763:11537":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:8170:17611":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:9843:6662":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:5068:11066":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10398:7959":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:14449:9228":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:39513:8052":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"4:3839:9888":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:9702:7936":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:588:10589":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"9:486:23277":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:12054:1635":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:1184:7945":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:42014:2429":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:9532:37204":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:12051:1636":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"5:3179:7168":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:4161:8032":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:3272:12066":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:9887:7939":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:2359:9263":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:7291:2269":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:10814:125":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:7828:9616":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:6136:11271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:4471:17678":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7090:9510":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:21226:31449":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:30599:2310":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:2355:17597":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12877:8795":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:8595:24335":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5921:11163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"20:524:7915":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"4:7924:9935":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:569:10579":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11307:7647":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:4921:9320":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13072:8826":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:2948:12057":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:898:7168":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"20:201:2037":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"17:11474:8376":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:39466:12071":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:2305:23425":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:12196:6650":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:9946:7639":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"20:687:2353":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"17:14402:9214":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"22:669:7602":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"6:4610:10886":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"20:696:2354":{"crate_id":20,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"1:3209:217":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5130:11100":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}