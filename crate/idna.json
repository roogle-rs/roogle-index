{"root":"0:0:2368","crate_version":"0.5.0","includes_private":false,"index":{"b:1:2994-0:170:2346":{"id":"b:1:2994-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2714-0:161:2345":{"id":"b:1:2714-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:29733"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96:2625":{"id":"0:96:2625","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[546,4],"end":[549,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:155:2347":{"id":"b:1:2994-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[704,0],"end":[712,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:839"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3242:7058-0:161:2345":{"id":"a:1:3242:7058-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:7058","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3242:7058-0:170:2346":{"id":"a:1:3242:7058-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:7058","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13298:2516":{"id":"1:13298:2516","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12355:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44013:2551","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2716:29733":{"id":"1:2716:29733","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2347":{"id":"0:155:2347","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:3207:247-0:155:2347","a:1:32473:2970-0:155:2347","a:1:42276:2989-0:155:2347","a:1:3242:7058-0:155:2347","a:1:32414:237-0:155:2347","a:1:42277:2988-0:155:2347","b:1:2711-0:155:2347","b:1:3823-0:155:2347","b:1:2988-0:155:2347","b:1:2999-0:155:2347","b:1:2984-0:155:2347","b:1:2994-0:155:2347","b:1:2714-0:155:2347","0:159"]}}},"b:1:2714-0:170:2346":{"id":"b:1:2714-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:29733"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13370:37527":{"id":"1:13370:37527","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13404:35458":{"id":"1:13404:35458","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:41987"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13296:34309":{"id":"1:13296:34309","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13295:34308"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5714:33643":{"id":"5:5714:33643","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13400:33646"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3036:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:97:2360":{"id":"0:97:2360","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[552,4],"end":[555,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2558":{"id":"0:44:2558","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[223,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13308:37519":{"id":"1:13308:37519","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44307:7202","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:698":{"id":"0:46:698","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[229,0],"end":[237,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13330:30311":{"id":"1:13330:30311","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12775:7215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:161:2345":{"id":"b:1:2994-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[538,0],"end":[583,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:2359","0:96:2625","0:97:2360","0:98:2660","0:99:2629","0:100:2355","0:102:2367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5950:1795":{"id":"5:5950:1795","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13357:37522":{"id":"1:13357:37522","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12960:2842","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12355:476","str::matches":"1:13354:2636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44265:7210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13405:37536":{"id":"1:13405:37536","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5013:37536"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44342:7154","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13409:37537":{"id":"1:13409:37537","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5011:37537"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44360:7152","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13368:37526":{"id":"1:13368:37526","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13366:37525":{"id":"1:13366:37525","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2984-0:155:2347":{"id":"b:1:2984-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:2698"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:1188":{"id":"0:86:1188","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2355":{"id":"0:88:2355","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:2988-0:155:2347":{"id":"a:1:42277:2988-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:102:2367":{"id":"0:102:2367","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[577,4],"end":[582,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:170:2346":{"id":"a:1:32414:237-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13310:30547":{"id":"1:13310:30547","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:2353":{"id":"0:117:2353","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13309:30309":{"id":"1:13309:30309","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44335:7213","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:2629":{"id":"0:99:2629","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[564,4],"end":[567,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2713:2731":{"id":"1:2713:2731","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:480":{"id":"0:168:480","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:170:2346":{"id":"a:1:3207:247-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42276:2989-0:161:2345":{"id":"a:1:42276:2989-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5948-0:170:2346":{"id":"b:5:5948-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10392:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5950:1795"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2711-0:155:2347":{"id":"b:1:2711-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:2731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13280:37516":{"id":"1:13280:37516","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:2366":{"id":"0:119:2366","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13291:37517":{"id":"1:13291:37517","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12361:1735","str::slice_mut_unchecked":"1:13292:37518","crate::ops::Index":"1:39728:2863"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13327:2682":{"id":"1:13327:2682","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12960:2842","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12355:476","str::split_whitespace":"1:13301:30310","str::rsplit":"1:13333:34312"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44043:7205","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13306:8414":{"id":"1:13306:8414","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44297:7200","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13351:34319":{"id":"1:13351:34319","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13374:37530":{"id":"1:13374:37530","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12986:7188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13383:34320":{"id":"1:13383:34320","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13389:37533":{"id":"1:13389:37533","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:155:2347":{"id":"a:1:32414:237-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:116-0:155:2347":{"id":"0:116-0:155:2347","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:2347","glob":false}}},"1:13395:37535":{"id":"1:13395:37535","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12921:137","`FromStr`":"1:12920:2837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12920:2837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12920:2837","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[522,0],"end":[536,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3036:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:796:29734":{"id":"5:796:29734","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13363:37524":{"id":"1:13363:37524","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12960:2842","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12355:476","str::match_indices":"1:13360:37523"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44211:7212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13283:2552":{"id":"1:13283:2552","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42184:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1188","0:87:2688","0:88:2355","0:91:2367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2998:1822":{"id":"1:2998:1822","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2990:839":{"id":"1:2990:839","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13333:34312":{"id":"1:13333:34312","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12960:2842","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12355:476","str::split":"1:13327:2682"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44061:7203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13303:30314":{"id":"1:13303:30314","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13301:30310"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44326:7214","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13399:33645":{"id":"1:13399:33645","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13313:2661":{"id":"1:13313:2661","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13339:37521":{"id":"1:13339:37521","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12960:2842","str::split":"1:13327:2682","prim@char":"4:12355:476","str::split_terminator":"1:13336:37520"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44111:7204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13401:33647":{"id":"1:13401:33647","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13380:2684":{"id":"1:13380:2684","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711:38233":{"id":"5:5711:38233","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13276:37515":{"id":"1:13276:37515","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13274:37514"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:33644":{"id":"5:5715:33644","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13401:33647"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13274:37514":{"id":"1:13274:37514","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:2345":{"id":"0:161:2345","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[513,0],"end":[519,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:3207:247-0:161:2345","a:1:32473:2970-0:161:2345","a:1:42276:2989-0:161:2345","a:1:3242:7058-0:161:2345","a:1:32414:237-0:161:2345","a:1:42277:2988-0:161:2345","b:1:2711-0:161:2345","b:1:3823-0:161:2345","b:1:2988-0:161:2345","b:1:2999-0:161:2345","b:1:2984-0:161:2345","b:1:2994-0:161:2345","b:1:2714-0:161:2345","b:5:793-0:161:2345","0:169","0:92","0:167"]}}},"a:1:42277:2988-0:161:2345":{"id":"a:1:42277:2988-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2984-0:170:2346":{"id":"b:1:2984-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:2698"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:155:2347":{"id":"b:1:2999-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2368":{"id":"0:0:2368","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:2343","0:114-0:161:2345","0:115-0:170:2346","0:116-0:155:2347","0:117:2353","0:118:2358","0:119:2366"],"is_stripped":false}}},"b:1:2999-0:170:2346":{"id":"b:1:2999-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:161:2345":{"id":"b:1:2999-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13336:37520":{"id":"1:13336:37520","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12960:2842","str::split":"1:13327:2682","prim@char":"4:12355:476","`DoubleEndedIterator`":"1:8329:130","str::rsplit_terminator":"1:13339:37521"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44093:7206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13293:34304":{"id":"1:13293:34304","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13295:34308","str::split_at_mut":"1:13294:34305"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5696:38230":{"id":"5:5696:38230","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2832","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2832","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115-0:170:2346":{"id":"0:115-0:170:2346","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:2346","glob":false}}},"1:13300:2536":{"id":"1:13300:2536","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44029:7199","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:2970-0:170:2346":{"id":"a:1:32473:2970-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:2970","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13372:37528":{"id":"1:13372:37528","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:2989-0:170:2346":{"id":"a:1:42276:2989-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13273:37513":{"id":"1:13273:37513","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13299:10791":{"id":"1:13299:10791","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12355:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44019:2917","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13400:33646":{"id":"1:13400:33646","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:34308":{"id":"1:13295:34308","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13296:34309"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:623":{"id":"0:24:623","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:7168:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:7058-0:155:2347":{"id":"a:1:3242:7058-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:7058","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:22:2514":{"id":"0:22:2514","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13403:35457":{"id":"1:13403:35457","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:41987"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:161:2345":{"id":"a:1:32414:237-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:107:809":{"id":"0:107:809","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[650,4],"end":[701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:155:2347":{"id":"a:1:3207:247-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:95:2359":{"id":"0:95:2359","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[540,4],"end":[543,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:161:2345":{"id":"b:1:2988-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13354:2636":{"id":"1:13354:2636","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12960:2842","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12355:476","str::rmatches":"1:13357:37522"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44247:7209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:155:2347":{"id":"b:1:2988-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13392:37534":{"id":"1:13392:37534","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:795:7971":{"id":"5:795:7971","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13289:29939":{"id":"1:13289:29939","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13386:37532":{"id":"1:13386:37532","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13319:7115":{"id":"1:13319:7115","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42184:191","prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13373:37529":{"id":"1:13373:37529","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:30310":{"id":"1:13301:30310","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13303:30314"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44317:7201","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5695":{"id":"5:5695","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5696:38230","5:5697:2690","5:5700:38231","5:5703:38232","5:5711:38233","5:5712:38234","5:5713:2582","5:5714:33643","5:5715:33644"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3036:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7:2343":{"id":"0:7:2343","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[328,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:2514","0:24:623","0:44:2558","0:46:698"],"is_stripped":false}}},"1:13398:35453":{"id":"1:13398:35453","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40083:7052","Self::is_ascii":"1:13397:2531"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40083:7052","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13408:12750":{"id":"1:13408:12750","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5014:12750"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44351:7153","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13377:37531":{"id":"1:13377:37531","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:2988-0:170:2346":{"id":"a:1:42277:2988-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13360:37523":{"id":"1:13360:37523","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12960:2842","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12355:476","str::rmatch_indices":"1:13363:37524"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44193:7211","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13402:35456":{"id":"1:13402:35456","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:41987"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13397:2531":{"id":"1:13397:2531","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:155:2347":{"id":"b:1:3823-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[715,0],"end":[715,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","provide","description","cause","type_id"],"trait":{"name":"Error","id":"1:3047:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13285:29937":{"id":"1:13285:29937","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42184:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2660":{"id":"0:98:2660","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[558,4],"end":[561,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[523,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13287:29938":{"id":"1:13287:29938","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2984-0:161:2345":{"id":"b:1:2984-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:2698"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13316:2662":{"id":"1:13316:2662","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:809":{"id":"0:112:809","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[718,4],"end":[720,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2987:2698":{"id":"1:2987:2698","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2961:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:161:2345":{"id":"b:5:793-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:7971","5:796:29734","5:797:29735"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2997:138":{"id":"1:2997:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:170:2346":{"id":"b:1:2711-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:2731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13348:34318":{"id":"1:13348:34318","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:161:2345":{"id":"0:114-0:161:2345","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:2345","glob":false}}},"5:5712:38234":{"id":"5:5712:38234","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2832","`String`":"5:7754:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2832","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13345:34316":{"id":"1:13345:34316","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12355:476","str::splitn":"1:13342:34314","self::pattern":"1:12960:2842"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44165:7207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:161:2345":{"id":"b:1:2711-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:2731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:2358":{"id":"0:118:2358","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[649,0],"end":[702,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13282:34285":{"id":"1:13282:34285","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12374:1865"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:161:2345":{"id":"b:1:3823-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13271:1006":{"id":"1:13271:1006","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12355:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5697:2690":{"id":"5:5697:2690","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3002:138":{"id":"1:3002:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32338:11058","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:797:29735":{"id":"5:797:29735","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13292:37518":{"id":"1:13292:37518","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12361:1735","crate::ops::IndexMut":"1:3485:2864","str::slice_unchecked":"1:13291:37517"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:2989-0:155:2347":{"id":"a:1:42276:2989-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13294:34305":{"id":"1:13294:34305","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13293:34304","str::split_at_mut_checked":"1:13296:34309"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2367":{"id":"0:91:2367","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3003:1820":{"id":"1:3003:1820","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:170:2346":{"id":"b:1:2988-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13272:2666":{"id":"1:13272:2666","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:155:2347":{"id":"b:1:2714-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:29733"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3207:247-0:161:2345":{"id":"a:1:3207:247-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:170:2346":{"id":"0:170:2346","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[603,0],"end":[616,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3207:247-0:170:2346","a:1:32473:2970-0:170:2346","a:1:42276:2989-0:170:2346","a:1:3242:7058-0:170:2346","a:1:32414:237-0:170:2346","a:1:42277:2988-0:170:2346","b:1:2711-0:170:2346","b:1:3823-0:170:2346","b:1:2988-0:170:2346","b:1:2999-0:170:2346","b:1:2984-0:170:2346","b:1:2994-0:170:2346","b:1:2714-0:170:2346","b:5:5948-0:170:2346","0:183","0:110","0:111","0:106","0:108"]}}},"1:13281:336":{"id":"1:13281:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13282:34285","`u8`":"4:12374:1865"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13342:34314":{"id":"1:13342:34314","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12355:476","self::pattern":"1:12960:2842","str::rsplitn":"1:13345:34316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44147:7208","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:38232":{"id":"5:5703:38232","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2688":{"id":"0:87:2688","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:839":{"id":"0:109:839","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[705,4],"end":[711,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13270":{"id":"1:13270","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13271:1006","1:13272:2666","1:13273:37513","1:13274:37514","1:13276:37515","1:13279:34100","1:13280:37516","1:13281:336","1:13282:34285","1:13283:2552","1:13285:29937","1:13287:29938","1:13289:29939","1:13291:37517","1:13292:37518","1:13293:34304","1:13294:34305","1:13295:34308","1:13296:34309","1:13298:2516","1:13299:10791","1:13300:2536","1:13301:30310","1:13303:30314","1:13306:8414","1:13308:37519","1:13309:30309","1:13310:30547","1:13313:2661","1:13316:2662","1:13319:7115","1:13323:2529","1:13327:2682","1:13330:30311","1:13333:34312","1:13336:37520","1:13339:37521","1:13342:34314","1:13345:34316","1:13348:34318","1:13351:34319","1:13354:2636","1:13357:37522","1:13360:37523","1:13363:37524","1:13366:37525","1:13368:37526","1:13370:37527","1:13372:37528","1:13373:37529","1:13374:37530","1:13377:37531","1:13380:2684","1:13383:34320","1:13386:37532","1:13389:37533","1:13392:37534","1:13395:37535","1:13397:2531","1:13398:35453","1:13399:33645","1:13400:33646","1:13401:33647","1:13402:35456","1:13403:35457","1:13404:35458","1:13405:37536","1:13408:12750","1:13409:37537"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32473:2970-0:161:2345":{"id":"a:1:32473:2970-0:161:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:2970","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13323:2529":{"id":"1:13323:2529","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42184:191","prim@char":"4:12355:476","self::pattern":"1:12960:2842"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3825:1835":{"id":"1:3825:1835","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39897:10743","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13279:34100":{"id":"1:13279:34100","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12507:7193"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[717,0],"end":[721,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10392:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32473:2970-0:155:2347":{"id":"a:1:32473:2970-0:155:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:2970","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5700:38231":{"id":"5:5700:38231","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2355":{"id":"0:100:2355","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[570,4],"end":[574,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:170:2346":{"id":"b:1:3823-0:170:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:2969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5713:2582":{"id":"5:5713:2582","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:23218:10728":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"5:7777:2824":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15557:9502":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:41036:8526":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4712:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:14043:9124":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:2966:9853":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6731:11850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:16008:9602":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:3928:2822":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:39648:12739":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:39069:12724":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:8598:10246":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:10605:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:15136:7815":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:42478:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:2785:10476":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:32338:11058":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:7605:7089":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:7869:8752":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:1569:11184":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:5708:10505":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:2964:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:30795:2861":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:6770:11862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:11566:8885":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12249:8936":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6611:11806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:44922:31541":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:46366:10861":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4890:11353":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5311:11511":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:2467:7846":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4594:8036":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:23251:10731":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:40953:8512":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:46937:10925":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13349:7818":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:1711:11274":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"11:740:7979":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:15586:9508":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"11:364:8427":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:1011:7972":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:5334:11518":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:3875:10435":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"11:328:8422":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11065:8352":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11527:8884":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:42218:7973":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"16:7058:10004":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:553:11120":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6588:9962":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:21938:18276":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"14:7:10332":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:3654:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11281:8355":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"20:0:2369":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"16:6904:9992":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:7485:2865":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:40823:8499":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:6526:11752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:8565:10242":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:44670:7192":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13537:7815":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:7986:12068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:10398:7234":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:22974:10705":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5551:11612":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:9120:7997":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:9527:2830":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:43153:10211":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:15439:9461":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:907:7975":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:0:2811":{"crate_id":17,"path":["object"],"kind":"module"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:15785:9544":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:8602:18343":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:7731:2985":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:9274:116":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"18:623:38967":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:4886:18344":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:8755:12794":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:44425:12873":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:11457:8879":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:11958:8377":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"11:2380:7972":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"20:620:2902":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"6:7463:11986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"20:424:8695":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"4:4203:18322":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:6924:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:6389:9929":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:32391:10740":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:14708:9254":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:5318:9891":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:5230:11473":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:40987:8521":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:6544:11764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"14:202:2821":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:943:2867":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:1223:8446":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:920:7977":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5107:11443":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:40921:8508":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:15148:9341":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:8070:18247":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:3444:2967":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:8793:30503":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:6961:8520":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:16714:9802":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:42122:10489":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:14346:9201":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:10913:12120":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:8483:10233":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:10296:25502":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:842:18226":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:9328:10627":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:44729:12884":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:5098:18364":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:8626:10247":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:2182:10436":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:10402:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:9732:128":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:4931:476":{"crate_id":1,"path":["core","char"],"kind":"module"},"1:39800:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"22:669:7764":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"9:390:24425":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:9146:7998":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"16:6302:9920":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:15602:9511":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5533:11601":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:40557:7159":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:481:8716":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:1696:11267":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:10167:25498":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"11:1580:10354":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:15896:9572":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11440:8553":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:3268:10102":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:10031:25494":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:39910:8687":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6269:9913":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11805:8369":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:521:29700":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:2931:18276":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8059:8001":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"5:1379:10088":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:11026:38959":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8749:7166":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:30763:2860":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:3200:7056":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"22:43:29722":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"17:3854:8386":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12583:8984":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:22379:18276":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:8616:8468":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"15:394:24537":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:15160:9345":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:14327:9196":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:8186:8017":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:32380:10739":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:0:568":{"crate_id":1,"path":["core"],"kind":"module"},"17:14312:9194":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"17:10784:8858":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"4:597:10460":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:4990:11399":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13570:25514":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:11973:34086":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"18:680:8735":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:12775:7215":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:4325:8472":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:9416:2987":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:4455:110":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"0:24:623":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"17:5305:8397":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"5:7043:2873":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11678:8366":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:38380:12721":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:4810:9875":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:7168:10029":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:1864:8461":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:14375:9206":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:16264:9688":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:22734:18009":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:15665:9516":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:6449:11719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:8509:8037":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:3299:36500":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:44335:7213":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:5165:11448":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:23043:30174":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:485:11078":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:11290:7215":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:899:2870":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:11668:8013":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:46299:10858":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13306:9033":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:2968:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:12382:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:8539:7200":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"16:8503:10234":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:546:7859":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:16728:9805":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:11831:7787":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12044:8916":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:14832:9290":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13398:7821":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12280:8379":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:44043:7205":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:903:8747":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"4:2500:18271":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"5:6535:18414":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:7959:10176":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5622:11646":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:643:8718":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:1563:11182":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"21:67:2590":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"4:949:8439":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:7574:7992":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:44838:12213":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:7316:11928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:13635:9052":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:3456:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4829:11312":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:80:8335":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"20:8:2911":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"1:3036:124":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"22:449:39057":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"6:6623:11813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:6037:8000":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:6521:11751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:8174:8466":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:8859:8479":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:41181:8532":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:1514:11151":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:41006:8523":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:155:7762":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:12981:7189":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:4844:9876":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:42895:7235":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"20:470:2905":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"4:2474:18261":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:7462:10075":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:40768:12769":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:1684:11263":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:7192:25441":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:32415:2969":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"16:8165:7929":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11998:8908":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:378:10455":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:4337:12117":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:7350:11947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"4:8169:8629":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"16:5348:9892":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:5088:11442":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:8014:12071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12851:9005":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:1657:11250":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:16145:9654":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:15121:9338":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:6796:10521":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:44326:7214":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5462:11581":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13266:25511":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:3258:12712":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:3034:10477":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:42404:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:8291:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:3344:10479":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:40852:8037":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:10392:129":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:8008:12069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8382:2555":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:10938:8017":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:33909:12715":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:36449:10108":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12826:8997":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:41388:8538":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:8105:10182":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:2797:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:7980:9861":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11818:8902":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:1080:10088":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12347:8946":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"21:228:2592":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"5:6668:2822":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4902:11358":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12798:25638":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10630:7801":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:11204:10619":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4984:11397":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"13:229:7938":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:2594:12110":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:46089:10839":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12762:8994":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:14902:9299":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:102:11054":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:42276:2989":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"11:1105:10351":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:44604:10795":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:5449:9895":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:44868:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12028:8911":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:16132:9648":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:7719:10451":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:40702:7151":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:14886:9297":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12319:8944":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3338:10103":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:2880:9849":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:1625:2867":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:2546:2737":{"crate_id":4,"path":["std","io"],"kind":"module"},"4:6799:18404":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6144:25434":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:21739:30355":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:2640:9838":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"20:705:2909":{"crate_id":20,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"1:42702:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:8028:7923":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13193:9025":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:10729:7804":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:1674:38937":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:10218:10767":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:8765:10776":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:2860:9848":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:21842:8050":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:14084:9136":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:6714:37433":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:15:2778":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:8319:12098":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:4169:18321":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:10141:25497":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:44211:7212":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12992:9014":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11864:8904":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:12986:7188":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:44147:7208":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:4163:18320":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:40865:8038":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:14975:9312":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"11:873:10345":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13592:9048":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:4010:10488":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:22555:18016":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:43169:30281":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:14547:9232":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5494:11595":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:34573:10107":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12983:25640":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:6111:9909":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:12475:12836":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:3305:37203":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:11706:8367":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:43141:12212":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:958:7979":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:3253:2825":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:44446:10784":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:40758:7199":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:13070:7783":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:12661:7219":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:6437:11715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:7502:8444":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:32473:2970":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"22:966:8324":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"4:8336:8016":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:11719:8486":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"20:520:8330":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"1:10862:30635":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:1625:7979":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:0:1011":{"crate_id":6,"path":["libc"],"kind":"module"},"17:16822:9104":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"4:12378:1841":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:6572:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11432:25523":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:15286:9347":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:30816:7242":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:10353:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:44959:10814":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:22999:10706":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:39840:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:3441:9863":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5562:11618":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:43114:12204":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:12354:1184":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:43950:8565":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:3731:12738":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:581:8058":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6984:7913":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:16656:9787":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"4:677:10461":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:3373:8443":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:42888:7234":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10516:25509":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:1675:11257":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:10549:7780":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:1239:37347":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:34400:12719":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:4694:18345":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:3126:24576":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"11:2121:10088":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:2684:9840":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:5349:11520":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"4:9103:8480":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13361:9035":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13290:8823":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:7216:37457":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:816:12510":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:3101:37214":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6758:11860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:8298:10196":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:9424:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:13196:120":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:8267:10192":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:15024:9325":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:16786:9818":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:16297:9695":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:21830:17931":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:44901:10808":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"11:2551:38936":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:1727:11279":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:45978:10832":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:5428:11556":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:4807:18321":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:1614:7972":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:46510:10883":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:34054:12717":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"22:1034:29726":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"6:8290:12091":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:7602:2870":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:8233:7993":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:6502:24545":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:3531:8541":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:819:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:13055:7787":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:2803:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:8585:10243":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:3280:12727":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:938:18227":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:15973:9594":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:16026:9605":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:44461:10789":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12008:8804":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:4927:18335":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:12367:761":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:11402:7203":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:5379:9893":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:3242:7058":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:6659:11827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:5265:11489":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:15573:9503":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8437:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:12335:8381":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:6867:10524":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:46738:10891":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:7534:10447":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:46170:10851":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:4333:8473":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"13:0:2802":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:12787:8995":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:1023:10347":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:22381:17930":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:979:10343":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2440:2822":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"4:8700:18374":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"14:165:24510":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:5946:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:15989:9597":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:42515:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:10013:809":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"17:12176:8926":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"4:9384:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:6884:37433":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11878:7783":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:15701:9521":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:9710:8466":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"11:809:2867":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:5482:11592":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:589:8722":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:5709:25433":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:8636:25448":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:2077:1368":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:47157:10935":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11720:8891":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:6564:11780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:6462:11720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:5277:33043":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:46345:10860":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"18:0:2812":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:14460:9218":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:40816:10757":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"18:563:7771":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:9193:10620":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13933:9104":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11691:8889":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:6534:11757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:6461:10506":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:40997:8043":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:14220:9158":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4970:11389":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:4478:12751":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:6716:11848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:6876:11890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:4:1266":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:11198:7972":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12570:8983":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:15731:9532":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13181:8400":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:523:11103":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:46688:10889":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"16:4929:9879":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"4:4105:18317":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5139:11446":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:4766:9874":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"11:881:10346":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:6411:11700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5648:11658":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:8228:7994":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"4:4819:11969":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:6132:7990":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:538:11112":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:3587:9864":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"21:312:2956":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"4:12338:33787":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12952:9010":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:6638:11815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:6772:8516":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4976:11392":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:306:2832":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12687:8387":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:42298:7229":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:2320:10471":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:2227:8371":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:10039:8044":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:291:37433":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:40843:8500":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:21720:30341":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:42626:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:44360:7152":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"13:110:38940":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:1979:7364":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"6:5249:11481":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:42226:2870":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:44013:2551":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:5289:10497":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:15887:9569":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:4925:18334":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:41395:8539":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:7168:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:5357:986":{"crate_id":1,"path":["core","iter"],"kind":"module"},"11:0:2806":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:43182:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:43789:8554":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:42363:7973":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:1866:8462":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:8608:10598":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:763:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:40531:7160":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:13601:10691":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:23240:10730":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"18:651:8718":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12736:8993":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:6516:18413":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:4881:11348":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:12920:2837":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:9280:10622":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"18:113:8341":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:7984:10459":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:3940:2867":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:13471:8753":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:4642:7244":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:4821:11971":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:5976:12117":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:12327:18215":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:708:7978":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11523:8573":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:10442:25507":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:9361:8023":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:9715:34067":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"4:4225:18326":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13119:9023":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:14692:9249":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:2607:12677":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"16:6064:9857":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:6790:11870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15050:9327":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:44193:7211":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:7836:2867":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:46028:10835":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12108:8921":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13385:7819":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:2766:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:38435:12722":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:2796:9845":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:41404:8540":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:33369:12711":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:5258:10497":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:2490:18266":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:10218:25499":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"20:319:18276":{"crate_id":20,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"4:11092:34096":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:46622:10887":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:9460:10629":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:3716:7972":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11358:25521":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"20:496:2907":{"crate_id":20,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"1:10653:8047":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:5992:7999":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:10918:10546":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:5113:9884":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:6972:12135":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:6890:7911":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:12082:7794":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:15418:9453":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:5809:2873":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:735:10429":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:4694:9873":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:11041:18276":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2591:677":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:16507:9085":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:3503:8384":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:16555:9768":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:41195:8533":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:44111:7204":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:3088:7369":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:13427:9036":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"4:12362:1825":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"16:7282:10055":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11777:8897":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:40501:10744":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:39782:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:754:8746":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:44247:7209":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13554:9045":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:44909:10810":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:41022:8525":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:12306:10654":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:11401:8877":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:4851:7246":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"6:5025:11418":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:15852:9558":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:5224:11470":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"0:44:2558":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"4:628:18208":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:4672:18344":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:43889:8561":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:4172:37433":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:1636:8441":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:7938:10173":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:10487:25508":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"4:11413:10411":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"4:8843:8476":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:11503:8881":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"6:5405:11546":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:15036:9326":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:32945:10101":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:12699:8992":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:9411:10526":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:8247:12795":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"20:681:2907":{"crate_id":20,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"20:511:2908":{"crate_id":20,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"10:36:11061":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:6480:11730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:13041:9021":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:10344:8491":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:5004:18331":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:7883:7869":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:8284:12090":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:13034:12867":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:44629:10796":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:33775:12714":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:578:11133":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:7469:11987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5295:11505":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:4406:10490":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:1094:10347":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12840:9001":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:7368:11956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5570:11620":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:8320:25447":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:1614:7978":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4921:11371":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:991:10346":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:1103:10349":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:2961:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:6696:9969":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:7924:34078":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:46007:10834":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:9545:8464":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:5387:11535":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5357:11521":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:6100:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:15931:9583":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:16775:9816":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5019:11415":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:2559:11059":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:16341:9710":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:6374:34077":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:16798:9821":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:8267:12085":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:30827:30172":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:1667:11256":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11971:8907":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:40912:8506":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:8330:12099":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:5007:11409":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"11:2301:10088":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:5271:11492":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4904:7247":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:1489:11141":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:4184:9869":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:44618:12874":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:16494:9071":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:5044:11428":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:14845:9292":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:12491:10686":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:6953:9996":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"20:527:8332":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"12:0:2807":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11309:8356":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1584:11196":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"0:118:2358":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"1:41410:8541":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13970:9110":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:16218:9674":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:47285:10943":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6652:11826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:44943:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6731:7872":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:472:8749":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:8519:8531":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"18:698:7774":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:41976:12803":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5205:11462":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:3306:7972":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6084:9900":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:2171:10435":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:685:18210":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:10793:8861":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:12920:8393":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:15475:9490":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:1833:12629":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:4964:11387":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:23174:10724":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"20:599:38975":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"4:985:10345":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:1005:10088":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:39760:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:3415:125":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:7337:10060":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:6358:10701":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:3660:12732":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:11952:7806":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"15:0:2809":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:1898:2867":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:2047:7270":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:11674:8483":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:735:29698":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:5638:10504":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:43396:8192":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:11813:10486":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:12041:8569":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"5:7649:2833":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:3488:18302":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:47194:10938":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:3097:12107":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13095:9022":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10115:25496":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:16036:9610":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:10755:8951":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:47209:10939":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7554:25443":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:506:8750":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:16613:9099":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:11223:8049":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"4:4817:11967":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"4:11708:10532":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7223:10042":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:2406:8374":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13205:8401":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"4:10595:8480":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:12358:1324":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:14520:9227":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:8209:7930":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"22:948:29725":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"17:16362:9713":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11421:8357":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:7675:7988":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:12379:975":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:8341:18307":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"11:854:10343":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7386:7918":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"4:9205:18409":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:14859:9293":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"11:1564:24504":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:2237:129":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:11481:7208":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:6631:11814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:5447:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:42371:2870":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"11:299:8419":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11448:8878":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:16668:9789":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:13610:9051":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:2400:7973":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"4:8462:8019":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:8545:8468":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:7660:18225":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11367:8552":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12234:8933":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:2590:9836":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:23092:10719":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:6509:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:8590:10489":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:12122:8922":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:47069:10929":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11016:8351":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:10387:120":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"5:4506:37449":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12216:8931":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:14933:9304":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:2327:18258":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:42380:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12409:25614":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:6573:9959":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:44317:7201":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:7711:7168":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10823:7805":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:6853:8009":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:13028:8395":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"4:3302:37202":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:16399:9720":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11319:38962":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"14:160:10332":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:12371:906":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"16:7542:10087":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5727:7779":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11475:25524":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"16:3889:8765":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:6153:18461":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:10534:7779":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:8241:10549":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:10984:33841":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"20:667:2906":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"1:42552:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:6708:11845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"4:8788:10613":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:16187:9667":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:497:11083":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:3612:10484":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:16701:9796":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:12869:9038":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:9154:7972":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:45908:10824":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:43207:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:4869:11345":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:39860:12730":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13854:7827":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:6016:2822":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:6723:11849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:5255:9889":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:39820:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:559:11123":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:21737:30351":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:45961:10831":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:40883:8501":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10928:8349":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:8343:12103":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:39684:12736":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:7765:10125":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6028:7876":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:4217:7973":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:8597:12115":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:9109:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"11:685:7973":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:15953:9588":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:44843:151":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:11949:10533":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:8551:8470":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:15997:9598":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5395:11540":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:7586:12059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:2217:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"0:46:698":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"16:5172:9886":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:6507:11750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:4142:2822":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7372:7917":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:3720:8385":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:46493:10882":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"0:117:2353":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"1:12721:7218":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:41437:8546":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:11495:7207":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:6682:10520":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:42589:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13169:8399":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:11291:38961":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:23137:18276":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:46153:10850":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:8471:8020":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:8300:2968":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:40893:134":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:16241:9687":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:2920:9851":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"11:2533:11055":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:40570:7161":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:4582:37449":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:9848:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:43941:8564":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:3695:9865":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:10712:10480":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"4:1486:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:47247:10941":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:43915:8499":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:7544:37295":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:42162:10679":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:40694:7158":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"0:0:2368":{"crate_id":0,"path":["idna"],"kind":"module"},"1:43960:8566":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:47128:10932":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:23116:12523":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:16323:9704":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:8243:12796":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:7454:11983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13921:9103":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:5844:10506":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:3438:10482":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:2472:12665":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:14872:9294":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:3207:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:7548:12040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:491:8717":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:7341:11946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:11098:34095":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:16642:9783":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:15963:9591":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:1643:11239":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:10486:114":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:5131:8396":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:46060:10837":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:11258:12122":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:3047:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"22:879:29724":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"18:613:38966":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:44933:10813":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:2660:9839":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"14:220:10339":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:14335:9198":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:10778:8857":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:15540:9500":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:6843:7910":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:42874:7233":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:4795:7245":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:11276:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"4:384:10457":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:46472:10881":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13945:9107":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:317:8747":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:5622:10503":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:42307:10682":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:14640:9244":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:22951:8053":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:14612:9240":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:39728:2863":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:42277:2988":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:8261:12084":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:14533:8953":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:16520:9738":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:10400:7235":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:15864:9564":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:8031:12080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13958:9109":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:1395:10349":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:2530:9833":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"9:0:2804":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:2705:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:8667:10493":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"11:123:7939":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:1564:2870":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:3639:12731":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:44540:10794":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:6738:38948":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:13932:10702":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:7494:2870":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:8137:7926":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"11:2366:10358":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:13758:10696":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:46443:10880":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:46132:10849":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:21948:17929":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:41419:8543":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"20:197:2916":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"16:6159:7877":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:14507:9224":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:23105:10720":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:47111:10931":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:43388:8190":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:11035:7998":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:3110:9862":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:7305:10056":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:15106:9334":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11075:38958":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:16832:9109":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:14416:9210":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:16019:9603":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:3397:10481":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:5742:7780":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:3440:10483":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:7691:10448":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:45876:10820":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12066:7809":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:9703:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:2338:10662":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:42881:7232":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:8870:10618":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:43636:8549":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:12698:7221":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:12361:1735":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:46892:10924":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:4152:9868":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"11:1880:7972":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:586:11137":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:43628:10780":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"11:2228:7944":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"11:396:8429":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:8096:10181":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:12737:7220":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:11680:10529":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:5649:9896":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:16684:9794":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:3249:7060":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"22:728:39057":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"16:7578:10627":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:13733:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11985:8378":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:13618:10694":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:44850:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:46214:10853":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:4303:8471":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:47262:10942":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"11:1049:10349":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:2415:24546":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13838:7823":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:962:10340":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:3905:10486":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:2078:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10368:25504":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:2141:12689":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:23284:10734":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:45893:10823":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:7332:11940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:532:11109":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:46316:10859":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:33842:12713":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13719:9070":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"4:889:7973":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:12381:1430":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:14560:9233":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:8489:18275":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:10889:10645":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:7471:10078":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11606:7783":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:22226:17934":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:12369:918":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:5641:11655":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:1604:8439":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:457:2904":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"4:6199:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:5224:9888":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:6765:11861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:16812:9822":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"4:4923:18332":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:7067:2874":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:44676:8049":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:43190:7242":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:7558:2870":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:46398:10863":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:14055:9125":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:5335:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"10:0:2805":{"crate_id":10,"path":["adler"],"kind":"module"},"16:7401:38946":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:6419:11702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:322:8748":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:46584:10885":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:16179:9666":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:4563:8035":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:23273:10733":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:15090:9332":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:43404:8193":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6680:9966":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"4:4141:18318":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:3342:10478":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:1259:8447":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:44061:7203":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:47168:10936":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:14114:9148":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6700:11842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"4:10948:140":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"4:8556:18314":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:14024:2831":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:12380:1927":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:23207:10727":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"11:830:8439":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6599:11801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15496:9495":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:1642:8442":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:14997:9323":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:32414:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:43989:2835":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5629:11649":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:3313:8441":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:46555:10884":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"20:534:8333":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"17:14072:9133":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6205:25435":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:11080:34093":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:23196:10726":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"11:2148:10349":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:7710:7167":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:39890:10742":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:21722:30346":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:7152:18412":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:583:8751":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:14672:9248":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:898:10430":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:46252:10855":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:11191:7997":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:7577:12056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:3094:7971":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:430:8431":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4431:10663":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:6823:11879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13692:9062":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"9:355:24439":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:765:29699":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:3860:8018":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:12322:8027":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:7508:10082":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:2761:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:5545:18446":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:954:7978":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:15689:9518":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"22:534:8318":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"17:12293:8939":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:46103:10840":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:7539:12037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:12368:740":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"5:7852:2868":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5658:11659":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:26147:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:21950:8050":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:4443:10664":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:2566:2833":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:14299:9192":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:7827:12786":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:4716:10665":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"16:6256:7887":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7716:38950":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:5603:11632":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:43435:8194":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"11:2137:10347":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:22985:30171":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:2275:10437":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:2486:9831":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:22221:18276":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:41960:10676":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:7919:10165":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11232:25524":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:1533:7972":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:3212:2859":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:47040:10928":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:1410:10347":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:5588:10498":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:22920:8052":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11630:8886":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:10564:7799":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:15010:9324":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:4772:18362":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:15431:9460":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5117:11444":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:14652:9245":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:6967:12136":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:43413:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6852:9986":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4896:11355":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:5198:9887":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:545:11115":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:15981:9595":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7838:25444":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"22:0:2931":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"17:12749:8391":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:8233:25446":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:0:2810":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:15315:9367":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6813:11876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:43425:10776":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:14750:9275":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:3834:9866":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:4981:10496":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:1595:7977":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7259:10054":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4929:11373":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:7308:11923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:40731:12783":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2748:9843":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:9287:33768":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:12375:1847":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:13818:9099":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:6718:8008":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:4377:7972":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:10404:7236":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:8022:8951":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:9308:10626":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"4:7397:34082":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:12373:893":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:4355:12117":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:12931:7815":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:14393:9207":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:3283:12728":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:3649:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5179:11449":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:15919:9580":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:15753:9538":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"7:0:1917":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:4883:18366":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:22867:10704":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:968:18226":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:43970:8567":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:2378:25569":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:23007:10707":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:2488:18265":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"5:4569:12117":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"16:7212:10041":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:13322:25512":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:1521:11154":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:40599:7153":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:11163:7783":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:14438:9217":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:43840:8555":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:1621:2822":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:1794:37433":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:16595:9089":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"4:5089:18363":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:12392:8947":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:7361:11952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:2958:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:40720:10748":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"11:698:2870":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:13641:8042":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"4:532:18193":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:32405:8496":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:2150:10659":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:2550:9834":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"11:351:8424":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"21:290:39032":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"4:2746:10473":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:2081:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13082:8354":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"4:8480:10485":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:8645:11956":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11733:25543":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:2377:7984":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:40786:10750":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:10663:7802":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12260:25613":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"4:10709:10478":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"4:1849:701":{"crate_id":4,"path":["std","env"],"kind":"module"},"17:14599:9238":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:15621:7837":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6837:7908":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:15760:9539":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:772:7975":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:6183:10506":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:11241:10528":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:8249:12082":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:15655:9515":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:3660:33822":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:15351:9398":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:39732:8497":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12149:8924":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:3561:12117":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"18:515:8715":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:5689:9897":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:15829:9555":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:10830:31444":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:12550:8982":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:3395:10480":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:3069:138":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:12365:742":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"17:12204:8929":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:23747:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10843:7781":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:8179:10183":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:5381:11532":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:46284:10857":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13909:9100":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:491:11080":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:21824:17928":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:7983:18276":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:12370:900":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:42776:8189":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:10335:7165":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:6408:8402":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:5488:11593":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:4873:9877":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:7566:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7521:10085":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:5515:129":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:3843:18315":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:1500:11146":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"14:0:2808":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:5779:18392":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:11657:10776":{"crate_id":4,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"17:15549:9501":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:46982:10926":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:11222:7973":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:16283:9693":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:40903:8503":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:44567:10690":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:21751:30344":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:21769:18276":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"11:1085:38935":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:7717:33926":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"0:22:2514":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"5:7731:10453":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:7704:12783":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:40944:8511":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"20:655:2905":{"crate_id":20,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"6:5217:11469":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"14:31:10332":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12886:9007":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5196:11457":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:479:11075":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5325:11515":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:13889:116":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:5375:11531":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"21:259:39031":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"17:11515:8882":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:23295:10735":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"20:449:138":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"17:16761:9812":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:3397:12735":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:38490:12723":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:15844:9557":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12776:8392":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:16198:9671":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"11:1064:24503":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:8546:10239":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:12366:745":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:14140:9153":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:11956:10533":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:11930:8026":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:46074:10838":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6239:7882":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:4487:10491":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:3141:8760":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13798:9089":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:4354:8474":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:7414:11975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:11725:8487":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:8353:12105":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:994:18228":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:5549:18447":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:785:7977":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4816:11302":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:8296:12092":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4997:11402":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:1690:11266":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:2008:7365":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:10246:25500":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:16739:9810":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:6658:7888":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:5309:7990":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:10967:10485":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:39897:10743":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:12625:8985":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13222:25510":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12711:8389":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:32503:7061":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"5:7077:2875":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"4:5602:10502":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13491:9040":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:6098:9904":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:4875:11346":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:2932:12493":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:22473:18014":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:11124:38960":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:46815:10923":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:46185:10852":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:6917:11916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:5958:10510":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:1902:8463":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5670:11666":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"9:236:10776":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:14807:9287":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:43124:7242":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:15777:9542":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5051:11430":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:46267:10856":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:8280:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11553:8361":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:2349:10349":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:42266:2986":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5282:11500":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11173:38963":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:14917:9303":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:3908:10487":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13983:9111":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:32398:7245":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"11:1888:2822":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:1647:8443":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:301:2955":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"17:14001:9119":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:44093:7206":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:10179:7253":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:2040:676":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:10394:7232":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:11247:7205":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:13757:9085":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:7789:38949":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:43858:8558":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:31174:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:3308:9828":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:5301:11508":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:11694:10530":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:11003:10505":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:40974:8519":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:39745:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6188:9910":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:22658:12676":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"4:3679:18295":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"8:0:2803":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:33157:10098":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:9320:8021":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"22:386:7762":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"4:4217:18324":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:11790:8492":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:6406:8006":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:12371:7811":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:9220:18408":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:11051:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:8331:10551":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:42004:8188":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:10412:12380":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:15812:9548":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:6882:11891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:31201:8058":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:10613:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:42315:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:10597:7800":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9853:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:33708:12716":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:41171:8531":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:9341:33767":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:15064:9330":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:4120:9867":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:46605:10886":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:22729:18011":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:14963:9310":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10418:25506":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:11329:8551":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:3339:8442":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:44002:7198":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:44970:10360":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"16:5085:9883":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13890:7836":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:6123:9856":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:908:8748":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:2952:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:10034:30499":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:7350:7873":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:10715:10482":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:12537:8980":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"20:482:2906":{"crate_id":20,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"6:1551:11174":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:15410:9450":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"21:145:2591":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"17:12056:7808":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:46643:10888":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"4:5776:11877":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:12376:1853":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:42210:7972":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"20:696:2908":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"17:13547:7822":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:44492:10793":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:2318:139":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"16:7159:10028":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"21:276:2954":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"1:10396:7233":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:43228:7243":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"16:7990:10178":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:6822:25438":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"11:1884:2870":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"9:480:24423":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:11306:12123":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11465:8360":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"4:12353:420":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"5:40:2866":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:10908:12118":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:2357:37246":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:14405:9209":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:11539:7787":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:13515:25513":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:40653:7156":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:40715:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"11:2466:2867":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:10938:38956":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:2545:8418":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:7030:10003":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:32474:7062":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:11926:8906":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:7879:10534":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"9:176:7961":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:40687:7157":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:14269:9183":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:44265:7210":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:44639:10800":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:6680:11833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:933:2822":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:5837:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:5501:37433":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:8208:140":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:3651:7165":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"6:564:11125":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:12524:8383":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:8151:7928":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:667:8752":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:10995:10545":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:12723:8390":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:5654:114":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:9397:12117":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:3679:30456":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:32416:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:7776:8535":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:5255:11483":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5366:11525":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:9401:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:538:7769":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:23085:12137":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:2727:113":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"16:2840:9847":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:6473:11728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"9:445:24424":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5471:11587":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:8717:10610":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:661:7366":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:11350:10651":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"4:12359:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"18:608:8729":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:5069:11441":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12191:8928":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:11509:8572":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:4111:18316":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:44846:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7044:7914":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6640:9965":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:21683:8058":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:573:8718":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:9389:10517":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:43443:8195":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:11874:10488":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:45861:10819":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11592:8845":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:517:11100":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:1586:7975":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:635:8734":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:13969:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:12141:34076":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:12372:912":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:5477:11590":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:11902:8905":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:45925:10825":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:45993:10833":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:15876:9565":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6749:7903":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:6748:11853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:4937:11375":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:8302:12093":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"4:505:34080":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:6781:9980":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"0:119:2366":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"9:53:7946":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:5965:10514":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:22644:18018":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"21:0:2370":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"17:13451:9038":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:9269:8002":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:42355:7972":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:4213:18323":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:23229:10729":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"4:1925:8464":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"6:5036:11423":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:14127:9152":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:11018:33772":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:2640:10472":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:8014:7922":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"15:306:8413":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:3450:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"11:434:8432":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:12355:476":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"6:1703:11270":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12135:8923":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:3694:12737":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6337:9923":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:22579:18276":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"16:6368:7855":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12095:8920":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:2015:792":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"16:6042:9855":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13662:9058":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:11114:8353":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:5084:7147":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:7524:8445":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:40607:7154":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"9:500:10414":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:4785:12134":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"11:1914:8442":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13871:7829":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:4061:2870":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:22814:10703":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:4873:7064":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"18:689:8737":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:5112:18365":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:9162:8482":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:7594:2870":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:573:18198":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"7:32:24410":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:6462:25437":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:14947:9306":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13145:8398":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:16385:9717":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14586:9236":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"20:201:2588":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"4:1112:10353":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5450:11572":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:6381:11675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:41429:8544":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:2435:24573":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:15939:9586":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:1625:11227":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:531:8719":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:3669:18274":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:15905:9573":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:96:8338":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:3202:118":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:680:10463":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4947:11381":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:14284:9187":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:659:8343":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:2825:12113":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:2506:9832":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7416:10064":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:16171:9663":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:13912:10701":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:1597:11203":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:22260:30353":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4842:11322":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:2450:9829":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6691:11836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:6625:9963":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13006:9017":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:30537:12494":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:15679:9517":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:23023:30163":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:43878:8560":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6998:9997":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:2304:7981":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:15946:9587":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:7448:11981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5412:1253":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:8199:12081":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:718:8740":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:2539:11056":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"10:44:7945":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:40874:8040":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:21771:17932":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:8043:38945":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:4307:12117":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:23262:10732":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:6740:11852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"4:11503:34088":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:14099:9142":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:5256:438":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:5682:11671":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:5315:10669":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:46235:10854":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:6149:8507":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:44718:10805":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:2820:9846":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:9416:10527":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:42663:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6876:9989":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:12507:7193":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:8641:10601":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"18:507:8718":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:6902:11905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:5417:9894":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:1893:2867":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:47090:10930":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:4536:12117":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:2950:9852":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:42144:10677":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:11215:33844":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:40796:10756":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"6:1507:11149":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:1539:11165":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:13706:29834":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:2143:12690":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:6443:11718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6794:9981":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"6:4805:11294":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:3428:12725":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:44029:7199":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:6263:8041":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:7999:8019":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:6258:12117":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:22605:31384":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"4:9315:8005":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:6493:11739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1530:11159":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:8066:25445":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13157:9024":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:44652:7191":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:16632:9782":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"20:611:8708":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"1:42235:2985":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"16:8612:7932":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:47232:10940":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12941:9009":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:3318:37341":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:14821:9289":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:15077:9331":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:7604:12062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:7999:10536":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:3576:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:2323:8859":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:44860:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"15:288:8408":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:5757:9898":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:12360:1701":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"5:1424:10353":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:9256:10621":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:4404:9872":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:6713:9970":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:4241:9870":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:2724:31440":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:2708:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"21:198:2957":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"4:12356:1887":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"5:7241:37461":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7358:7916":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:9170:2870":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:4561:10492":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:3048:24575":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:7767:2823":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:7563:12047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:14773:9284":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:2265:18193":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:5144:9885":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:22593:18017":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:6808:7906":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:12079:7196":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:6421:7861":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:10274:25501":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:1907:8441":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:44342:7154":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:14031:9123":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"9:422:24426":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:8308:12094":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:8223:10184":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:8064:18214":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14152:9156":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:12966:2830":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5586:11625":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11222:8354":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:670:8348":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:21822:18276":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:13014:9019":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"4:8853:7972":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:4721:10666":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6666:11828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:44019:2917":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"0:7:2343":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"1:22:824":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:8196:10547":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:47324:10944":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:465:8436":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12962:25639":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14358:9203":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:10334:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:10977:38957":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:5060:9882":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:2605:12676":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:1339:8365":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"14:214:10337":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:40580:7162":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:47148:10934":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:221:10428":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12018:8910":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:45846:10816":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:42739:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:1900:8440":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"23:0:2932":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"6:5151:11447":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"20:432:2912":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"1:23058:30190":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:473:11072":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:1618:2870":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:2620:9837":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:8050:18213":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:7754:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:10696:7803":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:44475:10792":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:3729:7973":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:798:2822":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:12377:1859":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:10764:12850":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:12374:1865":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:42441:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5635:11652":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:8273:12086":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:40542:30176":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:15641:9512":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:16332:9708":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:3666:12734":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12605:7783":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:10976:33846":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:9406:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:3465:2867":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:14483:9223":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:12975:7190":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8746:150":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5441:11566":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:2157:8018":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:437:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:4341:18342":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:22248:8051":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:16311:9702":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:15714:9527":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:10097:25495":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"4:7325:34072":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:44307:7202":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6777:11863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:11617:8354":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:42088:30185":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:1630:8440":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:8179:10546":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2990:9854":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:6672:11831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:1140:10352":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:15531:9496":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"3:0:2801":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"21:266:2942":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"17:12816:8753":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"11:1601:10355":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:42201:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"17:14796:9285":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:14738:9273":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:12008:8568":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"20:306:2887":{"crate_id":20,"path":["unicode_bidi","TextSource"],"kind":"trait"},"1:45940:10826":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:21705:30348":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:5541:11606":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:7514:2822":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12163:8925":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:10803:7199":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5186:11450":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:6072:12117":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"4:9442:10528":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"5:1548:7973":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:40746:10749":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:47137:10933":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:3433:12726":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:44165:7207":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:3352:37340":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:42182:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:9235:18410":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:4983:9881":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:5282:9890":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:5851:10507":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:46383:10862":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:706:7190":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:7495:10079":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"14:187:24517":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:40614:7155":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:7949:9860":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:5168:18370":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"16:4956:9880":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:2724:9842":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:0:510":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"11:2323:10347":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"4:8803:18387":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:46045:10836":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:40935:8042":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:7518:12023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5341:11519":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"4:0:1727":{"crate_id":4,"path":["std"],"kind":"module"},"4:3067:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"17:16159:9660":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12860:9006":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:6866:25439":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:14627:9243":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:3095:37512":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:12960:2842":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:7424:25442":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:9133:10619":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:44297:7200":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"20:632:2903":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"6:5127:11445":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"19:0:1301":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6970:7912":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"9:328:11062":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:46717:10890":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"5:3105:37215":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:8249:10550":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:1220:8364":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:4902:9878":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:5150:12117":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:7907:10164":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:40495:7153":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:8711:10254":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:6440:25436":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7807:38953":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"14:40:9086":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:570:11128":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12359:8382":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:21693:30348":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:4792:11285":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:2772:9844":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:3453:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:16750:9811":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:44982:10815":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:4957:11384":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:4842:12760":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:8000:7921":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:42110:10770":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:14019:9120":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:41922:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:12897:9008":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:1964:12117":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:2570:9835":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"21:319:8691":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"17:13733:9071":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"22:1122:8687":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"1:43928:8563":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:41381:8537":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:12906:7814":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"18:598:38968":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7969:10177":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:11386:25522":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:5057:11432":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:7743:10454":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:41046:8528":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:10406:7237":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:6282:34091":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:40591:7152":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:23185:10725":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"4:4155:18319":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:3821:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:30801:7272":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:7016:8404":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:44694:131":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:8004:10538":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5520:11600":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:22517:18015":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"4:8532:7205":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"11:835:10340":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:3288:12729":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:44351:7153":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:876:7972":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12035:7944":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6914:9993":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12648:8986":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:4497:12752":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:3809:37433":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:726:7775":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:2437:8376":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:22701:18010":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:47011:10927":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:10955:10635":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:38325:12720":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:40083:7052":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:32384:10145":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:11653:8887":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11851:8370":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10332:25503":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"4:11853:10487":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"20:642:2904":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"16:6173:7880":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:3485:2864":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:22687:18276":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:11579:8362":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:8528:10237":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:15836:9556":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4914:11367":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:8058:10180":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7075:25440":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"7:79:24417":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:5319:11514":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:10648:12830":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:2955:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:7354:12432":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:16209:9672":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:14573:9235":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:8222:128":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:34227:12718":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:33641:2826":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:1132:37433":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:16377:9714":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12225:8932":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"4:1927:8465":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:13781:9086":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:2704:9841":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:7487:11997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6942:9995":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:7391:11974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:8255:12083":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:22935:8030":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:3594:10594":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:22607:12676":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:40965:8518":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:15769:9540":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"15:327:7934":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:10394:25505":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:6795:2870":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:5593:11627":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:15739:9535":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:8085:10545":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:8622:10599":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"20:542:2589":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"17:12673:8988":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:6678:8539":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:41944:10674":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:8257:8018":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"22:470:8312":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:32505:115":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:12976:9012":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:1632:11231":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:47183:10937":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:1645:8449":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:11942:33912":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:1158:10353":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:4267:9871":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:896:9825":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:8669:10145":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"4:10346:10636":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:43849:8556":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:7472:8484":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:8526:7199":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"6:5241:11477":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5420:11551":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:5676:11668":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:16084:9647":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:10503:34068":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:74:1853":{"crate_id":1,"path":["core","u32"],"kind":"module"},"1:43868:8559":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8329:130":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:1920:8443":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:2900:9850":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:3987:8773":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"6:1494:11143":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:5288:11503":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:3347:8440":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:3014:24574":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"22:636:8319":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"4:10638:34097":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:5507:11599":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"4:10929:10630":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"4:2710:10474":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:2420:2870":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:7431:11976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"22:752:8320":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"6:1589:11198":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11788:8899":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:10325:8463":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"4:9176:10508":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11757:25544":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"11:671:7972":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:10847:31440":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12306:8941":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}