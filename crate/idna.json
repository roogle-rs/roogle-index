{"root":"0:0:1619","crate_version":"0.3.0","includes_private":false,"index":{"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,16],"end":[509,20]},"visibility":{"restricted":{"parent":"0:46:1595","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2666:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:81:1918":{"id":"0:81:1918","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[448,4],"end":[474,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2515-0:166:1597":{"id":"b:2:2515-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2518:126","2:2519:1424"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11436:64004":{"id":"2:11436:64004","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11023:6268","prim@char":"1:12374:1989"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:6402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:669":{"id":"0:105:669","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[702,4],"end":[708,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11371:1911":{"id":"2:11371:1911","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"2:11377:57904","prim@char":"1:12374:1989","`DoubleEndedIterator`":"2:7063:119","str::split_whitespace":"2:11349:63223","self::pattern":"2:11023:6268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50002:6427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5112:59091":{"id":"5:5112:59091","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11443:58968"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11418:64000":{"id":"2:11418:64000","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11023:6268","prim@char":"1:12374:1989"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11048:6400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164:410":{"id":"0:164:410","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11352:63987":{"id":"2:11352:63987","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50266:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37:1794":{"id":"0:37:1794","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[216,0],"end":[219,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2577-0:166:1597":{"id":"b:2:2577-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2570:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3362:6614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:6496"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"0:39:591":{"id":"0:39:591","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[225,0],"end":[230,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2654:215-0:151:1598":{"id":"a:2:2654:215-0:151:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2579:6496":{"id":"2:2579:6496","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3374:6613","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5098:64640":{"id":"5:5098:64640","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180:59":{"id":"0:180:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5093":{"id":"5:5093","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5004:1349","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5094:64639","5:5095:1920","5:5098:64640","5:5101:64641","5:5109:64642","5:5110:64643","5:5111:2124","5:5112:59091","5:5113:59092"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11445:64005":{"id":"2:11445:64005","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4459:64005"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50301:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5094:64639":{"id":"5:5094:64639","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6725:6926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2191","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6725:6926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11336:57868":{"id":"2:11336:57868","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48036:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7719:2221-0:166:1597":{"id":"a:2:7719:2221-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7719:2221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11321":{"id":"2:11321","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10586:1349","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11322:785","2:11323:1895","2:11324:63981","2:11325:63982","2:11327:63983","2:11330:60224","2:11331:63984","2:11332:307","2:11333:57871","2:11334:1788","2:11336:57868","2:11338:57869","2:11340:57870","2:11342:63985","2:11343:63986","2:11344:57893","2:11345:57894","2:11346:1750","2:11347:7261","2:11348:1769","2:11349:63223","2:11350:63220","2:11351:7939","2:11352:63987","2:11353:63206","2:11354:57910","2:11357:1890","2:11360:1891","2:11363:6327","2:11367:1763","2:11371:1911","2:11374:57902","2:11377:57904","2:11380:63988","2:11383:63989","2:11386:57906","2:11389:57908","2:11392:63990","2:11395:63991","2:11398:1866","2:11401:63992","2:11404:63993","2:11407:63994","2:11410:63995","2:11412:63996","2:11414:63997","2:11416:63998","2:11417:63999","2:11418:64000","2:11421:64001","2:11424:1913","2:11427:57911","2:11430:64002","2:11433:64003","2:11436:64004","2:11439:7178","2:11441:1764","2:11442:58967","2:11443:58968","2:11444:58969","2:11445:64005","2:11447:6620","2:11448:64006"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:108:651":{"id":"0:108:651","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[714,4],"end":[716,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8538:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8527:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2515-0:157:1596":{"id":"b:2:2515-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2518:126","2:2519:1424"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5109:64642":{"id":"5:5109:64642","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:7261":{"id":"2:11347:7261","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12374:1989"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49978:6414","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11439:7178":{"id":"2:11439:7178","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:10985:125","`FromStr`":"2:10984:6418"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10984:6418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10984:6418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92:1855":{"id":"0:92:1855","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[543,4],"end":[546,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:86:1618":{"id":"0:86:1618","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[500,4],"end":[506,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:7939":{"id":"2:11351:7939","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50256:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11353:63206":{"id":"2:11353:63206","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50294:6407","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2524:1423":{"id":"2:2524:1423","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5095:1920":{"id":"5:5095:1920","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11377:57904":{"id":"2:11377:57904","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11023:6268","str::split":"2:11371:1911","prim@char":"1:12374:1989","`DoubleEndedIterator`":"2:7063:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50020:6426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:6402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156:59":{"id":"0:156:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5110:64643":{"id":"5:5110:64643","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6980:219","`Box<str>`":"5:276:2191"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6725:6926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7720:2220-0:151:1598":{"id":"a:2:7720:2220-0:151:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7720:2220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7719:2221-0:157:1596":{"id":"a:2:7719:2221-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7719:2221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11421:64001":{"id":"2:11421:64001","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12374:1989","self::pattern":"2:11023:6268"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11401:63992":{"id":"2:11401:63992","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11023:6268","`DoubleEndedIterator`":"2:7063:119","str::matches":"2:11398:1866","prim@char":"1:12374:1989"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50224:6425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:6402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2231:57720":{"id":"2:2231:57720","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11407:63994":{"id":"2:11407:63994","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"2:11404:63993","self::pattern":"2:11023:6268","prim@char":"1:12374:1989","`DoubleEndedIterator`":"2:7063:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50170:6423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:6402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11360:1891":{"id":"2:11360:1891","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11023:6268","prim@char":"1:12374:1989"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:6402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2505-0:151:1598":{"id":"b:2:2505-0:151:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2508:1928"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11348:1769":{"id":"2:11348:1769","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49988:6413","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17:526":{"id":"0:17:526","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[54,0],"end":[56,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6407:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1748":{"id":"0:15:1748","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[45,0],"end":[47,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:94:1889":{"id":"0:94:1889","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[555,4],"end":[558,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2509-0:157:1596":{"id":"b:2:2509-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2511:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11323:1895":{"id":"2:11323:1895","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115:1617":{"id":"0:115:1617","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2520-0:157:1596":{"id":"b:2:2520-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2523:126","2:2524:1423"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2668:223-0:166:1597":{"id":"a:2:2668:223-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11447:6620":{"id":"2:11447:6620","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4460:6620"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50310:6374","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151:1598":{"id":"0:151:1598","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[433,0],"end":[437,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:79","a:2:2654:215-0:151:1598","a:2:2668:223-0:151:1598","a:2:7720:2220-0:151:1598","a:2:7719:2221-0:151:1598","a:2:2718:2185-0:151:1598","b:2:2509-0:151:1598","b:2:2520-0:151:1598","b:2:2515-0:151:1598","b:2:2505-0:151:1598","b:2:2226-0:151:1598","b:2:3313-0:151:1598","b:2:2229-0:151:1598","0:155"]}},"b:2:2229-0:151:1598":{"id":"b:2:2229-0:151:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2231:57720"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[713,0],"end":[717,1]},"visibility":{"restricted":{"parent":"0:46:1595","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8583:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:651"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:674:6349":{"id":"5:674:6349","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112":{"id":"0:112","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,39],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Idna","name":"Idna","id":"0:151:1598","glob":false}},"b:2:2226-0:166:1597":{"id":"b:2:2226-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2228:2059"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3313-0:151:1598":{"id":"b:2:3313-0:151:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3315:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11442:58967":{"id":"2:11442:58967","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11344:57893":{"id":"2:11344:57893","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11345:57894"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2508:1928":{"id":"2:2508:1928","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2482:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:1750":{"id":"2:11346:1750","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12374:1989"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49972:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89:59":{"id":"0:89:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[520,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2520-0:166:1597":{"id":"b:2:2520-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2523:126","2:2524:1423"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5364:1403":{"id":"5:5364:1403","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3:1594":{"id":"0:3:1594","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[315,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:15:1748","0:17:526","0:37:1794","0:39:591"],"is_stripped":false}},"b:2:2226-0:151:1598":{"id":"b:2:2226-0:151:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2228:2059"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3315:1437":{"id":"2:3315:1437","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46507:6615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":{"restricted":{"parent":"0:46:1595","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:164:410"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2718:2185-0:151:1598":{"id":"a:2:2718:2185-0:151:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5101:64641":{"id":"5:5101:64641","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3313-0:166:1597":{"id":"b:2:3313-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3315:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2519:1424":{"id":"2:2519:1424","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11330:60224":{"id":"2:11330:60224","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10591:6411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:63986":{"id":"2:11343:63986","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2983:6650","str::slice_unchecked":"2:11342:63985","`str`":"1:12380:1994"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11357:1890":{"id":"2:11357:1890","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12374:1989","self::pattern":"2:11023:6268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96:1606":{"id":"0:96:1606","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[567,4],"end":[571,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:58968":{"id":"2:11443:58968","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11338:57869":{"id":"2:11338:57869","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:166:1597":{"id":"0:166:1597","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[600,0],"end":[613,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2654:215-0:166:1597","a:2:2668:223-0:166:1597","a:2:7720:2220-0:166:1597","a:2:7719:2221-0:166:1597","a:2:2718:2185-0:166:1597","b:2:2509-0:166:1597","b:2:2577-0:166:1597","b:2:2520-0:166:1597","b:2:2515-0:166:1597","b:2:2505-0:166:1597","b:2:2226-0:166:1597","b:2:3313-0:166:1597","b:2:2229-0:166:1597","b:5:5362-0:166:1597","0:179","0:102","0:104","0:106","0:107"]}},"b:2:2505-0:157:1596":{"id":"b:2:2505-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2508:1928"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[701,0],"end":[709,1]},"visibility":{"restricted":{"parent":"0:46:1595","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:105:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11427:57911":{"id":"2:11427:57911","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11023:6268","prim@char":"1:12374:1989"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:6402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2518:126":{"id":"2:2518:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:11342:63985":{"id":"2:11342:63985","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12380:1994","crate::ops::Index":"2:2979:6651","str::slice_mut_unchecked":"2:11343:63986"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11363:6327":{"id":"2:11363:6327","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48036:174","self::pattern":"2:11023:6268","prim@char":"1:12374:1989"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[439,0],"end":[507,1]},"visibility":{"restricted":{"parent":"0:46:1595","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:912","0:81:1918","0:82:1606","0:86:1618"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11345:57894":{"id":"2:11345:57894","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11344:57893"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:91:1610":{"id":"0:91:1610","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[537,4],"end":[540,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11331:63984":{"id":"2:11331:63984","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11424:1913":{"id":"2:11424:1913","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12374:1989","self::pattern":"2:11023:6268"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:671-0:157:1596":{"id":"b:5:671-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:6348","5:674:6349","5:675:6350"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2654:215-0:166:1597":{"id":"a:2:2654:215-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,31],"end":[42,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Errors","name":"Errors","id":"0:166:1597","glob":false}},"2:2228:2059":{"id":"2:2228:2059","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:80:912":{"id":"0:80:912","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[440,4],"end":[446,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["config",{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:93:1611":{"id":"0:93:1611","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[549,4],"end":[552,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11322:785":{"id":"2:11322:785","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12374:1989"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11354:57910":{"id":"2:11354:57910","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11023:6268","prim@char":"1:12374:1989"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2229-0:157:1596":{"id":"b:2:2229-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2231:57720"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11414:63997":{"id":"2:11414:63997","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11327:63983":{"id":"2:11327:63983","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11325:63982"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:63220":{"id":"2:11350:63220","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11349:63223"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50285:6408","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11334:1788":{"id":"2:11334:1788","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48036:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95:1859":{"id":"0:95:1859","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[561,4],"end":[564,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11333:57871":{"id":"2:11333:57871","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12391:2003"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2718:2185-0:166:1597":{"id":"a:2:2718:2185-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2523:126":{"id":"2:2523:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39279:6610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:82:1606":{"id":"0:82:1606","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[478,4],"end":[496,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7720:2220-0:166:1597":{"id":"a:2:7720:2220-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7720:2220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:675:6350":{"id":"5:675:6350","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2520-0:151:1598":{"id":"b:2:2520-0:151:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2523:126","2:2524:1423"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2505-0:166:1597":{"id":"b:2:2505-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2508:1928"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[711,0],"end":[711,27]},"visibility":{"restricted":{"parent":"0:46:1595","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","type_id","source","description","provide"],"trait":{"name":"Error","id":"2:2570:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11383:63989":{"id":"2:11383:63989","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11023:6268","str::split":"2:11371:1911","str::split_terminator":"2:11380:63988","prim@char":"1:12374:1989"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50070:6430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:6402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11395:63991":{"id":"2:11395:63991","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:6402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:63223":{"id":"2:11349:63223","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11350:63220"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50276:6410","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11416:63998":{"id":"2:11416:63998","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3313-0:157:1596":{"id":"b:2:3313-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3315:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1619":{"id":"0:0:1619","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[74,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3:1594","0:110","0:111","0:112","0:113:1604","0:114:1609","0:115:1617"],"is_stripped":false}},"2:2511:669":{"id":"2:2511:669","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:651":{"id":"0:103:651","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[647,4],"end":[698,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8538:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8527:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:673:6348":{"id":"5:673:6348","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"a:2:2668:223-0:157:1596":{"id":"a:2:2668:223-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11340:57870":{"id":"2:11340:57870","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11417:63999":{"id":"2:11417:63999","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11448:64006":{"id":"2:11448:64006","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4457:64006"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50319:6372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[519,0],"end":[533,1]},"visibility":{"restricted":{"parent":"0:46:1595","path":"::uts46"}},"docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2556:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2654:215-0:157:1596":{"id":"a:2:2654:215-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":{"restricted":{"parent":"0:46:1595","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2556:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:180:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:113:1604":{"id":"0:113:1604","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[51,0],"end":[53,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:114:1609":{"id":"0:114:1609","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[57,0],"end":[62,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11410:63995":{"id":"2:11410:63995","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:223-0:151:1598":{"id":"a:2:2668:223-0:151:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2226-0:157:1596":{"id":"b:2:2226-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2228:2059"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[646,0],"end":[699,1]},"visibility":{"restricted":{"parent":"0:46:1595","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8578:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11444:58969":{"id":"2:11444:58969","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11380:63988":{"id":"2:11380:63988","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:12374:1989","`DoubleEndedIterator`":"2:7063:119","str::rsplit_terminator":"2:11383:63989","str::split":"2:11371:1911","self::pattern":"2:11023:6268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50052:6431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11392:63990":{"id":"2:11392:63990","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11325:63982":{"id":"2:11325:63982","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5113:59092":{"id":"5:5113:59092","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11444:58969"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2718:2185-0:157:1596":{"id":"a:2:2718:2185-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11430:64002":{"id":"2:11430:64002","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11023:6268","prim@char":"1:12374:1989"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:6402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2509-0:166:1597":{"id":"b:2:2509-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2511:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11332:307":{"id":"2:11332:307","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12391:2003","str::as_mut_ptr":"2:11333:57871"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:1596":{"id":"0:157:1596","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[510,0],"end":[516,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:90","a:2:2654:215-0:157:1596","a:2:2668:223-0:157:1596","a:2:7720:2220-0:157:1596","a:2:7719:2221-0:157:1596","a:2:2718:2185-0:157:1596","b:2:2509-0:157:1596","b:2:2520-0:157:1596","b:2:2515-0:157:1596","b:2:2505-0:157:1596","b:2:2226-0:157:1596","b:2:3313-0:157:1596","b:2:2229-0:157:1596","b:5:671-0:157:1596","0:163","0:165","0:88"]}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":{"restricted":{"parent":"0:46:1595","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2556:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11389:57908":{"id":"2:11389:57908","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12374:1989","str::splitn":"2:11386:57906","self::pattern":"2:11023:6268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50124:6428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:6402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[535,0],"end":[580,1]},"visibility":{"restricted":{"parent":"0:46:1595","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:91:1610","0:92:1855","0:93:1611","0:94:1889","0:95:1859","0:96:1606","0:98:1618"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2515-0:151:1598":{"id":"b:2:2515-0:151:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2518:126","2:2519:1424"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11433:64003":{"id":"2:11433:64003","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11023:6268","prim@char":"1:12374:1989"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11374:57902":{"id":"2:11374:57902","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12374:1989","self::pattern":"2:11023:6268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10847:6409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:1764":{"id":"2:11441:1764","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,23],"end":[42,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Config","name":"Config","id":"0:157:1596","glob":false}},"2:11398:1866":{"id":"2:11398:1866","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:7063:119","prim@char":"1:12374:1989","self::pattern":"2:11023:6268","str::matches":"2:11398:1866"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50206:6424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11324:63981":{"id":"2:11324:63981","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11412:63996":{"id":"2:11412:63996","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7720:2220-0:157:1596":{"id":"a:2:7720:2220-0:157:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7720:2220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11367:1763":{"id":"2:11367:1763","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:12374:1989","`None`":"2:48036:174","self::pattern":"2:11023:6268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:6402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11404:63993":{"id":"2:11404:63993","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"2:11407:63994","prim@char":"1:12374:1989","`DoubleEndedIterator`":"2:7063:119","self::pattern":"2:11023:6268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50152:6422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11386:57906":{"id":"2:11386:57906","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11023:6268","prim@char":"1:12374:1989","str::rsplitn":"2:11389:57908"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50106:6429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5362-0:166:1597":{"id":"b:5:5362-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8583:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5360:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5364:1403"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:98:1618":{"id":"0:98:1618","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[574,4],"end":[579,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7719:2221-0:151:1598":{"id":"a:2:7719:2221-0:151:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7719:2221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5111:2124":{"id":"5:5111:2124","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2229-0:166:1597":{"id":"b:2:2229-0:166:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2231:57720"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2509-0:151:1598":{"id":"b:2:2509-0:151:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2511:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}}},"paths":{"6:4551:11030":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:11070:8758":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10497:51125":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:9339:8473":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4683:11092":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:1562:10727":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:50717:7440":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:8589:6466":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:8902:6981":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:969:6758":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:4583:7103":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:47101:6571":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:7287:8096":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:13527:9890":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4565:11036":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:4206:10908":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:8951:65428":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:29551:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:6991:7653":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:6134:8675":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"1:3269:6690":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:2409:7058":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:12349:9516":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:52158:7354":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10822:50865":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:8034:7973":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:4300:6626":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:944:6754":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:2223:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:38106:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:2513:6680":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:10670:8461":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"18:96:8847":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:1552:6658":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:13134:9768":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:49870:6927":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6323:7996":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4653:11077":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:48309:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:2576:6681":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10506:9233":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11828:9418":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:6293:11385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:6076:7123":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10455:8493":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:3590:9922":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:4404:9934":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:4015:7086":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:113:8850":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:3680:9924":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:8047:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"21:266:2156":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"7:79:48442":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"21:259:65449":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"6:545:10655":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11054:8754":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:7297:8097":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:719:14380":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:2916:8395":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"14:160:10202":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:20952:7224":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:4934:6405":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:47070:6566":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:11605:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:2142:573":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12022:9464":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:12391:2003":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10207:9220":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10088:9216":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:50002:6427":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"22:636:8547":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"16:7637:7989":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:25198:7311":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:50745:7441":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:9477:7031":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4581:11045":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:2896:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:7489:7972":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11149:9283":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"12:1065:7890":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13557:9895":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:49820:6939":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1348:6751":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4191:10901":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"12:1852:6832":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"18:644:9064":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:44:7879":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:4280:10943":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4706:11102":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:46939:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:5402:8045":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"9:33:7817":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:12948:9719":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:3420:6667":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4461:11000":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:5974:8066":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:2983:6650":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:1620:6832":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:2198:10611":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"12:2080:6766":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:1511:10699":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:4208:6848":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:487:8893":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:8064:6918":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:6415:11429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:6799:8907":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:4808:9946":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:6322:11397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:12028:7920":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:19975:63774":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:20159:7220":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:9577:8373":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:48613:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:2835:6872":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"7:32:48435":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:5621:6658":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:52864:7343":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:20196:7367":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:9263:8862":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:3374:6613":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:4503:7095":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:524:8671":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"9:649:7769":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:9382:9176":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:1376:6752":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:554:10661":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:8538:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:628:6618":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:57004:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12278:9506":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:8145:6684":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:1864:8916":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:11381:6903":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5720:11308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:9365:6817":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13192:9780":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:4310:6627":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:8503:6854":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"12:1859:6833":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:9429:6821":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4629:11067":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11761:9408":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11721:9403":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:339:160":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:48773:6465":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:5595:11237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:49791:6936":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:524:8246":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:46507:6615":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:5892:6816":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:4257:10935":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10642:8464":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:11666:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3459:2099":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:8393:8340":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:10583:8358":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:5392:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:495:10624":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13382:9849":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:46402:197":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:12395:2007":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:4764:6914":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11198:7043":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:12972:9724":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:52706:7351":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:9791:9181":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:6855:8086":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:50319:6372":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:1828:8915":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:8361:6696":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:8377:6668":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"12:1044:7889":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7226:11534":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:5841:11336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:10881:8690":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:54011:10349":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:52274:7330":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6276:8019":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:451:7010":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:247:9080":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:47265:6591":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:5085:6636":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"7:0:1488":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:54068:10354":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:20009:63861":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:3160:6564":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5876:11361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:5450:8048":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:2731:6282":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:6953:11517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"12:1628:8643":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:48178:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:8697:7148":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:2662:6277":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:2740:8278":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:56926:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11684:9399":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:47502:8906":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"12:1029:6766":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:3096:6755":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:9539:8369":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:6178:8071":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:8418:8403":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:4031:8647":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:50498:7243":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12550:9576":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:6479:11469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:592:10680":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"9:800:10614":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13071:9747":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:10187:8670":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"5:6881:6775":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10296:9226":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:12816:8768":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:3951:6795":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"0:114:1609":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"2:3948:7166":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13518:9886":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:56965:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50206:6424":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4673:11086":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:36:7605":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:50020:6426":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4294:10951":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:29623:7497":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:2920:2186":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:1415:6758":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:8587:6465":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:20235:6641":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:11174:9288":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:11447:8691":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"9:19:7816":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:6509:11486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:5861:11350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4247:10929":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:2610:6674":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:51683:10339":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:52035:10343":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:931:6753":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:46759:6374":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:3267:6689":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:2732:64870":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:48110:6295":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:5793:8062":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:4288:9930":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:7374:8099":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:699:8515":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11774:9410":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12103:9474":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:8812:6969":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:49978:6414":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:1067:7692":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"12:1681:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:10233:9224":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5692:11294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4635:11068":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"12:2053:6764":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:12617:9631":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:7858:59884":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:2984:8283":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:11743:63175":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"12:1085:7891":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:20856:63772":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4200:10906":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:859:6750":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:12388:2000":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:7063:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:1394:6756":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:47139:6575":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:531:8525":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:2311:7975":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:1611:6754":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6450:7909":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:7937:14378":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:54198:10360":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:2909:6617":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:8328:6700":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:52447:10344":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:8494:8739":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:1518:10702":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"12:1845:6755":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:6392:11422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:1654:10792":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:47546:8910":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:598:6858":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9422:8865":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:215:7606":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"21:302:2169":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"12:815:6759":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:12392:2004":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:7037:2217":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:1595:10749":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13091:9754":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"9:622:7768":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:20007:63857":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:8731:10297":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:9283:9174":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:50733:7448":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4152:10875":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10332:8498":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"15:193:7912":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:53202:7344":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2839:6874":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12291:9507":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:54057:10353":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:10812:7435":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2825:6867":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:49365:8800":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:1967:2097":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:10984:6454":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:910:6295":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:5424:6754":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:6757:7661":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12896:9703":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:8475:8335":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:47171:6584":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:2726:6348":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:990:6761":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4611:11061":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:46500:7231":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:7298:8919":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:9452:7120":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"12:300:7896":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:46838:6372":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:3125:8873":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13478:9875":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:51703:10340":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:7461:8002":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8532:8813":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:50749:7442":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5856:8064":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:47049:6568":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"12:1866:6834":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:12216:8697":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12730:9674":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:9519:8808":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:10374:8433":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:5365:7991":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:4385:406":{"crate_id":2,"path":["core","char"],"kind":"module"},"2:52082:7362":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:973:6759":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:6787:193":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10577:6967":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:46534:10322":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:681:10371":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:48499:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:10708:8457":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:519:10635":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:1678:10809":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:47536:8669":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:10736:7432":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:6448:11443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7413:8033":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:11607:6741":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:10508:8916":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:11659:8694":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:5642:8056":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:9681:9124":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:1338:6750":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10845:8458":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13327:9830":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:4653:9941":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:5964:6754":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:49326:6794":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:9317:8471":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:2979:6651":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:51897:10341":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:11974:9459":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:20437:7223":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:8623:6799":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"12:2205:6774":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:50967:7453":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:6290:7631":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"9:827:7723":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11800:9413":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:9658:8868":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:2664:221":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:5523:11200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10997:9265":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:51727:7360":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:8368:8355":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7430:193":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:5488:8050":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13413:9856":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:46424:196":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:9637:6742":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:53052:7320":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:2750:6719":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:2924:2187":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:8575:7141":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:8578:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:12322:9513":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:2727:64871":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12674:9668":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:5167:6919":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:12514:9545":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:10561:7574":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5715:8058":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:7057:6755":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:10121:8399":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7307:8098":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:46863:6374":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:10773:7433":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6721:8084":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:48161:42859":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:5568:11230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:736:8518":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:46925:6380":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:11249:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:8143:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10283:8878":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:46846:6373":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:8643:7088":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:11531:6902":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:10750:59553":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9820:8479":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:52782:7358":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:560:10664":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:53660:7352":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"22:669:8548":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"5:2019:64979":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"0:17:526":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"17:12176:9487":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:1751:11554":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:12398:2010":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:9873:8870":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:996:6762":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:2244:7697":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:52350:7319":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:1201:6766":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:6944:7666":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:10527:8925":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:8991:65434":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:39328:6281":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"12:853:6762":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"20:8:2117":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"1:6919:10381":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:5761:6900":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:545:7027":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:11536:9375":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:9885:9182":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11300:9315":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"20:302:2110":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"5:1049:7691":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:46956:7507":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"14:0:1964":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:13436:9869":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:8761:6826":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:4745:11117":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:2548:8274":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9844:8482":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:6602:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:6981:11520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:10077:6942":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:6149:8041":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:1722:10826":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3152:7071":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:5009:6647":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:9471:6426":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:49731:7430":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:47557:8912":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:49561:6929":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:47120:6573":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:2784:8281":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:49357:8799":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:8583:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:46826:6384":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:50610:6432":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"18:766:8520":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:5536:8053":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:10528:8454":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:4318:6480":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"20:92:1818":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"17:8871:8854":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13203:9784":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:21692:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:12384:1996":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:7214:11532":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10108:8398":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"20:314:2111":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"17:9805:8478":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:4253:9929":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:3623:9923":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13158:9773":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:29314:7533":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2661:2184":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:4016:239":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:582:6841":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10546:50864":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:8885:6980":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:3001:8282":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:3362:6614":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:8137:6682":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3462:6684":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:481:8522":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10476:51124":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:6230:201":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:2978:6832":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:48246:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:4135:9927":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6294:8020":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:11152:6853":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:3375:6658":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:8822:65433":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:8427:6413":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:4836:6855":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:11028:6401":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:12375:1990":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:11259:9303":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:9274:9173":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:1636:10780":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"22:752:8549":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"1:6783:7000":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"12:725:6752":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:13184:9779":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4286:10946":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:6675:6452":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:9350:8474":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:276:2191":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:9321:6902":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:20435:7316":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:11094:7237":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:8241:8460":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12251:9502":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:4244:6622":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:52180:7357":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4540:11025":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:11173:6634":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:9291:6751":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:20325:7223":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:48152:2218":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:1604:6750":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12237:9501":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:6780:7121":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:2654:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:56978:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:842:7659":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:6632:8083":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:8631:8745":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:9303:8379":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:2927:2188":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:11813:9415":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:4892:6625":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:3723:6754":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"0:37:1794":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"16:4565:9938":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:12118:9478":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:11762:8922":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:9118:65429":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:7958:8037":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12307:9509":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:8588:6797":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:9120:217":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5519:8052":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7321:8000":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:1105:6765":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:1541:10712":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"18:548:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10420:8492":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:1938:2096":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"14:187:49174":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:9909:8750":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:8162:8404":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:3419:8645":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:6928:7507":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:54042:10352":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:11238:60123":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:3557:9921":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:2397:7052":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:2766:6726":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:6713:8014":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:567:10667":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:11901:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:6352:11419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:5749:11316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:11844:7454":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2831:6870":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:29565:7496":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"18:636:9075":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:1637:6835":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10490:9231":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:6409:11427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5605:11244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"12:738:6753":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:46774:6382":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:21186:8785":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:10625:8361":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13100:9755":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:6439:8809":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:6329:11401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:54031:10351":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:7208:11531":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:50980:156":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:50741:7447":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:9719:8917":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:8433:6427":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"12:98:7893":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:10385:8434":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5660:11281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:20276:6641":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:3477:6669":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:5959:8250":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"20:223:1819":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"16:6820:10014":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11464:8693":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11594:9384":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4659:11078":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:4183:202":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"18:671:8512":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:48575:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:49902:6945":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6337:8076":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:420:7960":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:20687:7226":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:5498:11195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:50224:6425":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:3339:6750":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:53908:7339":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:10404:7100":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:5510:11199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:6012:8068":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:13279:9829":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10796:8455":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:50285:6408":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:48170:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:11235:9299":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:20844:6891":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:11515:9371":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11106:8767":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:56569:7459":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:8862:6979":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:3753:8645":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:2278:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:8595:6468":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:4597:9939":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:581:10675":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:6795:7650":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:49972:1786":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:9738:8424":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:7404:8017":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:73:1443":{"crate_id":2,"path":["core","u32"],"kind":"module"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:6725:6926":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:2466:7696":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10182:9218":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8389:6670":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:7948:8005":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13231:9792":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:8295:50862":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:21299:62704":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:6500:11483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:5062:6648":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"22:0:2145":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"17:11217:9298":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:46765:10323":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:7055:6889":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11921:7093":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4300:10953":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:1771:8372":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11356:9332":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:646:43634":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:1230:6767":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:6375:11420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4575:11042":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:56952:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:4976:8652":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:4187:7377":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11576:9383":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:3166:7229":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"12:834:6761":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:49076:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:3084:6699":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:1002:6763":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:7002:7654":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:5681:8057":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:8420:6593":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:6010:8645":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:9165:65426":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13114:9762":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:1091:6764":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13536:9892":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4592:11053":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:5201:7631":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:46972:7508":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10221:8874":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:47200:6586":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"13:220:8784":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:48787:6466":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11661:9395":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:11023:6268":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:2949:7646":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:48119:2217":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"12:697:6758":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:9546:57734":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:12379:1993":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:4094:8647":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:9362:8381":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:4698:11097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4475:11001":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12980:9726":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:20278:6890":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:6836:7081":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:9371:8859":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:3192:6692":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"12:2184:10609":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:54159:10359":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:6707:6786":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:12399:2011":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:1701:10819":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13039:9739":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:7934:8004":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:7873:7030":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10075:9215":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:62:43232":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:8148:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:12265:9505":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:5644:6894":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:4260:6624":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:2039:7693":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:9550:6429":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:2937:6750":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:8692:7145":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:1426:193":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:6734:6295":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10245:8876":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:11048:6400":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:9359:6409":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:47029:10331":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:54121:10357":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:47214:6587":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:0:790":{"crate_id":6,"path":["libc"],"kind":"module"},"1:8410:6569":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"9:709:6979":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:2776:6731":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13047:9740":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8794:2210":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:9250:9172":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12148:9481":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:80:8846":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:4616:6658":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:20428:6641":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:8981:8857":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:8801:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:1933:7027":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:2859:8253":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:11618:36554":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:13126:9765":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:11729:10385":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:3004:6835":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"22:948:8552":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"2:47316:6583":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:4737:7582":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:6597:8082":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:8648:7089":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:7545:8021":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:9618:6741":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:9631:8367":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:8911:65427":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"0:15:1748":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"16:5758:8060":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:49347:6979":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:9293:8475":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:965:6757":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:11208:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:5582:11231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"20:88:2122":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"1:11338:10394":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:52304:7334":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:50256:6420":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"12:1003:6765":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:2526:8273":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:8596:8744":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6354:8077":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12934:9717":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"22:43:8538":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"2:51749:7348":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:7846:6641":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"0:39:591":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"17:9691:8421":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11734:9188":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:4274:10941":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:11956:6708":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:2381:7047":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4489:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:47079:6569":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:46342:195":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7887:8009":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11343:9331":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:7976:10394":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:3608:6295":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:4970:6850":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7266:8094":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:5175:49241":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11087:8760":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:2784:6735":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:51958:7329":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:198:2171":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"2:46816:6383":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:10663:6908":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"18:719:8516":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"14:31:10202":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11342:6849":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:2622:8286":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:5739:8059":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:11691:10299":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:3158:7073":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:52017:7318":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:7113:8266":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:2668:223":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:1584:8645":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:6638:10381":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:8593:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4212:10911":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:4061:6658":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:20030:63862":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:12356:57729":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:6545:11505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11951:9450":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:2970:6834":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"21:67:1820":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"8:0:1959":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:9597:162":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4726:11109":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:52988:7335":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10360:8491":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:2252:8255":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10062:8872":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:2478:8272":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13141:9769":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:46280:7274":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:3328:158":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12884:9700":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"12:1836:6295":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:11837:6803":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:21791:7035":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"18:660:8511":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:3155:7072":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"14:202:7656":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:50916:206":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13374:9848":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:8069:7041":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10721:8753":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:900:6751":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8225:6685":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:2489:231":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:20028:63859":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:918:6752":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:2437:6611":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10608:8359":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:4361:6481":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:51879:7353":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:50266:6421":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11841:9419":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:7413:6882":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9930:9183":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:9351:6814":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:6897:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:11681:6910":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7366:8015":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"14:221:10209":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5625:11260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:11744:10387":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:8796:8360":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:48780:6464":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:3191:7232":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:49912:6946":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:11168:11635":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7227:8091":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:9608:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:4338:6285":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:4740:9944":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"12:1872:6835":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:46869:6375":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:53550:7332":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11853:9420":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:4329:10969":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12748:9679":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:48229:6751":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:3900:6750":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8081:7043":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:6811:6787":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:5315:10378":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:5549:7583":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:5810:19791":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:2736:64874":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:49800:6940":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:8960:6984":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:1580:10737":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11570:6742":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"22:449:8636":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"17:12874:9699":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:11363:57733":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10752:8356":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:50170:6423":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:7289:11548":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:3972:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:21226:7180":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:49134:6463":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"20:335:2113":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"2:2760:6723":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:50124:6428":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:20222:7368":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:11708:9400":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:12396:2008":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5587:11232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:2867:6965":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:4431:7147":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:47301:6594":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"22:966:8553":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"12:387:8889":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:21043:7469":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5480:11182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:1887:8917":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:5592:8244":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:8597:6469":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5472:8049":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:3845:9926":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:2570:8325":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:54002:10348":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:50805:7521":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6441:8078":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:2383:7048":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:5346:10378":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11288:9312":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:2473:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:9289:6899":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:1943:7649":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7907:8102":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"12:1120:7892":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:9592:6949":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4967:6852":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13459:9870":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6230:8074":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:47110:6572":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:21923:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:939:8645":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:8137:50861":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:1643:10784":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:5372:6577":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:2476:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:2556:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:13393:9853":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10921:9246":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:9267:6750":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:12373:1988":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:1626:6833":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:2901:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:38123:6841":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:51827:7361":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:1826:8914":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:12695:9673":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:39279:6610":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:46241:6563":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:21626:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:4317:10963":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:6679:7124":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:8941:8856":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"12:669:6757":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:50562:7245":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:7615:8006":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:9466:8805":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:2650:6683":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:47130:6574":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:2243:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2745:6716":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:12781:9690":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:47191:6585":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13354:9842":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:54022:10350":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11977:8819":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:11639:63174":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12134:9479":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:9700:8420":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:1695:10816":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8215:6962":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:20692:19597":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:513:10632":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:8441:8459":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9433:9178":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:7535:7995":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"18:599:65439":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:49857:6568":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:2944:6833":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:5616:63324":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"6:7255:11541":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11368:9335":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:49037:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:52396:7323":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:2705:6280":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:1600:10751":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:52548:10347":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"22:1034:8554":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"2:3900:6658":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:6014:7114":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:9401:9177":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:6494:6815":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"9:188:7792":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:4192:7378":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:5513:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:9343:6750":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"9:896:7728":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:48237:6295":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:53018:7338":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:5504:11198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7335:8013":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:4906:11416":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:3393:9920":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:1021:8476":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:6430:11433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:9712:8748":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:4266:6625":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8735:6851":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:49098:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:2291:8296":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:3179:9918":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:10520:9236":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:3352:6751":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:521:8521":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:2772:6729":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"20:0:1620":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"16:7189:7983":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5443:11156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"15:175:7911":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:9307:6901":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:1738:10831":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6124:8040":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13572:9896":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:2908:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10321:8490":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:47180:6579":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:49960:6417":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6424:11432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4737:11115":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:50382:7234":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"21:145:1821":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"16:4432:9935":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"12:1840:6754":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:5606:8055":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:9489:57728":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:2273:8254":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:11247:9302":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:1216:6765":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:5771:8061":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11559:9380":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"9:977:7729":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:12739:9678":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:12033:9465":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:7417:6884":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4307:10956":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:9335:6903":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:1903:50947":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:4510:9936":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:7920:8103":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"15:214:7916":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:5176:6789":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:50906:200":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:8815:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:2728:11550":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:46885:6376":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6495:7908":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:50052:6431":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:46802:6381":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12860:9698":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:48102:6751":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:47275:6592":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:4398:10995":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:52628:7363":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:8581:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:7537:59792":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"12:777:7881":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:11186:9289":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:6884:212":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:2399:7053":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:7847:7006":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:8110:50857":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:9223:50909":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:2814:6838":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:1123:6767":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:8850:6776":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:6407:238":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"12:274:8886":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:1404:6757":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4367:10985":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:6555:7307":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"0:3:1594":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"18:609:9070":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:8486:6802":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:135:43299":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:4902:11412":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:6975:11518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:21261:10303":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:54136:10358":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:52942:7331":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"18:681:8513":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4231:10924":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6998:11529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:2485:232":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"20:281:65445":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"17:10875:8401":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:46446:198":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:1608:10756":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11939:9448":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:21149:10300":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:52228:7342":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:8561:8417":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:8368:6698":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:21344:11556":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:5007:6637":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:13024:9737":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:20950:6641":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:11186:10476":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:4664:14382":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:3254:9919":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5541:11210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:6309:7632":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:1760:7542":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10774:8354":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:8074:6634":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:46358:193":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:29489:6519":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4904:11414":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:47518:8908":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:960:6756":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:12386:1998":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"12:119:7897":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12609:9628":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:4437:10998":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:1359:6295":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12046:9467":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"13:0:1957":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:11588:11637":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:53408:7364":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:4423:7146":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:8774:8353":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:2029:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:51857:7349":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:5835:11335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:1550:10718":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11271:9304":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"14:40:9265":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6768:8085":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:7980:7700":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:46327:7271":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:1672:1052":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"22:470:8542":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"2:51773:7340":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:7719:2221":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:2358:8271":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:5424:8046":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11748:9407":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:7148:11811":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:12377:1991":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4335:10972":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7992:8036":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6843:8309":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:9644:8366":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:50576:7246":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:501:10627":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:10445:8458":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:4496:11002":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:9512:10462":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:7960:15376":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:2833:8252":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"10:0:1961":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:21253:10302":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:50729:7444":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:4314:6628":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:12387:1999":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:967:8864":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:5011:6645":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6697:8302":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:0:1341":{"crate_id":1,"path":["std"],"kind":"module"},"1:5678:6896":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"9:592:7767":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:50301:6376":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:6822:6295":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:4515:11014":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"9:676:7814":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:4816:11152":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:50433:7241":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:3017:9088":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:52494:10345":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12198:9498":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:3707:9925":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:4797:11144":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:4879:9948":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:9627:8377":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:2586:8673":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:7721:2219":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:53800:7356":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:3149:228":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:9613:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:3228:6693":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6188:8072":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:608:10690":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4115:10847":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5534:11208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:8212:8456":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:51928:7341":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:6508:6567":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:5896:8657":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:5824:6906":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:8446:150":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"21:291:65448":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"16:7868:8007":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:10949:9250":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:21170:7185":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:11900:7086":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12768:9685":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:10350:8354":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:5504:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:11163:11633":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:7784:8685":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:12390:2002":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:8527:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:9947:51052":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:6654:7998":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5554:11219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1574:10735":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:9913:7041":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"12:985:6764":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:21890:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4179:10898":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:2026:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:2843:6876":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4621:11064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:2479:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:11893:9424":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4534:11022":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:1636:572":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:979:6760":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:774:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11199:9290":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"12:1832:6750":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:50525:7244":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:53984:7324":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:2983:7647":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12485:9525":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"12:659:6295":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:507:10630":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"12:1534:7903":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:6115:7988":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"12:822:6760":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12073:9469":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:5927:8065":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"12:1138:6767":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13214:9785":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:1887:44609":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13168:9776":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:6980:219":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11873:9423":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:131:43298":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:12393:2005":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:7276:8095":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4139:10865":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:9413:6820":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:48034:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:29523:6520":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:2797:6859":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:1971:7694":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7447:8001":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:9471:6713":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:6269:11368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:21202:8792":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:11617:9387":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11714:10384":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:21989:7473":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:12385:1997":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:9601:8371":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11528:9373":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5782:11324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:6740:7660":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:3249:8407":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4449:10999":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:7074:7627":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:47224:6588":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:50450:7242":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:676:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:12340:8820":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:1707:7099":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:10466:9229":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:10434:8880":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:4078:7376":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:2819:6864":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"12:320:7895":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:2248:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:5837:6580":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:49831:6928":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:49883:6944":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"14:7:10202":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:9359:6295":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:9671:8343":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:50106:6429":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:11998:6842":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"2:49150:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:1714:10822":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12211:9499":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5672:11286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6048:7982":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:12337:8458":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:11834:6713":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:10847:6409":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:4559:11034":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:9857:8406":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"9:920:7725":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:50630:6433":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:19990:63774":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:7140:154":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:46944:7506":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:21857:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10973:9264":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:9524:8814":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:7190:8684":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:8306:7416":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13340:9836":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:10984:6418":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:9578:6950":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:574:7032":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:6311:11392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"12:810:6756":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7825:8101":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:21365:7487":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12836:9694":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4102:10838":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:2961:7273":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:5449:6578":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"21:320:9050":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"2:50772:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:52525:10346":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3311:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:3474:7676":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:9553:8381":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:1500:10694":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:2930:2189":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:12955:9721":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:8739:11401":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12756:9680":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:2816:8280":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:4252:6623":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:2500:8284":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:4644:11071":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11137:9282":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:5154:8256":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:7746:10481":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:1686:10810":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13082:9751":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:3230:6694":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:2332:8289":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5713:11306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:586:10677":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:9906:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:6319:7633":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:5360:227":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10394:8435":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:7894:6454":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:9071:65430":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:49318:8798":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:4506:11009":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:9918:8689":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:6101:7990":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:4439:7149":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:48423:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:11860:7085":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:3154:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:1525:10704":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:8129:7065":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:29729:7498":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:50276:6410":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:8591:6467":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:9110:6641":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12797:9693":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:6391:7454":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:3484:6672":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6881:8087":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"20:349:2114":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"16:7850:8008":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"0:0:1619":{"crate_id":0,"path":["idna"],"kind":"module"},"18:652:9064":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:4012:7085":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:9446:8866":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5572:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:9458:8341":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:4712:9943":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"21:313:2170":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"2:29529:6521":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:20247:7225":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:1919:6712":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:2380:8267":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9021:8858":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:1435:7689":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3995:6710":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:5113:9950":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"22:534:8543":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"2:2809:6837":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:13594:9902":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:58300:10368":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:9183:8861":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:46899:6378":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8637:7087":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:4912:9949":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:13148:9770":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:2780:6733":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12361:9523":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:7166:11530":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:9751:8422":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:51795:7328":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:386:9081":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:4214:6846":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:2885:8287":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"3:223:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:21351:7538":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4267:10938":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"9:505:7716":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:4768:11125":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:11543:60120":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:4777:9945":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11315:9321":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:4254:7383":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:8121:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"9:111:7784":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:3468:59503":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:7410:6387":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11228:6668":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:50419:7238":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:11778:8696":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:7943:6768":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:5472:11180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:7022:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12087:9472":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:1505:10696":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:9764:9180":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:6850:7082":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:7953:6769":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:9532:8087":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:10257:8877":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:11756:8921":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:707:6403":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6262:8003":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:11875:200":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:4655:7104":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:1825:6711":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:48221:6750":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:49064:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:21096:7470":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:491:9063":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"18:755:8519":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8469:6801":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:6219:8073":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:1033:8895":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:1737:7543":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7350:8313":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:4711:769":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:7521:7994":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:12380:1994":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:8272:8463":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:10939:6691":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:667:226":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:2256:6666":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"12:762:6755":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:4522:6368":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:2718:2185":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:11995:11638":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:9061:8381":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13031:9738":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:48347:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10403:8356":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:50997:6959":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:6158:8645":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:9501:8379":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6572:11511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:3960:7167":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:50924:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"9:863:7726":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:6476:8662":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:52372:7322":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:1668:10803":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:8971:6985":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:515:8524":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:7026:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:49988:6413":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12638:9639":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:6794:8306":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:49013:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"18:727:8517":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:7237:11538":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:7803:8100":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8685:6797":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8552:7140":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:6277:11373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"20:322:2112":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"1:6040:7115":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:20404:6641":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:5741:11314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11034:9278":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:36:10613":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:2788:6737":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:5658:6895":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:2253:7044":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:50597:7248":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2804:6836":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:6542:201":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:21956:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:6974:11552":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"5:771:7658":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:21824:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:52752:7355":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"19:0:996":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5210:8740":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:9831:8481":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:3345:6697":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:2402:8290":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:49557:7578":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:48385:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:9193:65435":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:53738:7336":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:2309:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:1632:6834":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:1532:10707":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:3176:7230":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:9397:6819":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:6007:7112":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:0:1962":{"crate_id":11,"path":["adler"],"kind":"module"},"23:0:2146":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"2:49046:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:8104:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:6816:6295":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:6869:6774":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:21238:7181":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6759:8011":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:7279:11546":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:5574:8054":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:12372:1987":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:5727:11309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6571:8081":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:49892:6947":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:4:980":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:686:14379":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"12:444:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4417:10996":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:9295:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:10733:6898":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"18:690:8514":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:1615:6755":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"20:293:9055":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"14:165:49168":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:4115:7093":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4354:10981":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:50737:7446":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12926:9714":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:3448:9092":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:8585:6464":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:46382:194":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:8666:8746":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:4379:10994":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11125:9279":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13059:9746":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6807:8307":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:678:10369":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12008:9462":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"21:0:1621":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"16:4626:9940":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:6087:8016":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:5533:7582":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11161:9286":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:4536:9937":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11997:9460":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:624:65436":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:661:2098":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:1962:8419":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:50725:7445":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:620:10283":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:6474:8079":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:1185:6764":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:2596:8326":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:21:661":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:50294:6407":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:21725:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:48461:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:2436:6641":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:7803:8687":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:2848:6879":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:9398:6941":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:6779:6295":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"0:115:1617":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"1:1114:6766":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:11218:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:10682:8462":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12630:9638":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:48085:1787":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:0:482":{"crate_id":2,"path":["core"],"kind":"module"},"5:1385:6753":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12850:9697":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:7249:11540":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:39315:7700":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:8091:6635":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:12345:14381":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:11351:6900":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:6451:8657":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5699:11295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:6545:8010":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:5995:8067":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:5821:6904":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:5225:2209":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:10942:6693":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:48094:6750":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"18:507:9064":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:2424:8268":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:52326:7337":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13492:9877":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:562:9083":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:20409:19579":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:50310:6374":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:48651:7511":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:52128:7350":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:51980:7333":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:5693:6897":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:12374:1989":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5733:11312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:10577:7576":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:575:10672":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:5379:8044":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:457:7011":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:39319:6612":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:7245:8092":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:10945:6689":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:3402:6642":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:539:10652":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:4348:9932":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:4990:8655":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:11330:9327":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"12:751:6754":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:58279:10367":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:8711:7087":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"22:386:7980":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"17:8510:8740":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:8526:8437":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"13:108:65424":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:6554:11508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"12:646:6751":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:6749:6754":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:47286:6593":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:9778:8423":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:9722:8749":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:2674:8275":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:46786:7312":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4810:11149":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4346:10976":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"15:0:1965":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:13221:9787":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4527:11021":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:2921:7976":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:9475:8331":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:11043:6402":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"0:113:1604":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"2:50793:6745":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"9:586:7765":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:1931:8368":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:3312:6677":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:11014:9268":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:11037:6403":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9526:8370":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:1889:8918":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11547:9378":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"12:60:8885":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:3139:7501":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6668:7999":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:614:65438":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:4840:9947":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:8717:7107":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"9:956:7724":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:4264:6479":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:51009:6957":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:7220:11533":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:2648:8285":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:49031:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:13176:9777":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4427:10997":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:50070:6430":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:0:1967":{"crate_id":17,"path":["object"],"kind":"module"},"2:56939:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:153:7980":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:14:2076":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:3592:6804":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:6422:6301":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:53946:7359":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:47233:6589":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:50753:7519":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:7022:8262":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:9328:8472":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:6989:6581":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5684:11293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11787:9411":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:2666:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:5878:201":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"12:393:8890":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:9031:65431":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:9316:6427":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:8055:8352":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:8220:6963":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"20:215:126":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"6:4804:11147":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:11519:6901":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4376:9933":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4778:11130":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10838:6899":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:0:1958":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:51998:10342":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7922:14376":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:4598:11056":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:49810:6938":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:11458:8692":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:412:8696":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:46906:6379":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:2570:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:9436:6951":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:21758:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:2250:7042":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:50404:7235":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:7086:1791":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"22:879:8551":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"17:13007:9730":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13580:9899":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13506:9884":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"22:1122:7297":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"2:50587:7247":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:1643:6516":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:6524:11493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4185:10899":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:1811:593":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:54083:10355":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:4322:6621":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:10110:6943":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"21:228:1822":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"2:50959:7452":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:574:9064":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"22:728:8636":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"2:47019:8663":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:0:280":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:1608:6295":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10159:9217":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:4665:11081":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:48537:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:538:8526":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13366:9845":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10854:8418":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:2762:8279":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4224:10920":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:49782:6937":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6139:8070":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:8440:6420":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:6682:8012":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:4521:199":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:48271:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4096:10837":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:6957:7667":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:7095:8265":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:12394:2006":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:7243:11539":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:21315:62703":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"21:276:2168":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"5:4428:651":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:10310:8879":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:4318:9931":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7581:8018":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:9155:8860":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:2718:8277":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:12389:2001":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"20:197:2118":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"2:2315:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:49310:6777":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:47527:6697":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:4118:6478":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:4401:7144":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5772:11322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:1476:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:487:9082":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12964:9722":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:9384:6818":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:6164:7992":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"12:1518:7902":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:21278:62698":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8611:6798":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:6248:7993":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:9567:8816":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:9108:8859":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12225:9500":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:6985:6582":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:9509:6948":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:5817:8063":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"12:2190:65423":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:5438:8047":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:6751:6696":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4716:11108":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:7266:11545":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6506:8080":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4690:970":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:8855:6793":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:3190:6691":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:22388:7286":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6646:8304":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:6308:8075":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:12397:2009":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"18:590:9065":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:3550:8645":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:8752:6413":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:2673:6278":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:47092:6570":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:4051:7375":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:242:9079":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:9656:6743":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"12:2069:6765":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4605:11058":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11606:9386":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6302:11391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10894:8400":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:6407:8682":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:4239:10926":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8944:6982":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"12:353:7894":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:8701:8747":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:7735:9083":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:7824:6401":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:2903:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:2220:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:49946:6419":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:4742:6850":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:46468:7499":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:56991:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46541:6479":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:4309:7384":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:6030:8069":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:5707:6898":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:954:6755":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"9:382:7721":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:0:1966":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:47509:6452":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:4685:63233":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12909:9709":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:6538:11502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"18:0:1968":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:10796:7434":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:6083:6295":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:7475:7997":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:4938:6406":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:8528:2099":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:13404:9854":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:11675:8810":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:46527:8036":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:2792:6739":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:7868:7015":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:5226:9951":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:7720:2220":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:3794:6751":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11639:9394":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:887:6750":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:47250:6590":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:6313:8675":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:11436:9337":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:21377:7486":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:564:8527":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:49335:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:12378:1992":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:20284:6892":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:4208:9928":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11551:7519":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:5503:8051":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:10591:6411":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:6214:6815":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:53862:7321":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2273:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:12381:1995":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:47148:8901":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"9:0:1960":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:5194:8739":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11909:9429":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2665:220":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:9897:8871":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:47162:6576":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:7256:8093":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:6602:6885":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:54106:10356":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:4680:9942":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10139:8381":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4361:10983":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:7035:2190":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7144:8089":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:3228:7233":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:50721:7443":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:2755:6721":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:48794:6467":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:19962:6841":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12164:9485":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"12:1555:7904":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:50152:6422":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:9488:8334":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:46586:7297":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:8703:7098":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2482:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7215:8090":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:2456:8295":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:8954:6750":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:6914:7665":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:3076:7500":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:4890:8645":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4126:10855":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10270:9225":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:21659:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:11485:9362":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11500:9366":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:4452:7150":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:4761:11122":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"12:2178:10608":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:12021:7920":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:8881:65432":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:6765:64982":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"12:0:1963":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:3531:6755":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:8311:7417":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:2696:8276":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"12:861:6763":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:12060:9468":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:46892:6377":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"14:215:10207":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6037:8270":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:5885:6815":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:7071:8088":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:8339:50863":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:600:10685":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:1680:6755":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:9564:6428":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"12:632:6750":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"}},"external_crates":{"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}