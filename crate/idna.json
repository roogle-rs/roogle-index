{"root":"0:0:1800","crate_version":"0.4.0","includes_private":false,"index":{"b:1:2264-0:155:1779":{"id":"b:1:2264-0:155:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2266:28280"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3412-0:170:1778":{"id":"b:1:3412-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3414:1607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2833:2367-0:155:1779":{"id":"a:1:2833:2367-0:155:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:2367","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:46:658":{"id":"0:46:658","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[226,0],"end":[231,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[703,0],"end":[711,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41800:234","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:747"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12570:35473":{"id":"1:12570:35473","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12189:2262","`DoubleEndedIterator`":"1:7571:126","prim@char":"4:12009:453","str::rmatch_indices":"1:12573:35474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43767:6596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2261-0:170:1778":{"id":"b:1:2261-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2263:2156"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109:747":{"id":"0:109:747","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[704,4],"end":[710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41800:234","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:161:1777":{"id":"0:114-0:161:1777","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1777","glob":false}}},"1:12543:32380":{"id":"1:12543:32380","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12189:2262","`DoubleEndedIterator`":"1:7571:126","prim@char":"4:12009:453","str::split":"1:12537:2104"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43635:6588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12209:6576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:36145":{"id":"5:5524:36145","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2261-0:161:1777":{"id":"b:1:2261-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2263:2156"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2573:747":{"id":"1:2573:747","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:36146":{"id":"5:5527:36146","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[537,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1791","0:96:2047","0:97:1792","0:98:2082","0:99:2051","0:100:1787","0:102:1799"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12506:31505":{"id":"1:12506:31505","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8659:2388-0:161:1777":{"id":"a:1:8659:2388-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8659:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2264-0:170:1778":{"id":"b:1:2264-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2266:28280"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12518:35469":{"id":"1:12518:35469","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43881:6587","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12583:35479":{"id":"1:12583:35479","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12504:31504":{"id":"1:12504:31504","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12610:32160":{"id":"1:12610:32160","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1791":{"id":"0:95:1791","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[539,4],"end":[542,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12499:344":{"id":"1:12499:344","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12026:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2567-0:170:1778":{"id":"b:1:2567-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2570:2121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12509:35468":{"id":"1:12509:35468","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12015:1510","crate::ops::IndexMut":"1:3077:2250","str::slice_unchecked":"1:12508:35467"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12555:32384":{"id":"1:12555:32384","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12009:453","str::splitn":"1:12552:32382","self::pattern":"1:12189:2262"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43739:6592","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12209:6576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3412-0:161:1777":{"id":"b:1:3412-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3414:1607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8660:2387-0:170:1778":{"id":"a:1:8660:2387-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8660:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:44:1988":{"id":"0:44:1988","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12578:35476":{"id":"1:12578:35476","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1792":{"id":"0:97:1792","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[551,4],"end":[554,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:32161":{"id":"5:5539:32161","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12611:32159"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2571-0:161:1777":{"id":"b:1:2571-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2573:747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:168:457":{"id":"0:168:457","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2082":{"id":"0:98:2082","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[557,4],"end":[560,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12513:10219":{"id":"1:12513:10219","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12009:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43593:6584","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12561:32387":{"id":"1:12561:32387","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12209:6576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:1778":{"id":"0:170:1778","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[602,0],"end":[615,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2793:255-0:170:1778","a:1:2833:2367-0:170:1778","a:1:2776:245-0:170:1778","a:1:8659:2388-0:170:1778","a:1:8660:2387-0:170:1778","b:1:2571-0:170:1778","b:1:2261-0:170:1778","b:1:2567-0:170:1778","b:1:2264-0:170:1778","b:1:2582-0:170:1778","b:1:2577-0:170:1778","b:1:3412-0:170:1778","b:5:5793-0:170:1778","0:108","0:111","0:110","0:106","0:183"]}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[521,0],"end":[535,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2567-0:155:1779":{"id":"b:1:2567-0:155:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2570:2121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12580:35477":{"id":"1:12580:35477","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12537:2104":{"id":"1:12537:2104","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12189:2262","`DoubleEndedIterator`":"1:7571:126","prim@char":"4:12009:453","str::split_whitespace":"1:12515:29654","str::rsplit":"1:12543:32380"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43617:6590","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1005","0:87:2111","0:88:1787","0:91:1799"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12510:32370":{"id":"1:12510:32370","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12511:32371"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115-0:170:1778":{"id":"0:115-0:170:1778","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1778","glob":false}}},"1:12599:35483":{"id":"1:12599:35483","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8660:2387-0:161:1777":{"id":"a:1:8660:2387-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8660:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2582-0:170:1778":{"id":"b:1:2582-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:133","1:2586:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8659:2388-0:155:1779":{"id":"a:1:8659:2388-0:155:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8659:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12516:29685":{"id":"1:12516:29685","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12515:29654"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43900:6599","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2263:2156":{"id":"1:2263:2156","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2571-0:155:1779":{"id":"b:1:2571-0:155:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2573:747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:586":{"id":"0:24:586","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6915:272","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1800":{"id":"0:0:1800","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1775","0:114-0:161:1777","0:115-0:170:1778","0:116-0:155:1779","0:117:1785","0:118:1790","0:119:1798"],"is_stripped":false}}},"1:12488:875":{"id":"1:12488:875","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12009:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1790":{"id":"0:118:1790","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41800:234","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12515:29654":{"id":"1:12515:29654","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12516:29685"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43891:6586","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:155:1779":{"id":"b:1:2577-0:155:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:266","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:133","1:2581:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12567:35472":{"id":"1:12567:35472","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12189:2262","`DoubleEndedIterator`":"1:7571:126","prim@char":"4:12009:453","str::matches":"1:12564:2058"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43839:6595","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12209:6576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12496:32143":{"id":"1:12496:32143","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11749:6579"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1779":{"id":"0:155:1779","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:2793:255-0:155:1779","a:1:2833:2367-0:155:1779","a:1:2776:245-0:155:1779","a:1:8659:2388-0:155:1779","a:1:8660:2387-0:155:1779","b:1:2571-0:155:1779","b:1:2261-0:155:1779","b:1:2567-0:155:1779","b:1:2264-0:155:1779","b:1:2582-0:155:1779","b:1:2577-0:155:1779","b:1:3412-0:155:1779","0:159"]}}},"1:12549:35471":{"id":"1:12549:35471","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12189:2262","str::split":"1:12537:2104","prim@char":"4:12009:453","str::split_terminator":"1:12546:35470"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43685:6589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12209:6576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12511:32371":{"id":"1:12511:32371","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12510:32370"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12605:35485":{"id":"1:12605:35485","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12150:132","`FromStr`":"1:12149:2258"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41800:234","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12149:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12149:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:36148":{"id":"5:5536:36148","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2253","`String`":"5:7490:251"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2253","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12564:2058":{"id":"1:12564:2058","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12189:2262","`DoubleEndedIterator`":"1:7571:126","prim@char":"4:12009:453","str::rmatches":"1:12567:35472"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43821:6594","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12582:35478":{"id":"1:12582:35478","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2582-0:161:1777":{"id":"b:1:2582-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:133","1:2586:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2580:133":{"id":"1:2580:133","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12529:6507":{"id":"1:12529:6507","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41657:199","prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2047":{"id":"0:96:2047","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[545,4],"end":[548,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:100:1787":{"id":"0:100:1787","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[569,4],"end":[573,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41800:234","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12520:30954":{"id":"1:12520:30954","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3412-0:155:1779":{"id":"b:1:3412-0:155:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3414:1607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12489:2088":{"id":"1:12489:2088","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12576:35475":{"id":"1:12576:35475","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:28283":{"id":"5:686:28283","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12609:32163":{"id":"1:12609:32163","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1005":{"id":"0:86:1005","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12546:35470":{"id":"1:12546:35470","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12189:2262","str::split":"1:12537:2104","prim@char":"4:12009:453","`DoubleEndedIterator`":"1:7571:126","str::rsplit_terminator":"1:12549:35471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43667:6591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12526:2084":{"id":"1:12526:2084","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12209:6576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12612:35486":{"id":"1:12612:35486","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4573:35486"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43916:6546","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2581:1594":{"id":"1:2581:1594","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41800:234","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1799":{"id":"0:102:1799","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41800:234","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:36144","5:5521:2113","5:5524:36145","5:5527:36146","5:5535:36147","5:5536:36148","5:5537:2318","5:5538:32162","5:5539:32161"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2793:255-0:161:1777":{"id":"a:1:2793:255-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2776:245-0:155:1779":{"id":"a:1:2776:245-0:155:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8660:2387-0:155:1779":{"id":"a:1:8660:2387-0:155:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8660:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2567-0:161:1777":{"id":"b:1:2567-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2570:2121"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12593:32388":{"id":"1:12593:32388","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12209:6576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:161:1777":{"id":"b:1:2577-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:266","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:133","1:2581:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12584:35480":{"id":"1:12584:35480","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12214:6575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:721":{"id":"0:107:721","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[649,4],"end":[700,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2111":{"id":"0:87:2111","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1785":{"id":"0:117:1785","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41800:234","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12487":{"id":"1:12487","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12488:875","1:12489:2088","1:12490:35463","1:12491:35464","1:12493:35465","1:12496:32143","1:12497:35466","1:12498:345","1:12499:344","1:12500:1982","1:12502:31503","1:12504:31504","1:12506:31505","1:12508:35467","1:12509:35468","1:12510:32370","1:12511:32371","1:12512:1946","1:12513:10219","1:12514:1965","1:12515:29654","1:12516:29685","1:12517:7935","1:12518:35469","1:12519:29674","1:12520:30954","1:12523:2083","1:12526:2084","1:12529:6507","1:12533:1959","1:12537:2104","1:12540:29650","1:12543:32380","1:12546:35470","1:12549:35471","1:12552:32382","1:12555:32384","1:12558:32386","1:12561:32387","1:12564:2058","1:12567:35472","1:12570:35473","1:12573:35474","1:12576:35475","1:12578:35476","1:12580:35477","1:12582:35478","1:12583:35479","1:12584:35480","1:12587:35481","1:12590:2106","1:12593:32388","1:12596:35482","1:12599:35483","1:12602:35484","1:12605:35485","1:12607:1960","1:12608:33502","1:12609:32163","1:12610:32160","1:12611:32159","1:12612:35486","1:12614:12020","1:12615:35487"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2833:2367-0:161:1777":{"id":"a:1:2833:2367-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:2367","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5795:1569":{"id":"5:5795:1569","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:2113":{"id":"5:5521:2113","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[714,0],"end":[714,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","type_id","source","description","cause"],"trait":{"name":"Error","id":"1:2629:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12615:35487":{"id":"1:12615:35487","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4571:35487"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43934:6544","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[522,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12611:32159":{"id":"1:12611:32159","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12533:1959":{"id":"1:12533:1959","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41657:199","prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12209:6576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1944":{"id":"0:22:1944","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12540:29650":{"id":"1:12540:29650","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12005:6600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:170:1778":{"id":"b:1:2577-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:266","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:133","1:2581:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:2051":{"id":"0:99:2051","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[563,4],"end":[566,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12508:35467":{"id":"1:12508:35467","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12015:1510","str::slice_mut_unchecked":"1:12509:35468","crate::ops::Index":"1:3073:2249"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12517:7935":{"id":"1:12517:7935","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43871:6585","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12493:35465":{"id":"1:12493:35465","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12491:35464"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2570:2121":{"id":"1:2570:2121","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2544:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12491:35464":{"id":"1:12491:35464","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3414:1607":{"id":"1:3414:1607","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39417:10177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2793:255-0:155:1779":{"id":"a:1:2793:255-0:155:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2788:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12607:1960":{"id":"1:12607:1960","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12602:35484":{"id":"1:12602:35484","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12209:6576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[648,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9614:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12614:12020":{"id":"1:12614:12020","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4574:12020"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43925:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12497:35466":{"id":"1:12497:35466","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12514:1965":{"id":"1:12514:1965","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43603:6583","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1787":{"id":"0:88:1787","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41800:234","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12498:345":{"id":"1:12498:345","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12499:344","`u8`":"4:12026:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:7746":{"id":"5:684:7746","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:2833:2367-0:170:1778":{"id":"a:1:2833:2367-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:2367","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:112:721":{"id":"0:112:721","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[717,4],"end":[719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2793:255-0:170:1778":{"id":"a:1:2793:255-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2582-0:155:1779":{"id":"b:1:2582-0:155:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:133","1:2586:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8659:2388-0:170:1778":{"id":"a:1:8659:2388-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8659:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12519:29674":{"id":"1:12519:29674","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43909:6598","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12523:2083":{"id":"1:12523:2083","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12596:35482":{"id":"1:12596:35482","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12209:6576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12608:33502":{"id":"1:12608:33502","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39604:30088","Self::is_ascii":"1:12607:1960"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39604:30088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:36147":{"id":"5:5535:36147","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2585:133":{"id":"1:2585:133","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32075:10457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12500:1982":{"id":"1:12500:1982","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41657:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:1777":{"id":"0:161:1777","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[512,0],"end":[518,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:2793:255-0:161:1777","a:1:2833:2367-0:161:1777","a:1:2776:245-0:161:1777","a:1:8659:2388-0:161:1777","a:1:8660:2387-0:161:1777","b:1:2571-0:161:1777","b:1:2261-0:161:1777","b:1:2567-0:161:1777","b:1:2264-0:161:1777","b:1:2582-0:161:1777","b:1:2577-0:161:1777","b:1:3412-0:161:1777","b:5:682-0:161:1777","0:92","0:169","0:167"]}}},"a:1:2776:245-0:161:1777":{"id":"a:1:2776:245-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:685:28282":{"id":"5:685:28282","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1779":{"id":"0:116-0:155:1779","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1779","glob":false}}},"1:12558:32386":{"id":"1:12558:32386","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2571-0:170:1778":{"id":"b:1:2571-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2573:747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2586:1592":{"id":"1:2586:1592","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41800:234","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5793-0:170:1778":{"id":"b:5:5793-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9619:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1569"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12512:1946":{"id":"1:12512:1946","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12009:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43587:1981","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12490:35463":{"id":"1:12490:35463","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12587:35481":{"id":"1:12587:35481","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:36144":{"id":"5:5520:36144","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2253","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2253","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2318":{"id":"5:5537:2318","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:32162":{"id":"5:5538:32162","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12610:32160"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12502:31503":{"id":"1:12502:31503","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41657:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12573:35474":{"id":"1:12573:35474","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12189:2262","`DoubleEndedIterator`":"1:7571:126","prim@char":"4:12009:453","str::match_indices":"1:12570:35473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43785:6597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12209:6576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2264-0:161:1777":{"id":"b:1:2264-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2266:28280"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2261-0:155:1779":{"id":"b:1:2261-0:155:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2263:2156"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2266:28280":{"id":"1:2266:28280","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7:1775":{"id":"0:7:1775","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[316,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1944","0:24:586","0:44:1988","0:46:658"],"is_stripped":false}}},"a:1:2776:245-0:170:1778":{"id":"a:1:2776:245-0:170:1778","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[716,0],"end":[720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9619:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12590:2106":{"id":"1:12590:2106","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12009:453","self::pattern":"1:12189:2262"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:161:1777":{"id":"b:5:682-0:161:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:7746","5:685:28282","5:686:28283"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12552:32382":{"id":"1:12552:32382","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12009:453","self::pattern":"1:12189:2262","str::rsplitn":"1:12555:32384"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43721:6593","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12194:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1799":{"id":"0:91:1799","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41800:234","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1798":{"id":"0:119:1798","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41800:234","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:6819:11331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14068:9051":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:8952:7765":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:47728:10288":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:434:8247":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9896:24300":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:46010:10259":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:4849:225":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:21463:7807":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:10672:7905":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1650:10639":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:9629:214":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4616:10831":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4998:10979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:10685:8418":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"22:449:7365":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"9:52:7721":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:43839:6595":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:12484:8665":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10646:8414":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"11:2085:9715":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10980:7569":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13851:8994":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4610:10829":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12750:8704":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:4745:9256":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:1585:7957":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6456:9360":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:2948:11997":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:1895:6751":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"5:7331:2289":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"22:669:7551":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"1:44344:6571":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:6159:11220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5992:11142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"0:118:1790":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"18:96:7865":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:41971:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:39334:222":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:501:10479":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:860:9711":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"14:221:9705":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6415:9357":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:3264:9825":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13685:8968":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:8845:2289":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:2133:7411":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13259:8802":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:10440:8391":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:43171:8049":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:4033:10124":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:14100:9059":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:8870:9949":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:46980:10282":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:2367:209":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:4053:9245":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:6879:9425":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9617:37033":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:7503:9234":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:44038:10217":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:7829:8129":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:2876:2245":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13693:8969":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:1842:7118":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:8957:111":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:12019:693":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:45785:10250":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:5798:7661":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:22128:10151":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:40152:6543":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:9445:7876":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:47478:10285":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"0:22:1944":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"1:2499:11777":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:2933:23357":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:8287:9927":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:8309:11300":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"14:0:2228":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:9933:8363":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:2810:9224":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10036:8366":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:949:9711":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7554:7700":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:3180:7956":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4473:10767":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:8134:9608":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7677:218":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:2501:9817":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:46916:10280":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:2644:9819":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:9625:6619":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:2618:9216":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4789:10872":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:8659:24264":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13966:9023":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:7988:12071":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:6059:11184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:9372:7567":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:10269:17545":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:2321:9203":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:9607:7880":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:8148:17544":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:4019:17590":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:6083:23329":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5921:11106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:1494:7750":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:531:8216":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:2260:9713":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:4416:6629":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:2964:11454":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:5477:9844":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:4717:17598":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:4401:10722":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"11:427:7948":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:2382:17534":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:3519:2240":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:8097:9603":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"14:215:9703":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:2535:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"16:2969:23358":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13487:8865":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:40659:8035":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:12772:146":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:2787:252":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:42647:11551":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6352:7689":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:9650:7569":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:41706:171":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:22181:10152":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:47790:10289":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:11359:7990":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5634:9273":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:3077:2250":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11000:8461":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:10603:8408":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:1752:11480":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:7707:17486":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"11:1541:9720":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:955:9712":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:11317:9858":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"22:0:2332":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"2:0:478":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:11121:7762":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:2798:2279":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:40126:6549":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:14282:9122":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:9350:7587":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:9830:151":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:22789:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:5928:11108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"11:1072:37021":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:10920:9872":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:14499:9181":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:4529:10789":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:6248:11249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:7741:9872":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:10737:11471":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:41409:10134":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:21573:17213":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:123:17814":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"4:11290:7987":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:3171:219":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11661:8507":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:7078:12064":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:2472:9210":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:12010:1632":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:4901:856":{"crate_id":1,"path":["core","iter"],"kind":"module"},"21:259:37065":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"1:47836:10290":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4776:10868":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:9083:243":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:3378:7418":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:6573:17678":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:43635:6588":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:9570:234":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"6:7343:11415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:6318:9350":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:7638:9863":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:4977:10964":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7782:9550":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"21:145:2013":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"17:8825:24281":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:40901:8046":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:4822:32035":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:8953:24285":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:9823:24298":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:41740:2384":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:44368:6568":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"3:0:2221":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"5:2172:7752":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:3183:9820":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"10:0:2225":{"crate_id":10,"path":["adler"],"kind":"module"},"1:42246:95":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:527:10499":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:4350:273":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:6862:6480":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:8169:7794":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"5:7252:2240":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:9852:24299":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:5948:7461":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12452:8658":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11389:7922":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:7544:9544":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:35:2285":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:9102:7581":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:13085:8770":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:5941:11117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:12031:850":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"5:6798:2292":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:4395:7418":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:5435:9271":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:1501:10543":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:1924:6752":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:13876:9002":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:1076:9719":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:5322:9269":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:564:7557":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:6587:7466":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:43152:10208":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:41773:2385":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:10738:8072":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5955:11128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:4168:7793":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:39292:220":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:2892:11988":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:13202:8794":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:7856:9875":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"6:6927:11400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:43821:6594":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:22325:10155":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:2888:11986":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:555:10514":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:7616:11432":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:9328:6583":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"4:8472:17658":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:3032:9236":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"0:7:1775":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"4:3647:17581":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"14:40:8552":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:2334:7747":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:4463:6630":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:119:17813":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4854:10904":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:10370:7903":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:10631:6588":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:7556:11428":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:548:151":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:932:17497":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:12027:1613":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:8253:9831":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:3949:7418":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:8781:206":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:40893:8044":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:3797:9241":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"20:97:2010":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"6:6691:11290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:11589:9862":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4710:10846":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:12990:7457":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:8851:9846":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:14042:9041":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10520:8401":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:9614:116":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:45825:10252":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:505:7411":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:46300:10268":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12970:8754":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13826:8985":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:6268:37029":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10628:8412":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"4:10518:9824":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:10742:11473":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:43413:8058":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:3671:7394":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:4774:9257":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5121:9268":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10534:8402":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:45755:10249":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:4407:7493":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:534:7442":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"6:7371:11418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12724:8700":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:12260:12147":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:44372:7806":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:6169:11223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"9:357:23224":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:840:7118":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:5945:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:40353:7798":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:2339:7626":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:5897:11097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:2325:208":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:7664:7477":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"17:10575:8405":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:6226:9337":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:11062:7914":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:44547:235":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12846:8718":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4440:10748":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:7624:1985":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:5634:2292":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:7651:9547":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:2361:202":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:1596:10598":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:2428:9208":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:7660:9548":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:5661:9282":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:12008:1002":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"20:356:2308":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"4:9126:9958":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:5392:9842":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1632:10627":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:5757:7764":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:43483:8063":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:5117:11037":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"11:1855:2286":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:7323:2289":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:4546:17627":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:14316:9134":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:10811:34525":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"11:1036:9715":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:4892:17635":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13667:8963":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:22954:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:4446:17609":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"21:266:2343":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"4:1842:7969":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"5:7232:2289":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:9571:6557":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:6361:9351":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:12009:453":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:9619:125":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"5:2962:36673":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:1561:2289":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:6913:11391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:9048:7780":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:12473:8662":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:21364:17208":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"11:1687:154":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:7302:7757":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10616:8409":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:4602:17587":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:21900:30535":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:42920:7822":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:580:10527":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:3481:17543":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:10060:7506":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:10916:8455":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:10077:9961":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:43881:6587":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:21888:7809":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:4417:9247":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:2541:160":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:11719:12117":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10214:7894":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"14:31:9698":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:5004:10982":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:46254:10266":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:8154:9609":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:21441:17545":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:3249:143":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:5974:11130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:1570:10582":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:9912:8359":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:45945:10257":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:11013:7479":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:4021:10123":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:14173:9078":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:8116:7776":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"5:5861:2240":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:5588:9229":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11351:8488":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:8793:7762":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"6:7365:11416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:7342:37031":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:10316:8384":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11295:7920":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:609:8226":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:4666:10842":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:10519:6600":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:10318:32055":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:3073:2249":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:6929:7697":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:2830:6449":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:12237:8602":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:10056:7967":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:39356:224":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:40171:10182":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:22441:11816":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:2692:11460":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:3965:17586":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:42657:69":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"22:1122:8187":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"1:44348:6570":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:30521:30057":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:2150:24343":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:46870:10279":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10278:8383":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:3307:17570":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:589:17480":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:44195:12154":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:1058:9713":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:45908:10255":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:14355:9142":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:39252:221":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:2284:23330":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:1876:7957":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:3722:7775":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:0:1502":{"crate_id":4,"path":["std"],"kind":"module"},"4:9073:184":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"11:101:10453":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:41386:168":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:2051:9786":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:47130:10283":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"9:507:7223":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4543:10797":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:42207:88":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"21:291:37064":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"4:2928:234":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"6:4724:10847":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10383:8387":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:596:10537":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12305:8622":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:43767:6596":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:3737:9786":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:12022:798":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"6:5052:11004":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:44537:227":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:12032:1672":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"16:7102:24225":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:40413:8015":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:4428:7420":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:7692:17485":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:8661:2386":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:8125:7777":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:9711:37037":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:507:8215":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:7722:7708":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:3041:137":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:5976:7426":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"20:336:2306":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"4:4106:7975":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5111:11034":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:13228:8796":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"11:1010:9713":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:588:10532":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:0:2231":{"crate_id":17,"path":["object"],"kind":"module"},"1:4288:10126":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:9867:8358":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:22690:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:14469:9176":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4628:10840":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:2450:9209":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:4835:9259":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:3240:7958":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:2833:2367":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:44364:6567":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:1738:11969":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13914:9010":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4647:10841":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:14221:9115":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13101:8774":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:7504:2241":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"13:226:7717":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:122:7384":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:7590:2287":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"20:327:8199":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"16:6600:24222":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:43667:6591":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:5829:11053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12225:8599":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:46375:10270":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:41868:203":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"18:521:28250":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13071:8768":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13838:8988":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12934:8749":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:43739:6592":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12024:7609":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:10637:8413":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"22:534:7856":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"6:6718:11300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11872:8536":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"4:10515:9822":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:2897:9468":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"11:2303:9724":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:30072:11778":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:5376:17720":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:46710:10277":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:2582:7445":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10012:7569":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:2538:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"11:1525:23289":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:9254:7968":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:13215:8795":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:7027:8037":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8769:2251":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13739:8978":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:6798:11325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4893:10917":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6041:24220":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:45807:10251":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12280:8618":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:11311:11967":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:5891:11096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4922:10932":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:6658:11267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:48126:10305":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:22987:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:42967:7825":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:4497:9249":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:2766:9222":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:7240:7959":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:32111:9873":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"5:3185:36962":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:766:28249":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:43470:8002":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:12214:6575":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:11970:6605":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:11958:9987":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:8281:9620":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:2788:113":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:10494:7578":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:2629:133":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:41893:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:44356:6572":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:75:1614":{"crate_id":1,"path":["core","u32"],"kind":"module"},"6:1591:10596":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:41843:7118":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:3463:6557":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"6:6943:11406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:14460:9172":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:2526:9212":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:4641:9254":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"11:785:2240":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:30891:203":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11845:8528":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:23500:244":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7360:37028":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:624:37044":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:2972:36451":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:5802:7453":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:42407:6618":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:6984:7439":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:21178:17211":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:43423:8059":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"13:0:2222":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:22234:7810":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:80:7862":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4434:10746":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:6781:11320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"20:315:37051":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"6:7598:11429":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:8829:7118":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:7529:142":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:5696:24217":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:22756:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:913:7954":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:2286:9715":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:6531:7925":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:4388:10712":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:14448:9170":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6915:7696":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:12194:2251":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:11894:6604":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13792:8982":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:1558:10574":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:4806:9258":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:47959:10296":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:11192:11475":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:7657:11441":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:11570:7783":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:12859:10149":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:48011:10300":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:5609:7461":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:1127:9718":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:7694:7705":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:9084:82":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:5673:9230":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:4196:7418":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:5044:11002":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:6687:9393":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12959:8753":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:11347:9861":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6696:9394":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:10747:9874":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"20:257:2011":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"11:2394:2286":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:14090:9056":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:10782:135":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:6081:8018":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:40246:7494":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:9621:6617":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"16:3315:9237":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:1259:9453":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:39378:11999":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:23053:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:42285:7819":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:2841:6453":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:4488:10773":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"4:9107:9857":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:3488:17562":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:3144:35299":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4364:10694":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12267:8614":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13298:8812":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:5939:7634":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:4208:9832":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:40424:8020":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:20946:7816":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5146:11046":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6204:7667":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:7725:17516":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:4027:17592":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:44352:6574":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:11793:7488":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:14145:9070":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11151:7919":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:2722:9220":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:4908:10924":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:1781:7966":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:44611:178":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:30919:7816":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:7248:7776":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:8216:17580":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:0:534":{"crate_id":1,"path":["core"],"kind":"module"},"1:32223:6454":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:14346:9140":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:43685:6589":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:2855:9466":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"7:78:23202":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:10903:7910":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12465:8660":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4878:10913":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:48064:10303":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:8915:17683":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:3907:17583":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:2366:11482":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:10710:6593":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"11:1862:7955":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:574:10524":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:21547:17204":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"0:44:1988":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"1:9089:89":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10456:8396":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4738:10848":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11573:7600":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:926:9706":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12876:8737":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:2384:17535":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:9000:7768":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:2604:9818":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:6742:9406":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:4986:9264":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"21:67:2012":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"1:9589:140":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"9:393:23210":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:44181:10223":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:5816:7666":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4939:1069":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:14126:9065":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"11:2467:10455":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:13113:8776":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:2670:9218":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:4719:9255":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10197:8378":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:44001:12153":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:2380:9206":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:11815:8524":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:5562:7418":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:755:8243":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:7834:7970":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10084:7891":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:1703:10667":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6968:24224":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:8279:7972":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:5545:11221":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:22408:11484":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:41426:10136":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"10:44:7720":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:1514:10549":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5104:11031":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:22379:30062":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:4157:7978":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:2568:7447":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"22:728:7365":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"6:4841:10899":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4764:10861":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13989:9026":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:44069:10221":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:302:2356":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"1:43785:6597":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:2909:11991":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:44590:10236":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:884:7749":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:784:7397":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:7651:11440":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:21006:30644":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:4351:10685":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:0:316":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:7639:11438":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:3010:122":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11367:8490":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:4595:10822":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5033:10996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:3943:17584":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:6788:17685":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:46792:10278":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4902:10923":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:44360:6573":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:14401:9156":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"11:703:7750":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:44206:10224":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:41851:7747":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:4989:10973":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:7571:126":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:2884:11987":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9998:8338":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11201:8473":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:8181:7711":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:40495:8028":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:590:8219":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:40446:8023":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:46422:10271":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6944:37025":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:1562:9721":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:10077:7445":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:2788:9223":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:7504:8249":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:6587:2289":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"20:231:2313":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"1:47996:10299":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:11596:9862":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12810:8712":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:6520:17676":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:1674:10656":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:6960:9429":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7067:9450":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"20:348:2307":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"16:5363:9270":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:49950:17220":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:14033:9040":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:2881:9227":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:4947:10943":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"11:759:7748":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3410:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:7308:7454":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:7006:9440":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:12016:1597":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:8765:24279":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"22:386:7381":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"6:6682:11284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:20974:30531":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10097:8369":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13868:8999":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:3957:17585":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:4076:7747":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"22:752:7375":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"4:7643:9865":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:5730:9851":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:40372:8009":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:897:7118":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:1682:10657":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:2618:121":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"16:3600:9239":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11215:8477":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:9951:10195":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:11191:8250":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:3214:7955":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:4862:9260":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11137:8470":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:6443:7465":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:5419:7566":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"0:0:1800":{"crate_id":0,"path":["idna"],"kind":"module"},"0:24:586":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"1:22266:7811":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:7990:17573":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:491:8214":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6844:9421":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:4988:7418":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:47666:10287":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:7633:11437":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:32075:10457":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:8364:17645":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:3814:9830":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:4211:6627":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:5372:9841":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"5:1290:9713":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:558:9806":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11173:24409":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:39151:12008":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:7437:30086":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:12034:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:8514:7980":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"6:4480:10771":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:4137:7792":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:21004:30642":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:42959:7824":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:45655:10245":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:10507:8400":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:5830:9286":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:14013:9033":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:7436:7648":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:8382:9938":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:14296:9128":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:4004:2240":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:42687:9577":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:5049:9266":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:21566:17545":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:4801:422":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:40395:7800":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:483:7441":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:47930:10293":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:43344:8054":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"20:0:1801":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"1:25902:275":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10714:7908":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:9701:7881":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:42703:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:10447:7719":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:6517:9854":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:7869:135":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:11332:9859":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:1590:7958":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11934:8552":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:44336:6566":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:20959:30531":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:14308:9131":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:41634:10139":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:7621:24227":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:5285:125":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:10112:7892":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:6868:11367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4808:10880":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:20987:30647":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:3261:12003":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:44117:10222":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:1840:7968":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:8926:24284":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:6259:8022":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:11448:24289":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:3712:9829":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:2463:11457":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:12834:212":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:14536:9188":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:1923:9995":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"11:731:7751":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:7839:9874":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:3206:7957":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:2784:6447":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:13723:8975":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7492:9539":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:22921:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:5995:7640":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:44229:6578":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:47912:10292":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14024:9037":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:7645:11439":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:48087:10304":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:5885:11093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11586:7602":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12685:8696":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:3289:12006":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:44416:10233":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:30287:2280":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:39431:8187":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4870:10910":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10788:24385":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:43496:8064":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:2305:23356":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"11:423:7947":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:13906:9008":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11507:24290":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:12945:8751":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6467:9361":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:40048:6551":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:45856:10253":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:6079:11192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4800:10876":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:22363:30084":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:42166:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12136:8577":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12983:8756":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:7894:9877":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6017:24219":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:3764:9240":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:9172:7583":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7523:9543":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"14:187:23301":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:10075:7995":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:536:7638":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:39417:10177":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:9921:8361":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:943:9709":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3049:23359":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13286:8805":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:44598:10238":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:2961:7746":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11761:8517":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11639:8250":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:41443:12083":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:5997:17733":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:3655:8262":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:4585:9252":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12252:8608":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:46232:10265":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13148:8788":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4455:10755":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:9790:37038":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13897:9007":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:5791:259":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:824:7400":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"4:5964:228":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:5616:9845":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12830:8713":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"0:117:1785":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"17:12184:8589":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:30415:30070":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:6666:11272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:3888:9243":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:21796:17218":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:46680:10276":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:41731:2289":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:5023:10990":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6261:7651":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:43925:6545":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:7533:163":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:4128:7976":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:9013:9956":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:40456:7801":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:8837:7986":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"22:879:28272":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"4:5548:17663":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"18:481:8213":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:14083:9055":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:10752:8073":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:5028:9836":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:46476:10273":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6071:11191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4745:10849":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:7388:11427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:40011:10178":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12293:8619":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:7618:17545":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"6:1528:10554":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:41472:7818":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"11:1882:7958":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:40404:8014":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4549:10799":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:1466:7748":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:8659:2388":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12043:7616":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4884:10914":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:3830:9242":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:44023:10212":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:41715:7118":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"16:7736:9549":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:6265:11483":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:12645:8688":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:44216:10228":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:41579:10198":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:22342:30078":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:4344:9246":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:1521:10551":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"14:165:23294":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:1642:6712":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:9070:7565":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:1674:7394":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:400:8246":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:7610:11431":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"20:249:133":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"1:2836:6451":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:11975:7784":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:41592:9831":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:8899:17681":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:2219:7440":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:1817:7967":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:10558:7477":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:46324:10269":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:3274:30639":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:6226:7461":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11742:8514":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9521:7878":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:40020:6552":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7128:9956":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13055:8767":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:22855:198":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:2968:36452":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:7479:7427":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:11237:8068":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:40062:6553":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11244:8505":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:10186:8376":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:12415:116":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:2238:9453":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:21542:17545":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"21:228:2014":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"4:4719:17600":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:40325:7795":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:7574:2286":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:9959:7886":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:2037:7775":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:3234:12000":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:4616:11315":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11226:8481":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:10929:8457":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11951:8555":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6171:214":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:4677:17636":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:2330:130":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:8660:2387":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:10410:7984":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:8186:6583":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:3350:8043":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"16:5743:9283":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:42675:114":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:45611:10243":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14434:9163":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:44640:9726":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"16:6156:9332":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:1913:19164":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:8260:11462":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"18:660:7870":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:12189:2262":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"11:2351:2289":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:40276:10185":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:7262:7405":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:1304:9719":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:9242:7585":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6569:7693":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11124:7918":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11473:8318":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"9:486:23208":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11687:24291":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:40433:8021":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:11582:35391":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:44249:2252":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:42752:75":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"11:693:2289":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:7390:17496":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"9:0:2224":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4166:7418":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:23020:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:582:8249":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:6222:11234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:897:2240":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13010:8758":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4556:10802":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:5328:7394":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:40868:8042":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:42730:133":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:45723:10248":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:10427:7118":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:21192:11954":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:40213:12037":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:14056:9048":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:3971:17587":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13611:8957":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:6120:11209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:2258:101":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:44340:6569":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:7466:9802":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10397:7904":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12778:8708":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:40343:8004":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:48049:10302":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:12023:799":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"6:563:10519":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11327:8486":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:5982:7923":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:5905:9296":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:9165:35044":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"18:515:8212":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:9005:7778":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:10948:34541":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:7318:9490":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:11316:8485":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:5622:8010":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:3472:35424":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12437:8653":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:1067:9715":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:11098:7917":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:6960:11762":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:10279:247":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:45631:10244":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13676:8967":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:12698:8697":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:7284:2384":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:2173:11955":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:5963:9302":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13981:9025":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12911:8748":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:32129:6628":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"4:12024:800":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:6107:11205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:1779:7965":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"6:5015:10985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13040:8763":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:8136:9827":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"6:4566:10809":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:5009:10984":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:10760:9976":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10561:8404":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:2845:2244":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:11980:17487":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:4775:7451":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6513:9362":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:13922:9012":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:62:17759":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:9838:155":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:4798:17597":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:2670:6756":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"18:574:8215":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:234:234":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:7462:9530":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:39410:10176":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:3150:34260":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:43561:2256":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:7622:11433":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:344:7944":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:14134:9066":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:7792:24228":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12007:7607":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10410:8388":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:2786:253":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:42127:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:43515:8066":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12172:8586":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:2860:9463":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:47939:10294":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:43167:11559":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3044:138":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:7574:7473":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:22290:10153":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4461:10758":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:39268:218":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:5075:11012":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11788:8518":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"15:0:2229":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:43721:6593":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:4462:9248":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:47985:10298":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"9:330:10461":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:6889:11381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:4352:7492":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:44555:215":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:40845:8039":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:5574:7655":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:863:2289":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"11:357:7386":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:22250:7787":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:30343:69":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"18:671:7875":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"7:0:1662":{"crate_id":7,"path":["unwind"],"kind":"module"},"15:394:23321":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:2872:9467":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:10792:124":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"11:796:2286":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"20:8:2312":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"17:11710:7596":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:10724:6592":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:41723:7747":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:654:18172":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"4:8305:9929":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9455:37034":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4584:10818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:6753:9407":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:5372:17719":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:22429:10167":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10126:8370":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:5859:11078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4968:10958":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:43444:8061":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:6136:11214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:21142:17209":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10726:8422":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:7910:7775":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"11:2058:9453":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:42010:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:1496:10541":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6086:11193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:9086:7566":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:47588:10286":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:47950:10295":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:2919:9472":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:2783:2366":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:12737:8702":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:41792:213":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:1697:10666":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:1505:7751":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:9631:6621":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13188:8791":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10738:7909":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:21140:17545":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:21381:17545":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"4:12028:1614":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:4883:17634":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:0:2226":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"4:12013:342":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"11:680:7747":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:46946:10281":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:12029:1615":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"6:4535:10792":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:8199:6585":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:46634:10275":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:3173:7118":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:6963:12077":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"20:369:2309":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"16:2574:9214":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:43404:8056":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:12025:796":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:5423:109":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:40363:8006":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:2793:255":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:9271:30941":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4814:10882":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:10772:7774":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"4:4680:17609":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13244:8798":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12098:8573":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:3915:9244":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:12765:8707":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:41800:234":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:1573:7955":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11272:8484":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"11:1635:7390":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:2547:266":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:40256:10184":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"5:3332:2286":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:7985:7773":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:8775:7984":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12543:8673":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6837:11341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:4015:17589":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4279:229":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:42421:6619":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:4362:6628":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:10512:9820":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:2880:11989":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:12012:1120":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:2368:17530":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4686:10844":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11111:8469":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:8807:9948":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:8530:7983":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:11493:9829":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:21575:7807":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:21311:17212":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:2359:9205":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:40283:8002":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:4496:10775":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:7378:2254":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:1140:7961":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"11:298:7940":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:1484:7954":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:4288:9833":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:10092:7511":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:4516:10784":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13802:8983":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:6407:9853":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14156:9071":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10340:8385":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:39312:223":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:8713:24278":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:2012:7896":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"22:1034:28274":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"1:12005:6600":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:1525:7962":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:1710:10670":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:11284:7770":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:12807:31625":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4603:10827":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:1579:7956":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:7886:124":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:46556:10274":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"4:11174:9857":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"4:9078:242":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:47874:10291":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:495:10477":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:3596:7747":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:40084:6544":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"21:0:1802":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"16:5760:24218":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:14478:9178":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:4614:11313":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:4236:7118":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:6959:7436":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:504:8248":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:9660:37032":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:1691:10663":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:7980:9879":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10962:8459":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:40133:6550":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10265:7895":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:4527:9250":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7613:9546":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:817:7954":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:9762:37036":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:46056:10260":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"21:276:2355":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"6:507:10482":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:42928:7823":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:20989:30645":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:3441:7912":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"18:727:7561":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12496:8667":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:43916:6546":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12554:8674":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:636:8231":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4506:10781":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6961:11409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13816:8984":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11535:7599":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"19:0:1100":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11270:8069":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"4:9454:7970":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"4:12007:404":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"18:599:37041":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"4:8970:34308":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:12203:6577":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:6012:11158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4824:10888":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:2487:10458":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:1104:7960":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:41655:201":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:6047:11179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:489:10474":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:14324:9135":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1413:7118":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:1428:7747":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:7679:11446":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"4:7718:7758":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:3034:2368":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:12123:8576":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12598:8682":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12621:8687":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"11:483:152":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4847:10902":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:2165:7719":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:40303:8003":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:4889:9261":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:13024:8761":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:6468:2240":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:11024:7480":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:7768:7709":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6499:7692":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:9886:7884":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:22302:30087":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11023:8462":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:2904:11990":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:5130:11043":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:2161:637":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:1604:10603":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12074:8569":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:14335:9139":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:3232:9202":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:43575:6582":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:7269:37030":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:39604:30088":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:8686:24277":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"4:9143:9959":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:11547:8504":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:3147:34249":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:7862:9562":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:6100:11204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4375:10702":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11490:8502":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:7002:7469":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13162:8789":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:1537:10559":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:42414:6617":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:1778:2286":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"11:666:7118":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12513:8670":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"11:1846:2289":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:3219:36959":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:6334:183":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11735:10143":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:12030:1612":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:14522:9185":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"11:829:17497":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:40107:6547":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"4:9027:34524":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:22415:10166":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:2914:11992":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:40635:8033":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4783:10869":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10771:8423":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:45701:10247":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:3232:7911":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:8848:24282":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:21325:11954":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:8029:30904":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:12888:8739":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"15:306:7934":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:1826:186":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:7515:2242":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:7985:2243":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:2866:11985":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:9985:7887":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:8993:9955":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:11954:6603":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:8239:9510":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:3023:11998":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:9945:7588":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:256:8244":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:43593:6584":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"20:383:2310":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"17:14110:9062":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"11:868:9712":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:43525:8067":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:2368:2240":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:7492:12074":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:149:7381":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:2744:9221":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13949:9016":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:22723:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"12:0:2227":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:15:2199":{"crate_id":1,"path":["core","write"],"kind":"macro"},"9:450:23209":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"11:324:7943":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:822:9706":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:42088:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:10430:8390":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:9574:37040":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:3913:17582":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:1734:10679":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:7902:9878":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:8050:9599":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:8821:7763":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"16:6425:9358":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"11:2317:7118":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:43395:8055":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6376:24221":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"9:177:7736":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"15:288:7929":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:2850:11815":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:2178:7899":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:1075:7889":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4860:10907":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:11453:9828":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12196:8590":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:8271:9926":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:4612:11311":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:10933:9844":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"11:2494:2254":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"8:0:2223":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:10949:8458":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:6818:9420":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:11135:9948":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:12014:1478":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"0:46:658":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"1:40874:8043":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:7111:7988":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:46202:10264":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:358:9803":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:21190:30258":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"5:880:7402":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:11211:159":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:7992:12072":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"22:966:7380":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"16:7884:24229":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:32136:7996":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"10:36:10460":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:2895:7450":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12208:8591":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:3223:9822":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:2939:11995":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:6128:11211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:644:8215":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:2930:133":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:14001:9032":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:1576:10584":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:3065:8257":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4676:10843":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11910:8551":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:8205:24230":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:5384:24216":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11261:8483":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:2864:9226":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:4045:106":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:30321:2281":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:6403:8041":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:42949:10204":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:4640:6539":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:12149:2258":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:2696:9219":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:10139:24317":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:13778:8979":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:6545:9368":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:6101:7418":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:43934:6544":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:22010:17545":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:12015:1510":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:10059:8367":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:10924:7221":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:41783:6614":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:4136:7977":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:22317:10154":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2776:245":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:40465:8025":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:9003:24287":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:6873:7468":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:21443:17205":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:6813:11330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"22:948:28273":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"4:10802:9827":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:47336:10284":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:6485:7691":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:40481:8027":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"11:2074:9713":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10292:7569":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:6700:11291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:0:2232":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7534:9235":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"7:31:23195":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:1672:1159":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:40119:6548":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"11:389:7388":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"21:198:2358":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"4:364:9804":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:2544:141":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"23:0:2333":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"1:40199:10183":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:10718:9971":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:6915:272":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:46278:10267":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:12209:6576":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:6139:7460":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:922:7751":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4449:10753":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:40859:8041":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:13575:8928":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4830:10891":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6721:24223":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:261:7394":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:5138:7426":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:13028:150":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13890:9005":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:1986:204":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12790:8709":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13135:8787":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12373:8624":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:41556:30065":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:47970:10297":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10750:7592":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:475:7952":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:11381:8493":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:7453:9800":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:5723:9848":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:7355:34816":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:21449:17207":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:12021:801":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:6764:11319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10240:7588":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:2943:11996":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:8331:9835":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:10588:8406":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:6401:7690":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:21791:17210":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:1516:218":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:7619:9805":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:992:9453":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:548:10511":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12062:8566":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:6047:7455":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:9137:7582":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:43505:8065":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:4490:453":{"crate_id":1,"path":["core","char"],"kind":"module"},"5:6335:17686":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:10468:7590":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:7223:2284":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"21:320:8191":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"16:7090:9452":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:40092:6545":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12576:8681":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:276:2253":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:11030:7481":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:9051:24265":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:2907:9228":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:14420:9161":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:7490:251":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:707:6577":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:3583:7118":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:11931:6606":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"14:202:2239":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:13554:8920":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6346:7687":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:7568:7701":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:8115:9605":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:207:7393":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:42912:7820":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:853:7747":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:533:10502":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:22822:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:6560:7383":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:13451:8834":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:7668:11445":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:4365:7420":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:4613:9253":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:2461:10454":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:9416:6636":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:12086:8570":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:678:258":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:11430:7484":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:32115:9510":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:8205:7972":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"13:110:37022":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:13083:2283":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"18:719:8237":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:2548:9213":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:7692:11450":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:9175:11467":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4932:10938":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:6711:11296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:14514:9182":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11749:6579":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:582:7816":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:1664:10650":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:30327:6714":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:10820:34533":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"11:841:9709":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:22:734":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:641:9809":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:43900:6599":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:4034:7394":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:7542:2369":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:21278:17217":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:10451:7747":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:40072:6554":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:4860:10129":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:4914:10927":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"11:1850:2240":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:6804:11327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:8978:24286":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:2214:134":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:10596:8052":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"14:7:9698":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:9459:7475":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:5712:7656":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:40645:8034":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11719:24292":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:22012:17206":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13174:8790":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:4557:9251":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:43603:6583":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:6228:11235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:39190:12005":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"4:5105:211":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"16:6386:9354":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:2838:110":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:9564:7879":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:9447:134":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:8794:24280":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:2143:9787":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:46108:10262":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11306:7596":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:1931:706":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"16:2596:9215":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:8938:9950":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:7745:9873":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"5:3570:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:42049:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:2931:11993":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:10476:6590":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:9250:721":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"16:6279:7682":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"22:470:7369":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"17:13422:8814":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:7272:36960":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10478:7222":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:11337:24410":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:40381:8011":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:9531:37035":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:2225:36963":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:2644:9217":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:5123:11040":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"4:5602:228":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:22888:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:8883:17682":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:918:7750":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12154:8585":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:9752:7882":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:1639:10631":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:907:2286":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"4:416:182":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"11:772:7749":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:5217:210":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:3244:262":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10547:8403":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:5680:7799":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:542:10508":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:2245:7755":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6792:9419":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:10227:8381":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:638:9807":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12658:8691":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:7713:7759":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"4:1564:2240":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:2504:9211":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:5648:9277":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"22:43:28270":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"6:6934:11403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:10227:11723":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:1507:10546":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:10966:7763":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"4:1044:9453":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:5403:7565":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:14076:9054":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:1475:7749":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2992:12004":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11086:7916":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:3709:9828":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:4144:17607":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:43587:1981":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"16:6893:7652":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:5059:9836":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:7702:11452":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:9088:159":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:8594:24266":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:9878:7805":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4955:10948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:11991:34537":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:7041:9444":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:46156:10263":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:5867:11080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12111:8575":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:1013:7394":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:3461:9238":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"18:690:8234":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:11155:7806":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:12785:162":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:9623:6618":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:483:10471":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5140:11044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:11267:7482":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:3255:12001":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:9994:7503":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:5152:11049":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:1557:7118":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:40505:8030":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:40852:8040":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7391:24226":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:6827:2294":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:2925:9473":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:4360:9834":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:8541:9947":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:46453:10272":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4698:10845":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:1568:2286":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"15:327:7713":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:6270:7500":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:0:880":{"crate_id":6,"path":["libc"],"kind":"module"},"1:9276:7802":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:7513:9542":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:44391:127":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:11971:8565":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13973:9024":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12531:8671":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:8192:6590":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:3424:9826":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:8895:24283":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:10023:7881":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:3654:2289":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7286:2289":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:11514:9830":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13274:7596":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:43891:6586":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:4941:17641":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"11:1869:7956":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"11:1145:9719":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:40312:7794":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13546:8917":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:7680:176":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:10558:8051":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:3406:9922":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:4005:17588":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:9488:37039":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:1764:660":{"crate_id":4,"path":["std","env"],"kind":"module"},"16:8072:9600":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:5612:9231":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:32122:10174":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:21234:17216":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"4:4468:17610":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5068:11009":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10420:8298":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"18:652:8215":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:41859:2289":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:44052:10220":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9780:7883":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:13710:8970":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11281:7595":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4523:10787":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6114:11206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:11365:7991":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"9:237:10204":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:6621:241":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:2551:265":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"5:1444:2289":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5910:11098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:44144:10147":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4755:10856":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:6171:7769":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:2394:17540":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"18:699:7560":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:4068:12021":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:5866:9293":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:9873:12111":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:3565:7913":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"20:223:8195":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"4:12026:1616":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"18:113:7868":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:14378:9155":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:8432:10204":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"4:8455:9941":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12997:8757":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:43617:6590":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:3038:136":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:7846:7774":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"16:5727:7659":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:10698:8420":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:10669:8053":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6332:7685":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:12979:111":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:1184:7890":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:14269:9116":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:9972:8365":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:7555:7471":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:3225:9823":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"11:2473:7939":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:2255:100":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:39237:7997":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:42712:69":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:30357:30069":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:11162:8471":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:45926:10256":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7708:7707":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:1275:9715":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:7604:11430":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:2479:37020":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:40183:30086":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7474:9531":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:12033:1219":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:4721:17601":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:7015:9443":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7582:7702":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:40883:7501":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:2216:9816":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4:1083":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:3326:12007":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12711:8699":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10366:8386":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:9277:7586":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:40334:7797":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5017:9265":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:1549:7418":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:8167:9612":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:3262:9824":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:8211:7974":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11358:24411":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:1120:35426":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:4949:9263":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:12020:695":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:8524:7118":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:10301:109":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:40005:6545":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:43433:8060":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:2406:9207":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:6123:7457":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:5358:9837":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"17:2209:7902":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"0:119:1798":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"1:1635:636":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:2498:17545":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:7423:9797":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:45886:10254":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11235:8482":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11048:8464":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"21:313:2357":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"17:11886:8537":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13758:7617":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:4283:10125":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5085:11017":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:6263:11260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:871:7748":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"14:160:9698":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:727:152":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:629:9783":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:2409:2161":{"crate_id":4,"path":["std","io"],"kind":"module"},"18:614:37042":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:7496:12073":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:11991:7603":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:7515:9984":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:2171:11954":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:6243:9340":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:7406:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:40032:30066":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10165:24318":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"9:426:23211":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:1429:154":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:8265:17608":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"20:93:2317":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"5:6514:7394":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:13567:8927":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:48034:10301":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11617:8505":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:9207:7584":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:41615:10137":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:4428:10745":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:3185:9821":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:2935:11994":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6189:9335":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:40166:104":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:736:28248":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:0:2230":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6901:7695":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:46086:10261":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:8179:8033":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:41932:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:10135:9962":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:12422:8649":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:10661:8417":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:42428:6620":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:1092:9717":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:14118:9063":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"11:1051:23288":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:11147:34530":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:7294:218":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:1718:10674":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:6817:2293":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:44428:12160":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:6666:7394":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:681:8232":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7828:9558":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:1761:9992":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:9633:6622":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:14163:9073":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:40100:6546":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:2277:108":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:44628:10241":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6741:11318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:10453:7476":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:622:6753":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:4436:6455":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:43909:6598":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:4921:9262":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:6898:11384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:5982:11135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:1546:10565":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4578:10815":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:5408:9843":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"6:569:10522":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:2832:9225":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:1983:205":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:6583:9369":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:6274:228":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:7597:37026":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:8963:9951":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:44653:10242":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:42937:155":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:11074:8468":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13632:8962":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:261:8245":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7054:9447":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:45963:10258":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:9627:6620":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:5474:7418":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"22:636:7857":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"18:538:7555":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5088:9267":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:43871:6585":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"5:3802:2286":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:646:17482":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:21397:17203":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"4:2223:17527":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"17:12671:8428":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11407:24288":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:45677:10246":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5969:11129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:8195:9613":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}