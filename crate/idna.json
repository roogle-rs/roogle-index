{"root":"0:0:1833","crate_version":"0.4.0","includes_private":false,"index":{"1:12516:348":{"id":"1:12516:348","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12038:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12613:35864":{"id":"1:12613:35864","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:6609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2276-0:170:1811":{"id":"b:1:2276-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:28322"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12550:1992":{"id":"1:12550:1992","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41686:202","prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:6609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8669:2421-0:170:1811":{"id":"a:1:8669:2421-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[703,0],"end":[711,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:751"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12554:2137":{"id":"1:12554:2137","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12199:2295","`DoubleEndedIterator`":"1:7581:128","prim@char":"4:12021:457","str::split_whitespace":"1:12532:28972","str::rsplit":"1:12560:32878"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43646:6623","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12599:35860":{"id":"1:12599:35860","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12526:35850":{"id":"1:12526:35850","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12027:1543","crate::ops::IndexMut":"1:3089:2283","str::slice_unchecked":"1:12525:35849"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12566:35853":{"id":"1:12566:35853","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12199:2295","str::split":"1:12554:2137","prim@char":"4:12021:457","str::split_terminator":"1:12563:35852"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43714:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:6609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12625:34002":{"id":"1:12625:34002","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39633:28468","Self::is_ascii":"1:12624:1993"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39633:28468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:36529":{"id":"5:5535:36529","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:1810":{"id":"0:161:1810","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[512,0],"end":[518,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:8670:2420-0:161:1810","a:1:2788:249-0:161:1810","a:1:2845:2400-0:161:1810","a:1:2805:259-0:161:1810","a:1:8669:2421-0:161:1810","b:1:2589-0:161:1810","b:1:2583-0:161:1810","b:1:2273-0:161:1810","b:1:2579-0:161:1810","b:1:2276-0:161:1810","b:1:2594-0:161:1810","b:1:3424-0:161:1810","b:5:682-0:161:1810","0:169","0:167","0:92"]}}},"a:1:2845:2400-0:170:1811":{"id":"a:1:2845:2400-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2582:2154":{"id":"1:2582:2154","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2556:143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:28325":{"id":"5:686:28325","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12537:29742":{"id":"1:12537:29742","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12513:33999":{"id":"1:12513:33999","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11759:6612"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2630:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12540:2116":{"id":"1:12540:2116","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12616:35865":{"id":"1:12616:35865","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2593:1627":{"id":"1:2593:1627","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2583-0:170:1811":{"id":"b:1:2583-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12525:35849":{"id":"1:12525:35849","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12027:1543","str::slice_mut_unchecked":"1:12526:35850","crate::ops::Index":"1:3085:2282"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[537,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1824","0:96:2080","0:97:1825","0:98:2115","0:99:2084","0:100:1820","0:102:1832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2805:259-0:155:1812":{"id":"a:1:2805:259-0:155:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:109:751":{"id":"0:109:751","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[704,4],"end":[710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12581:2091":{"id":"1:12581:2091","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12199:2295","`DoubleEndedIterator`":"1:7581:128","prim@char":"4:12021:457","str::rmatches":"1:12584:35854"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43850:6627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12563:35852":{"id":"1:12563:35852","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12199:2295","str::split":"1:12554:2137","prim@char":"4:12021:457","`DoubleEndedIterator`":"1:7581:128","str::rsplit_terminator":"1:12566:35853"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43696:6624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:249-0:170:1811":{"id":"a:1:2788:249-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12517:2015":{"id":"1:12517:2015","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41686:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2589-0:155:1812":{"id":"b:1:2589-0:155:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:95:1824":{"id":"0:95:1824","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[539,4],"end":[542,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5795:1602":{"id":"5:5795:1602","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12505:879":{"id":"1:12505:879","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12021:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12578:32885":{"id":"1:12578:32885","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:6609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12523:29531":{"id":"1:12523:29531","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2598:1625":{"id":"1:2598:1625","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:249-0:161:1810":{"id":"a:1:2788:249-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2805:259-0:170:1811":{"id":"a:1:2805:259-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8670:2420-0:155:1812":{"id":"a:1:8670:2420-0:155:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2583-0:155:1812":{"id":"b:1:2583-0:155:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12543:2117":{"id":"1:12543:2117","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:6609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12560:32878":{"id":"1:12560:32878","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12199:2295","`DoubleEndedIterator`":"1:7581:128","prim@char":"4:12021:457","str::split":"1:12554:2137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43664:6621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:6609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2805:259-0:161:1810":{"id":"a:1:2805:259-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2583-0:161:1810":{"id":"b:1:2583-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12604:35863":{"id":"1:12604:35863","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:36526":{"id":"5:5520:36526","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2286","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2286","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1833":{"id":"0:0:1833","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1808","0:114-0:161:1810","0:115-0:170:1811","0:116-0:155:1812","0:117:1818","0:118:1823","0:119:1831"],"is_stripped":false}}},"0:86:1039":{"id":"0:86:1039","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1831":{"id":"0:119:1831","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[521,0],"end":[535,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2630:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:87:2144":{"id":"0:87:2144","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1039","0:87:2144","0:88:1820","0:91:1832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12597:35859":{"id":"1:12597:35859","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1820":{"id":"0:88:1820","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3426:1640":{"id":"1:3426:1640","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39446:10209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12510:35847":{"id":"1:12510:35847","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12508:35846"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:725":{"id":"0:107:725","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[649,4],"end":[700,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2021":{"id":"0:44:2021","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12629:35868":{"id":"1:12629:35868","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4584:35868"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43945:6579","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:161:1810":{"id":"b:5:682-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:7779","5:685:28324","5:686:28325"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12593:35857":{"id":"1:12593:35857","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2115":{"id":"0:98:2115","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[557,4],"end":[560,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:36527":{"id":"5:5524:36527","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:155:1812":{"id":"b:1:2594-0:155:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12508:35846":{"id":"1:12508:35846","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8670:2420-0:161:1810":{"id":"a:1:8670:2420-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12569:32880":{"id":"1:12569:32880","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12021:457","self::pattern":"1:12199:2295","str::rsplitn":"1:12572:32882"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43750:6626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5793-0:170:1811":{"id":"b:5:5793-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5537:2351":{"id":"5:5537:2351","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:170:1811":{"id":"b:1:2594-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2579-0:161:1810":{"id":"b:1:2579-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2154"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12532:28972":{"id":"1:12532:28972","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12533:28966"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43920:6619","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2276-0:155:1812":{"id":"b:1:2276-0:155:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:28322"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12590:35856":{"id":"1:12590:35856","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12199:2295","`DoubleEndedIterator`":"1:7581:128","prim@char":"4:12021:457","str::match_indices":"1:12587:35855"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43814:6630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:6609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:34059":{"id":"5:5538:34059","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12627:34005"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12534:7968":{"id":"1:12534:7968","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43900:6618","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2276-0:161:1810":{"id":"b:1:2276-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:28322"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12535:35851":{"id":"1:12535:35851","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43910:6620","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:2084":{"id":"0:99:2084","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[563,4],"end":[566,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1825":{"id":"0:97:1825","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[551,4],"end":[554,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1812":{"id":"0:155:1812","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:8670:2420-0:155:1812","a:1:2788:249-0:155:1812","a:1:2845:2400-0:155:1812","a:1:2805:259-0:155:1812","a:1:8669:2421-0:155:1812","b:1:2589-0:155:1812","b:1:2583-0:155:1812","b:1:2273-0:155:1812","b:1:2579-0:155:1812","b:1:2276-0:155:1812","b:1:2594-0:155:1812","b:1:3424-0:155:1812","0:159"]}}},"0:7:1808":{"id":"0:7:1808","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[316,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1977","0:24:590","0:44:2021","0:46:662"],"is_stripped":false}}},"b:1:2594-0:161:1810":{"id":"b:1:2594-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12506:2121":{"id":"1:12506:2121","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:155:1812":{"id":"b:1:3424-0:155:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:112:725":{"id":"0:112:725","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[717,4],"end":[719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12601:35862":{"id":"1:12601:35862","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12224:6608","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8669:2421-0:155:1812":{"id":"a:1:8669:2421-0:155:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2275:2189":{"id":"1:2275:2189","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:662":{"id":"0:46:662","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[226,0],"end":[231,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2630:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:91:1832":{"id":"0:91:1832","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1812":{"id":"0:116-0:155:1812","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1812","glob":false}}},"1:12584:35854":{"id":"1:12584:35854","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12199:2295","`DoubleEndedIterator`":"1:7581:128","prim@char":"4:12021:457","str::matches":"1:12581:2091"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43868:6628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:6609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12607:2139":{"id":"1:12607:2139","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12610:32886":{"id":"1:12610:32886","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:6609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12622:35867":{"id":"1:12622:35867","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12160:134","`FromStr`":"1:12159:2291"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12159:2291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12159:2291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12504":{"id":"1:12504","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12505:879","1:12506:2121","1:12507:35845","1:12508:35846","1:12510:35847","1:12513:33999","1:12514:35848","1:12515:349","1:12516:348","1:12517:2015","1:12519:29529","1:12521:29530","1:12523:29531","1:12525:35849","1:12526:35850","1:12527:32868","1:12528:32869","1:12529:1979","1:12530:10251","1:12531:1998","1:12532:28972","1:12533:28966","1:12534:7968","1:12535:35851","1:12536:28967","1:12537:29742","1:12540:2116","1:12543:2117","1:12546:6540","1:12550:1992","1:12554:2137","1:12557:28965","1:12560:32878","1:12563:35852","1:12566:35853","1:12569:32880","1:12572:32882","1:12575:32884","1:12578:32885","1:12581:2091","1:12584:35854","1:12587:35855","1:12590:35856","1:12593:35857","1:12595:35858","1:12597:35859","1:12599:35860","1:12600:35861","1:12601:35862","1:12604:35863","1:12607:2139","1:12610:32886","1:12613:35864","1:12616:35865","1:12619:35866","1:12622:35867","1:12624:1993","1:12625:34002","1:12626:34004","1:12627:34005","1:12628:34006","1:12629:35868","1:12631:12061","1:12632:35869"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12575:32884":{"id":"1:12575:32884","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2845:2400-0:155:1812":{"id":"a:1:2845:2400-0:155:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12527:32868":{"id":"1:12527:32868","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12528:32869"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:36526","5:5521:2146","5:5524:36527","5:5527:36528","5:5535:36529","5:5536:36530","5:5537:2351","5:5538:34059","5:5539:34060"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5536:36530":{"id":"5:5536:36530","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2286","`String`":"5:7490:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2286","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12530:10251":{"id":"1:12530:10251","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12021:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43622:6617","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2589-0:161:1810":{"id":"b:1:2589-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12557:28965":{"id":"1:12557:28965","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12015:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2080":{"id":"0:96:2080","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[545,4],"end":[548,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2579-0:155:1812":{"id":"b:1:2579-0:155:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2154"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[714,0],"end":[714,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","cause","provide","description"],"trait":{"name":"Error","id":"1:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:170:1811":{"id":"0:170:1811","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[602,0],"end":[615,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8670:2420-0:170:1811","a:1:2788:249-0:170:1811","a:1:2845:2400-0:170:1811","a:1:2805:259-0:170:1811","a:1:8669:2421-0:170:1811","b:1:2589-0:170:1811","b:1:2583-0:170:1811","b:1:2273-0:170:1811","b:1:2579-0:170:1811","b:1:2276-0:170:1811","b:1:2594-0:170:1811","b:1:3424-0:170:1811","b:5:5793-0:170:1811","0:183","0:110","0:106","0:108","0:111"]}}},"1:2592:135":{"id":"1:2592:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:2585:751":{"id":"1:2585:751","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2273-0:155:1812":{"id":"b:1:2273-0:155:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2189"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[522,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12514:35848":{"id":"1:12514:35848","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12515:349":{"id":"1:12515:349","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12516:348","`u8`":"4:12038:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:685:28324":{"id":"5:685:28324","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12624:1993":{"id":"1:12624:1993","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12531:1998":{"id":"1:12531:1998","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43632:6616","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12521:29530":{"id":"1:12521:29530","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12632:35869":{"id":"1:12632:35869","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4582:35869"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43963:6577","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:161:1810":{"id":"b:1:3424-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:1832":{"id":"0:102:1832","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22:1977":{"id":"0:22:1977","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12536:28967":{"id":"1:12536:28967","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43938:6631","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:34060":{"id":"5:5539:34060","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12628:34006"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12626:34004":{"id":"1:12626:34004","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[648,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:118:1823":{"id":"0:118:1823","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12595:35858":{"id":"1:12595:35858","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12628:34006":{"id":"1:12628:34006","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12533:28966":{"id":"1:12533:28966","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12532:28972"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43929:6632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2273-0:161:1810":{"id":"b:1:2273-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2189"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5521:2146":{"id":"5:5521:2146","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2273-0:170:1811":{"id":"b:1:2273-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2189"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115-0:170:1811":{"id":"0:115-0:170:1811","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1811","glob":false}}},"a:1:2788:249-0:155:1812":{"id":"a:1:2788:249-0:155:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2579-0:170:1811":{"id":"b:1:2579-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:2154"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:114-0:161:1810":{"id":"0:114-0:161:1810","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1810","glob":false}}},"1:12572:32882":{"id":"1:12572:32882","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12021:457","str::splitn":"1:12569:32880","self::pattern":"1:12199:2295"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43768:6625","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:6609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:461":{"id":"0:168:461","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:170:1811":{"id":"b:1:3424-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:590":{"id":"0:24:590","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6915:276","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2278:28322":{"id":"1:2278:28322","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2597:135":{"id":"1:2597:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32104:10489","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12507:35845":{"id":"1:12507:35845","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2589-0:170:1811":{"id":"b:1:2589-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12529:1979":{"id":"1:12529:1979","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12021:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43616:2014","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8670:2420-0:170:1811":{"id":"a:1:8670:2420-0:170:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12519:29529":{"id":"1:12519:29529","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41686:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1818":{"id":"0:117:1818","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12619:35866":{"id":"1:12619:35866","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:6609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8669:2421-0:161:1810":{"id":"a:1:8669:2421-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12528:32869":{"id":"1:12528:32869","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12527:32868"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:36528":{"id":"5:5527:36528","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[716,0],"end":[720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:100:1820":{"id":"0:100:1820","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[569,4],"end":[573,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12600:35861":{"id":"1:12600:35861","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12546:6540":{"id":"1:12546:6540","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41686:202","prim@char":"4:12021:457","self::pattern":"1:12199:2295"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12587:35855":{"id":"1:12587:35855","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12199:2295","`DoubleEndedIterator`":"1:7581:128","prim@char":"4:12021:457","str::rmatch_indices":"1:12590:35856"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43796:6629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:7779":{"id":"5:684:7779","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:2845:2400-0:161:1810":{"id":"a:1:2845:2400-0:161:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12631:12061":{"id":"1:12631:12061","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4585:12061"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43954:6578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12627:34005":{"id":"1:12627:34005","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:8299:9960":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:43525:8097":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4755:10888":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:645:17523":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:3389:7451":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:10366:8419":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:1758:7998":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:11167:7839":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"4:893:2273":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:43664:6621":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:5489:9877":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"6:1691:10695":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:9003:24329":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:2487:10490":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13693:9002":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:11535:7632":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:12021:457":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:9455:37095":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:5384:9874":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:7892:7792":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:41735:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:5673:9263":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:7037:8070":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:22319:28487":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:654:18214":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"4:10147:9994":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:629:9816":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:44146:10254":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:2209:7935":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:30948:7849":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:6135:7490":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:10720:6626":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5023:11022":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:40903:8076":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"20:327:8232":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"1:44030:12194":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:2550:78":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:7371:11450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:13739:9011":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:12543:8706":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4830:10923":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:7679:11478":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:41663:10171":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:12042:1645":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"11:703:7783":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:2037:7808":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:481:8246":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12252:8641":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:4847:10934":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:4395:7451":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:23070:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:43768:6625":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:1546:10597":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:10823:32401":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:12074:8602":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:40061:28467":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:22971:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"15:394:23363":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:5044:11034":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:10570:7510":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"18:0:2265":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4686:10876":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:596:10569":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:1718:10706":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:4222:6660":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:489:10506":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:12015:6633":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:4428:7453":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:6346:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6696:9427":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:2641:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"18:538:7588":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:47903:10323":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:4418:7526":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:9896:24342":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:5997:17775":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:9580:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:44457:12201":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:42676:11583":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:3915:9277":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:0:1835":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"16:6171:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:3724:9862":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:7090:9485":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:4294:10157":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"11:1635:7423":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:7995:2276":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:8198:6616":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"18:564:7590":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:4921:9295":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:12019:408":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"16:2881:9260":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:3888:9276":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:14460:9205":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13676:9000":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:11805:7521":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:2832:9258":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:4447:6488":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"18:681:8265":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:22839:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:10486:6623":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11389:7955":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2878:12026":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:6800:17727":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:1484:7987":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:849:7780":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:30316:2313":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:42314:7852":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4584:10850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:1743:664":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:43696:6624":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:5328:7427":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:21590:17254":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"11:423:7980":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4968:10990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:14448:9203":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:41872:7151":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:4529:10821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:11505:9862":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:8444:10236":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:2548:9246":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:1428:7780":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:2012:7929":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:3600:9272":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:8969:113":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:2795:2399":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:40113:6577":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:12496:8700":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:1838:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"0:117:1818":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"1:46329:10300":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:1514:10581":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:4179:7826":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:40453:8053":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"4:7745:9906":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"17:13966:9056":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:4719:9288":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:5138:7459":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:555:10546":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6352:7722":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:2933:23399":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:12041:1648":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:40162:6583":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:7621:24269":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:6798:2325":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6386:9387":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:7639:11470":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:7323:2322":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:7423:9830":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7436:7681":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"22:669:7584":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"4:5435:111":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:14335:9172":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:45752:10280":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:5976:7459":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"21:145:2046":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"16:2596:9248":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:4017:17630":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:9624:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:4506:10813":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10494:7611":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11358:24453":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:13298:8845":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:3955:17626":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:43910:6620":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10520:8434":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:7869:137":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"16:4745:9289":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:5111:11066":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:10641:6621":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"0:119:1831":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"16:8050:9632":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:2317:7151":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:9574:37089":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:256:8277":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:11601:9895":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:4148:8010":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:8376:17687":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:9959:7919":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:3261:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:5976:232":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:42941:7853":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:483:10503":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:10960:32404":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10023:7914":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:41455:10168":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:6499:7725":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:14514:9215":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12778:8741":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:6817:2326":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:10165:24360":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:43868:6628":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:12036:804":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:12824:29738":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:8137:7810":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"16:7492:9572":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:1562:9754":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13906:9041":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:22872:201":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10214:7927":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:9119:9890":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:5404:9875":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4745:10881":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:755:8276":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:40200:10214":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:880:7782":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:11351:8521":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:13202:8827":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:868:9745":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:42436:6651":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:3085:2282":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:400:8279":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:3666:2322":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:12280:8651":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13851:9027":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:8863:9879":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:3977:17628":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:5798:7694":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:7862:9595":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13148:8821":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:7067:9483":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11098:7950":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:6798:11357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:9060:7813":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:14083:9088":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:5009:11016":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:4169:8011":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:8659:24306":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:40195:105":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:2593:7478":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:867:7781":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:2862:11847":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:2810:9257":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6545:9401":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:719:8270":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:2904:12029":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:5322:9302":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11886:8570":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:10814:9860":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:6915:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7513:9575":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:44224:12195":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:5634:2325":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:40136:6580":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"4:8841:7151":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:2321:9236":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:7453:9833":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:40410:8044":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:1275:9748":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:6868:11399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:6238:7494":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:9607:7913":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:2909:9501":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:12432:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:2260:9746":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:6943:11438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"22:1034:28316":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"1:21328:17253":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:1913:19206":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:8686:24319":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:46231:10296":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:9701:7914":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"11:357:7419":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:11745:10175":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:12003:32409":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:1734:10711":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13567:8960":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:9012:7801":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11062:7947":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:2419:2194":{"crate_id":4,"path":["std","io"],"kind":"module"},"17:10575:8438":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:14308:9164":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4449:10785":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:14316:9167":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:7992:9912":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:0:2264":{"crate_id":17,"path":["object"],"kind":"module"},"17:11261:8516":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:41760:2322":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:12213:6610":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:2744:9254":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:42443:6650":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:10794:137":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:542:10540":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10370:7936":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6513:9395":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:6599:7499":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:5829:11085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:9945:7621":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:9350:7620":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:10478:7255":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:7437:28488":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:39363:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:113:7901":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:4824:10920":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:47959:10325":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"0:44:2021":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"11:1036:9748":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:2511:9850":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:9005:9987":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:1644:640":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:10754:11505":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:7262:7438":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:13685:9001":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4480:10803":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:22029:17247":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"10:0:2258":{"crate_id":10,"path":["adler"],"kind":"module"},"16:2472:9243":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:5830:9319":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:32252:6487":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:6973:12118":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13914:9043":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:40363:7830":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:42957:7856":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:1750:12010":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:40034:6578":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"11:1541:9753":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:32140:9906":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"16:6346:7720":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:11186:9890":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:7736:9582":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:44377:6603":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:6318:9383":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:3050:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:10534:8435":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:9099:90":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:3417:9955":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:10772:10008":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:7552:2402":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:41752:7780":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:11042:7514":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:40121:6578":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4543:10829":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:22806:199":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"11:427:7981":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"11:1687:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11281:7628":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:9172:7616":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13215:8828":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:7544:9577":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:4039:17634":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:2864:9259":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:9848:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:13040:8796":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"15:288:7962":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:10529:6633":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"11:785:2273":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"15:0:2262":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:5891:11128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:43632:6616":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11971:8598":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:42978:10236":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:7581:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"14:7:9731":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:0:538":{"crate_id":1,"path":["core"],"kind":"module"},"13:0:2255":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:10929:8490":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12876:8770":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"13:226:7750":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:11279:7515":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:14469:9209":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:41888:2322":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"7:78:23244":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4566:10841":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:3721:9861":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:44584:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10383:8420":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:2845:2400":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:9639:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:2962:36982":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:8191:8066":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"9:0:2257":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:389:7421":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:9711:37092":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:5861:2273":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6915:7729":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:4365:7453":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:6666:11304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:3032:9269":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:48063:10333":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:9207:7617":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10962:8492":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:4666:10874":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:5760:24260":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12790:8742":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:880:7435":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:9187:11499":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6189:9368":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:22198:10184":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:40148:6581":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:12851:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:44682:10274":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:11377:8024":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:8982:32139":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:6687:9426":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:11048:8497":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"20:93:2350":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"1:21004:29268":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:1874:6784":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:10465:7509":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:3461:9271":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:2202:17568":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:6711:11328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:8819:9980":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"18:80:7895":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:43181:10240":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:48155:10337":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"11:2334:7780":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:13973:9057":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:21583:17586":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:1507:10578":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10698:8453":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6261:7684":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:536:7671":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:46185:10295":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13259:8835":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:7702:11484":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9094:83":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:11991:7636":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:11381:8526":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:45955:10288":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:5146:11078":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"21:198:2391":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"16:2284:23372":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:9137:7615":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12196:8623":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:35:2318":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:13045:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"22:948:28315":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"1:43452:8092":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:14110:9095":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6913:11423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:21398:17586":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:1664:10682":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:10097:8402":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:7360:37086":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4616:10863":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11687:24333":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:276:2286":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:10932:9905":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:39219:12046":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:42759:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:9090:246":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:42704:116":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:42195:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11280:8102":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:3049:23401":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:39385:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:13826:9018":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:8394:9971":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:11036:7513":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"19:0:1133":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:8195:9646":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:922:9739":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:45937:10287":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5859:11110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:14221:9148":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:9100:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:40912:7534":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:6222:11266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:6587:2322":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:44669:9759":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:43200:8082":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:8002:12113":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"18:507:8248":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:9242:7618":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:40275:7527":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:43473:8094":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:7539:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:727:7594":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"14:202:2272":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:21466:17248":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:1639:10663":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:22446:10199":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:11344:9892":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:909:7987":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:5632:8043":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:11407:24330":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:1505:7784":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:644:8248":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6456:9393":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:2850:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"4:5614:232":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:22458:11848":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:434:8280":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:6083:23371":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:9025:9988":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:9599:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6059:11216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:1013:7427":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:13546:8950":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:4462:9281":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"18:636:8264":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:3441:7945":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:8343:9868":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:11247:8101":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13422:8847":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:47365:10316":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:40212:28488":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:707:6610":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6120:11241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:207:7426":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6107:11237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:10832:32412":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"13:110:37078":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:4053:9278":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6682:11316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:8181:7744":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:14378:9188":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:3492:17584":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:42996:7858":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6753:9440":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"22:386:7414":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"5:7252:2273":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:3196:9854":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:2286:9748":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:3232:9235":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:9762:37094":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:3722:7808":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:1651:6745":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:9521:7911":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:3960:7451":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:45784:10281":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:8713:24320":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:2892:12030":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12062:8599":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:7378:2287":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:46137:10294":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10112:7925":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:2467:10487":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:40485:7834":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11934:8585":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:45730:10279":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6569:7726":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:8927:17725":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:21195:17252":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"16:7041:9477":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:3332:2319":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:2615:9851":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:11617:8538":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:1819:8001":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:10468:7623":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11201:8506":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:1556:7989":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:43442:8091":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:1525:7995":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:8484:17700":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"21:320:8224":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"6:563:10551":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:12033:805":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:9372:7600":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:7690:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:6286:232":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:2225:37060":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:10734:6625":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:6658:11299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12945:8784":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:2943:12034":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:44576:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"16:5363:9303":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"22:636:7890":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"4:4733:17643":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:42078:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:20963:7849":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:2556:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:8848:24324":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6041:24262":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:12123:8609":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13024:8794":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:47865:10322":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12685:8729":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:2630:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:21592:7840":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:75:1647":{"crate_id":1,"path":["core","u32"],"kind":"module"},"17:9650:7602":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:46404:10302":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:25919:279":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:13055:8800":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:47009:10314":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:6136:11246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:41829:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"16:8072:9633":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:6633:245":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:7462:9563":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:3422:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"12:0:2260":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:7284:2417":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:14282:9155":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:39446:10209":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:7014:7502":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12846:8751":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12452:8691":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4998:11011":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:859:2322":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6204:7700":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:6269:8055":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:11215:8510":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11573:7633":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"11:1862:7988":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:42732:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:2969:23400":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"11:666:7151":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:9641:6654":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:2655:9852":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:5866:9326":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:12154:8618":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:784:7430":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10628:8445":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:11815:8557":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:7645:11471":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:2937:9506":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:3246:12041":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:45915:10286":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4535:10824":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10980:7602":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:5696:24259":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:3236:9856":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:7886:126":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"4:7516:8282":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:30356:6747":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4955:10980":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11162:8504":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:47999:10329":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:8002:17615":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"11:122:7417":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"4:2906:7483":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13274:7629":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11761:8550":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:11025:7512":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:9466:8003":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"4:12037:800":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"16:6944:37082":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10265:7928":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:7286:2322":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:30444:28475":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:43534:8098":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5075:11044":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"11:2494:2287":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:42949:7855":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:6872:6513":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:44619:10268":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:4988:7451":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:6837:11373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:47979:10327":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:5088:9300":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:13758:7650":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:2964:11486":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:47819:10321":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:40049:6585":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:5742:9884":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:9631:6650":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:2800:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:43544:8099":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:4949:9296":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:14522:9218":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:4027:17631":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:3318:17612":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:43433:8089":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:43604:6615":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:2183:11995":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:7998:12112":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13949:9049":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:22773:198":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"21:302:2389":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"1:7506:12114":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:40462:8054":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4860:10939":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4783:10901":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:14033:9073":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:3053:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:40475:8056":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:2511:11809":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:40242:12078":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:4558:17669":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4428:10777":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:6485:7724":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:4989:11005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:5960:7494":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10397:7937":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:10637:8446":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:5068:11041":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14145:9103":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:10685:8451":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11742:8547":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:7768:7742":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6243:9373":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:8272:11494":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:2900:12027":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:11729:12158":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10507:8433":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:4585:9285":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"4:11133:7795":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:22432:10198":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:9488:37093":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:8805:7795":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:43462:8093":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:46585:10306":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:12270:12188":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4364:10726":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13085:8803":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:2853:6486":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:14163:9106":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:6901:7728":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6898:11416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:10279:17586":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4578:10847":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"14:221:9738":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:3275:9858":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:43499:8035":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:21207:28677":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:5939:7667":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:12024:1153":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:10070:7539":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:4434:10778":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:2270:102":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:10561:8437":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:23517:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6401:7723":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:8134:9641":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:3919:17625":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:10087:7478":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:7367:35072":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:43850:6627":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:41880:7780":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:2173:641":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:7692:11482":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:1842:7151":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:8882:9981":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:1674:10688":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7102:24267":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:10422:8017":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:2799:256":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:22425:11516":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:4833:32087":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:45992:10290":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:11329:9891":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:21023:29273":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:5104:11063":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6961:11441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13071:8801":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:32104:10489":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:8115:9638":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:43814:6630":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"20:97:2043":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"6:119:17855":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:44210:10255":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:3338:12048":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13188:8824":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:8265:9864":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:495:10509":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12671:8461":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:8039:29393":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4516:10816":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:8787:8017":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4710:10878":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:4527:9283":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"8:0:2256":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:8978:24328":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:7884:24271":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:10087:8028":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:7502:12115":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:9051:24307":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:6100:11236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11191:8283":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:234:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6742:9439":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:4986:9297":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:49979:17261":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:2345:11514":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:40688:8068":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:7922:7808":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:4480:17652":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4401:10754":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:12199:2295":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:5816:7699":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:7997:7806":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:12024:7642":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4764:10893":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:11159:32416":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:10340:8418":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:40077:6584":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:5735:9881":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6425:9391":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:9471:7508":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"4:12022:1665":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:10730:10003":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:2867:9499":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10012:7602":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:588:17521":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:3659:17623":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:11302:8020":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:46307:10299":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:3802:2319":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:533:7475":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:43920:6619":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:22938:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:45640:10275":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:2193:136":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:2373:17581":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"16:6017:24261":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:3173:7151":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11719:24334":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:5727:7692":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:47968:10326":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:2798:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"10:44:7753":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:44235:10256":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:44173:10179":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:11526:9863":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:12204:2284":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:30386:28466":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:14420:9194":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:527:10531":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:11987:7817":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6600:24264":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:39321:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:363:9837":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:47757:10320":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"9:450:23251":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:3065:8290":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:14536:9221":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:5297:127":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"7:31:23237":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:9912:8392":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:8794:24322":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11661:8540":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:9138:9990":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6721:24265":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:45974:10289":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:11327:8519":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:21006:29272":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12621:8720":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12136:8610":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:2696:9252":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:47617:10318":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4914:10959":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:44081:10252":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4698:10877":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"18:660:7903":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:8277:17650":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:10679:8086":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:5420:9876":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"16:2788:9256":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:32151:10206":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:9531:37091":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:4220:9865":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4932:10970":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:42966:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:39341:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:12039:1646":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:4148:7825":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"18:652:8248":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:12025:346":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:5229:214":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"11:1876:7990":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13554:8953":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13575:8961":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:609:8259":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:8536:7151":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:1501:10575":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:12031:697":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:14024:9070":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:324:7976":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:43714:6622":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:41501:7851":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:945:9744":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:21295:17258":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:10748:8105":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:45854:10284":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"21:276:2388":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"6:6128:11243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13816:9017":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12698:8730":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11137:8503":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:3158:35430":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:8857:2322":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:3206:7990":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:43622:6617":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:2361:17575":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:8542:8016":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"6:7616:11464":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:5419:7599":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"9:507:7256":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:12576:8714":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:3022:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:40881:8073":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11244:8538":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:48025:10331":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:8097:9636":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:9998:8371":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:8211:6618":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:9286:7835":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:3474:6590":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:12007:7640":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:46739:10309":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:2692:11492":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"11:992:9486":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:7342:37084":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:11970:10019":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:42450:6652":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:4034:7427":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:5049:9299":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:39281:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:2907:9261":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:7490:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11086:7949":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"11:1051:23330":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:22396:28472":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:11204:11507":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:13007:7490":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:40524:8061":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:7834:8003":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:357:9836":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:3161:35419":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:39180:12049":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:7343:11447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:5574:7688":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:6151:7493":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:4977:10996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7677:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:6079:11224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:7294:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:1538:2322":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12810:8745":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:10330:34834":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:39266:8030":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:48078:10334":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10227:8414":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:5121:9301":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:7634:2018":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"22:966:7413":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"11:2303:9757":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:7388:11459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"20:249:135":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"17:12172:8619":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13667:8996":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:123:17856":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"4:12038:1649":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"6:1576:10616":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:44445:10265":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"21:259:37139":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"1:41608:10230":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"18:671:7908":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6700:11323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5152:11081":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:580:10559":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"0:24:590":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"16:2526:9245":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:4641:9287":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:7015:9476":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7582:7735":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:7567:7504":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:8128:7809":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"17:9277:7619":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:42000:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:5017:9298":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"11:2351:2322":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:1632:10659":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:12040:1647":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:44420:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:9883:12152":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"21:228:2047":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"20:336:2339":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"4:918:7784":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:1494:7783":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:5372:17761":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:40040:10210":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11393:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:40129:6579":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"11:2165:7752":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:41897:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:6415:8074":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"20:257:2044":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"17:11226:8514":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11337:24452":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:9281:29390":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:41812:6647":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:7534:9268":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4854:10936":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11507:24332":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6764:11351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10903:7943":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:10784:7807":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:6467:9394":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:11594:32481":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:48014:10330":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:8217:8005":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:8953:24327":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:10771:8456":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:766:28291":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:7466:9835":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:2644:9250":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:939:9742":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:12219:6609":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10410:8421":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:1773:10024":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:6071:11223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:43512:8096":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:4455:10787":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:8779:2284":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:4004:2273":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"14:40:8585":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:2461:10486":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:1570:10614":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:21808:17251":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"4:6419:9886":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6792:9452":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:43945:6579":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12098:8606":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:4:1116":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:30350:2314":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:7365:11448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:45814:10282":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"18:624:37097":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6929:7730":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:3671:7427":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6804:11359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:7914:9911":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:261:8278":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"14:160:9731":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:43646:6623":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:637:9840":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:3826:9863":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:46283:10298":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:7232:2322":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:3797:9274":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"4:12034:802":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"6:6228:11267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:40101:6587":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:40930:8079":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:7586:7506":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:13890:9038":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5910:11130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:11941:6639":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"14:187:23343":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:6827:2327":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"4:11992:17528":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:9635:6652":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:21460:17246":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4461:10790":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:6972:11794":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4556:10834":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:2579:7480":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:43900:6618":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:14100:9092":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:1521:10583":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:8765:24321":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:41769:2417":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:5123:11072":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:10726:8455":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:1466:7781":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:10292:7602":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:504:7444":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:14269:9149":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:40433:8047":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"9:357:23266":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:6012:11190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:8911:17723":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:12044:1705":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:1935:10027":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:2339:7659":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:47507:10317":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:22334:10186":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13802:9016":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4496:10807":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:48093:10335":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:7504:2274":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:2379:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:45836:10283":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:4373:6661":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:44258:6611":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"9:330:10493":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:41961:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:690:8267":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:22:738":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:7906:9910":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:42457:6653":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11316:8518":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:4344:9279":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:8950:9982":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"11:298:7973":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:4800:10908":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:13981:9058":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:3583:7151":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12225:8632":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10059:8400":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:4628:11347":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:6560:7416":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:5712:7689":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:9790:37090":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:10616:8442":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:482:7474":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:1562:7990":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12086:8603":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:4812:426":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:44385:6605":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"11:1869:7989":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5897:11129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:9823:24340":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:7651:11472":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:2380:9239":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4789:10904":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8669:2421":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:11759:6612":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:14013:9066":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:9155:9991":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:11872:8569":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:4427:6662":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:22342:10187":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:4044:10156":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"20:223:8228":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"1:3531:2273":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"11:101:10485":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:2198:7473":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"5:1475:7782":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:14346:9173":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:1537:10591":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:6885:7501":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"11:2238:9486":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:533:10534":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:1760:7999":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:1534:7151":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"20:315:37105":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"1:39633:28468":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:5867:11112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:7088:12105":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:10126:8403":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:40228:10215":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:3219:35805":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"11:772:7782":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4351:10717":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:557:9839":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:22359:28480":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:4140:8009":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:7708:7740":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:22380:28479":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:13100:2316":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:504:8281":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:6156:9365":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4922:10964":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:5117:215":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:43929:6632":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:548:10543":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:4076:7780":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6279:7715":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:3435:9859":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11904:6637":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:4299:10158":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13244:8831":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:9629:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"5:6666:7427":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:42117:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:8793:210":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:10603:8441":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:44365:6599":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"5:3240:7991":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:22905:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:531:8249":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:574:8248":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12373:8657":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:2406:9240":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:6114:11238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10461:7780":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:5130:11075":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:10239:11755":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"4:1541:2273":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:1591:10628":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6879:9458":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:4501:457":{"crate_id":1,"path":["core","char"],"kind":"module"},"16:5743:9316":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:2968:35818":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:3286:29498":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:3232:7944":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:46975:10313":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:5484:7451":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11788:8551":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:10186:8409":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:4871:10161":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:4806:9291":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:10278:8416":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:2960:12038":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:9637:6653":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:6585:17720":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:12184:8622":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:2941:135":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:12224:6608":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:8553:9979":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:4810:17639":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:4032:10155":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:14296:9161":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"0:118:1823":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"17:9780:7916":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:2267:101":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"16:7006:9473":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:10936:7254":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:4628:10872":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:7897:7791":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:7554:7733":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:1697:10698":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5969:11161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12970:8787":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:2394:2319":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:22145:10183":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:23004:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:40305:10217":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:4388:10744":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:9260:725":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:2337:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10714:7941":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:45706:10278":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:8205:24272":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:21381:17249":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:9963:10227":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"4:7829:8162":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:12724:8733":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:6183:7802":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:40424:7833":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12959:8786":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:3969:17627":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"11:1127:9751":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:12737:8735":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:7527:10016":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"14:215:9736":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:14324:9168":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:2305:23398":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:44245:10260":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:7574:2319":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:14042:9074":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:9581:6590":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:12020:1036":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:2195:9849":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:41438:10166":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:30089:11810":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:7828:9591":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:2143:9820":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13174:8823":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:4692:17651":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:2363:17576":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:8975:9983":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:1413:7151":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:44052:10244":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10197:8411":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:7515:2275":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:6889:11413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12711:8732":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:6263:11292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"11:2479:37076":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:5557:11253":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:8670:2420":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:699:7593":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13286:8838":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:5370:9870":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"18:614:37099":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:2373:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:4372:9867":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:11223:162":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:10437:7151":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:4626:11345":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:44393:6600":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4724:10879":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:3046:2401":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:10759:9907":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:951:9745":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11490:8535":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"22:728:7398":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"4:7741:9905":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12043:7649":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:15:2232":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:4473:10799":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:9972:8398":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:46451:10303":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:2342:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:9633:6651":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:5690:7832":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:8895:24325":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4814:10914":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:10102:7544":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:1674:7427":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:3925:17624":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:5628:9878":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:693:2322":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14401:9189":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:7054:9480":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:12765:8740":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11306:7629":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"11:731:7784":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4808:10912":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4870:10942":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:14076:9087":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:8825:24323":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:4614:17629":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:8321:11332":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:2766:9255":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:1496:10573":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:590:8252":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:2857:2277":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:10762:8106":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:903:2319":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4878:10945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:9867:8391":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:2682:6789":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"16:8281:9653":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:1184:7923":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"10:36:10492":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:9617:37096":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:9459:136":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"4:1063:9748":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:8283:9959":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"9:486:23250":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:4729:17640":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:7543:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:1558:10606":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:2896:12028":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11448:24331":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:8148:9860":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:12293:8652":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:7657:11473":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"20:8:2345":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"4:8181:7827":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:13897:9040":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:0:2259":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:5982:11167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:231:2346":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"1:41821:217":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:11547:8537":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"11:1846:2322":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13228:8829":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"9:426:23253":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10440:8424":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:5435:9304":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:5560:17705":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"6:574:10556":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:7719:17527":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:42988:7857":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:13723:9008":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:9266:8001":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"4:5621:7494":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:3194:9853":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6531:7958":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:39297:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:48116:10336":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:1703:10699":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:3764:9273":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:5085:11049":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:45684:10277":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:6741:11350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"11:483:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13487:8898":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:21480:7840":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:7694:7738":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:22267:7820":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:4731:17642":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:42686:70":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:6415:9390":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"23:0:2366":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"2:0:482":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"16:2574:9247":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:6968:24266":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:42275:96":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:43963:6577":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:8964:7798":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:46482:10304":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5928:11140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:3273:12044":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:7630:17586":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:12032:699":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:21458:17586":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:42156:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:11321:12008":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:3655:8295":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:2931:9505":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:2972:35817":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:2842:6482":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:1604:10635":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:11296:7803":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:21251:17257":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:21159:17250":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:4908:10956":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6819:11363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"4:4895:17676":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:32158:6661":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:2888:2278":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:40392:8039":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:22283:7844":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4595:10854":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:11964:6636":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4375:10734":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:14056:9081":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:21342:11995":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"4:7704:17526":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:1764:11512":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4902:10955":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"0:0:1833":{"crate_id":0,"path":["idna"],"kind":"module"},"4:4689:17678":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:2133:7444":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12554:8707":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:2463:11489":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"15:327:7746":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:1681:1192":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:44067:10249":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:1910:710":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:9426:6669":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:44381:6607":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:8671:2419":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:2359:9238":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:11951:8588":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:0:2263":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:2722:9253":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:7331:2322":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:12045:1252":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:10430:8423":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:44098:10253":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:1650:10671":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:6159:11252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:7272:35793":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13611:8990":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:7846:7807":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"5:1120:36854":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:4458:17651":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"21:313:2390":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"11:680:7780":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"20:383:2343":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"6:4776:10900":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:44566:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:3500:17604":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:3056:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:736:28290":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:9660:37088":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:1710:10702":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"0:7:1808":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"16:3830:9275":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13838:9021":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:44627:10270":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13922:9045":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4947:10975":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"4:8204:6623":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:13162:8822":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:7655:9898":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:22740:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:62:17801":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:5015:11017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:21209:11995":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:6047:11211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5955:11160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13632:8995":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:2172:7785":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:11147:9980":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:3004:12045":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11111:8502":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:7613:9579":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:12028:1630":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"5:3185:35797":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13778:9012":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"22:534:7889":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"1:45885:10285":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:43938:6631":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"18:491:8247":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:415:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:2150:24385":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:7633:11469":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:10313:111":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:14001:9065":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:6984:7472":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11074:8501":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"14:165:23336":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:841:9742":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"21:67:2045":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"9:52:7754":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:41744:7151":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"5:1444:2322":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"3:0:2254":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"1:39439:10208":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5033:11028":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:10749:11503":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:46115:10293":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:44397:6601":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:10568:8084":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"9:237:10236":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:46261:10297":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:4624:11343":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:39407:12040":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:4497:9282":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:46505:10305":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:43424:8088":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:10588:8439":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:21813:17259":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:11586:7635":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:7479:7460":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11235:8515":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12598:8715":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:9886:7917":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:7725:17557":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:12934:8782":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:7650:9896":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:5769:7797":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:1072:9752":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:40674:8067":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:22251:7843":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7503:9267":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12437:8686":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:11442:7517":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:8895:17724":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:12911:8781":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4676:10875":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:30372:70":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:5992:11174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:4300:9866":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:7631:9838":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:9888:7838":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:1290:9746":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:4440:10780":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:2872:9496":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"11:822:9739":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11639:8283":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12658:8724":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:32165:8029":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:9933:8396":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:96:7898":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:8594:24308":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"15:306:7967":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12531:8704":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4939:1103":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10547:8436":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:5572:7451":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:47988:10328":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:8849:8019":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:6455:7498":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:2916:12031":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:2051:9819":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:40888:8074":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:43554:8100":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4647:10873":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:3983:17629":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:10916:8488":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:40091:6586":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:7128:9988":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:9985:7920":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:22707:200":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13135:8820":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:8239:9543":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10036:8399":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:4912:860":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:6275:11515":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:8526:8013":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:7676:7510":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:621:6786":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:5040:9869":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11023:8495":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:14068:9084":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:21917:28986":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:40401:8042":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:2884:9500":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:6248:11281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:7856:9908":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:2547:79":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:21021:29270":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:6335:17728":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12830:8746":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:2289:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:4549:10831":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:14126:9098":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:11465:9861":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:44640:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:13113:8809":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10646:8447":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:928:17538":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:40534:8063":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:2951:12036":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:40181:6576":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:7258:7809":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:1965:208":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:2955:12037":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:599:37100":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:507:10514":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:6059:7488":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:6844:9454":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4610:10861":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12997:8790":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12267:8647":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7597:37081":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7269:37087":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:6086:11225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:4774:9290":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:44657:10273":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:2178:7932":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:2961:7779":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:1075:7922":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:43616:2014":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:4079:12062":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:5376:17762":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:46899:10311":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10240:7621":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10316:8417":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:20976:28981":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"11:759:7781":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:5634:9306":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:6927:11432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:42039:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6813:11362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:2510:17586":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"14:31:9731":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11845:8561":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6226:9370":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:3155:34835":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:9102:7614":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:1054:9746":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7651:9580":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:2563:269":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"22:752:7408":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"16:7474:9564":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7660:9581":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:897:7151":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:40494:8058":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:2428:9241":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:4474:6663":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:3035:12039":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7782:9583":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:4841:10931":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:8228:17622":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"5:1104:7993":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:11359:9894":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:44369:6602":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:40332:8036":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:1406:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:6332:7718":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:1855:2319":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:6959:7469":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"11:1072:37077":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:1558:7451":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:41472:12124":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11272:8517":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:2805:259":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"5:7390:17537":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:1882:7991":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:10738:7942":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:9328:6616":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:22027:17586":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:12996:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:40382:7831":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:30920:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:40874:8072":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"18:521:28292":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:10524:9853":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:14499:9214":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"20:0:1834":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"1:45660:10276":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:43796:6629":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:43196:11591":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:2921:12032":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:42741:70":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"11:2058:9486":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:10004:7536":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:3089:2283":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:46709:10308":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:12027:1543":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"5:1778:2319":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:43373:8087":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:46821:10310":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:4417:9280":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:5995:7673":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:44278:2285":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:11000:8494":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12305:8655":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6169:11255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:6691:11322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:5071:9869":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:8154:9642":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:9840:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"11:796:2319":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:10978:7796":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"4:5814:7486":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:40897:8075":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"11:2074:9746":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:40922:8077":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:10530:9857":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:40664:8066":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5941:11149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4893:10949":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:47695:10319":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:10068:8000":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:9921:8394":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"0:46:662":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"17:8926:24326":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5588:9262":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12111:8608":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:8833:7796":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:0:1535":{"crate_id":4,"path":["std"],"kind":"module"},"1:41922:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10661:8450":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:48040:10332":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12484:8698":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:30550:28481":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:12159:2291":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:41644:10169":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:9086:7599":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"21:291:37140":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"5:7302:7790":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:3273:9857":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:588:10564":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:501:10511":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:12035:803":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:4651:6572":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:4156:17649":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"22:1122:8220":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"6:4523:10819":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:14156:9104":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13792:9015":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:10089:9993":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"16:7523:9576":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5885:11125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:3596:7780":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:2553:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:39460:8220":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:42781:76":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"18:582:7849":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:1596:10630":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"22:449:7398":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"1:40354:7828":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13710:9003":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:9039:32290":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:5648:9310":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:44401:7839":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:4196:7451":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:4904:17677":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13101:8807":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:1821:8002":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:3183:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:7668:11477":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:261:7427":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:7406:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"11:1092:9750":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:1528:10586":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:7318:7487":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11124:7951":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:40285:10216":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:11473:8351":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:40442:8048":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"11:1145:9752":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:5974:11162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"11:1525:23331":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:10527:9855":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:6960:9462":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7391:24268":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:2810:2312":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:41585:28493":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4884:10946":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"9:393:23252":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:1567:7991":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:7568:7734":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"4:12026:1511":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"17:13868:9032":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:1259:9486":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"11:860:9744":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:7722:7741":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6268:37085":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:43750:6626":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"22:43:28312":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"17:9070:7598":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:11710:7629":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:4613:9286":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:9852:24341":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:7123:8021":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:7610:11463":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:2450:9242":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:4835:9292":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:9643:6655":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12983:8789":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6361:9384":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:4290:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:8317:9962":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:4056:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:21157:17586":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:12645:8721":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:149:7414":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:6934:11435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:1682:10689":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:6280:7533":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"4:9095:247":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:5661:9315":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:46945:10312":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:3483:35049":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:11367:8523":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"11:817:7987":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:1545:2319":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:12876:10181":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"7:0:1695":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:2796:6480":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:5117:11069":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"4:9017:7811":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:2939:238":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"18:515:8245":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:3361:8076":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"16:4557:9284":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:824:7433":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:21564:17245":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:9564:7912":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"11:2473:7972":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:6101:7451":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:475:7985":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:5052:11036":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:4236:7151":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:5140:11076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:8160:17585":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"20:369:2342":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"1:3267:12042":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:47159:10315":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:7792:24270":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13010:8791":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:1040:9486":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:2947:12035":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:41621:9864":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:10084:7924":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12465:8693":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"11:344:7977":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:12513:8703":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:6529:9887":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:1850:2273":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:7622:11465":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:14173:9111":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:4889:9294":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4603:10859":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"22:470:7402":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11173:24451":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:1140:7994":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:12888:8772":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"22:879:28314":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"4:8291:8005":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:47941:10324":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13876:9035":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:9752:7915":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:42716:9610":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:2788:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"14:0:2261":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:46039:10291":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:9085:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11910:8584":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:2504:9244":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:46353:10301":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:640:9842":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:11980:6638":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:5403:7598":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:6718:11332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:23037:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:6893:7685":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:7223:2317":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:12046:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:10139:24359":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:5004:11014":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:7240:7992":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10750:7625":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2618:9249":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:4787:7484":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:4118:8008":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:8223:8007":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:3301:12047":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:40155:6582":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4738:10880":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:6376:24263":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:41802:2418":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:914:7783":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"21:266:2376":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"17:9445:7909":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:2185:11996":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:10447:7752":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:6514:7427":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"11:1010:9746":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:40312:8035":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:4031:17632":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:10949:8491":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:6091:8051":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:1304:9752":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:3234:9855":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:43590:2289":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:41684:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:21414:17244":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:5384:24258":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:7590:2320":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:1796:8000":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13989:9059":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:20991:28981":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:5982:7956":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:5905:9329":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"20:356:2341":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"16:3315:9270":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:10289:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:7318:9523":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5612:9264":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:14478:9211":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:44373:6604":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:5921:11138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:12237:8635":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:12422:8682":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:8467:9974":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3256:266":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:5963:9335":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:41415:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:4862:9293":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:12789:148":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:10456:8429":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:6781:11352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:21559:17586":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:40510:8060":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:10606:8085":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:2848:6484":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:11582:7816":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:9390:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:13451:8867":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:32144:9543":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"11:2368:2273":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:3565:7946":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:7604:11462":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:7839:9907":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:10672:7938":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:723:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:12043:854":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:12802:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:3214:7988":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10788:24427":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12473:8695":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:40341:7827":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:10804:126":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:1903:6785":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"20:348:2340":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"1:43954:6578":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:6818:9453":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:14118:9096":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:14134:9099":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:22307:10185":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:2559:270":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:4953:17683":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:14090:9089":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6583:9402":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:1550:7988":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:14434:9196":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"9:177:7769":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:7598:11461":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:3180:7989":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"22:0:2365":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"11:829:17538":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"0:22:1977":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"4:2347:17571":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:3737:9819":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:1962:209":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:2926:12033":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:42236:89":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:46085:10292":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:4166:7451":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:569:10554":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:582:8282":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:11371:8023":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11295:7953":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:14355:9175":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:40372:8037":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:10945:9877":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4488:10805":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:6468:2273":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:2245:7788":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:46663:10307":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:12208:8624":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12750:8737":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:6532:17718":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:8167:9645":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:11608:9895":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:9177:35087":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:21905:7842":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:4363:7525":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:44389:6606":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11151:7952":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"11:2085:9748":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:7556:11460":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:836:7151":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:10420:8331":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:2670:9251":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}