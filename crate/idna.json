{"root":"0:0:1825","crate_version":"0.5.0","includes_private":false,"index":{"b:1:2741-0:155:1804":{"id":"b:1:2741-0:155:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2744:135","1:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12752:36483":{"id":"1:12752:36483","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:12750:36482"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:1803":{"id":"0:170:1803","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[603,0],"end":[616,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32418:244-0:170:1803","a:1:32500:2423-0:170:1803","a:1:42130:2443-0:170:1803","a:1:42131:2442-0:170:1803","a:1:2948:254-0:170:1803","b:1:2426-0:170:1803","b:1:2741-0:170:1803","b:1:2726-0:170:1803","b:1:2736-0:170:1803","b:1:3495-0:170:1803","b:1:2730-0:170:1803","b:1:2423-0:170:1803","b:5:5809-0:170:1803","0:106","0:111","0:183","0:110","0:108"]}}},"a:1:42131:2442-0:155:1804":{"id":"a:1:42131:2442-0:155:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42131:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42130:2443-0:170:1803":{"id":"a:1:42130:2443-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42130:2443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:689:7686":{"id":"5:689:7686","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"5:5811:1596":{"id":"5:5811:1596","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[704,0],"end":[712,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:691:28654":{"id":"5:691:28654","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1804":{"id":"0:116-0:155:1804","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1804","glob":false}}},"1:12814:34431":{"id":"1:12814:34431","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12034:452","str::splitn":"1:12811:34429","self::pattern":"1:12443:2298"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44024:6648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12869:33253":{"id":"1:12869:33253","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32500:2423-0:155:1804":{"id":"a:1:32500:2423-0:155:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32500:2423","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12747:875":{"id":"1:12747:875","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12034:452"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:33250":{"id":"5:5554:33250","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12869:33253"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12868:33252":{"id":"1:12868:33252","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2777:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:1824":{"id":"0:102:1824","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[577,4],"end":[582,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2726-0:161:1802":{"id":"b:1:2726-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2729:2153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7:1800":{"id":"0:7:1800","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[328,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust‚Äôs UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1968","0:24:586","0:44:2013","0:46:657"],"is_stripped":false}}},"a:1:32500:2423-0:170:1803":{"id":"a:1:32500:2423-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32500:2423","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12757:340":{"id":"1:12757:340","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12758:34398","`u8`":"4:12051:1643"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[538,0],"end":[583,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1816","0:96:2080","0:97:1817","0:98:2115","0:99:2084","0:100:1812","0:102:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22:1968":{"id":"0:22:1968","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115-0:170:1803":{"id":"0:115-0:170:1803","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1803","glob":false}}},"1:12761:31966":{"id":"1:12761:31966","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42004:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12826:36490":{"id":"1:12826:36490","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12443:2298","`DoubleEndedIterator`":"1:7826:128","prim@char":"4:12034:452","str::matches":"1:12823:2091"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44124:6651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12877:36505":{"id":"1:12877:36505","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4668:36505"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44219:6601","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12777:36487":{"id":"1:12777:36487","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44166:6643","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2948:254-0:170:1803":{"id":"a:1:2948:254-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12835:36493":{"id":"1:12835:36493","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2423-0:170:1803":{"id":"b:1:2423-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2425:2188"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42130:2443-0:155:1804":{"id":"a:1:42130:2443-0:155:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42130:2443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2745:1619":{"id":"1:2745:1619","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:456":{"id":"0:168:456","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12750:36482":{"id":"1:12750:36482","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12774:31188":{"id":"1:12774:31188","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12775:31193"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44176:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12776:7982":{"id":"1:12776:7982","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44156:6641","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12771:1970":{"id":"1:12771:1970","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43872:2006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12748:2121":{"id":"1:12748:2121","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12832:36492":{"id":"1:12832:36492","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12443:2298","`DoubleEndedIterator`":"1:7826:128","prim@char":"4:12034:452","str::match_indices":"1:12829:36491"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44070:6653","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12802:34427":{"id":"1:12802:34427","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12443:2298","`DoubleEndedIterator`":"1:7826:128","prim@char":"4:12034:452","str::split":"1:12796:2137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43920:6644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1039":{"id":"0:86:1039","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2736-0:155:1804":{"id":"b:1:2736-0:155:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2739:135","1:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32500:2423-0:161:1802":{"id":"a:1:32500:2423-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32500:2423","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[522,0],"end":[536,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2777:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5551:37179":{"id":"5:5551:37179","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12756:36484":{"id":"1:12756:36484","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1039","0:87:2143","0:88:1812","0:91:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2426-0:170:1803":{"id":"b:1:2426-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2428:28647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12755:33459":{"id":"1:12755:33459","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11998:6636"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:37177":{"id":"5:5540:37177","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1812":{"id":"0:100:1812","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[570,4],"end":[574,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3495-0:170:1803":{"id":"b:1:3495-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12852:34435":{"id":"1:12852:34435","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2736-0:170:1803":{"id":"b:1:2736-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2739:135","1:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:586":{"id":"0:24:586","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6960:270","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:161:1802":{"id":"0:114-0:161:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1802","glob":false}}},"1:12808:36489":{"id":"1:12808:36489","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12443:2298","str::split":"1:12796:2137","prim@char":"4:12034:452","str::split_terminator":"1:12805:36488"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43970:6645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2732:746":{"id":"1:2732:746","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12876:12212":{"id":"1:12876:12212","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4671:12212"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44210:6602","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2115":{"id":"0:98:2115","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[558,4],"end":[561,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2730-0:161:1802":{"id":"b:1:2730-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12820:34434":{"id":"1:12820:34434","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:719":{"id":"0:107:719","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[650,4],"end":[701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:33251":{"id":"5:5555:33251","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12870:33254"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2726-0:155:1804":{"id":"b:1:2726-0:155:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2729:2153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42131:2442-0:170:1803":{"id":"a:1:42131:2442-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42131:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12778:31204":{"id":"1:12778:31204","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44194:6654","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32418:244-0:170:1803":{"id":"a:1:32418:244-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:161:1802":{"id":"0:161:1802","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[513,0],"end":[519,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:32418:244-0:161:1802","a:1:32500:2423-0:161:1802","a:1:42130:2443-0:161:1802","a:1:42131:2442-0:161:1802","a:1:2948:254-0:161:1802","b:1:2426-0:161:1802","b:1:2741-0:161:1802","b:1:2726-0:161:1802","b:1:2736-0:161:1802","b:1:3495-0:161:1802","b:1:2730-0:161:1802","b:1:2423-0:161:1802","b:5:687-0:161:1802","0:167","0:169","0:92"]}}},"b:1:2426-0:161:1802":{"id":"b:1:2426-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2428:28647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:2013":{"id":"0:44:2013","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[223,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12765:31968":{"id":"1:12765:31968","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:657":{"id":"0:46:657","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[229,0],"end":[237,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2730-0:155:1804":{"id":"b:1:2730-0:155:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2741-0:170:1803":{"id":"b:1:2741-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2744:135","1:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12849:2139":{"id":"1:12849:2139","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12811:34429":{"id":"1:12811:34429","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12034:452","self::pattern":"1:12443:2298","str::rsplitn":"1:12814:34431"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44006:6649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12866:1985":{"id":"1:12866:1985","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12758:34398":{"id":"1:12758:34398","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12051:1643"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12842:36497":{"id":"1:12842:36497","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12861:36502":{"id":"1:12861:36502","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:2084":{"id":"0:99:2084","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[564,4],"end":[567,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:161:1802":{"id":"b:5:687-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:7686","5:690:28653","5:691:28654"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12799:31189":{"id":"1:12799:31189","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12259:6656","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12805:36488":{"id":"1:12805:36488","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12443:2298","str::split":"1:12796:2137","prim@char":"4:12034:452","`DoubleEndedIterator`":"1:7826:128","str::rsplit_terminator":"1:12808:36489"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43952:6647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12837:36494":{"id":"1:12837:36494","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12773:1990":{"id":"1:12773:1990","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43888:6640","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12749:36481":{"id":"1:12749:36481","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2777:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12775:31193":{"id":"1:12775:31193","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12774:31188"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44185:6655","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12796:2137":{"id":"1:12796:2137","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12443:2298","`DoubleEndedIterator`":"1:7826:128","prim@char":"4:12034:452","str::split_whitespace":"1:12774:31188","str::rsplit":"1:12802:34427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43902:6646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12768:36486":{"id":"1:12768:36486","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12040:1538","crate::ops::IndexMut":"1:3161:2285","str::slice_unchecked":"1:12767:36485"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:2037":{"id":"5:5553:2037","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12769:34417":{"id":"1:12769:34417","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:12770:34418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12823:2091":{"id":"1:12823:2091","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12443:2298","`DoubleEndedIterator`":"1:7826:128","prim@char":"4:12034:452","str::rmatches":"1:12826:36490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44106:6650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2730-0:170:1803":{"id":"b:1:2730-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12867:34342":{"id":"1:12867:34342","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39949:28657","Self::is_ascii":"1:12866:1985"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39949:28657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:37176","5:5537:2145","5:5540:37177","5:5543:37178","5:5551:37179","5:5552:37180","5:5553:2037","5:5554:33250","5:5555:33251"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5543:37178":{"id":"5:5543:37178","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2729:2153":{"id":"1:2729:2153","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2703:142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12872:34346":{"id":"1:12872:34346","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:895:38428"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2080":{"id":"0:96:2080","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[546,4],"end":[549,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1810":{"id":"0:117:1810","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2423-0:161:1802":{"id":"b:1:2423-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2425:2188"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[715,0],"end":[715,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","cause","provide","description","source"],"trait":{"name":"Error","id":"1:2788:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2739:135":{"id":"1:2739:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12817:34433":{"id":"1:12817:34433","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12864:36503":{"id":"1:12864:36503","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12404:134","`FromStr`":"1:12403:2293"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12403:2293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12403:2293","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12871:34345":{"id":"1:12871:34345","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:895:38428"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[523,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:719":{"id":"0:112:719","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[718,4],"end":[720,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2428:28647":{"id":"1:2428:28647","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2740:1621":{"id":"1:2740:1621","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42130:2443-0:161:1802":{"id":"a:1:42130:2443-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42130:2443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12843:36498":{"id":"1:12843:36498","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12468:6632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12858:36501":{"id":"1:12858:36501","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42131:2442-0:161:1802":{"id":"a:1:42131:2442-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42131:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:109:746":{"id":"0:109:746","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[705,4],"end":[711,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1816":{"id":"0:95:1816","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[540,4],"end":[543,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3495-0:155:1804":{"id":"b:1:3495-0:155:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32418:244-0:155:1804":{"id":"a:1:32418:244-0:155:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2948:254-0:155:1804":{"id":"a:1:2948:254-0:155:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2423-0:155:1804":{"id":"b:1:2423-0:155:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2425:2188"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2948:254-0:161:1802":{"id":"a:1:2948:254-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2426-0:155:1804":{"id":"b:1:2426-0:155:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2428:28647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2744:135":{"id":"1:2744:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32348:10620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2943:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:119:1823":{"id":"0:119:1823","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[649,0],"end":[702,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3497:1634":{"id":"1:3497:1634","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39762:10342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12785:2117":{"id":"1:12785:2117","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1824":{"id":"0:91:1824","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2726-0:170:1803":{"id":"b:1:2726-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2729:2153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12870:33254":{"id":"1:12870:33254","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12846:36499":{"id":"1:12846:36499","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:690:28653":{"id":"5:690:28653","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12839:36495":{"id":"1:12839:36495","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:37176":{"id":"5:5536:37176","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2288","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2288","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:37180":{"id":"5:5552:37180","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2288","`String`":"5:7535:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2288","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12782:2116":{"id":"1:12782:2116","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2736-0:161:1802":{"id":"b:1:2736-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2739:135","1:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12873:34347":{"id":"1:12873:34347","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:895:38428"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12772:10384":{"id":"1:12772:10384","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43878:2372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2145":{"id":"5:5537:2145","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12779:32274":{"id":"1:12779:32274","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12767:36485":{"id":"1:12767:36485","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12040:1538","str::slice_mut_unchecked":"1:12768:36486","crate::ops::Index":"1:39580:2284"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12792:1983":{"id":"1:12792:1983","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42004:198","prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12841:36496":{"id":"1:12841:36496","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12874:36504":{"id":"1:12874:36504","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4670:36504"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44201:6603","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32418:244-0:161:1802":{"id":"a:1:32418:244-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2741-0:161:1802":{"id":"b:1:2741-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2744:135","1:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12759:2007":{"id":"1:12759:2007","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42004:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1817":{"id":"0:97:1817","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[552,4],"end":[555,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1825":{"id":"0:0:1825","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46‚Äôs introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1800","0:114-0:161:1802","0:115-0:170:1803","0:116-0:155:1804","0:117:1810","0:118:1815","0:119:1823"],"is_stripped":false}}},"0:88:1812":{"id":"0:88:1812","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12788:6564":{"id":"1:12788:6564","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42004:198","prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12770:34418":{"id":"1:12770:34418","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:12769:34417"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[717,0],"end":[721,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9882:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12746":{"id":"1:12746","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12747:875","1:12748:2121","1:12749:36481","1:12750:36482","1:12752:36483","1:12755:33459","1:12756:36484","1:12757:340","1:12758:34398","1:12759:2007","1:12761:31966","1:12763:31967","1:12765:31968","1:12767:36485","1:12768:36486","1:12769:34417","1:12770:34418","1:12771:1970","1:12772:10384","1:12773:1990","1:12774:31188","1:12775:31193","1:12776:7982","1:12777:36487","1:12778:31204","1:12779:32274","1:12782:2116","1:12785:2117","1:12788:6564","1:12792:1983","1:12796:2137","1:12799:31189","1:12802:34427","1:12805:36488","1:12808:36489","1:12811:34429","1:12814:34431","1:12817:34433","1:12820:34434","1:12823:2091","1:12826:36490","1:12829:36491","1:12832:36492","1:12835:36493","1:12837:36494","1:12839:36495","1:12841:36496","1:12842:36497","1:12843:36498","1:12846:36499","1:12849:2139","1:12852:34435","1:12855:36500","1:12858:36501","1:12861:36502","1:12864:36503","1:12866:1985","1:12867:34342","1:12868:33252","1:12869:33253","1:12870:33254","1:12871:34345","1:12872:34346","1:12873:34347","1:12874:36504","1:12876:12212","1:12877:36505"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5809-0:170:1803":{"id":"b:5:5809-0:170:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9882:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:87:2143":{"id":"0:87:2143","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2425:2188":{"id":"1:2425:2188","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1815":{"id":"0:118:1815","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1804":{"id":"0:155:1804","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:32418:244-0:155:1804","a:1:32500:2423-0:155:1804","a:1:42130:2443-0:155:1804","a:1:42131:2442-0:155:1804","a:1:2948:254-0:155:1804","b:1:2426-0:155:1804","b:1:2741-0:155:1804","b:1:2726-0:155:1804","b:1:2736-0:155:1804","b:1:3495-0:155:1804","b:1:2730-0:155:1804","b:1:2423-0:155:1804","0:159"]}}},"1:12855:36500":{"id":"1:12855:36500","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12034:452","self::pattern":"1:12443:2298"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12829:36491":{"id":"1:12829:36491","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12443:2298","`DoubleEndedIterator`":"1:7826:128","prim@char":"4:12034:452","str::rmatch_indices":"1:12832:36492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44052:6652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12763:31967":{"id":"1:12763:31967","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3495-0:161:1802":{"id":"b:1:3495-0:161:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"4:12051:1643":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:8288:17804":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:2154:9950":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:8202:8080":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:40431:6601":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:4388:10874":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:11486:8115":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:13246:7392":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:9882:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:6136:11376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:7708:7647":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:8852:7687":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13083:8594":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12474:7506":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"21:266:2397":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"17:13162:8613":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:0:2266":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:13044:162":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11256:8432":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:4635:11473":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:10618:37521":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:6781:11482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:6243:9493":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4755:11018":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:6117:7352":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"20:306:2342":{"crate_id":20,"path":["unicode_bidi","TextSource"],"kind":"trait"},"1:3338:12193":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12029:8512":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:33527:2280":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"9:426:23407":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:3930:17779":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"21:320:8238":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"6:4841:11061":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:4020:2275":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:14346:8845":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:5995:7580":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4480:10933":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6248:11411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:12058:1248":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:13097:8595":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13695:8723":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:1576:10746":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"11:742:7692":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:30794:28684":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:42556:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:11621:10025":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:10735:11629":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:13347:8635":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4535:10954":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:574:8265":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:8332:11462":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:40356:10343":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:22226:29355":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:41962:10298":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:5877:2275":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6415:9510":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:4773:7964":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:4102:10284":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:15037:9043":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:13478:8672":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11958:8508":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13896:8754":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:2600:7380":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:645:17675":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:48348:10468":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:12999:8576":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:7903:7700":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:3098:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:21445:17739":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:10093:150":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:10987:8119":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5075:11174":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:2335:12147":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"5:40:2321":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:3217:8004":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:15345:9124":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:4703:17805":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14786:8986":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:10809:33134":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"11:2304:9606":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:15507:9186":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:7317:36255":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:39580:2284":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:8115:9758":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12536:7966":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:859:2325":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:4906:17830":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:33704:12178":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6721:24419":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:4151:8023":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"22:669:7488":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"1:21221:31573":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:212:7326":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:39723:12191":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:10803:7924":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:22755:11995":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:47620:10449":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:11012:7414":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:22091:17482":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:14399:8849":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4893:11079":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11701:7946":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:21466:7748":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:3065:8307":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:12701:8560":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:12035:1659":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:482:7376":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:4092:7688":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:5085:11179":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:4504:7428":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:22003:17739":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:12403:2293":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:12039:1505":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:32418:244":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:14208:8815":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13309:8631":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:14934:9033":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:42192:7687":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:2323:636":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"0:0:1825":{"crate_id":0,"path":["idna"],"kind":"module"},"4:10073:8042":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:4533:6513":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:3460:7953":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"20:707:2364":{"crate_id":20,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"1:44304:10377":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:41981:10300":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:4968:11120":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:531:8266":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11779:7532":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11027:8388":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:401:8296":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:22548:7750":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5928:11270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:48074:10454":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3122:2420":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:12000:7725":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10207:7526":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:2622:9981":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:14765:8978":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:7740:17710":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"2:234:233":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:7679:11608":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:4252:7687":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:415:182":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:10312:7441":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:880:7690":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10016:24462":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11666:8464":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:10896:8410":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"21:145:2046":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"1:23151:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:609:8276":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:2996:2279":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:22282:12146":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"11:351:7991":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:6804:11489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:10790:126":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:11507:7530":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:22743:10330":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:7857:7715":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:44124:6651":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:6819:11493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:424:8242":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"1:9896:6678":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:5395:10004":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:40672:7736":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:9949:10360":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:11029:7416":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12718:24487":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:4050:17788":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7360:37516":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:7692:11612":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:15645:9221":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:8816:7703":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"23:0:2387":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"17:10102:7523":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13365:8643":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11469:8442":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:4375:10864":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:6913:11553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:5632:7396":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:14633:8872":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:2948:254":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"0:44:2013":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"1:46140:10418":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"9:507:9932":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:2696:9372":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:43705:8103":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:1567:8005":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:10780:137":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"4:4744:17797":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"21:291:37593":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"16:3655:8312":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:15184:9082":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:2426:2194":{"crate_id":4,"path":["std","io"],"kind":"module"},"5:7619:2322":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:43292:7765":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"22:636:7893":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"1:46210:10421":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:42070:7688":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:42200:7688":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:6100:11366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:46538:10431":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:32921:9619":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:9888:6675":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:42242:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:62:17955":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:1514:10711":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:5696:24413":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:3753:9949":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:3163:33106":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:1545:2322":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:3443:9989":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12596:7969":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:4676:11005":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:4449:7427":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12432:7963":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:9884:6673":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:8283:11624":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:3736:2325":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:14921:9028":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12127:7958":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:21851:17739":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:34073:12183":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:10716:10132":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:15244:9098":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:40603:10349":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:1072:9872":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:15235:9095":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:46109:10417":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:46760:10438":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:7884:24425":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:14251:8821":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11690:8468":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:8097:9756":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:42398:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:43012:9730":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"4:8553:8030":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:22997:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:10141:7746":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:32384:10338":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:6120:11371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"10:0:2259":{"crate_id":10,"path":["adler"],"kind":"module"},"6:6107:11367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:15329:9121":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:1477:7689":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:14989:9037":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:8975:7706":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"20:528:7900":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"17:12560:7967":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:13284:149":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:14904:9027":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:43806:8112":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:40480:6607":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:9624:24461":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:2710:264":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:46840:10439":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:21447:17396":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:40546:10348":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:9252:8015":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"18:719:8287":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:2491:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:2169:24540":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13832:8745":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6083:23525":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:699:7497":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:3317:12192":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:2943:116":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:15003:9040":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6600:24418":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10962:8414":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:12310:7535":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:6466:7400":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:7582:7406":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:9890:6676":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"10:44:7660":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:75:1641":{"crate_id":1,"path":["core","u32"],"kind":"module"},"1:44637:6629":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:4774:9410":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5121:9421":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"20:543:2044":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"17:2031:7937":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:1887:2325":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:886:7336":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:1315:9872":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:3980:17781":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:5154:7361":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:7879:2010":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:12463:6633":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:5982:7970":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13419:8649":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:32395:10339":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"18:96:7906":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10137:7524":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:22442:10314":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:4038:17785":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:5650:2328":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13935:8758":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"21:198:2412":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"16:7651:9700":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"0:46:657":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"1:41221:8090":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:7660:9701":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7736:9702":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:44645:6624":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:11372:10024":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7015:9596":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:2526:9365":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:8252:12266":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:43237:7760":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:7782:9703":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"9:52:7661":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:2352:11644":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:41240:8091":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12921:7536":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"7:31:23391":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"22:728:7297":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"1:43970:6645":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:6357:183":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:4865:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"4:10133:10123":{"crate_id":4,"path":["std","sys","pal","unix","os_str","Slice"],"kind":"struct"},"11:1917:8004":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"20:644:2359":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"4:8938:17879":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:2662:9982":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:1007:9606":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:44633:6631":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:9028:7719":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:8564:10108":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:1151:8008":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"14:187:23497":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11345:8435":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:6985:11927":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:3491:33312":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:6811:17881":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:2985:6507":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"11:1883:7687":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:6543:17872":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:40350:6602":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:44106:6650":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:14359:8846":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12850:8300":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:5240:210":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"5:1115:8007":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:12059:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:14878:9021":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:6960:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:46039:10414":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:15725:9240":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:9860:24483":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:123:18010":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:6086:11355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:2644:9370":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:12016:32470":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:3191:8003":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:11485:8447":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:1777:635":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"16:4417:9400":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:681:8282":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:43262:154":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10974:7518":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:14843:9020":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:21394:17400":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:4234:7733":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:43952:6647":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:40751:8061":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10422:7917":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:7281:8084":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:7665:10026":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:15990:9309":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"4:11518:9992":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6792:9572":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:15689:9236":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:30602:6716":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11126:8420":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:9445:136":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:39637:219":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:14385:8848":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5829:11215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"11:2569:2289":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:40842:8075":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:6041:24416":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:9111:159":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:11399:7944":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:6079:11354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:14041:8771":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6560:7315":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:43724:8106":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"22:752:7307":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"6:563:10682":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:12057:1698":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"6:4830:11053":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:6484:2275":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:9457:7410":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"18:507:8265":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:7388:11589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:3797:9394":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4449:10915":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:4381:7354":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:3461:9391":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:10725:6646":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:43734:8107":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:4808:11042":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4870:11072":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:9730:24479":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:8209:6640":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:12255:8532":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:4411:7352":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:15337:9123":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:23228:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:11226:8429":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:8537:8027":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:16134:9344":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:43872:2006":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:14778:8985":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5891:11258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:849:7688":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:8276:9994":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:1632:10789":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:3251:8005":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:1054:9866":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:11983:10148":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:4513:6687":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"11:856:9862":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11523:7515":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"18:755:8293":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:7482:28687":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13707:8725":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:10700:7688":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:42972:11713":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"18:707:6634":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:7331:2325":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:3584:7954":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:2969:23554":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:42476:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:7138:8035":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"11:2554:37507":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:15301:9114":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:15253:9099":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:7845:8017":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:5592:7352":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:8961:10111":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"11:2562:10621":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:4344:9399":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:4928:7965":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:15027:9042":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:46229:10422":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:42149:233":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:15062:9052":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:5068:11171":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:7751:12267":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:7217:12271":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10246:7438":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:14470:8860":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:12674:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:903:7687":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:32409:8043":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"16:4613:9406":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6204:7607":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:2474:11619":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:40499:6600":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:6691:11452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:44210:6602":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:364:7318":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:4835:9412":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:11455:7419":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:7542:10145":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6361:9504":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5885:11255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1570:10744":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:2380:9359":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:2658:11955":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:22214:17485":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:6666:11434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"11:1107:9870":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"0:119:1823":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"1:9877:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:7365:11578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:15160:9074":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:39597:220":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:3607:7688":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"21:302:2410":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"6:6741:11480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:363:9967":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:40812:8072":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:1546:10727":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:40771:8067":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:42130:2443":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4710:11008":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"9:177:7676":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:10569:37526":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:48333:10467":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:8192:7735":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:11390:8038":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:10299:112":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:4902:11085":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11459:8441":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:6228:11397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11088:8418":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"20:497:2362":{"crate_id":20,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"16:4557:9404":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10035:7502":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:4637:11475":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:14950:9036":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:5961:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:22199:17739":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:9968:24485":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:45915:10409":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:5415:10005":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4884:11076":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4556:10964":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:44882:10403":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6156:9485":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:23074:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:1507:10708":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:3738:7716":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:4497:9402":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:4889:9414":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:14969:7557":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:7797:2421":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:6530:7328":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:7702:11614":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5123:11202":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:30562:2316":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:5816:7606":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:44510:6635":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:4776:11030":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:673:7687":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:7610:11593":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:4053:9398":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:2406:9360":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:6483:8069":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:634:9946":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:46247:10423":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:6879:9578":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5859:11240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:10768:6656":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:4496:10937":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:4231:9995":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10510:7919":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:44156:6641":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:8290:31755":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:5743:9436":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:43826:8114":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"4:922:9859":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:6934:11565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4516:10946":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:11595:7724":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:14221:8816":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:23467:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:42634:7759":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:2911:7385":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:15659:9228":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4800:11038":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:7307:7339":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:15367:9129":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:7691:7412":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:7768:7649":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:33763:12180":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:7006:9593":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11497:7529":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11727:8471":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:5746:10011":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:800:2275":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:10807:8098":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:9354:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:44176:6642":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:23710:10334":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:16180:8633":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:43284:7764":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:15192:9083":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:2486:208":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:1424:7687":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:32388:9663":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:22604:10316":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11395:8437":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:8171:17738":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"12:0:2261":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:5392:17916":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:2151:9868":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"4:928:17691":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11065:8417":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:11755:8473":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:12033:1035":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:23305:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:46007:10413":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:8860:8033":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:14296:8828":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:1882:12161":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:3332:144":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:42062:7687":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:8243:2278":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:6893:7592":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:7560:2277":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15535:9193":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:7850:10036":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:39584:8044":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:40828:8074":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:13297:8628":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"20:634:2358":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"17:11194:24515":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:10513:9985":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"4:8215:6646":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"5:7549:2276":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:2439:111":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:13273:8624":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:48234:10460":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11817:24582":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:10959:6649":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:7784:143":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:15747:9246":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:15842:8595":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"4:11818:7423":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:7722:7648":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:12048:798":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"16:4862:9413":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:2522:202":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:2933:23553":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12486:8549":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:33107:9616":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:12797:7542":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:44895:178":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"10:36:10623":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:7451:7356":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:6682:11446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5004:11144":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:10225:11888":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"15:327:7653":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11412:8438":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6114:11368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:119:18009":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:11315:8034":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:14099:8797":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:1758:8012":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"0:118:1815":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"4:2354:17724":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:4737:6596":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:3184:7687":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:0:534":{"crate_id":1,"path":["core"],"kind":"module"},"4:1902:6809":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:21219:31571":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:15631:9219":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2766:9375":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:38915:12189":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10716:7922":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11476:7659":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:1550:8002":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:6944:37513":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:42437:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:15493:9180":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:8281:9773":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:5687:7352":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:46584:10433":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:8547:7687":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:21573:17397":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:6605:2325":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:588:17673":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:6128:11373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:8993:32471":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:13093:212":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"18:690:8284":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11426:7945":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"20:669:2361":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"1:48012:10453":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:15287:9112":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:5921:11268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4955:11110":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:10530:246":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:4376:228":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:16123:9342":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"4:12034:452":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:48196:10457":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4854:11066":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:45939:10410":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"11:774:7689":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:4949:9416":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"15:394:23517":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"22:1034:28644":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"1:2992:6509":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:5431:10006":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:9071:7721":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:11215:8427":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:41939:9994":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:5992:7361":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:33645:12179":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:2200:136":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"17:11632:8459":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:21856:17402":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:1966:205":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6868:11529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10559:7920":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13684:8720":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"4:918:7692":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:102:10616":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:33586:12181":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:6426:8088":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"6:6889:11543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:15311:9117":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6658:11429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"22:470:7301":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:48120:10455":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13516:8680":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:15855:8609":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:1094:7930":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"20:521:7898":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"1:22228:12146":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"4:6249:7396":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:47076:10443":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"20:471:2360":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:7343:11577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:939:9862":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:12054:1642":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"6:7598:11591":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:2574:9367":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:32533:113":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"15:0:2263":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:3344:12195":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:36295:9626":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:42132:6670":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:21575:7748":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10852:24495":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:636:8281":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12191:8522":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:9813:24482":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:7645:11601":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:3327:261":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"20:8:2366":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"4:10075:10122":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"4:637:9970":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:10758:10137":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:4265:7734":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:22580:7751":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:32419:2422":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:10344:7446":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:41192:8086":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:12224:6661":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:1784:6714":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"6:4666:11004":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4168:12214":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:2700:160":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:40473:6606":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:22656:28663":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12572:7968":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:41206:8088":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:3225:8002":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:2305:23552":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:1691:7352":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:8134:9761":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11645:8460":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:39776:8234":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:4919:29045":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12548:8551":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:11590:8455":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:1873:6808":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:2722:9373":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:14662:8892":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:7925:10040":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:41903:28670":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:7090:9605":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:3966:17780":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:15519:9189":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:43077:6684":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4860:11069":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4783:11031":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:8387:17841":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6268:37515":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:5971:7396":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:357:9966":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:614:37530":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:4921:9415":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12584:8552":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"4:10740:11631":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:3830:9395":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:396:7320":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:43888:6640":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:7028:7404":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:40700:7739":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:8354:9998":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:40518:10347":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:10556:7412":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"11:883:9865":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:2518:9980":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13448:8660":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:1516:7692":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:11113:7932":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:914:7691":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:7646:9968":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:5023:11152":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:40409:6610":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:7371:11580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:46737:10437":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:7935:176":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:10510:9983":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:7613:9699":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:1582:9873":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:48243:10461":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:30688:28690":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"4:4798:7386":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:11243:11634":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:7826:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:43920:6644":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:1541:2275":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6742:9559":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:15356:9128":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:2941:6505":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:44625:6628":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"0:24:586":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"17:15868:9264":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:4030:7352":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:12052:8513":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:6489:11645":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:5500:10007":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:39657:222":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:6146:7392":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"18:727:7498":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:12040:1538":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:12273:8563":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:4719:9408":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:12259:6656":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:1604:10765":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11991:8510":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:6610:7401":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:15710:9239":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:14439:8854":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:4028:17784":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11536:8451":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:48371:10469":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:7376:2325":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6386:9507":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13676:8718":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:11156:7747":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:31192:7756":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"5:2979:35903":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:11148:33140":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:11519:8116":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7128:10117":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:11357:10022":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:14156:8809":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:44070:6653":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:44709:12353":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:22005:17398":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:9918:24484":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4922:11094":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13948:8760":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:9166:10120":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"1:32445:251":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:12828:8563":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:12041:1624":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"16:7503:9387":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11041:7506":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:2443:2275":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"4:903:2322":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:14822:9015":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:6159:11382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:22136:17483":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:3126:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13633:8707":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:15177:9081":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"4:3278:9987":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:48410:10470":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:5381:10000":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:43771:8049":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:4444:7354":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:43055:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"2:0:479":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:44487:10389":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"11:1160:9872":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:40466:6605":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:44219:6601":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:2417:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:8222:6641":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"6:555:10677":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:9943:24467":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:43878:2372":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:5015:11147":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12356:8537":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"4:836:7687":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:46562:10432":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:4491:17806":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:2788:9376":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:6047:11341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:14509:8870":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:6070:7390":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:10785:37524":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:4560:6688":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:15480:9174":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11141:7933":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"4:10818:33137":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"9:0:2258":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7862:9715":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7067:9603":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:41773:10297":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:1664:10812":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:40710:8053":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"0:7:1800":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"4:9023:7709":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4401:10884":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:15384:9136":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4947:11105":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"4:1534:7687":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"18:660:7911":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:8310:10089":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12230:8524":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:39613:217":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"16:8239:9663":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6499:7632":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:7633:11599":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:15671:9230":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:538:7492":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:7622:11595":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:1896:2322":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5111:11196":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:3594:7687":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:7368:2325":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:40454:6604":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:22328:17478":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"4:4821:17793":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:48223:10459":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:9149:10119":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5033:11158":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:11193:11633":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:15:2233":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:16062:9328":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:13235:7549":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"14:215:9856":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"20:458:2359":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"6:4647:11003":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:23548:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"9:357:23420":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13724:8728":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:5419:7503":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:43496:8096":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:2536:10617":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:13961:8762":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:43745:8108":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:4383:9997":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:4167:17803":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6844:9574":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:7645:17739":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:11292:7417":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:504:7345":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:43477:10373":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:5763:8057":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:48254:10462":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:1538:2325":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:2983:35902":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"11:2542:10618":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:12050:795":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"11:299:7987":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:14312:8832":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:5634:9426":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:2423:2325":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:1591:10758":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:40742:7741":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:435:8297":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:2907:9381":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6226:9490":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:44319:10382":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"20:698:2363":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"16:6513:9515":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:5009:11146":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12153:7959":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:2236:36293":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:12052:1640":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"16:2428:9361":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:8804:206":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"5:2975:11616":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10051:7503":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:44821:226":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"5:7339:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:40852:8077":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:22362:17477":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"11:1025:9866":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:8139:7717":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:8239:17776":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:11714:8469":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:7535:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:15374:9131":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:43784:8110":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:3254:218":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:41819:7758":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:40728:8058":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:43274:10369":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"16:2284:23526":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:22175:17484":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:13056:8586":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:11576:8454":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:16170:8628":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:7436:7588":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:42002:201":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:39755:10341":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:0:2265":{"crate_id":17,"path":["object"],"kind":"module"},"4:10946:32472":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:6897:7403":{"crate_id":4,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:3372:12198":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11294:7936":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:12366:24607":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:45895:10408":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:6798:11487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:2946:135":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:10918:10035":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:40419:6611":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:40630:8049":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13976:8765":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6318:9503":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:599:37528":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:45961:10411":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:44006:6649":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:10880:6644":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:5017:9418":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"4:8159:9990":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:11932:7951":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:7503:7717":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:47950:10452":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:47154:10444":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"21:228:2047":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"16:8154:9762":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:9681:6694":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:22677:28680":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:945:9864":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:3251:7952":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:43253:7763":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:42053:171":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:4549:10961":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"14:31:9851":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:41756:10295":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:527:10662":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:21453:17399":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:3323:17766":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:1455:2325":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"18:521:28618":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:5588:9382":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:7582:7642":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:12047:797":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:7534:9388":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"14:160:9851":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:11984:10306":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:8234:8021":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:1536:8009":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:44672:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:41199:8087":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:12045:695":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:40395:6608":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:624:37529":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:1734:10841":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13395:8647":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:40992:8081":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:43000:31554":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:13882:8479":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:10931:10007":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:16049:9322":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:47264:10447":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:5004:7352":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:489:10637":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:12037:1152":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:256:8294":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:7523:9696":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:4212:7352":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:4308:6685":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:11675:8465":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4908:11086":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:7897:126":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:483:10634":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13121:8609":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:5648:9430":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"22:966:7312":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"1:41733:168":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:5568:11383":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"5:1685:7328":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:11321:7506":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:0:1530":{"crate_id":4,"path":["std"],"kind":"module"},"1:21392:17739":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:596:10699":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:12038:339":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:14001:8767":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"11:1891:2275":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4543:10959":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:1063:9868":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:22920:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"11:2383:7687":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:1905:10153":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:23761:243":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"20:657:2360":{"crate_id":20,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"1:47762:10450":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:6960:9582":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12115:7957":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:6915:7636":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:15117:9066":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:7601:7408":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:6700:11453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"0:117:1810":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"17:14485:7536":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:22357:17479":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:11945:8506":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5152:11211":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:1558:10736":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:41248:8093":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:3732:9991":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:7657:11603":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12324:7961":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"22:0:2386":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"18:671:7916":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:41926:10363":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:7524:7362":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13334:8634":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:2450:9362":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:6169:11385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13202:7543":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:4126:108":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:34246:12184":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11549:8452":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:12457:6634":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:1821:8016":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"5:7511:9965":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:14896:9026":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:8003:10041":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:10516:9987":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"4:1562:8004":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:40760:8062":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:12684:8368":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:5661:9435":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:42359:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6764:11481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12746:7539":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:6837:11503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7391:24422":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6261:7591":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:42595:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:8302:8019":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:7297:2275":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:10918:8100":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:564:7494":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:2829:6813":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:4042:17786":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:15321:9120":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:4700:17832":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:2657:17739":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11269:7518":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:46516:10430":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5044:11164":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:40780:8068":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4523:10949":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:1760:8013":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"17:12418:8546":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"4:1556:8003":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:2339:7566":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:580:10690":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:5910:11260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13787:8739":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12972:8575":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:46659:10435":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12103:8519":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:1596:10760":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:48295:10465":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:22693:28696":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:22:733":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:6346:7627":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:10973:6648":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:542:10671":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:8798:8031":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:2092:10156":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4595:10984":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:12046:800":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:4428:10907":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13145:8610":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:2528:209":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13026:8582":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"4:3241:9986":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:32501:6511":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:7734:17679":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:30596:2317":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"11:2231:7659":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:44839:214":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4455:10917":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7102:24421":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:4745:9409":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"13:110:37509":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:1718:10836":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13922:8757":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:15903:9294":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:3111:12190":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:548:10674":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:6711:11458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:4380:10286":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:44166:6643":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11052:7922":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:42982:6683":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:43714:8105":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:40793:8070":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:2706:265":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:21204:31567":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:6456:9513":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:41790:12277":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:6687:7328":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11014:7928":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:875:9864":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12380:8539":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:13383:8644":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:44462:10388":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:46069:10415":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:4462:9401":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:2504:9364":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13584:8682":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:652:8265":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:21182:7756":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:2333:12146":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"5:7635:2323":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:48158:10456":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"11:2403:7688":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:12410:8544":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"14:221:9858":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:10329:7380":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:43645:8101":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4434:10908":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:3161:2285":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:42217:203":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:1566:23485":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:266:7328":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"11:2548:7986":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:5825:7388":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:6012:11320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:46091:10416":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:14426:8853":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:700:2325":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:6299:8065":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4461:10920":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:9894:6677":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4914:11089":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:14373:8847":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:42131:2442":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:3129:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6279:7622":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:40367:6609":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"20:0:1826":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"6:1674:10818":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:588:10695":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:7029:7374":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:7933:7716":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:736:28616":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:1896:11642":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:14194:8814":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:1301:9866":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10667:37525":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:5117:11199":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:7513:9695":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12953:8572":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:1639:10793":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:2048:7716":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:8181:7651":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5905:9449":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:40593:7429":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:7651:11602":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:3315:9390":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5140:11206":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:1903:8002":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:11023:7415":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4764:11023":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:1603:9874":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:8495:17854":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:44497:10393":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"4:12055:1639":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"16:5612:9384":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:41215:8089":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:6872:2330":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:8205:24426":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:495:10640":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:4957:10290":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"11:1066:23484":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:31164:203":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10813:37527":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:7284:2439":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:40681:7738":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5963:9455":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4603:10989":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:1537:10721":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:22722:11646":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4628:11002":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:43797:8111":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:7788:163":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:8906:17878":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:1439:7688":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7554:7640":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:22313:17739":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:12185:6662":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:507:10645":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:14181:8812":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:11657:8463":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:4351:10847":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:40530:28687":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:2256:7696":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:14887:9025":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5992:11304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:2703:11622":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10657:7506":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:11342:10021":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:4742:17796":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:867:7689":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:13235:114":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:42281:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:6583:9522":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:32420:252":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"20:613:8255":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"4:2368:17728":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"6:5969:11291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5130:11205":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:3280:9988":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:5639:10008":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:40560:12230":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:39679:221":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:9651:24478":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:1505:7691":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10941:8411":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10608:7921":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:8478:10103":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7054:9600":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13742:8729":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13407:8648":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:46440:10428":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:47230:10446":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:5308:127":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"8:0:2257":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:22616:28689":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:44398:10387":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12510:8550":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:48280:10464":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4724:11009":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:30333:11956":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:13066:31384":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:8167:9765":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4698:11007":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"22:43:28640":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"4:7908:7699":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"4:10451:7411":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:654:18368":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:3230:36258":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:4159:8024":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1501:10705":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:11968:12311":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"11:844:17691":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4745:11011":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:2670:9371":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:3201:9984":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:38226:12186":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"22:534:7892":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"16:3049:23555":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:22495:10315":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:893:2275":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:4385:10287":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:15013:9041":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:4587:452":{"crate_id":1,"path":["core","char"],"kind":"module"},"17:11978:8509":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:80:7903":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:6376:24417":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"21:259:37594":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"4:9050:32480":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:5673:9383":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"9:330:10624":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12445:8548":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:790:7331":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4998:11141":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:5435:9424":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:4610:10991":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:16032:9320":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:501:10642":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:3670:17777":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:15432:9173":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:1697:10828":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:261:8295":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:8148:7718":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"5:1024:7328":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11168:24514":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:46370:10426":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:1814:1189":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:10520:17739":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:10316:33159":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:12290:8534":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:10950:8412":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:48318:10466":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:7382:33791":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"21:0:1827":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"6:7604:11592":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:9892:213":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:6927:11562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:3764:9393":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:6843:2328":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:40513:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:41230:7436":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:4847:11064":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"14:40:8610":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:2197:7940":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:15212:9090":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:3166:33103":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12387:24608":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:13504:8677":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:811:2322":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:46918:10440":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:9852:141":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14266:8825":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:43245:7762":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:6696:9547":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:10745:10036":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:10293:6640":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4977:11126":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:11001:8120":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:4585:9405":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:582:7756":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:44874:10401":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:3915:9397":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:2944:233":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"17:16109:9338":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"18:515:8262":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:7423:2289":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:7917:10039":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6485:7631":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12614:24486":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"4:11136:10109":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:3366:8090":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:15980:9308":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"11:1051:9868":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:3409:12199":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5982:11297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:1496:10703":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7694:7645":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:2881:9380":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:3888:9396":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:47414:10448":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:2832:9378":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:3994:17783":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:8013:17769":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:9536:31757":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:1131:36248":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:9349:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:7556:11590":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:39701:223":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:4915:17831":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:9096:184":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:9016:10116":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4473:10929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:9032:2286":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13254:7556":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:8455:10369":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"18:491:8264":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6531:7972":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:2359:9358":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:11539:9993":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:2202:9979":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12396:8541":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"7:78:23398":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:5128:211":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"16:2548:9366":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:3600:9392":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:8405:10100":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:13648:8711":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:7880:137":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:3021:9621":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:32402:6686":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"4:6297:227":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:4989:11135":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6901:7635":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:5939:7574":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:11175:10020":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:12784:7540":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"18:590:8269":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:8874:10009":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3001:11993":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:281:2288":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:11384:8037":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:4740:17794":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:15961:8623":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:6401:7630":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:8922:17877":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13809:8740":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:8844:7704":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:42120:2440":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:15101:9063":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:44476:12347":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:4527:9403":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:2228:7943":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:12208:6659":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:3132:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:2697:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:14145:8807":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:3500:17737":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:12468:6632":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:44641:6630":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:4986:9417":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"21:276:2409":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"17:15527:9192":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:11478:9991":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:11309:7711":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:11743:7949":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:3394:7352":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"16:2596:9368":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:3160:35824":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:10845:8099":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:40650:8050":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:10770:7715":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:11307:8434":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4789:11034":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10881:24496":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:42141:10303":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:6430:10016":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:1406:153":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:3080:12196":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:8050:9752":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"21:67:2045":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"16:6425:9511":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:38171:12185":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:21881:7749":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:1910:8003":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:40982:8080":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:9790:24481":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:7277:2325":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11243:7935":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:1923:8005":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:2788:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:11560:12159":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:557:9969":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:5807:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:7498:9963":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:687:7688":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:15733:9243":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"14:202:2274":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:7621:24423":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:15279:9109":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5104:11193":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6961:11571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:10408:8031":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:8921:2441":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"20:197:2371":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"17:15566:9200":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:46392:10427":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:1521:10713":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"11:0:2260":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"0:22:1968":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"16:7492:9692":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:44350:10386":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4529:10951":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5955:11290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12091:7955":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:44649:6625":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:149:7313":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:15108:9065":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:43816:8113":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13285:8627":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:1710:10832":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6222:11396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:475:7999":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:6194:7710":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:48269:10463":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:574:10687":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:11614:10025":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:2810:9377":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6545:9521":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"4:12005:17680":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:5322:9422":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:7597:37512":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:9759:24480":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:123:7316":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:15943:8613":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:5867:11242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10726:37520":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:10964:7704":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:15589:9213":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:7639:11600":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:2321:9356":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:1650:10801":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:10471:37519":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5052:11166":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"11:2352:9868":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:12077:8515":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:640:9972":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:39762:10342":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"5:4050:7328":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:46486:10429":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"22:386:7313":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"17:12345:8536":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4738:11010":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:1969:204":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4506:10943":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12898:24488":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:6013:17929":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:2144:7345":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:40623:10350":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"4:1819:8015":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:16076:9331":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:2209:17721":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"5:3343:2322":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:9515:719":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:32531:6510":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:13491:8676":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:33293:12177":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:621:6810":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:6569:7633":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12301:8535":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:4932:11100":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:40659:7735":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:536:7578":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:1286:9868":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:44425:10310":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:3493:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"16:2744:9374":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"20:319:17739":{"crate_id":20,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"16:7342:37517":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"18:481:8263":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:3011:9620":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:5798:7601":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:4149:12213":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12166:8521":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:1909:706":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:32348:10620":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:44697:10398":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:3687:7328":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13322:8633":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:12056:850":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:44621:6626":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:44333:10385":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:44937:10407":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"9:450:23405":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"14:165:23490":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:40447:6603":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"20:432:2367":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"1:12448:2286":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:15133:9070":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"11:1142:9871":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"20:601:37536":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"17:9891:24464":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11800:8474":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:9130:10020":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"20:683:2362":{"crate_id":20,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"11:2140:9866":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10915:7925":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:44912:10406":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:7792:24424":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:2472:9363":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:5830:9439":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"22:948:28643":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"11:1087:37508":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:5049:9419":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:5384:24412":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:12514:12340":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:5571:17859":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:511:8298":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:7347:7698":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"11:2469:2322":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"4:9452:8017":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"4:9188:33219":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:7474:9684":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:43492:11721":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12009:7506":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"13:0:2256":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:4814:11044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12459:7518":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:43037:6683":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"4:12032:402":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:4639:11477":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:42732:6674":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:3482:6614":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:3357:32050":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:113:7909":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:4964:17837":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:11122:7703":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:44924:9879":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:44024:6648":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:44185:6655":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:4311:9996":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10067:7522":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:15267:9106":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:7544:9697":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:44629:6627":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:43028:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:11617:8457":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:6943:11568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:7616:11594":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4440:10910":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:2864:9379":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:595:8299":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7269:37514":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:46340:10425":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:7747:12268":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:2694:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:4641:9407":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"11:434:7995":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"11:2369:9877":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"4:6644:240":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:5574:7595":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:2953:2315":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11369:8436":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6332:7625":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"3:0:2255":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"13:226:7657":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"9:393:23406":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12180:7960":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:1789:2322":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:42208:2325":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:1203:7931":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:16146:9347":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:21564:17739":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:2062:9949":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:9834:6614":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:39494:12200":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:909:8001":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:11212:159":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"4:3199:9983":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:10242:7527":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:3032:9389":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:5987:227":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:48214:10458":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:34419:9625":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:21893:31574":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:3837:9993":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:5388:17915":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:15557:9198":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6189:9488":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:3988:17782":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6467:9514":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:2420:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:533:10665":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:8986:10112":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"7:0:1688":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:8868:2325":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:3425:10084":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"6:4824:11050":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:39533:12197":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"22:879:28642":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"17:13218:7547":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"20:512:2363":{"crate_id":20,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"16:6687:9546":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:11001:8416":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:951:9865":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:6017:24415":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:3818:2322":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:12044:693":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:5780:7705":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:22843:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:6968:24420":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:6813:11492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:4569:17823":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:787:7690":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12335:7536":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:4488:10935":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:45985:10412":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:14057:8776":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:44530:2287":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:4182:7352":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:6263:11422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:5446:112":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"5:2973:36251":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:10054:8014":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"4:7670:10028":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"5:7468:9960":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:13989:8766":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:10800:9990":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:7004:7371":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11449:8348":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:16016:9315":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:39949:28657":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:0:2264":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4686:11006":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:12148:6660":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11604:8456":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"20:622:2357":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"4:11607:33186":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:13909:8755":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:7563:7389":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3602:2275":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:42078:2325":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:5941:11279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:9678:24468":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12659:24465":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:10101:154":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:43860:6639":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"4:8893:10110":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:2777:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:1913:19360":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:9101:241":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:15125:9068":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11155:8421":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:1495:8001":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:14087:8795":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:0:880":{"crate_id":6,"path":["libc"],"kind":"module"},"20:483:2361":{"crate_id":20,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"4:4180:8025":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:6071:11353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"21:313:2411":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"1:46192:10420":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4566:10971":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:8195:9766":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:569:10685":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:6162:7395":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:46294:10424":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:13182:8623":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13663:8716":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:7111:6538":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:42515:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:14324:8834":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"14:7:9851":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:23386:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:1691:10825":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:644:8265":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:16098:9337":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"4:5625:227":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7568:7641":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"4:9106:242":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:4469:17805":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:6898:11546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4578:10977":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"18:766:28617":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:2183:7693":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"15:288:7976":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:14282:8826":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:30618:6683":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:4114:10285":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:40690:8051":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:32500:2423":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:22729:10329":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:15049:9046":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:7333:12257":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:1040:9606":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:44653:7747":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"15:306:7981":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:47200:10445":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:9559:24463":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:2972:7686":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:42753:6676":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:7435:17690":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:5974:11292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:21236:31576":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:43696:8102":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:5760:24414":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"19:0:1132":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:46964:10441":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"14:0:2262":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:1703:10829":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8246:12265":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:41006:8082":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12220:8300":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4364:10856":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15612:9214":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11439:8439":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:2703:142":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:2380:17734":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:4459:6686":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:7531:8299":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"11:430:7994":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:7668:11607":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:6862:2329":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:5712:7596":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:5146:11208":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:7840:8176":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:8228:8019":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"22:1122:8234":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"1:38281:12187":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:1528:10716":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:13339:2319":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:2205:7375":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:26163:273":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:44617:6623":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"6:4584:10980":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:3735:9992":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:533:7377":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:43902:6646":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:6753:9560":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:7268:2320":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13463:8666":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:15680:9234":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:3232:9355":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:44831:234":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:4:1115":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"9:237:10369":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:8328:10091":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:21250:31564":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:16160:9348":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:4616:10993":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:5403:7502":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:14021:8770":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:6494:7435":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:5344:7328":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12202:24606":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"11:710:7691":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13869:8749":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:3196:36259":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:8294:10088":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10676:7687":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:9886:6674":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"16:7041:9597":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:7867:10037":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:4898:420":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:44201:6603":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13436:8657":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:15200:9084":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:12049:799":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:6540:10017":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:42739:6673":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:5897:11259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:1486:7690":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:2618:9369":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:15079:9057":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:14122:8806":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10337:7504":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:12140:8520":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:22631:10317":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:6351:17882":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:46706:10436":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:830:7334":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:4806:9411":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"11:328:7990":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:40719:8056":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:6929:7637":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:2326:9866":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:46170:10419":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:5363:9423":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:14170:8811":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:14497:8863":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:40379:28683":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:46608:10434":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10315:7528":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:7285:8006":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:5051:9999":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:2124:9606":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10775:7923":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:30630:28667":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:15087:9060":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7318:9643":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12244:8528":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:3936:17778":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6059:11346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:1682:10819":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:22268:17486":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:8072:9753":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10432:37522":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:46994:10442":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:7462:9683":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:40439:6602":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10988:7927":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:3510:17758":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:10922:9929":{"crate_id":4,"path":["std","sys","pal","unix","os_str","Buf"],"kind":"struct"},"17:10172:7525":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:42087:2439":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:16004:9313":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"4:4129:8022":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:21238:31561":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:15294:9113":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:4939:1102":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12930:24489":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:23629:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"4:2586:7382":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:40803:7742":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:6596:17874":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:44282:12346":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:12443:2298":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:4998:856":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:11767:7950":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:7756:10035":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:33900:12182":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:15224:9091":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:8980:114":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:4625:17783":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:42746:6675":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:5753:10014":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7828:9711":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:9541:7743":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"20:535:7901":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"20:450:135":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"11:837:9859":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"11:832:8001":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"22:449:7297":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"4:9036:10117":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:5866:9446":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:13856:8746":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"20:201:2043":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"17:13754:8731":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:8008:7714":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:5082:9999":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:47872:10451":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:44194:6654":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13765:8732":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6818:9573":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:11998:6636":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10520:37523":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6718:11462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:1270:9606":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:14413:8852":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:10925:24497":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:14455:8856":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:15546:9197":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:22564:7728":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:13118:10312":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:38336:12188":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:44818:147":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:7719:17678":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"9:486:23404":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:44052:6652":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:14757:8975":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:1796:8014":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:14698:8923":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6352:7629":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"11:1676:7322":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12758:8562":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12872:8565":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:723:151":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:9833:233":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:43846:2291":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:21192:31567":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:10136:12305":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4878:11075":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:14235:8819":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:5088:9420":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:42320:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12264:8533":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:16087:9336":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:11563:8453":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:2370:17729":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:1972:186":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:12053:1641":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:3239:9985":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:5727:7599":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:5876:7740":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:1743:659":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:8830:10109":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:22639:10318":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}