{"root":"0:0:1796","crate_version":"0.4.0","includes_private":false,"index":{"0:155:1775":{"id":"0:155:1775","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:2793:252-0:155:1775","a:1:2776:242-0:155:1775","a:1:8606:2386-0:155:1775","a:1:2833:2362-0:155:1775","a:1:8607:2385-0:155:1775","b:1:2571-0:155:1775","b:1:2577-0:155:1775","b:1:2582-0:155:1775","b:1:2261-0:155:1775","b:1:3412-0:155:1775","b:1:2264-0:155:1775","b:1:2567-0:155:1775","0:159"]}}},"1:12436:29888":{"id":"1:12436:29888","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43818:6595","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2567-0:155:1775":{"id":"b:1:2567-0:155:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2570:2117"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2833:2362-0:155:1775":{"id":"a:1:2833:2362-0:155:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:97:1788":{"id":"0:97:1788","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[551,4],"end":[554,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2264-0:161:1773":{"id":"b:1:2264-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2266:28202"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:88:1783":{"id":"0:88:1783","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:454":{"id":"0:168:454","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2261-0:170:1774":{"id":"b:1:2261-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2263:2152"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[703,0],"end":[711,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:100:1783":{"id":"0:100:1783","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[569,4],"end":[573,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12405:872":{"id":"1:12405:872","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12067:450"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12407:35346":{"id":"1:12407:35346","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12434:7932":{"id":"1:12434:7932","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43780:6582","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12435:35352":{"id":"1:12435:35352","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43790:6584","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2567-0:161:1773":{"id":"b:1:2567-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2570:2117"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12406:2084":{"id":"1:12406:2084","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12475:32131":{"id":"1:12475:32131","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12413:33251":{"id":"1:12413:33251","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11666:6576"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12421:30281":{"id":"1:12421:30281","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12478:32132":{"id":"1:12478:32132","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12501:35363":{"id":"1:12501:35363","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12131:6572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12433:29883":{"id":"1:12433:29883","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12432:29874"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43809:6596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12463:35353":{"id":"1:12463:35353","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12106:2257","str::split":"1:12454:2100","prim@char":"4:12067:450","`DoubleEndedIterator`":"1:7518:126","str::rsplit_terminator":"1:12466:35354"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43576:6588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3412-0:170:1774":{"id":"b:1:3412-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3414:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:99:2047":{"id":"0:99:2047","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[563,4],"end":[566,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[537,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1787","0:96:2043","0:97:1788","0:98:2078","0:99:2047","0:100:1783","0:102:1795"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:117:1781":{"id":"0:117:1781","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12526:32031":{"id":"1:12526:32031","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5523:36028":{"id":"5:5523:36028","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:36031":{"id":"5:5535:36031","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2248","`String`":"5:7489:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2248","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2264-0:170:1774":{"id":"b:1:2264-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2266:28202"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119:1794":{"id":"0:119:1794","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12437:30697":{"id":"1:12437:30697","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2571-0:155:1775":{"id":"b:1:2571-0:155:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2573:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2573:744":{"id":"1:2573:744","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2266:28202":{"id":"1:2266:28202","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8606:2386-0:161:1773":{"id":"a:1:8606:2386-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8606:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2263:2152":{"id":"1:2263:2152","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8607:2385-0:170:1774":{"id":"a:1:8607:2385-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8607:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12430:10216":{"id":"1:12430:10216","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43502:6581","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12454:2100":{"id":"1:12454:2100","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12106:2257","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::split_whitespace":"1:12432:29874","str::rsplit":"1:12460:32125"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43526:6587","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2776:242-0:170:1774":{"id":"a:1:2776:242-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12426:35351":{"id":"1:12426:35351","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12073:1506","crate::ops::IndexMut":"1:3077:2245","str::slice_unchecked":"1:12425:35350"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12524:1956":{"id":"1:12524:1956","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[521,0],"end":[535,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1002","0:87:2107","0:88:1783","0:91:1795"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:115-0:170:1774":{"id":"0:115-0:170:1774","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1774","glob":false}}},"1:12472:32129":{"id":"1:12472:32129","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12067:450","str::splitn":"1:12469:32127","self::pattern":"1:12106:2257"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43648:6589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1787":{"id":"0:95:1787","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[539,4],"end":[542,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2582-0:155:1775":{"id":"b:1:2582-0:155:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:133","1:2586:1588"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:107:718":{"id":"0:107:718","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[649,4],"end":[700,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2582-0:161:1773":{"id":"b:1:2582-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:133","1:2586:1588"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:87:2107":{"id":"0:87:2107","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5792-0:170:1774":{"id":"b:5:5792-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9536:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5790:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5794:1565"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12495:35359":{"id":"1:12495:35359","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12510:32133":{"id":"1:12510:32133","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:655":{"id":"0:46:655","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[226,0],"end":[231,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12404":{"id":"1:12404","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12405:872","1:12406:2084","1:12407:35346","1:12408:35347","1:12410:35348","1:12413:33251","1:12414:35349","1:12415:342","1:12416:341","1:12417:1978","1:12419:30280","1:12421:30281","1:12423:30282","1:12425:35350","1:12426:35351","1:12427:32115","1:12428:32116","1:12429:1942","1:12430:10216","1:12431:1961","1:12432:29874","1:12433:29883","1:12434:7932","1:12435:35352","1:12436:29888","1:12437:30697","1:12440:2079","1:12443:2080","1:12446:6504","1:12450:1955","1:12454:2100","1:12457:29879","1:12460:32125","1:12463:35353","1:12466:35354","1:12469:32127","1:12472:32129","1:12475:32131","1:12478:32132","1:12481:2054","1:12484:35355","1:12487:35356","1:12490:35357","1:12493:35358","1:12495:35359","1:12497:35360","1:12499:35361","1:12500:35362","1:12501:35363","1:12504:35364","1:12507:2102","1:12510:32133","1:12513:35365","1:12516:35366","1:12519:35367","1:12522:35368","1:12524:1956","1:12525:32029","1:12526:32031","1:12527:32032","1:12528:32033","1:12529:35369","1:12531:12011","1:12532:35370"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2581:1590":{"id":"1:2581:1590","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:685:28207":{"id":"5:685:28207","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12427:32115":{"id":"1:12427:32115","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12428:32116"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12529:35369":{"id":"1:12529:35369","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4573:35369"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43825:6543","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:33257":{"id":"5:5537:33257","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12527:32032"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12532:35370":{"id":"1:12532:35370","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4571:35370"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43843:6541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:36027":{"id":"5:5519:36027","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2248","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2248","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12493:35358":{"id":"1:12493:35358","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12513:35365":{"id":"1:12513:35365","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2833:2362-0:161:1773":{"id":"a:1:2833:2362-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:161:1773":{"id":"0:161:1773","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[512,0],"end":[518,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:2793:252-0:161:1773","a:1:2776:242-0:161:1773","a:1:8606:2386-0:161:1773","a:1:2833:2362-0:161:1773","a:1:8607:2385-0:161:1773","b:1:2571-0:161:1773","b:1:2577-0:161:1773","b:1:2582-0:161:1773","b:1:2261-0:161:1773","b:1:3412-0:161:1773","b:1:2264-0:161:1773","b:1:2567-0:161:1773","b:5:682-0:161:1773","0:167","0:92","0:169"]}}},"0:170:1774":{"id":"0:170:1774","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[602,0],"end":[615,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2793:252-0:170:1774","a:1:2776:242-0:170:1774","a:1:8606:2386-0:170:1774","a:1:2833:2362-0:170:1774","a:1:8607:2385-0:170:1774","b:1:2571-0:170:1774","b:1:2577-0:170:1774","b:1:2582-0:170:1774","b:1:2261-0:170:1774","b:1:3412-0:170:1774","b:1:2264-0:170:1774","b:1:2567-0:170:1774","b:5:5792-0:170:1774","0:106","0:110","0:111","0:183","0:108"]}}},"5:5526:36029":{"id":"5:5526:36029","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2586:1588":{"id":"1:2586:1588","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2776:242-0:161:1773":{"id":"a:1:2776:242-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2580:133":{"id":"1:2580:133","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12527:32032":{"id":"1:12527:32032","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12417:1978":{"id":"1:12417:1978","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3414:1603":{"id":"1:3414:1603","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39333:10175","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:1984":{"id":"0:44:1984","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1940":{"id":"0:22:1940","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2833:2362-0:170:1774":{"id":"a:1:2833:2362-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12440:2079":{"id":"1:12440:2079","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8607:2385-0:155:1775":{"id":"a:1:8607:2385-0:155:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8607:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12408:35347":{"id":"1:12408:35347","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12450:1955":{"id":"1:12450:1955","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41566:196","prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12500:35362":{"id":"1:12500:35362","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:161:1773":{"id":"b:5:682-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:7743","5:685:28207","5:686:28208"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:1002":{"id":"0:86:1002","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2582-0:170:1774":{"id":"b:1:2582-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:133","1:2586:1588"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2570:2117":{"id":"1:2570:2117","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2544:138"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12484:35355":{"id":"1:12484:35355","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12106:2257","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::matches":"1:12481:2054"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43748:6592","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12522:35368":{"id":"1:12522:35368","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12067:132","`FromStr`":"1:12066:2253"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12066:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12066:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12519:35367":{"id":"1:12519:35367","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12416:341":{"id":"1:12416:341","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12414:35349":{"id":"1:12414:35349","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12516:35366":{"id":"1:12516:35366","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:36030":{"id":"5:5534:36030","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:718":{"id":"0:112:718","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[717,4],"end":[719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12469:32127":{"id":"1:12469:32127","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:2257","str::rsplitn":"1:12472:32129"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43630:6590","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12431:1961":{"id":"1:12431:1961","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43512:6580","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[714,0],"end":[714,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","cause","provide","type_id"],"trait":{"name":"Error","id":"1:2629:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[522,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1786":{"id":"0:118:1786","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12466:35354":{"id":"1:12466:35354","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12106:2257","str::split":"1:12454:2100","prim@char":"4:12067:450","str::split_terminator":"1:12463:35353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43594:6586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:583":{"id":"0:24:583","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6914:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1795":{"id":"0:102:1795","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2078":{"id":"0:98:2078","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[557,4],"end":[560,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2793:252-0:170:1774":{"id":"a:1:2793:252-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8607:2385-0:161:1773":{"id":"a:1:8607:2385-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8607:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2776:242-0:155:1775":{"id":"a:1:2776:242-0:155:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8606:2386-0:170:1774":{"id":"a:1:8606:2386-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8606:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12410:35348":{"id":"1:12410:35348","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12408:35347"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1795":{"id":"0:91:1795","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12425:35350":{"id":"1:12425:35350","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12073:1506","str::slice_mut_unchecked":"1:12426:35351","crate::ops::Index":"1:3073:2244"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12481:2054":{"id":"1:12481:2054","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12106:2257","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::rmatches":"1:12484:35355"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43730:6591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2793:252-0:161:1773":{"id":"a:1:2793:252-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:686:28208":{"id":"5:686:28208","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3412-0:155:1775":{"id":"b:1:3412-0:155:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3414:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2788:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2577-0:155:1775":{"id":"b:1:2577-0:155:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:133","1:2581:1590"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2793:252-0:155:1775":{"id":"a:1:2793:252-0:155:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5794:1565":{"id":"5:5794:1565","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7:1771":{"id":"0:7:1771","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[316,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1940","0:24:583","0:44:1984","0:46:655"],"is_stripped":false}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[648,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12423:30282":{"id":"1:12423:30282","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12443:2080":{"id":"1:12443:2080","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12446:6504":{"id":"1:12446:6504","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41566:196","prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12432:29874":{"id":"1:12432:29874","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12433:29883"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43800:6583","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12460:32125":{"id":"1:12460:32125","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12106:2257","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::split":"1:12454:2100"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43544:6585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8606:2386-0:155:1775":{"id":"a:1:8606:2386-0:155:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8606:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12490:35357":{"id":"1:12490:35357","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12106:2257","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::match_indices":"1:12487:35356"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43694:6594","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12497:35360":{"id":"1:12497:35360","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12499:35361":{"id":"1:12499:35361","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2261-0:161:1773":{"id":"b:1:2261-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2263:2152"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12504:35364":{"id":"1:12504:35364","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12531:12011":{"id":"1:12531:12011","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4574:12011"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43834:6542","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:33258":{"id":"5:5538:33258","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12528:32033"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2585:133":{"id":"1:2585:133","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31991:10454","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2577-0:161:1773":{"id":"b:1:2577-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:133","1:2581:1590"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5518":{"id":"5:5518","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5519:36027","5:5520:2109","5:5523:36028","5:5526:36029","5:5534:36030","5:5535:36031","5:5536:2313","5:5537:33257","5:5538:33258"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5520:2109":{"id":"5:5520:2109","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:161:1773":{"id":"0:114-0:161:1773","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1773","glob":false}}},"0:116-0:155:1775":{"id":"0:116-0:155:1775","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1775","glob":false}}},"b:1:2571-0:170:1774":{"id":"b:1:2571-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2573:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12419:30280":{"id":"1:12419:30280","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12457:29879":{"id":"1:12457:29879","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11922:6597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:2313":{"id":"5:5536:2313","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2567-0:170:1774":{"id":"b:1:2567-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2570:2117"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12528:32033":{"id":"1:12528:32033","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12487:35356":{"id":"1:12487:35356","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12106:2257","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::rmatch_indices":"1:12490:35357"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43676:6593","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:7743":{"id":"5:684:7743","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12429:1942":{"id":"1:12429:1942","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43496:1977","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2261-0:155:1775":{"id":"b:1:2261-0:155:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2263:2152"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3412-0:161:1773":{"id":"b:1:3412-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3414:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:170:1774":{"id":"b:1:2577-0:170:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:133","1:2581:1590"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[716,0],"end":[720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9536:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1796":{"id":"0:0:1796","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1771","0:114-0:161:1773","0:115-0:170:1774","0:116-0:155:1775","0:117:1781","0:118:1786","0:119:1794"],"is_stripped":false}}},"1:12525:32029":{"id":"1:12525:32029","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39520:28333","Self::is_ascii":"1:12524:1956"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39520:28333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12428:32116":{"id":"1:12428:32116","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12427:32115"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12507:2102":{"id":"1:12507:2102","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:2257"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12415:342":{"id":"1:12415:342","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12416:341","`u8`":"4:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:744":{"id":"0:109:744","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[704,4],"end":[710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2571-0:161:1773":{"id":"b:1:2571-0:161:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2573:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2264-0:155:1775":{"id":"b:1:2264-0:155:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2266:28202"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96:2043":{"id":"0:96:2043","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[545,4],"end":[548,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:574:10521":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:14110:9059":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13851:8991":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:9063:7775":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:12087:1611":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:261:8242":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8606:2386":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:2366:11473":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"14:0:2223":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:1505:7748":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"9:393:23135":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:6849:11391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:11742:8511":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:7261:7402":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:22870:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:13816:8981":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12531:8668":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:9021:9952":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4373:10742":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:6174:7454":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:40068:6540":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:1561:2284":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:3041:2365":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"14:7:9695":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:47245:10281":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:1697:10663":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:40035:6545":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12123:8573":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10023:7878":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:39228:220":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:43648:6589":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"22:728:7362":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"17:504:8245":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:1558:10571":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:4772:17592":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:47699:10286":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:44507:10235":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6171:211":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:22295:28459":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:7478:11419":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:4921:9259":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"13:110:36936":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:6586:2284":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:43961:10217":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:5509:7415":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:7932:2238":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:5336:125":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:39520:28333":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:1516:215":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4968:10987":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:40243:7794":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5844:11097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:2501:9814":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:5808:7761":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:12737:8699":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:43843:6541":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:4137:7789":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:9617:36951":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:3261:11994":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"15:327:7710":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:43414:8062":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:8337:7969":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:41692:6611":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:3240:7955":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:6622:11282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:46543:10272":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:8318:11453":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:40304:7797":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:12066:2253":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:8953:24210":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13085:8767":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:2943:11987":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:7939:12062":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:7265:11406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:32139:6451":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:563:10516":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:1604:10600":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:1429:151":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"20:93:2312":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"6:4823:10910":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:43978:10218":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:21365:17197":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:1475:7746":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:46385:10270":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:5866:9290":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:5667:9845":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:2012:7893":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11327:8483":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:652:8212":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"11:785:2235":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:1986:201":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:7614:11441":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12074:8566":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:14335:9136":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4548:10824":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:7239:7956":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:11325:7479":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:1779:7962":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:4770:17591":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13162:8786":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:5851:11099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"11:2479:36934":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:12070:1116":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"12:0:2222":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:5727:7656":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:10795:11462":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:2535:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:3023:11989":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:207:7390":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:5696:24142":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:6051:11202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:30243:6711":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:21463:17194":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"11:1051:23213":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11407:24213":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"22:752:7372":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"4:1590:7955":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:45694:10247":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:46331:10268":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12911:8745":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:507:8212":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:6456:9357":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:44115:10221":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:12072:1474":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:7937:124":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7708:7704":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:11628:7780":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"18:574:8212":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:3065:8254":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:12751:209":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10561:8401":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:8205:24155":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:2325:205":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"11:344:7941":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:5905:11126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:7287:11407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:22705:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:41682:2383":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:491:8211":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4631:10841":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:3206:7954":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:11640:35196":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:5079:11037":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:4949:9260":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"10:36:10457":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:8588:7980":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"6:4721:10865":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:8879:7760":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:4033:10125":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:3539:17553":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:9031:82":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:41880:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10292:7566":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:12065:401":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"17:14145:9067":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:884:7746":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:9896:24225":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:7492:9536":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:5423:9841":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:3958:17574":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"10:0:2220":{"crate_id":10,"path":["adler"],"kind":"module"},"17:14001:9029":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:45610:10244":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7067:9447":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:3429:7415":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:11788:8515":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:13554:8917":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:1514:10546":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:6458:9853":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11215:8474":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:9886:7881":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:9933:8360":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:12071:339":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:4653:17578":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:46465:10271":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:9506:137":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:569:10519":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10714:7905":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:14378:9152":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:2992:11995":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:14448:9167":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:505:7408":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"4:3514:6554":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:8041:17564":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:7422:9794":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:9607:7877":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:5079:9836":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4884:1065":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:10196:244":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:6454:8038":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"11:2260:9710":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:1290:9710":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:1931:703":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:42566:69":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"0:24:583":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"17:12997:8754":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:11652:10141":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:5528:9844":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:9701:7878":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:21357:17535":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:1494:7747":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:2692:11451":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:10186:17535":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:9660:36947":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7269:36943":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:5569:8007":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:2783:2361":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:9036:89":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4523:10812":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11173:24334":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"4:907:2281":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:32045:6625":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:12184:8586":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:13906:9005":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:10628:8409":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:49859:17210":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:6028:8015":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:3888:9240":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4892:10940":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:2499:11768":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:8115:9602":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:9945:7585":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:2884:11978":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:47745:10287":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:11071:7476":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:9071:9957":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:9350:7584":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:4168:7790":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:40212:8000":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:10655:8069":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:2961:7743":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:12724:30406":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:7920:135":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:12062:8563":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:10513:8049":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:555:10511":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4425:10768":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:23416:241":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:1923:9996":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:11375:9858":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:43332:8056":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:7566:9985":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:20922:30727":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:42337:6617":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13148:8785":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:13286:8802":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:7935:12061":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:44158:2247":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:4943:17626":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"18:727:7558":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:1573:7952":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:12086:1610":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:3077:2245":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:3274:9822":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:1734:10676":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:1564:2235":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:5712:7653":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:12907:7454":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:11811:6601":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:10991:9844":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"4:3236:9821":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:7764:7756":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:3583:7115":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13451:8831":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:9505:134":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:10340:8382":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:2461:10451":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6386:9351":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:12332:116":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:5030:11014":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:43594:6586":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:3949:7415":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"21:0:1798":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"6:5752:11044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:6217:7497":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:21297:17535":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:41760:7744":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:9921:8358":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10661:8414":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:40802:8041":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:8713:24203":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:40333:8017":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:40221:7791":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:7555:8246":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4320:10699":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:6467:9358":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:7520:11420":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:14118:9060":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"11:772:7746":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:47839:10290":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:9755:152":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:2787:249":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:2644:9214":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"11:1855:2281":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:1672:1155":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"11:1562:9718":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:4208:7975":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:42194:7816":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:1761:9993":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:45664:10246":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:43253:8051":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:22182:7808":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4480:10789":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13174:8787":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:42876:7822":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:817:7951":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12598:8679":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:2551:262":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:507:10479":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:41768:2284":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:646:17472":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:14316:9131":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:3198:34560":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:5743:9280":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9328:6580":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"4:949:9708":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:6190:7457":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:8941:17673":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6792:9416":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:22044:10149":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:43434:8064":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:45765:10250":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:40355:8020":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:5648:9274":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:12484:8662":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11351:8485":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:5403:7562":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:12089:847":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:48035:10302":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:40374:8022":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:4954:10981":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:5627:7796":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13422:8811":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:10393:6587":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:4826:7448":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:9977:7503":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:6569:7690":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"9:426:23136":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:7503:9231":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:4585:9249":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:4350:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:1092:9714":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4690:10846":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:3797:9238":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:5935:11149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:7255:7451":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:46111:10261":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:4157:7972":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:693:2284":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12154:8582":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:3461:9235":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:8227:7791":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"11:1145:9716":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:8031:9879":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"9:0:2219":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13667:8960":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:3722:7772":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:3475:9826":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:10860:9827":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:21712:17208":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"22:636:7854":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"4:7897:7771":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:9197:718":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"0:0:1796":{"crate_id":0,"path":["idna"],"kind":"module"},"17:10616:8406":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:46779:10276":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:22166:7784":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:5596:11212":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:43405:8061":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:7568:7698":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:719:8234":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:943:9706":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:2382:17524":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:13792:8979":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:6914:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:42846:152":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:21106:30248":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"4:3698:17572":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:41318:10132":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:629:9780":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:10186:8373":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14056:9045":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:41709:231":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:47497:10283":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4877:10935":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6261:7648":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:3201:34447":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:10214:7891":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:45795:10251":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:9137:7579":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:40792:7498":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:40783:8040":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11951:8552":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:8389:9835":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:913:7951":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:596:10534":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:5982:7920":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:6613:11281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:10468:7981":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:2037:7772":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:12078:692":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:12068:1628":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:11666:6576":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:690:8231":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4683:10845":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:3326:11998":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:12702:159":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:1703:10664":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:955:9709":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:5661:9279":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:3073:2244":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:46017:10259":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"22:0:2327":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"17:14522:9182":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12208:8588":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:2935:11985":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:4166:7415":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:7555:11428":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:4076:7744":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13259:8799":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:43076:11550":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:9146:156":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:47894:10295":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:3185:36843":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:7406:34859":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:4352:7489":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:7621:24152":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:10627:6590":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:2892:11979":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:47920:10297":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:2473:7936":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:1570:10579":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:2888:11977":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"4:1568:2281":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"20:231:2308":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"17:14013:9030":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:8257:6582":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:41632:7744":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"14:40:8549":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:40810:8043":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:11848:6603":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"0:22:1940":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"17:13071:8765":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:614:36958":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:4411:9834":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:6332:7682":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:2361:199":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:6037:11197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:2085:9712":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"4:7743:17475":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1528:10551":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:9548:6618":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:5371:17710":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:6467:2235":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:7285:2284":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:44520:175":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:824:7397":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4468:10784":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:2498:17535":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:3232:9199":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:8608:2384":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:7452:9797":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:9165:9857":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:10447:7716":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:822:9703":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:6156:9329":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10430:8387":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:11639:8247":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"21:259:36978":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"17:13981:9022":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:622:6750":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:113:7865":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:5017:9262":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:6151:11226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:21058:17199":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:8363:9930":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:40192:7999":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:5808:11084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:534:7439":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:2670:6753":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:9752:7879":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:13966:9020":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2406:9204":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9488:36948":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:41615:168":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:8181:7708":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"4:10805:9874":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:2538:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:40754:8036":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:21194:17207":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:9003:24212":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:6835:11382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13546:8914":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:43544:6585":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:45586:10243":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11991:7600":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"17:9521:7875":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:7890:9874":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:1682:10654":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:7907:9875":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:11887:6602":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:21280:17198":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:926:9703":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"22:534:7853":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"6:4441:10772":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:9852:24224":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"14:215:9700":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:2216:9813":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"11:101:10450":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:40234:7792":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:6797:2287":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:5363:9267":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11934:8549":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:5110:9836":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12437:8650":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:5996:17724":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:22233:10152":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"11:1846:2284":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:2788:113":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:44090:10220":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:2629:133":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:9106:7777":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:4859:10924":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:7567:11430":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5833:11089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13676:8964":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"0:119:1794":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"1:2948:11988":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:41488:10195":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:7318:9487":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:11088:7478":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:30331:28469":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:46233:10266":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:9372:7564":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:475:7949":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:2931:11984":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:20890:30502":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"4:11342:7767":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10478:7219":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12136:8574":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13778:8976":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:6189:9332":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:7694:9865":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"18:671:7872":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:46855:10278":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:6901:7692":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:6638:7463":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:44337:12150":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11710:7593":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:1010:9710":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:6924:7465":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:4288:10127":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"13:0:2217":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:12098:8570":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:483:149":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:21313:17193":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:11719:24217":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:40568:8032":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:11647:9862":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:1764:657":{"crate_id":4,"path":["std","env"],"kind":"module"},"16:7828:9555":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:9650:7566":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:4801:419":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:30807:200":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6041:24145":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:10878:34223":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:40290:8008":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:43470:2251":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:12120:6574":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:39067:11999":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:897:7115":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:624:36956":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:4665:11304":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:11226:8478":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:7625:7470":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:7462:9527":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:44277:6565":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:9711:36952":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:1642:6709":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"18:0:2227":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:2832:9222":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6583:9366":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:22279:28449":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:13802:8980":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:42837:7820":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:39294:11990":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5864:11108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:21926:17535":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11586:7599":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:8833:7981":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"11:2394:2281":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:42316:6615":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:3760:9828":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:3173:7115":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:44456:232":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:2219:7437":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:1076:9716":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"9:330:10458":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:7054:9444":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:40544:8030":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"22:966:7377":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"4:8274:17571":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"16:6346:7684":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:7660:9545":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:1120:36553":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:40252:8001":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10588:8403":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"4:10573:9822":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:2766:9219":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:41802:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:8281:9617":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:42661:75":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:45817:10252":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:7670:9802":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:4497:17600":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10575:8402":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:4394:10750":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:7627:173":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:42821:7817":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:5999:7458":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:39964:6548":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:21108:11945":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:7579:11432":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:11922:6597":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:9911:7500":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:32052:7993":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:10370:7900":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12237:8599":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:7195:7773":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:42556:11542":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:2284:23255":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10534:8399":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:1817:7964":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12658:8688":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"20:97:2006":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"17:10084:7888":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"11:680:7744":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4346:10719":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:1579:7953":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:558:9803":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13055:8764":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:5781:9851":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12810:8709":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:6385:180":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:46187:10264":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5994:11182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:1428:7744":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:47996:10301":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:3034:2363":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:7322:2284":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:8716:2246":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:6588:11263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10685:8415":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"4:8851:7759":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7768:7706":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:46701:10275":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:10586:8050":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6415:9354":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:4407:7490":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:4034:7391":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:4053:9242":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"11:829:17487":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:6703:11311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:4236:7115":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:7532:11422":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11124:7915":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11473:8315":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:21227:17202":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:14434:9160":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5063:11034":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4418:10764":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11306:7593":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:10511:7473":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:4519:17601":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:6222:7766":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:8659:24189":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:7689:9863":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:5073:11035":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:1842:7966":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11389:7919":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12876:8734":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:3049:23284":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:14126:9062":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:9538:6614":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"16:2810:9221":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:5474:109":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"5:2225:36912":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7405:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:8134:9605":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:4416:6626":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:11235:8479":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:2618:9213":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:41841:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10916:8452":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:2722:9217":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:1691:10660":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:12049:34214":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:8345:9928":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:2321:9200":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6023:11195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:3010:122":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:7518:126":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"20:0:1797":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"11:1635:7387":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:7885:7967":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:9536:125":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4734:10869":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"21:302:2351":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"4:8865:9949":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:8244:6580":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:2171:11945":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:12698:8694":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:5853:7450":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:483:7438":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:2927:231":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:40262:7795":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:40761:8037":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10036:8363":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:7443:12063":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6352:7686":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"18:599:36957":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:3180:7953":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:1862:7952":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"11:1036:9712":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:1924:6749":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:9218:30169":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:43932:10209":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:2830:6446":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"21:228:2010":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"4:8973:17674":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:2368:2235":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11535:7596":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11547:8501":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:8895:24208":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:4527:9247":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:22150:7807":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:6686:11310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:1013:7391":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11448:24214":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"11:427:7945":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:40313:8011":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:8686:24202":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:39250:219":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:12016:9988":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:880:7399":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"11:666:7115":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:1546:10562":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:14401:9153":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:7389:17486":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:32027:9873":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:40272:8003":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:13487:8862":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:43947:10214":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:3410:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:43730:6591":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:10669:8070":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:1058:9710":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:46362:10269":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12888:8736":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:6206:8019":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:7222:2279":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:7465:9799":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:8050:9596":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:43322:8055":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:5944:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:3289:11997":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6425:9355":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"11:2317:7115":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:10771:8420":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:2793:252":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"17:12576:8678":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:10410:8385":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:4211:6624":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"11:1072:36935":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13838:8985":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:4068:12012":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"15:306:7931":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13710:8967":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:256:8241":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:2618:121":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:11910:8548":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:12106:2257":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"8:0:2218":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2547:263":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:10383:8384":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:6910:12067":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:3441:7909":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:4365:7417":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:759:7745":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:4497:9246":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:4279:226":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"15:0:2224":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:40768:8038":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:2860:9460":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:8996:9951":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"20:257:2007":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"4:9131:181":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:4078:17583":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:7162:7985":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:6499:7689":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4474:10786":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:7476:139":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7792:24153":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:40129:12028":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:7489:2367":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12086:8567":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:3038:2364":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:15:2194":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:10420:8295":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13739:8975":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"20:336:2301":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"17:13949:9013":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"4:7796:9873":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:41640:2284":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:6839:17676":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:4640:6536":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:8909:9846":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:5421:7415":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:9015:111":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:21150:17206":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"4:8440:9939":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"16:7544:9541":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"15:288:7926":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:2644:9816":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:4663:11302":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:7961:7772":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:2864:9223":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:44281:7803":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:45995:10258":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:44464:212":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:22241:10153":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"13:226:7714":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:2696:9216":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:6545:9365":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4655:10843":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:39208:217":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:5322:9266":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:10359:109":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:12024:7606":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:10637:8410":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:9959:7883":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4561:10828":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13298:8809":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"7:78:23127":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:2969:23283":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:533:10499":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:14269:9113":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12172:8583":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:12080:795":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:7342:36944":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:1752:11471":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:12092:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:4066:17580":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:13215:8792":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:31991:10454":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:3964:17573":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:2798:2274":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:39153:7994":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:8239:9507":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"4:12067:450":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"6:5790:11071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:3234:9820":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:2909:11982":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:8311:9831":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:46284:10267":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:8895:7983":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:20875:30502":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:11048:8461":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:2150:24268":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6604:11275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"20:383:2305":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"11:298:7937":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11261:8480":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:6720:11316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4669:10844":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:1840:7965":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:9762:36946":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"14:160:9695":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"9:450:23134":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6811:11372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"21:313:2352":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"19:0:1096":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:39948:28460":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6844:9418":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:6100:7415":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13202:8791":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12543:8670":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6092:11214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:7251:2235":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12765:8704":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:5121:9265":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:10978:9872":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:13914:9007":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5878:11119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:22206:10151":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"11:389:7385":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:41335:10134":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:11617:8502":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:860:9708":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:4753:10877":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:45632:10245":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:2907:9225":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:11845:8525":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"18:707:6574":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:21804:7806":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:7526:11421":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:10193:9963":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"11:1541:9717":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"0:46:655":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"16:7128:9957":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:10133:7992":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:2428:9205":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11111:8466":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:42116:88":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:7582:7699":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:2133:7408":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:43576:6588":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:45919:10256":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:14282:9119":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12373:8621":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:12970:8751":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:11151:7916":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:588:10529":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:4613:9250":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13575:8925":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:22969:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"4:3401:8040":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13135:8784":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:2548:9210":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12790:8706":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:4848:853":{"crate_id":1,"path":["core","iter"],"kind":"module"},"5:7293:215":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:47783:10288":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:6325:225":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:6268:36945":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:7880:8126":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"16:0:2225":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:7590:11436":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:12944:147":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:495:10474":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11295:7917":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:14355:9139":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:43676:6593":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:1466:7745":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:39168:218":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:44300:127":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:41543:10137":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:41624:7115":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:5156:208":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"5:2172:7749":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:992:9450":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:1850:2235":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:12959:8750":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:4719:9252":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:47905:10296":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:12079:798":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"18:80:7859":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:5814:11087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:10114:7964":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:11062:7911":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:6015:225":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:44253:6568":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12846:8715":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:5995:7637":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"22:470:7366":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"16:8154:9606":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12496:8664":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:1674:7391":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"21:291:36979":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"4:11851:7485":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:43080:8046":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:2286:9712":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"21:145:2009":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"16:6083:23254":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:10962:8456":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6485:7688":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:7571:1981":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:3274:30474":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:678:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:3802:2281":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:2596:9212":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:5588:9226":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:7480:160":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10903:7907":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10197:8375":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:30835:7813":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"5:6816:2288":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:6929:7694":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4621:10840":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:14083:9052":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"7:0:1658":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4799:10901":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:12896:111":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:32038:10172":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"4:10776:9972":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:11488:7481":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:2786:250":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"20:249:133":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"17:12621:8684":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:7573:11431":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:9172:7580":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:43304:8052":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:582:7813":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:3523:34891":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:2334:7744":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:10698:8417":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:41381:7815":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:4070:17581":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:11551:9829":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10672:7902":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:22771:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"4:358:9800":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6401:7687":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:7271:36842":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:9086:7563":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:3655:8259":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:2788:9220":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:12077:690":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"16:7041:9441":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11337:24335":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12750:8701":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:9085:34217":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:9141:240":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:10507:8397":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"20:356:2303":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"1:45965:10257":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:2330:130":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:45734:10249":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:1557:7115":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:7597:36940":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:22324:11475":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:9207:7581":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:7489:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:6030:11196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:4700:10853":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:10440:8388":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:12073:1506":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:7722:7705":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:2972:36349":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:12082:797":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:1521:10548":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:501:10476":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:2487:10455":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"21:266:2338":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"4:11006:34220":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:7601:11437":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:755:8240":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:2450:9206":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:4835:9256":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:1140:7958":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:12085:1609":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:2568:7444":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:2394:17530":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:11654:9862":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:5419:7563":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:41465:28466":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12111:8572":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:22:731":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:11316:8482":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:22903:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4786:10896":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:14076:9051":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4555:10826":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:922:7748":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:46619:10274":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4838:10914":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:13188:8788":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:3276:9823":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4451:10778":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:324:7940":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:9070:7562":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:6820:11375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:2258:101":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:11205:34212":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:9790:12101":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:4768:17589":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:47039:10280":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:1778:2281":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:46889:10279":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:12091:1215":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"16:4557:9248":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"22:1122:8184":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"17:12724:8697":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:20905:30726":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12196:8587":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11162:8468":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"21:320:8188":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"6:1596:10595":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:6663:11309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:641:9806":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:44265:6569":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:7544:11424":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:3763:9829":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:22837:185":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:6735:11321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:531:8213":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:2541:157":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:4433:10770":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12778:8705":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:4597:17618":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:10376:34916":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"11:2238:9450":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:43825:6543":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13274:7593":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:44446:224":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4989:10999":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:14134:9063":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:10850:124":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:3570:177":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12711:8696":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:4490:450":{"crate_id":1,"path":["core","char"],"kind":"module"},"17:11490:8499":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:44104:12144":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:41777:200":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10603:8405":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:8490:10201":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:43780:6582":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:43342:8057":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12945:8748":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:8329:9927":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:9051:9956":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:11098:7914":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:47859:10292":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:43313:8053":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:9747:148":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:7293:11409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:8582:7115":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:11137:8467":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:2504:9208":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:4641:9251":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:2897:9465":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:40023:6544":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:7015:9440":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:44261:6571":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:853:7744":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:8926:24209":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5384:24141":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:7792:9872":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:44537:10238":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:644:8212":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:11154:8065":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12465:8657":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:9242:7582":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6893:7649":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:11636:12107":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:7554:7697":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:1525:7959":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:40404:8025":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:13040:8760":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:46163:10263":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:44549:9723":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:29988:11769":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:45520:10240":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:6059:11205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:45872:10255":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:3244:259":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:4806:9255":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:40016:6543":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:5085:11040":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:10520:8398":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:10059:8364":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:6017:24144":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:8194:9827":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"18:736:28173":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:21056:17535":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:13024:8758":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13723:8972":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7006:9437":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4406:10755":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11687:24216":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:30259:69":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:40087:10180":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"9:357:23149":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"9:486:23133":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"11:731:7748":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:784:7394":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:5375:17711":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:21379:7804":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4573:10837":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:43392:8060":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:20862:7813":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:8903:2284":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:8036:7770":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"16:8072:9597":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:5612:9228":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:918:7747":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:39921:6542":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6721:24148":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:1507:10543":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12452:8655":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:43502:6581":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:47637:10285":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:35:2280":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:10285:11714":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"11:0:2221":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:44269:6570":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:1537:10556":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:4862:9257":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:9233:11458":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:7976:30167":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:30273:28468":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:40322:8012":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:12111:2246":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6204:7664":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13244:8795":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"22:43:28195":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"17:10494:7575":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:4822:31811":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:42612:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:10641:6589":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:47821:10289":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13758:7614":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10468:7587":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:681:8229":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6513:9359":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:4934:17625":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:6983:7436":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:2384:17525":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:40342:8018":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:9823:24223":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:5782:11069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5970:11170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:3519:2235":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:6944:36939":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:14024:9034":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:14536:9185":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"9:507:7220":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:12131:6572":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:9867:8355":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4400:10752":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2784:6444":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:40042:6546":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:12084:1612":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:4362:6625":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:897:2235":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:8146:9917":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:12473:8659":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"4:1895:6748":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"11:423:7944":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:3195:34036":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"11:1869:7953":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:11405:9861":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:7025:12054":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:7776:17506":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"16:2339:7623":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:14068:9048":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:4339:9833":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:6624:17669":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"0:117:1781":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"1:4283:10126":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10165:24243":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:62:17750":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:7474:9528":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7736:9546":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:1484:7951":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13826:8982":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:42036:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:1781:7963":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"6:6741:11322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:22639:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:12177:12137":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6742:9403":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:5088:9264":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:841:9706":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5982:11175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:1496:10538":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:8167:9609":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:4986:9261":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:3671:7391":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:5816:7663":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:434:8244":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:2855:9463":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:123:17805":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"4:11390:9859":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:1184:7887":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:8195:9610":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"18:636:8228":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:0:531":{"crate_id":1,"path":["core"],"kind":"module"},"17:10240:7585":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:14163:9070":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4379:10743":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:2380:9203":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"20:369:2304":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"1:45564:10242":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:6277:7458":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"4:8174:7773":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:8530:17649":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:4436:6452":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10227:8378":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12252:8605":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13897:9004":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:9531:36949":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10548:6585":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4501:10799":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:7377:2249":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:2604:9815":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:45716:10248":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:7561:11429":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6171:11240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:12090:1668":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"16:4745:9253":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:660:7867":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:4195:17598":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:14324:9132":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:39326:10174":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:6334:17677":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13113:8773":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:41501:9831":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:21359:17195":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:41564:198":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"5:5860:2235":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:43496:1977":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"11:1687:151":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7391:24151":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:10570:9820":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:1576:10581":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:3764:9237":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:9546:211":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"18:538:7552":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:489:10471":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:7231:2284":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:4667:11306":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4847:10920":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10547:8400":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12293:8616":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:22097:10150":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:22936:184":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:42868:7821":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:13685:8965":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:481:8210":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:1044:9450":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4900:10945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:7478:7424":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:2894:7447":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5013:11006":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:40365:7798":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13989:9023":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:8957:17672":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6879:9422":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:21094:17201":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:14173:9075":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:11228:11958":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:5892:11120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:14499:9178":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:2143:9784":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7090:9449":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"11:1842:7115":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:6212:11474":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"22:449:7362":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"1:40099:28458":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:20920:30729":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10646:8411":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:44245:6563":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"6:4997:11001":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:10265:7892":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11201:8470":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:2881:9224":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:589:17470":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:6958:7433":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:3865:9830":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:11024:7760":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7102:24150":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:43353:8058":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:4943:10976":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:5327:7391":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:44249:6566":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:1635:633":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"14:221:9702":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11244:8502":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:6098:7452":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:5137:7423":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:9058:7765":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:41524:10135":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:9540:6615":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:12126:6573":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:3600:9236":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7360:36942":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13611:8954":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:22331:10164":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:10368:7744":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:32031:9507":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:3654:2284":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:9488:6554":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:3830:9239":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:2876:2240":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:44257:6567":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:8607:2385":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"20:348:2302":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"4:12081:796":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:11348:7984":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11086:7913":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:4022:17578":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:8097:9600":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:2929:133":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:12083:793":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:6640:11291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:6568:9854":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:40281:8006":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:44273:6564":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:40414:8027":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:364:9801":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:11187:8066":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:5049:11028":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4815:10907":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:11511:9828":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:548:148":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:548:10508":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:5633:2287":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:43834:6542":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:9223:35202":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:4792:10899":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10097:8366":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:7589:2282":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:10475:8048":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:5634:9270":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:1444:2284":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:5830:9283":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:7436:7645":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:9184:9959":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:30237:2276":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:276:2248":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:5049:9263":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:6186:11251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:42075:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"20:315:36976":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"1:22345:10165":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:4992:17632":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:13868:8996":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7677:215":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:21458:17535":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:43526:6587":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"20:223:8192":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"11:122:7381":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5020:11009":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:9517:7472":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:43061:10205":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:12776:10147":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2833:2362":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:12225:8596":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:9912:8356":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"18:590:8216":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:1710:10667":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:40008:6542":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:4889:9258":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:3358:17561":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"0:7:1771":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"5:6513:7391":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:22672:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:9512:7967":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"4:11572:9830":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:7758:17476":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13693:8966":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12934:8746":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:6002:11183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:2582:7442":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10012:7566":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"14:165:23219":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:43694:6594":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:1275:9712":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11872:8533":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"3:0:2216":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12280:8615":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:14420:9158":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:9550:6619":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:1650:10636":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:11082:7477":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:7503:2236":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:5798:7658":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:7862:9559":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:4853:10921":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:0:475":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:40049:6547":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:41997:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"11:1876:7954":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:5915:11133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:4395:7415":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:43910:12143":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:7514:2237":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:21491:7804":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:14042:9038":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4775:10888":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:22804:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:20903:30724":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11886:8534":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:5409:9837":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:46141:10262":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:2933:23282":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:483:10468":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:12074:1593":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:727:149":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:21816:30500":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:6665:7391":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:9542:6616":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:44053:10145":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:6883:11400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:10009:10192":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12685:8693":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4045:106":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:3032:9233":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9985:7884":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:7624:11443":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4960:10982":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4913:10955":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"11:357:7383":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:3532:17533":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:41649:2382":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:9998:8335":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:14156:9068":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13876:8999":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13567:8924":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:527:10496":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12830:8710":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:14514:9179":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"21:198:2353":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"9:52:7718":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:8599:9948":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:9312:7965":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:2744:9218":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"11:796:2281":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:8572:7977":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:21707:17200":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:4461:10781":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:6145:11225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:3315:9825":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:42829:7819":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:40082:104":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:638:9804":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:6082:11211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:9790:36953":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:46209:10265":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:4333:10709":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:4179:7973":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:11381:8490":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:2836:6448":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:41752:7115":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:2161:634":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:2367:206":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:43818:6595":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"23:0:2328":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"6:4592:10838":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:4774:9254":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11761:8514":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:7011:11753":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:45540:10241":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:2178:7896":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:6726:11318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:536:7635":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11358:24336":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:5790:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:11367:8487":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:1075:7886":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:46065:10260":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:1525:23214":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:2472:9207":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:6865:11397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:39272:221":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12267:8611":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:7538:11423":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4728:10866":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:43790:6584":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:46589:10273":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:6226:9334":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:2845:2239":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9102:7578":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:8250:6587":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"16:7651:9544":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:8794:24205":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:43512:6580":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:47387:10282":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:7715:7474":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:11232:9857":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:6318:9347":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7782:9547":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:149:7378":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:3313:9824":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:10616:7474":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:4344:9243":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:2173:11946":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:39184:215":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:1501:10540":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:3234:11991":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:47868:10293":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"22:1034:28199":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"11:2303:9721":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:5056:11031":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:7613:9543":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:42330:6616":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:9487:231":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"6:580:10524":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"18:564:7554":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:7669:17535":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:1826:183":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:2165:7716":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"4:3125:9817":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:12043:7613":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:3596:7744":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:2866:11976":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:515:8209":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:47848:10291":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:2919:9469":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:14478:9175":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:9795:7802":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:12088:1608":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:9531:116":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:11000:8458":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:10436:6597":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:42155:95":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:2058:9450":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:7284:2382":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:5435:9268":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:22606:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:10929:8454":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:7573:2281":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:863:2284":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:9051:24190":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:39988:6551":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:7310:11418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4611:10839":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:3255:11992":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:43379:7999":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"4:8263:7969":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:4417:9244":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:47958:10299":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4529:10815":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:9201:9960":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"21:67:2008":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"17:12305:8619":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:4745:10873":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:4848:222":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:119:17804":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4643:10842":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:6974:8034":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:44562:10239":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:42323:6614":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:1591:10593":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6968:24149":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:6809:6477":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:10576:9824":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"11:868:9709":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"11:2074:9710":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10139:24242":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:10980:7566":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14033:9037":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:10456:8393":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:44499:10233":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:4:1079":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"18:521:28175":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:5443:9842":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:22258:28451":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:7330:2284":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:400:8243":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:42621:69":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:7436:28458":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:871:7745":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:9277:7583":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:2467:10452":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10278:8380":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:8367:11291":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:2463:11448":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:8422:17636":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:2214:134":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:39927:10176":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:10869:34206":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11815:8521":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:7439:12064":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:47973:10300":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:42858:10201":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:2939:11986":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9574:36954":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:4728:17627":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:3171:216":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:2838:110":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:47943:10298":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:8183:7774":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"0:44:1984":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"14:187:23226":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12671:8425":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13922:9009":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:6043:11200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:14100:9056":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:10982:7218":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:43424:8063":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:8978:24211":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:2245:7752":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:7606:7468":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:43484:6579":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"4:6672:238":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4769:10885":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:10788:24310":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:1632:10624":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:3457:9923":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:43630:6590":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:42596:9574":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"0:118:1786":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"16:5760:24143":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:10316:8381":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"18:609:8223":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:0:2226":{"crate_id":17,"path":["object"],"kind":"module"},"1:9223:7799":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:5459:9843":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:2544:138":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:5905:9293":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:5897:11121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:46825:10277":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"22:948:28198":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"1:41958:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:6960:9426":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"7:31:23120":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:10840:135":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:9136:239":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:1304:9716":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:8887:7115":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:2968:36348":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:4056:17579":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:932:17487":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11971:8562":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:8839:203":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"4:11213:7803":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:1413:7115":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:766:28174":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:699:7557":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:4540:10819":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:4187:7974":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"20:327:8196":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"1:39978:6550":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:1912:19154":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13973:9021":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:5599:17654":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:10397:7901":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:1718:10671":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:840:7115":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:2776:242":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"16:6361:9348":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:7945:9877":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:4805:10904":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:542:10505":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:4259:9832":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:4008:17576":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:2051:9783":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:1067:9712":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:41295:165":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11191:8247":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:11507:24215":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7884:24154":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4978:10993":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:40390:8024":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:8825:24206":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:3737:9783":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:3044:2366":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6790:11358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:6600:24147":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:1639:10628":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:6580:11258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:5660:7458":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:10112:7889":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11281:7592":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:9564:7876":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:261:7391":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5820:11088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:8848:24207":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13632:8959":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:6571:17667":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:11417:7987":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:44325:10230":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:3214:7952":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:2305:23281":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"9:237:10201":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10726:8419":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"22:386:7378":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"17:11661:8504":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13228:8793":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13010:8755":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:6494:7462":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:4462:9245":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:4922:10961":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:30203:2275":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6279:7679":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:21482:17535":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13101:8771":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:5574:7652":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:234:231":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:21241:11945":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:4494:10796":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:582:8246":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:9455:36950":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:14469:9173":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:14460:9169":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"22:879:28197":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"1:2925:9470":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:1983:202":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:2880:11980":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:8513:9942":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:14221:9112":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:5975:7423":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:10830:7771":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:6753:9404":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:42584:114":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:22357:11807":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:8594:24191":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:8237:8030":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"6:1664:10647":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:3232:7908":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:6826:2289":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"20:8:2307":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"5:4987:7415":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:43800:6583":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:14296:9125":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"11:2351:2284":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:6376:24146":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:7053:7466":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:12689:143":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:4709:10858":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:5774:9848":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:41701:210":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:10750:7589":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4867:10929":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:8765:24204":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:7769:7755":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"4:11423:7988":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:3219:36838":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:6009:11184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:44026:10219":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:14308:9128":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:22738:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4759:10879":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:2255:100":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:6856:11394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:6531:7922":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:4934:10970":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:25818:272":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:4428:7417":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:43748:6592":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10126:8367":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"4:4849:17588":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:4021:10124":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:6915:7693":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:2409:6643":{"crate_id":4,"path":["std","io"],"kind":"module"},"5:1104:7957":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:45854:10254":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:7534:9232":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:5963:9299":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:41919:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:1127:9715":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:7694:7702":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:12038:17477":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:7513:9539":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:39333:10175":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:12007:7604":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10949:8455":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:3994:17575":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"15:394:23246":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"4:4731:17600":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"11:703:7747":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6687:9390":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"14:31:9695":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:2368:17520":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"10:44:7717":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:6696:9391":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:2574:9211":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:14346:9137":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:2904:11981":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7523:9540":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:4463:6627":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:39936:6549":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:9010:7762":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:10009:7508":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:3315:9234":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:3249:140":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:11250:11466":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"4:12033:7781":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:3915:9241":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10366:8383":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:11193:9949":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:39347:8184":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:1549:7415":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12422:8646":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:96:7862":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:1674:10653":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4949:10979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:4016:17577":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:9445:7873":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:5939:7631":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:21928:17196":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:8323:17599":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"22:669:7548":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"4:5653:225":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:22218:28456":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:11871:6600":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:9780:7880":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:13890:9002":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:47879:10294":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:2223:17517":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:75:1610":{"crate_id":1,"path":["core","u32"],"kind":"module"},"5:2962:36552":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:9994:7442":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:4196:7415":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:2359:9202":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:2914:11983":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:42639:133":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:8269:7971":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12983:8753":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:2872:9464":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:41352:12073":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:3565:7910":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:4004:2235":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:40115:10181":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:14090:9053":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:40000:6541":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:44125:10225":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6818:9417":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:10344:7115":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:40554:8031":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:3332:2281":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:10135:9962":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"16:6560:7380":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"4:5268:207":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:11179:7759":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:44138:6575":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:4511:10806":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:8928:9950":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:45835:10253":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:30437:28450":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:9544:6617":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:12999:2278":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:9972:8362":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4309:10691":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"14:202:2234":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11272:8481":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:416:179":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:12066:999":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:1738:11960":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"11:1882:7955":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:39106:11996":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:40172:10182":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:10738:7906":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:2841:6450":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:10818:9977":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:21489:17203":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:6759:11332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4488:10794":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:2526:9209":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:2277:108":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:4829:10911":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:40162:7491":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:2964:11445":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:43809:6596":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:10800:11464":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"4:9028:34072":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:8206:17534":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:40777:8039":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:2670:9215":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"9:177:7733":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:654:18163":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:2850:11806":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4385:10745":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11573:7597":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:7301:7754":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:11269:156":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"11:2494:2249":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4296:10682":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:0:1498":{"crate_id":4,"path":["std"],"kind":"module"},"17:11023:8459":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:5673:9227":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:6633:11287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:1259:9450":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:1585:7954":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:47575:10284":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12554:8671":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12513:8667":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:6243:9337":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12645:8685":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:7953:9878":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:2209:7899":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11074:8465":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"21:276:2350":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}