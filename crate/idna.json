{"root":"0:0:2357","crate_version":"0.5.0","includes_private":false,"index":{"a:1:42262:2979-0:155:2336":{"id":"a:1:42262:2979-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42262:2979","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13374:37404":{"id":"1:13374:37404","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12986:7178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2718-0:170:2335":{"id":"b:1:2718-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32401:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2712:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2720:2723"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13294:33627":{"id":"1:13294:33627","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13293:33626","str::split_at_mut_checked":"1:13296:33631"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:2349":{"id":"0:97:2349","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[552,4],"end":[555,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2344":{"id":"0:100:2344","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[570,4],"end":[574,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42301:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3006-0:170:2335":{"id":"b:1:3006-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3009:137","1:3010:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[704,0],"end":[712,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2968:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:42301:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13389:37407":{"id":"1:13389:37407","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13405:37410":{"id":"1:13405:37410","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5022:37410"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44348:7144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13409:37411":{"id":"1:13409:37411","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5020:37411"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44366:7142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2718-0:161:2334":{"id":"b:1:2718-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32401:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2712:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2720:2723"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5689:38105":{"id":"5:5689:38105","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32400:237-0:170:2335":{"id":"a:1:32400:237-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32400:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13299:10761":{"id":"1:13299:10761","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12365:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44025:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2356":{"id":"0:102:2356","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[577,4],"end":[582,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42301:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13292:37392":{"id":"1:13292:37392","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12371:1726","crate::ops::IndexMut":"1:3492:2856","str::slice_unchecked":"1:13291:37391"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13370:37401":{"id":"1:13370:37401","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13372:37402":{"id":"1:13372:37402","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:2574":{"id":"5:5702:2574","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13308:37393":{"id":"1:13308:37393","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44313:7192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3043:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13293:33626":{"id":"1:13293:33626","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13295:33630","str::split_at_mut":"1:13294:33627"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13377:37405":{"id":"1:13377:37405","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2995-0:161:2334":{"id":"b:1:2995-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109:834":{"id":"0:109:834","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[705,4],"end":[711,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42301:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13303:30032":{"id":"1:13303:30032","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13301:30033"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44332:7204","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5704:34871":{"id":"5:5704:34871","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13401:34801"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[538,0],"end":[583,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:2348","0:96:2617","0:97:2349","0:98:2652","0:99:2621","0:100:2344","0:102:2356"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2991-0:161:2334":{"id":"b:1:2991-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2994:2690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13397:2523":{"id":"1:13397:2523","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13386:37406":{"id":"1:13386:37406","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13316:2654":{"id":"1:13316:2654","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2995-0:155:2336":{"id":"b:1:2995-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13323:2521":{"id":"1:13323:2521","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42170:191","prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13368:37400":{"id":"1:13368:37400","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13319:7105":{"id":"1:13319:7105","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42170:191","prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:2355":{"id":"0:119:2355","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42301:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7:2332":{"id":"0:7:2332","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[328,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:2506","0:24:618","0:44:2550","0:46:693"],"is_stripped":false}}},"1:13283:2544":{"id":"1:13283:2544","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42170:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13279:34867":{"id":"1:13279:34867","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12507:7183"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13399:34799":{"id":"1:13399:34799","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13404:34805":{"id":"1:13404:34805","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:41907"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3001-0:170:2335":{"id":"b:1:3001-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2971:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3004:137","1:3005:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5701:38108":{"id":"5:5701:38108","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2824","`String`":"5:7744:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2824","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13348:33640":{"id":"1:13348:33640","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:2334":{"id":"0:161:2334","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[513,0],"end":[519,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:42262:2979-0:161:2334","a:1:32400:237-0:161:2334","a:1:32459:2960-0:161:2334","a:1:3249:7048-0:161:2334","a:1:42263:2978-0:161:2334","a:1:3214:247-0:161:2334","b:1:2995-0:161:2334","b:1:3006-0:161:2334","b:1:2718-0:161:2334","b:1:3830-0:161:2334","b:1:2721-0:161:2334","b:1:2991-0:161:2334","b:1:3001-0:161:2334","b:5:793-0:161:2334","0:167","0:92","0:169"]}}},"5:795:7960":{"id":"5:795:7960","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13300:2528":{"id":"1:13300:2528","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44035:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:34870":{"id":"5:5703:34870","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13400:34800"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5686:2682":{"id":"5:5686:2682","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13392:37408":{"id":"1:13392:37408","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42263:2978-0:155:2336":{"id":"a:1:42263:2978-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42263:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:797:29694":{"id":"5:797:29694","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[522,0],"end":[536,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3043:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:91:2356":{"id":"0:91:2356","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42301:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1181","0:87:2680","0:88:2344","0:91:2356"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:98:2652":{"id":"0:98:2652","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[558,4],"end":[561,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13357:37396":{"id":"1:13357:37396","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12960:2834","`DoubleEndedIterator`":"1:8333:129","prim@char":"4:12365:471","str::matches":"1:13354:2628"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44271:7200","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3249:7048-0:161:2334":{"id":"a:1:3249:7048-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3249:7048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3830-0:155:2336":{"id":"b:1:3830-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32401:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3832:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42263:2978-0:170:2335":{"id":"a:1:42263:2978-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42263:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3009:137":{"id":"1:3009:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32324:11028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:5:5937-0:170:2335":{"id":"b:5:5937-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10389:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32401:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5935:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5939:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:168:475":{"id":"0:168:475","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13298:2508":{"id":"1:13298:2508","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12365:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44019:2543","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13272:2658":{"id":"1:13272:2658","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32459:2960-0:155:2336":{"id":"a:1:32459:2960-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32459:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:24:618":{"id":"0:24:618","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:7158:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:2621":{"id":"0:99:2621","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[564,4],"end":[567,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13330:30011":{"id":"1:13330:30011","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12775:7205","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13363:37398":{"id":"1:13363:37398","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12960:2834","`DoubleEndedIterator`":"1:8333:129","prim@char":"4:12365:471","str::match_indices":"1:13360:37397"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44217:7202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:693":{"id":"0:46:693","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[229,0],"end":[237,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13398:34797":{"id":"1:13398:34797","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40069:7042","Self::is_ascii":"1:13397:2523"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40069:7042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2550":{"id":"0:44:2550","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[223,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13400:34800":{"id":"1:13400:34800","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2357":{"id":"0:0:2357","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:2332","0:114-0:161:2334","0:115-0:170:2335","0:116-0:155:2336","0:117:2342","0:118:2347","0:119:2355"],"is_stripped":false}}},"b:1:2995-0:170:2335":{"id":"b:1:2995-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13408:12721":{"id":"1:13408:12721","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5023:12721"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44357:7143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5685:38104":{"id":"5:5685:38104","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2824","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2824","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3249:7048-0:170:2335":{"id":"a:1:3249:7048-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3249:7048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13287:30570":{"id":"1:13287:30570","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13313:2653":{"id":"1:13313:2653","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2991-0:170:2335":{"id":"b:1:2991-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2994:2690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96:2617":{"id":"0:96:2617","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[546,4],"end":[549,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3006-0:161:2334":{"id":"b:1:3006-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3009:137","1:3010:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115-0:170:2335":{"id":"0:115-0:170:2335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:2335","glob":false}}},"1:13291:37391":{"id":"1:13291:37391","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12371:1726","str::slice_mut_unchecked":"1:13292:37392","crate::ops::Index":"1:39714:2855"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13282:33607":{"id":"1:13282:33607","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12384:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42262:2979-0:170:2335":{"id":"a:1:42262:2979-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42262:2979","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42262:2979-0:161:2334":{"id":"a:1:42262:2979-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42262:2979","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3001-0:161:2334":{"id":"b:1:3001-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2971:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3004:137","1:3005:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13373:37403":{"id":"1:13373:37403","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2734:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5684":{"id":"5:5684","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5685:38104","5:5686:2682","5:5689:38105","5:5692:38106","5:5700:38107","5:5701:38108","5:5702:2574","5:5703:34870","5:5704:34871"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2721-0:161:2334":{"id":"b:1:2721-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32401:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2715:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2723:29689"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3249:7048-0:155:2336":{"id":"a:1:3249:7048-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3249:7048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:88:2344":{"id":"0:88:2344","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42301:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13342:33636":{"id":"1:13342:33636","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12365:471","self::pattern":"1:12960:2834","str::rsplitn":"1:13345:33638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44153:7198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:33630":{"id":"1:13295:33630","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13296:33631"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3214:247-0:155:2336":{"id":"a:1:3214:247-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3214:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:118:2347":{"id":"0:118:2347","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42301:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13333:33634":{"id":"1:13333:33634","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12960:2834","`DoubleEndedIterator`":"1:8333:129","prim@char":"4:12365:471","str::split":"1:13327:2674"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44067:7193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3043:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13360:37397":{"id":"1:13360:37397","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12960:2834","`DoubleEndedIterator`":"1:8333:129","prim@char":"4:12365:471","str::rmatch_indices":"1:13363:37398"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44199:7201","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2718-0:155:2336":{"id":"b:1:2718-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32401:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2712:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2720:2723"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13383:33642":{"id":"1:13383:33642","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2720:2723":{"id":"1:2720:2723","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42263:2978-0:161:2334":{"id":"a:1:42263:2978-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42263:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:793-0:161:2334":{"id":"b:5:793-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2734:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:7960","5:796:29693","5:797:29694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13276:37389":{"id":"1:13276:37389","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13274:37388"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2991-0:155:2336":{"id":"b:1:2991-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2968:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2994:2690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2721-0:170:2335":{"id":"b:1:2721-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32401:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2715:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2723:29689"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116-0:155:2336":{"id":"0:116-0:155:2336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:2336","glob":false}}},"1:3004:137":{"id":"1:3004:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:1:3214:247-0:161:2334":{"id":"a:1:3214:247-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3214:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32459:2960-0:170:2335":{"id":"a:1:32459:2960-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32459:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[715,0],"end":[715,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","type_id","description","source","cause"],"trait":{"name":"Error","id":"1:3054:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13301:30033":{"id":"1:13301:30033","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13303:30032"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44323:7191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3010:1811":{"id":"1:3010:1811","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42301:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13339:37395":{"id":"1:13339:37395","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12960:2834","str::split":"1:13327:2674","prim@char":"4:12365:471","str::split_terminator":"1:13336:37394"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44117:7194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[523,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13306:8402":{"id":"1:13306:8402","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44303:7190","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13289:30571":{"id":"1:13289:30571","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3830-0:161:2334":{"id":"b:1:3830-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32401:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3832:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13309:30537":{"id":"1:13309:30537","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44341:7203","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13380:2676":{"id":"1:13380:2676","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13395:37409":{"id":"1:13395:37409","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12921:136","`FromStr`":"1:12920:2829"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42301:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12920:2829","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12920:2829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5700:38107":{"id":"5:5700:38107","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2336":{"id":"0:155:2336","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:42262:2979-0:155:2336","a:1:32400:237-0:155:2336","a:1:32459:2960-0:155:2336","a:1:3249:7048-0:155:2336","a:1:42263:2978-0:155:2336","a:1:3214:247-0:155:2336","b:1:2995-0:155:2336","b:1:3006-0:155:2336","b:1:2718-0:155:2336","b:1:3830-0:155:2336","b:1:2721-0:155:2336","b:1:2991-0:155:2336","b:1:3001-0:155:2336","0:159"]}}},"1:2997:834":{"id":"1:2997:834","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13403:34804":{"id":"1:13403:34804","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:41907"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5692:38106":{"id":"5:5692:38106","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3001-0:155:2336":{"id":"b:1:3001-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2971:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3004:137","1:3005:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3214:247-0:170:2335":{"id":"a:1:3214:247-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3214:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:112:804":{"id":"0:112:804","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[718,4],"end":[720,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:796:29693":{"id":"5:796:29693","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2335":{"id":"0:170:2335","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[603,0],"end":[616,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:42262:2979-0:170:2335","a:1:32400:237-0:170:2335","a:1:32459:2960-0:170:2335","a:1:3249:7048-0:170:2335","a:1:42263:2978-0:170:2335","a:1:3214:247-0:170:2335","b:1:2995-0:170:2335","b:1:3006-0:170:2335","b:1:2718-0:170:2335","b:1:3830-0:170:2335","b:1:2721-0:170:2335","b:1:2991-0:170:2335","b:1:3001-0:170:2335","b:5:5937-0:170:2335","0:106","0:111","0:110","0:108","0:183"]}}},"1:13280:37390":{"id":"1:13280:37390","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13354:2628":{"id":"1:13354:2628","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12960:2834","`DoubleEndedIterator`":"1:8333:129","prim@char":"4:12365:471","str::rmatches":"1:13357:37396"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44253:7199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2994:2690":{"id":"1:2994:2690","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2968:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2680":{"id":"0:87:2680","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3209:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13273:37387":{"id":"1:13273:37387","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13366:37399":{"id":"1:13366:37399","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[649,0],"end":[702,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13336:37394":{"id":"1:13336:37394","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12960:2834","str::split":"1:13327:2674","prim@char":"4:12365:471","`DoubleEndedIterator`":"1:8333:129","str::rsplit_terminator":"1:13339:37395"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44099:7196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13402:34803":{"id":"1:13402:34803","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:41907"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:804":{"id":"0:107:804","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[650,4],"end":[701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3005:1813":{"id":"1:3005:1813","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42301:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:161:2334":{"id":"0:114-0:161:2334","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:2334","glob":false}}},"1:13274:37388":{"id":"1:13274:37388","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13345:33638":{"id":"1:13345:33638","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12365:471","str::splitn":"1:13342:33636","self::pattern":"1:12960:2834"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44171:7197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32459:2960-0:161:2334":{"id":"a:1:32459:2960-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32459:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13271:1000":{"id":"1:13271:1000","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12365:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13281:336":{"id":"1:13281:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13282:33607","`u8`":"4:12384:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13285:30569":{"id":"1:13285:30569","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42170:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3006-0:155:2336":{"id":"b:1:3006-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2965:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2975:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3009:137","1:3010:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13310:30873":{"id":"1:13310:30873","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12365:471","self::pattern":"1:12960:2834"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13270":{"id":"1:13270","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13271:1000","1:13272:2658","1:13273:37387","1:13274:37388","1:13276:37389","1:13279:34867","1:13280:37390","1:13281:336","1:13282:33607","1:13283:2544","1:13285:30569","1:13287:30570","1:13289:30571","1:13291:37391","1:13292:37392","1:13293:33626","1:13294:33627","1:13295:33630","1:13296:33631","1:13298:2508","1:13299:10761","1:13300:2528","1:13301:30033","1:13303:30032","1:13306:8402","1:13308:37393","1:13309:30537","1:13310:30873","1:13313:2653","1:13316:2654","1:13319:7105","1:13323:2521","1:13327:2674","1:13330:30011","1:13333:33634","1:13336:37394","1:13339:37395","1:13342:33636","1:13345:33638","1:13348:33640","1:13351:33641","1:13354:2628","1:13357:37396","1:13360:37397","1:13363:37398","1:13366:37399","1:13368:37400","1:13370:37401","1:13372:37402","1:13373:37403","1:13374:37404","1:13377:37405","1:13380:2676","1:13383:33642","1:13386:37406","1:13389:37407","1:13392:37408","1:13395:37409","1:13397:2523","1:13398:34797","1:13399:34799","1:13400:34800","1:13401:34801","1:13402:34803","1:13403:34804","1:13404:34805","1:13405:37410","1:13408:12721","1:13409:37411"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13296:33631":{"id":"1:13296:33631","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13295:33630"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2723:29689":{"id":"1:2723:29689","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5939:1786":{"id":"5:5939:1786","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13327:2674":{"id":"1:13327:2674","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12960:2834","`DoubleEndedIterator`":"1:8333:129","prim@char":"4:12365:471","str::split_whitespace":"1:13301:30033","str::rsplit":"1:13333:33634"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44049:7195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[717,0],"end":[721,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10389:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3830-0:170:2335":{"id":"b:1:3830-0:170:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32401:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3832:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:1181":{"id":"0:86:1181","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2348":{"id":"0:95:2348","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[540,4],"end":[543,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32400:237-0:161:2334":{"id":"a:1:32400:237-0:161:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32400:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:117:2342":{"id":"0:117:2342","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42301:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:2506":{"id":"0:22:2506","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3832:1826":{"id":"1:3832:1826","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39883:10713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2721-0:155:2336":{"id":"b:1:2721-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32401:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2715:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2723:29689"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32400:237-0:155:2336":{"id":"a:1:32400:237-0:155:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32400:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13351:33641":{"id":"1:13351:33641","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13401:34801":{"id":"1:13401:34801","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:16138:9768":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"11:2121:10055":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9737:25455":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"5:6525:18385":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"4:1861:8450":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"6:5088:11412":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:3906:10455":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:3592:10560":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"5:3373:8431":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:8615:8456":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4914:11337":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:6902:11875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12318:8741":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"18:718:8728":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:2965:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:13211:9056":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:4913:9862":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:10645:12801":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:44907:10778":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12621:8997":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:40701:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:7665:7977":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"11:2533:11025":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:22921:8041":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5025:11388":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:12382:906":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:6443:11688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:6037:7989":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:4438:10633":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:96:8327":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:3669:8753":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:14341:9268":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:4333:8461":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:9714:36036":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:46176:10821":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10317:7795":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:13601:10661":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:4651:7234":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"11:1049:10317":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:12380:894":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:3673:12705":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:11287:7205":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11661:8899":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:11764:8910":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:3260:2817":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:44171:7197":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5288:11473":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:3219:2851":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:42212:2862":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:47253:10911":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:3667:12703":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:894:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11647:8898":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:1424:10321":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:40543:7149":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:2304:7970":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:15463:9577":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:1507:11119":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5325:11485":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:31160:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"11:2420:2862":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"20:457:2896":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"16:4062:9845":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:4805:11264":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15778:9682":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:8227:7983":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:13272:9070":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12671:8387":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:6494:9959":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:43120:12177":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:42187:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"17:10218:7792":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5420:11521":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:8797:30432":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:22936:8019":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:11583:8893":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:5676:11638":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:46138:10819":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:15301:9536":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:1631:8429":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:46561:10854":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:31187:8047":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:1494:11113":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12659:8998":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"4:8666:10461":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:10251:7793":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11825:8917":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:3339:8430":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:16187:9783":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:8753:7156":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:44049:7195":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:46258:10825":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4816:11272":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:22643:17989":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:3300:36912":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:4807:18292":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:21947:8039":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:2438:9808":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:3559:12087":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"5:1564:2862":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12695:8999":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:1496:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:4886:18315":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:15769:9680":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:9314:7994":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:46066:10807":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:3475:9838":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:6917:11886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6335:7861":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"21:312:2948":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"1:39731:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:6924:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:12792:8811":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:15376:9558":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:3583:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:4614:9853":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5311:11481":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:1075:10055":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:6652:11796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:41022:8514":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"11:698:2862":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:1667:11226":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"11:434:8420":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4851:12731":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7539:9834":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:32491:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:1098:8351":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:507:8706":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:3101:38190":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:44949:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:7721:10421":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:1569:11154":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7497:10132":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:5515:128":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"16:8216:10215":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:2318:10597":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:41990:8177":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:11605:7799":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:2825:12083":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:43147:12185":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"15:288:8396":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:7780:8523":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:15814:9686":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:15078:9484":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:2234:8364":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:6770:11832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"4:5089:18334":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:12475:12807":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:22657:12647":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"16:2323:24544":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:12005:8556":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:15138:9493":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13344:7825":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:2719:31607":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:4821:8384":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:13972:8926":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:3597:8374":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:12151:33580":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:860:9799":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:14271:9259":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:11497:8365":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:14021:2823":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"13:229:7927":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:5205:11432":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:4587:9852":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"0:7:2332":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"17:16121:9766":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:15473:9582":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:1601:10323":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1711:11244":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:6799:18375":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:46290:10827":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:4307:12087":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"4:12363:417":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:3290:12699":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:44498:10763":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:7716:7158":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13412:9080":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6659:11797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:6358:10671":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11142:7775":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:40838:8026":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:1064:24475":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:7144:25414":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:2137:10315":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"21:276:2946":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"4:9161:8470":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:1625:7968":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:6966:8508":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"4:3658:36978":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:47143:10903":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6526:11722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:40898:8494":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11313:8873":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"4:11221:8038":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:7014:25413":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:6777:11833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:39055:12695":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:21680:8047":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11557:8887":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:553:11090":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"20:449:137":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"4:8621:10565":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"4:3297:36246":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:8073:10201":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:9119:7986":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:2483:18236":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"6:5265:11459":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:46372:10831":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:13730:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:46499:10852":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:15616:9638":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:13399:9078":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"4:6718:7997":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:11293:25508":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:963:18197":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:11723:8475":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:3841:18286":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:39786:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:42901:7225":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:10709:10448":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:23044:29725":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:7067:2867":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:42390:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"4:8195:10513":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"16:0:2802":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:6544:11734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:2728:9821":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:10769:38896":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:22602:30055":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"4:8869:10584":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"20:534:8322":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"17:10997:8856":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"11:1880:7961":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:1616:2814":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:12369:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"11:1580:10322":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:9441:10496":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:16151:9774":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"4:12316:10624":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:6665:25411":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:13325:7818":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11242:8354":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13089:9023":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:740:7968":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:944:8427":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:403:8737":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:8461:8008":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:8136:10207":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12485:25601":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:13755:10666":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:3032:10445":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:538:11082":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:44431:12844":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:1696:11237":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12851:7808":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:4109:18287":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:2592:9815":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13797:9172":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:15356:9552":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:8093:10202":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:15333:9544":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:14414:9281":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"20:0:2358":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"5:7592:2862":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11702:8902":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:6849:10021":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:11348:10618":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:14560:9307":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:432:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:15646:9644":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:7686:10149":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:6853:7998":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:43634:10750":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:42204:7962":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"5:5798:2865":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:12375:737":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"17:14298:9262":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:6708:11815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"5:6704:38505":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:6449:11689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:40907:8496":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:6005:2814":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"11:1907:8429":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:6268:8030":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:5127:11415":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:949:7967":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:43995:2827":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:42880:7223":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4869:11315":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:873:10313":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:22735:17980":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"4:9192:10586":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:11115:8349":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:2854:9827":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13606:9127":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"18:680:8723":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:32402:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:7504:2814":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:15720:9665":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:46095:10809":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"10:36:11031":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:1379:10055":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"21:290:38948":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"4:8764:10746":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:11399:7193":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:532:11079":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12557:7787":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:2788:9824":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:5165:11418":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:4570:38535":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"11:1900:8428":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:12385:1838":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"16:2548:9813":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:23296:10705":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:7316:11898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:32384:7235":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:14436:9292":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12949:8741":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:1956:12087":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:2598:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:4502:9849":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:671:7961":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:6154:8495":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:33828:12684":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:4450:10634":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:40983:8032":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:2136:12661":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"11:842:18197":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12530:8383":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"4:6867:10492":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"21:319:8679":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"4:11672:8471":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:44067:7193":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:1098:10317":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:39714:2855":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:8802:18358":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:12975:7180":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:15734:9667":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:46322:10829":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:7998:10502":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:4504:12723":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:13929:10672":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:2962:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:44217:7202":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:43410:8182":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6521:11721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:9175:10476":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:513:8739":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:2338:9803":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:3097:12077":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:2768:9823":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10759:7775":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:14855:9425":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:2998:9836":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:15313:9537":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:261:8736":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:42196:7961":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:10322:8451":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:23000:10676":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:1684:11233":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:12377:756":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:42262:2979":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:2614:12648":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"16:6066:8390":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:41008:8513":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:7548:12010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:608:8717":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:7350:11917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:7341:11916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:2458:9809":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11016:8346":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:4882:7054":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:3422:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:16269:9080":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"4:3529:8529":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"6:1657:11220":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7570:9835":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:15342:9545":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:47330:10914":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:6572:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:5863:25406":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:12391:1422":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:41946:10646":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:10397:7225":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:2705:10442":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:5112:18336":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:5965:10482":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:40754:12740":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:12372:1816":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:15748:9674":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:9307:10592":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:39896:8675":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"0:117:2342":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"11:2539:11026":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:41167:8520":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:4161:18291":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:46013:10804":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:42507:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12127:8959":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:6090:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"11:2366:10326":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:43175:30530":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:44025:2909":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:4560:9851":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:14529:9301":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:8049:18184":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:4902:11328":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:8031:12050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"4:3610:10452":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"18:706:7180":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:8601:18314":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:11501:36039":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:34559:10074":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11510:8884":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:8202:7921":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11089:8348":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:2545:8406":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:8699:18345":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"0:119:2355":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"1:33143:10065":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:8003:10504":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11354:8878":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:9286:33574":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:6666:11798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:21736:31199":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:872:8736":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"4:4923:18303":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"20:319:18247":{"crate_id":20,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"17:14876:9433":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:928:2814":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:15582:9626":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:30526:12467":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:15102:9488":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:6433:7899":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"1:21702:31196":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:6437:11685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:22688:18247":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:7431:11946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:1589:11168":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:11304:12093":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:1481:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:8063:18185":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:819:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:10339:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:15010:9475":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:7580:10146":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:3043:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:8173:8454":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:11678:10497":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:4008:10456":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12478:8986":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:14516:9300":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"20:667:2898":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"4:3342:10447":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:491:8705":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:5992:7988":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:1089:10315":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:12388:1832":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"6:5494:11565":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:6731:11820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:5075:9867":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11256:8867":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:3925:9844":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:3352:38646":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13568:9119":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12189:8375":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:41157:8519":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5334:11488":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:16165:9777":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"14:187:24489":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5349:11490":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:42663:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:11102:8861":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:0:1005":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10661:8341":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:46080:10808":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:26148:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:538:7761":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:43895:8549":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"14:220:10307":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"7:32:24382":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:9360:8012":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:1609:7961":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:485:11048":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:10409:12353":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"4:3395:10449":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:4927:18306":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"20:470:2897":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"17:13844:9178":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4890:11323":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:651:8706":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:46159:10820":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11443:8881":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:13674:9129":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:46220:10823":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:47291:10913":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:22868:10674":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:4337:12087":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:12381:900":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"6:4964:11357":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:11492:7197":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:11940:36465":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:9273:115":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:5779:18363":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:7799:7919":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:42624:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:41930:10644":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:6758:11830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:13999:9202":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:14079:9213":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7168:10593":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:42168:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"16:7813:10152":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:6765:11831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:47046:10898":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"19:0:1294":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6543:9963":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5428:11526":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12887:7809":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:9420:2977":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:14723:9319":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:9340:33572":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:5897:7871":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:40939:8500":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:8290:12061":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:531:8707":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:7111:10052":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:9544:8452":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:10818:8343":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:10399:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"11:772:7964":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:2594:12080":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:13618:10664":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"20:424:8683":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"1:2810:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:38421:12693":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:42284:7219":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:8488:18246":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:46191:10822":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:7463:11956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:1898:2859":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:8226:25419":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:2773:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"11:2323:10315":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:2345:10632":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6758:9996":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13473:9091":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"8:0:2795":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:2467:12106":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"6:5230:11443":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:8301:10222":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"4:10910:12090":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5995:9896":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:4354:8462":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:5844:10474":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:21717:31204":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6813:10009":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"11:430:8419":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:40879:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13538:9107":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:4172:38505":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:6462:11690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:44658:7181":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:10982:33570":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:3686:30665":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5629:11619":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:884:7962":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11773:8911":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:3899:9843":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:7518:11993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:40680:7148":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"4:9145:7987":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:11202:10585":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:15023:9480":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:523:11073":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:8304:2958":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5482:11562":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:8716:10576":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"5:7534:38647":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:5622:10471":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:10044:8033":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:3345:10070":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:1613:2862":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:6411:11670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:14066:9212":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:7539:12007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:16212:9788":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:44976:10328":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:6564:11750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:47163:10905":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:22730:17982":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:44573:10660":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:6749:9995":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"12:0:2799":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"22:1122:8675":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"17:16079:9755":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"4:12387:1850":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:3207:7046":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:44348:7144":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:2959:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:14284:9261":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:578:11103":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:7472:8472":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:21827:17902":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10170:7772":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:830:8427":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:2902:24545":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:7869:8740":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:6534:11727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:44253:7199":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:46821:10893":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:11520:8561":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:6716:11818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:3729:7962":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:9319:8010":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:2712:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12572:7775":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:11405:8880":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:44610:10765":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:13723:9154":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:10610:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:13046:9019":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:44866:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"5:7033:2865":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7656:25416":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:2039:7262":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:597:8740":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:5638:10472":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:1586:7964":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:11478:7198":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:1922:8453":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7910:25418":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:16223:9790":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:45946:10796":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:4142:2814":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:10391:7222":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:1645:8437":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:23274:10703":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"16:5400:7772":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:12364:1177":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"9:355:24411":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:44939:10783":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"4:9388:10485":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:44452:10754":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:1595:7966":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:8640:10567":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:40593:7144":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:10419:7797":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:15289:9530":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:994:18199":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:43947:8552":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:2936:24546":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:39670:12707":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:10828:38894":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:3457:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:12376:740":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:12107:7775":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:623:18179":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:6507:11720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:2394:9806":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:12969:9012":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7379:38887":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:15092:9487":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:635:8722":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:44676:7182":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:4881:11318":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:8232:7982":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:1597:11173":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1563:11152":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:7397:35473":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:9702:138":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:23230:10699":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"18:563:7763":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:12342:8975":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:22:819":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:5286:31776":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:12378:735":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"20:520:8319":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"18:481:8704":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8063:7990":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:14111:9217":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:10973:33549":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:16069:9754":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:564:11095":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:9132:10585":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:4794:12107":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:7509:10133":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:8249:12052":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:10403:7227":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:1974:7356":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"6:570:11098":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:42130:10647":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:12225:8378":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:1643:11209":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:8014:12041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:13526:9104":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5593:11597":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:46034:10805":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:32489:7051":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:3701:12708":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:9916:25474":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"22:948:29684":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"16:3810:9841":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:6574:7902":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:559:11093":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:14147:9223":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:8544:8456":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:5960:9893":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:23175:10694":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:15197:9511":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6872:10022":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:1500:11116":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:42341:7961":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"18:659:8332":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11367:7787":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:16105:9761":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:3277:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:12920:2829":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:33895:12686":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11634:8897":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:9268:7991":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"4:9415:10495":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:4462:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"14:7:10300":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4984:11367":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:12379:912":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"16:7098:10049":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6782:25412":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:5295:11475":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6263:9935":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4997:11372":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:8185:8006":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"6:5224:11440":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:3440:12697":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"4:12389:969":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:4362:12087":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:23059:29714":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:5412:1246":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:5405:11516":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:7231:38516":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:3940:2859":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:10915:38893":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:3306:7961":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:44928:31866":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:1207:8352":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:10483:113":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:32460:7052":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:21719:31201":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:40:2858":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:5769:9882":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:7514:8433":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:32391:8484":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:10018:25457":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:6480:11700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"11:1920:8431":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:43234:7233":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:5357:11491":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:8003:8008":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:4986:8385":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:6648:9971":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:7414:11945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:46478:10851":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:12775:7205":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:10401:7226":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:7469:11957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:33355:12682":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13424:9081":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:9255:10587":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:3842:9842":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2374:9805":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"14:160:10300":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11467:8882":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:7368:11926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:4940:9863":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:9531:2822":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:1690:11236":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:14986:9473":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:42349:7962":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:5037:9866":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:12371:1726":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:6940:7862":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:10389:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:8256:8007":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:8518:8519":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:12175:8962":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13292:7812":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:8842:8464":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:7982:18247":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12508:8991":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"21:0:2359":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"1:13034:12838":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:8168:8617":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"15:394:24509":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:5387:11505":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:45984:10802":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:5347:9870":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:44323:7191":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:10340:7155":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:16235:9793":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:21821:17899":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:754:8734":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:9169:2862":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:8750:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:8335:8005":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"5:2157:8007":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"0:24:618":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"1:2157:10629":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:5271:11462":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:44357:7143":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:1489:11111":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:4223:18297":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:5447:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:12043:8953":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:517:11070":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12408:7804":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"20:696:2900":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"1:40517:7150":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:41381:8527":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:1675:11227":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:47174:10906":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11269:25507":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"4:974:10311":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:6509:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12683:8388":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:2971:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:1584:11166":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"9:328:11032":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:3303:36915":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:6796:10489":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12863:9009":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:14235:9254":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:4153:18290":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:39806:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:3778:9840":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:7694:12754":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4804:7235":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:6398:7895":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:2037:8358":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:46723:10860":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"16:6300:9937":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:2069:1361":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:11955:10501":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:3295:12700":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:11567:8888":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:23219:10698":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"4:4303:8459":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"21:301:2947":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"1:22376:18247":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11128:8834":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"9:236:10746":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:150:7754":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:1105:10319":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:8589:10457":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:11411:10379":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:11437:8541":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:44874:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"5:4536:12087":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:6634:7903":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:11872:10456":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:3677:18266":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"20:527:8321":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"4:5776:11847":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:4925:18305":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:46109:10810":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:14545:9303":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:3486:18273":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:7132:10054":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10671:38898":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:34213:12689":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"20:681:2899":{"crate_id":20,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"17:437:8738":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:12981:7179":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:14912:9462":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:7715:7157":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:15957:9710":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:11574:7933":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:9102:8468":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12213:8377":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:6777:8504":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:5533:11571":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:1023:10315":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:15596:9632":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:581:8047":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:43419:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7428:25415":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:22257:31189":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:22514:17986":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:7577:12026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:521:29659":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:3196:9802":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:3465:2859":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:6680:11803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"20:306:2879":{"crate_id":20,"path":["unicode_bidi","TextSource"],"kind":"trait"},"22:752:8309":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"17:9671:25456":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6927:10027":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:698:7766":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:6658:2814":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:938:18198":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:15822:9689":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:1625:8428":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:43431:10746":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"16:7397:38886":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:10915:10512":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:11743:8906":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:44153:7198":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:3860:8007":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"3:0:2793":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:12368:1317":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:44467:10759":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:3209:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:22702:17981":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:7564:7981":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:15249:9520":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:10155:7771":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:613:38904":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:2715:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:5069:11411":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:12698:7211":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:44199:7201":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4970:11359":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12399:8982":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:44019:2543":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"0:46:693":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"1:45867:10789":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:21839:8039":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"11:1085:38873":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:5036:11393":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:42546:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:15569:9620":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:11326:8539":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:12390:1916":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"9:500:10382":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:12661:7209":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11688:8901":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:32370:10112":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:497:11053":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:3438:10451":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:44635:10766":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:10706:10446":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:6412:25409":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:12079:7186":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:5117:11414":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"14:0:2800":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:7158:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:40992:8511":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13308:7816":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:10712:10450":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"4:2322:18229":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:5139:11416":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:1604:8427":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:2357:38705":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:8343:12073":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:12365:471":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"5:6248:12087":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:44965:10784":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:12362:8980":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:12737:7210":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:46404:10833":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:12986:7178":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6748:11823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"5:7556:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9858:25472":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:6813:11846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:8302:12063":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:6723:11819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"4:7717:37133":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:46590:10855":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13485:9094":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:8178:10512":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:2032:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:4913:7237":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:10343:10603":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:5249:11451":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:39846:12701":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:14091:9214":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:1920:8452":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"5:291:38505":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:4725:10635":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:11239:10496":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:6504:9960":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:4860:7236":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:13015:7805":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:40566:7152":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:798:2814":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:3828:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:13966:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:43795:8542":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"11:785:7966":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12201:8966":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:7473:7858":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:13703:31384":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13387:9075":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4829:11282":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5395:11510":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:7586:12029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:14968:9468":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:7321:2975":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:43394:8179":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:3649:7155":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"20:655:2897":{"crate_id":20,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"6:1625:11197":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"11:328:8410":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:2551:38870":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8333:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:4572:8024":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:5385:7771":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13832:9176":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10622:38891":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:14386:9275":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10350:7796":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:44303:7190":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6231:9932":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"22:669:7756":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"16:2878:9828":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:14260:9258":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:9857:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:5802:25405":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13738:9158":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:7857:10160":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:44546:10764":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:39718:8485":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"14:165:24482":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:46611:10856":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:1158:10321":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:4167:18292":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:11364:8540":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:7006:10031":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:45999:10803":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:42221:2975":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:45914:10794":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:9781:25471":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8251:12766":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:11812:8915":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:44844:12186":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"5:6874:38505":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:7831:12757":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:2939:12466":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:9204:18380":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:23241:10700":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:15760:9676":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:23106:10690":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:9279:10588":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8441:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:42743:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:2612:9816":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:3214:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"17:12433:7805":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:11219:7962":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:43130:7232":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:589:8710":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:23263:10702":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:15521:9619":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:10993:10511":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:14356:9272":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:15992:9740":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:15445:9574":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:15324:9541":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:6077:12087":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6456:25410":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:8607:10564":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12543:8995":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"0:0:2357":{"crate_id":0,"path":["idna"],"kind":"module"},"11:2349:10317":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:42148:10649":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:3614:9839":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:16032:9060":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:46241:10824":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5217:11439":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12076:8956":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:4215:18295":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:13886:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:3340:10446":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:43966:8554":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:4377:7961":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:1530:11129":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:23208:10697":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"4:8525:7189":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"6:8261:12054":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:5817:7866":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:7938:36032":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:7681:10416":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:14868:9432":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6120:25408":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:4341:18313":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6611:11776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:9410:10494":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"4:9731:127":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"4:6199:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:5307:9869":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:13877:9186":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12724:25479":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:8284:12060":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:12366:1878":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:11674:8900":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12647:8386":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:7983:10427":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"22:470:8301":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"22:1034:29685":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"1:43956:8553":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:5335:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"16:7528:10141":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:13497:9095":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11621:7784":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:47189:10907":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"21:198:2949":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"4:4694:18316":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:527:18164":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4921:11341":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:113:8330":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:1642:8431":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10534:38895":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:2076:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13766:9165":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:15836:9692":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:12384:1856":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:7152:18383":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:5534:18418":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10399:7189":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5586:11595":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"9:0:2796":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:40673:7147":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"5:2377:7973":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:4981:10464":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12929:9010":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:2734:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:2804:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:12038:8557":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:5670:11636":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:12337:18186":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:21768:17903":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:41181:8521":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:22245:8040":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:40732:10719":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:14599:9317":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5051:11400":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:10945:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"4:9709:8454":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:8267:12055":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:14752:9339":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:7648:10148":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:8330:10517":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:1637:8430":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:9459:10595":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:15214:9514":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:8330:12069":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:33694:12687":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"11:351:8412":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:15273:9528":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:40528:29717":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:11524:8366":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:15058:7826":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:2684:9819":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11042:8857":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:45852:10786":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:3435:12696":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:43188:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"18:0:2804":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:9755:25453":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:8207:139":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"5:3347:8428":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:12348:33545":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"15:306:8401":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:2748:9822":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13146:9033":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6442:9953":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6098:25407":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12494:8988":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:45882:10790":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:7639:2825":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:44735:12855":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:40600:7145":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:7332:11910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:5298:7979":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:6972:12109":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:13196:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6419:11672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:40802:10727":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:6882:11861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10092:25478":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:6278:7877":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6560:7901":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:7709:10419":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:40860:8029":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10877:8344":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:9852:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:43921:8487":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:10827:31604":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:5756:9877":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:7727:7915":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:46351:10830":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12516:8993":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:13774:9167":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:5265:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"18:689:8725":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11547:8792":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:40556:7151":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:5641:11625":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:5441:11536":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:7484:2862":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7618:7912":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:40577:7142":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"9:390:24397":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:500:36044":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:43213:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:8531:7195":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:14372:9273":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:6353:7892":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:11717:8474":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:4641:9854":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:9400:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:2418:9807":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:221:10396":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:10602:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:13959:9196":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:43846:8543":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:299:8407":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:4772:18333":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:2148:10317":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:13509:9096":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:3436:10450":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"22:966:8313":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"5:7206:38506":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:11256:12092":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:2148:12104":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:4817:11937":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:12584:8343":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:45967:10801":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"11:1893:2859":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:40930:8499":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:5541:11576":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:306:2824":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:44856:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:5258:10465":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:43874:8547":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:10039:30433":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:47238:10910":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:45931:10795":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:8248:10516":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11153:8343":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:10752:8924":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"20:197:2908":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"16:6532:9962":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:6342:38884":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:4883:18337":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6385:9950":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"20:496:2899":{"crate_id":20,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"16:3329:9837":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"4:2232:128":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:11189:8863":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"11:2566:2825":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:12900:7811":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"20:611:8696":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"17:14038:9207":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"11:1140:10320":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:3054:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:4211:18294":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:765:29658":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:14977:9472":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:2175:25533":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:40973:8509":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"4:4561:10460":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13946:9193":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:4406:10458":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"20:642:2896":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"9:176:7950":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:42252:2976":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:15390:9560":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:1829:12602":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:40772:10720":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:1548:7962":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:4718:9855":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:15176:9507":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:12422:8381":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:5658:11629":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:44852:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:12332:8016":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:8787:10579":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:4068:2862":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:38476:12694":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:22470:17985":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:11788:8914":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12089:8957":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5603:11602":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"9:422:24398":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"11:2301:10055":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:10859:30906":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:15126:9490":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:3014:24547":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"20:432:2904":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"4:5958:10478":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:10573:38899":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:7308:11893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:10635:36034":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:15410:9566":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12238:8967":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:1620:2859":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:5927:9886":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:46988:10896":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:2485:18237":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:3646:12702":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:12707:8389":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"4:6406:7995":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:44099:7196":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:33627:2818":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:3451:2957":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:43642:8537":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4896:11325":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:8118:10205":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:44700:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:11051:8858":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13594:9124":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"21:145:2583":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"4:10592:8468":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6079:7850":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"21:67:2582":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"1:22986:29736":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:41962:12774":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10068:25460":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:21766:18247":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"4:5602:10470":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:915:7966":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5057:11402":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:10284:7794":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:9383:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:542:7848":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:12388:8981":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:11195:7961":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2968:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:8295:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:14325:9266":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:10905:8345":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:11274:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:5520:11570":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:32324:11028":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:11666:8002":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"20:542:2581":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"6:5179:11419":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11341:8356":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:1521:11124":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:3903:10454":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6381:11645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6160:24517":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6047:9902":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:5742:9873":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:6143:18433":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:598:38905":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"4:5168:18341":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:5654:113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:46389:10832":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:11865:8370":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:7361:11922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:16249:9794":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:15701:9660":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11595:7798":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:2768:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:40706:10718":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:14177:9242":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"20:511:2900":{"crate_id":20,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"16:5686:7865":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:672:10429":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:15799:9685":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:8199:12051":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:22975:10675":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:7354:12405":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:23138:18247":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:12278:8380":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:40487:10714":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:43976:8555":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"20:705:2901":{"crate_id":20,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:7769:10151":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:7454:11953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:10926:10596":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"4:1859:8449":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:11537:8885":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6480:7900":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:7391:11944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:8255:12053":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:7487:11967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:9938:25475":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:15:2770":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:23093:10689":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:44645:10770":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:4940:471":{"crate_id":1,"path":["core","char"],"kind":"module"},"1:3404:12706":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:15368:9555":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6466:9956":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:10215:10737":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:10844:31607":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:9396:12087":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:8759:12765":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12993:25481":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:592:10428":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:3738:12709":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:10439:7773":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:10761:12821":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:22604:12647":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"5:5139:12087":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:6678:8527":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"11:2466:2859":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5381:11502":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:5490:38505":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:1632:11201":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:6785:2862":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:10650:8036":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12328:8971":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11075:7787":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:40744:7189":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:5488:11563":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:43402:8181":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:11090:36048":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13581:9123":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:8538:7190":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"6:5241:11447":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:2203:8361":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:2224:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11166:8862":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"18:726:7767":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14788:9370":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:46305:10828":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10137:25454":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:42704:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:7604:12032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:7744:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5196:11427":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5375:11501":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:8353:12075":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:15206:9512":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6895:10023":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:47154:10904":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:5007:11379":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:2508:9811":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:871:7961":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:4103:18288":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:43884:8548":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:5570:11590":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:8155:10210":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:40921:8031":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:5851:10475":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:13235:9057":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:3275:10069":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:2572:9814":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"10:44:7934":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:3875:10403":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13375:9074":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:21819:18247":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:8596:12085":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:6122:7979":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:32401:2959":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:14463:9294":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:7757:2815":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:3029:8748":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:4721:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:11898:8920":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:3264:8372":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:41405:8531":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:10886:10612":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:13641:8031":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:23252:10701":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:15655:9646":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12371:9010":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:4485:12722":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"13:0:2794":{"crate_id":13,"path":["std_detect"],"kind":"module"},"9:480:24395":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:6026:7844":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"22:0:2923":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"17:12251:8379":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:44366:7142":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:41423:8534":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10044:25477":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:21748:31192":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:21734:31205":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:23197:10696":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"11:881:10314":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5282:11470":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:11947:10501":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:41032:8516":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:5781:9830":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:5538:18419":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:8296:12062":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:80:8324":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:1107:10321":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:11026:25490":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"9:445:24396":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:7733:10422":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"22:43:29681":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"5:1011:7961":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:46516:10853":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:680:18181":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:40851:8027":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10954:25488":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:14189:9244":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:6682:10488":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11877:7801":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:41390:8528":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4875:11316":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:46649:10858":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:5301:11478":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:14503:9299":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:5004:18302":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:16050:9070":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"21:266:2934":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"16:5831:7869":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:4531:9850":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:15418:9567":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:42293:10652":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:3492:2856":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:36435:10075":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:8084:10511":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:33761:12685":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:2808:9825":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:10905:12088":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"9:53:7935":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:3460:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:2010:787":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"17:15931:9042":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:40069:7042":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:12300:25599":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:14994:9474":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11324:8875":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:12370:1692":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:5837:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:14212:9253":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:6183:10474":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:15456:9575":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:9984:25476":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:12721:7208":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:42096:10740":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:8284:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11799:8367":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"20:632:2895":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"17:10612:8340":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:4424:9847":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:15944:9056":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"11:396:8417":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:12383:887":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:40717:12754":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:7986:12038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:46273:10826":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:1844:696":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:42429:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5551:11582":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:2495:18242":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"5:2171:10403":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:7879:10621":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"4:986:10314":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10887:38892":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:379:10425":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6631:11784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:11755:8909":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:3256:7050":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"20:599:38911":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"16:6427:7897":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:473:11042":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:47200:10908":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:10341:8479":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"18:643:8706":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:38366:12692":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:14402:9279":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:479:11045":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:3249:7048":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"11:1884:2862":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:4506:38535":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:44035:7189":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11419:7775":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:938:2859":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"4:9234:18381":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:46051:10806":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:11078:36046":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13986:9201":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13252:9060":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:23186:10695":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:15168:9504":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"22:879:29683":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"1:40481:7143":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"22:728:38993":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"4:980:10313":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:1551:11144":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:7767:2816":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:9423:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:40951:8506":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"4:10935:8006":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"4:11811:10454":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"20:8:2903":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"17:15635:9643":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:6700:11812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:5107:11413":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:545:11085":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:894:2862":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:14933:9467":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:15281:9529":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:23117:12496":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:2838:9826":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:6588:9964":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:2975:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:14587:9310":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:47215:10909":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:42357:2862":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:5366:11495":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:6638:11785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:11655:10746":{"crate_id":4,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"7:79:24389":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:6473:11698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:15116:9489":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:4830:9859":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:1259:8435":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:32377:10710":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:32366:10709":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:6823:11849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:32400:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:2541:2729":{"crate_id":4,"path":["std","io"],"kind":"module"},"17:13024:25482":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:32459:2960":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"16:7755:7918":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:41415:8532":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:4603:8025":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:8221:127":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:44915:10780":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5255:11453":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:15190:9510":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:15400:9563":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:4352:9846":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:41396:8529":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:5914:7876":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4990:11369":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:3809:38505":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:22815:10673":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5471:11557":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:867:8735":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:4995:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:6620:9970":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:12464:25600":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:670:8337":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:22218:18247":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:13553:9113":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:34386:12690":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"22:534:8307":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"22:386:7754":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"1:21945:17900":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:30749:2852":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:40869:8489":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:22378:17901":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4957:11354":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11493:8883":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:11788:8480":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13173:9041":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:13785:9170":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13922:9192":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:491:11050":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:23748:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:816:12483":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:12264:8968":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5477:11560":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:41367:8525":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:3105:38191":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12030:8371":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12454:8984":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:11063:8860":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:957:10308":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:2938:18247":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:74:1844":{"crate_id":1,"path":["core","u32"],"kind":"module"},"17:0:2803":{"crate_id":17,"path":["object"],"kind":"module"},"5:7548:2862":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:13187:9042":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:7492:8432":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12597:8996":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:4929:11343":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6623:11783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:2741:10441":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:5935:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"14:40:9057":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:10393:7223":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:46628:10857":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:6282:36037":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:40829:8488":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:30813:29730":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:39768:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"11:835:10308":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11841:8369":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:1239:38637":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:1703:11240":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:5107:9868":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:42585:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:5366:980":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:758:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:2265:18164":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:44682:8038":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:12960:2834":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"14:214:10305":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11853:8919":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:14012:9204":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:4771:9857":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"23:0:2924":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"17:11715:8903":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"11:1914:8430":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:4217:7962":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:40782:10726":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:8188:10214":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:15039:9483":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:10018:804":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"20:482:2898":{"crate_id":20,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"4:12392:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:44988:10785":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:7826:2859":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:3393:10448":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:9327:10593":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"4:12386:1844":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:43196:7232":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:40960:8507":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:2134:12660":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"10:0:2797":{"crate_id":10,"path":["adler"],"kind":"module"},"4:11096:36051":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:43864:8546":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:2635:10440":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:15434:9570":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:22576:18247":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:1514:11121":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:42263:2978":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4947:11351":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:3287:12698":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:2528:9812":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:0:1718":{"crate_id":4,"path":["std"],"kind":"module"},"4:675:10431":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:3667:18245":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"16:4856:9860":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:39883:10713":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:8386:2547":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"0:44:2550":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"1:34040:12688":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:9886:25473":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"7:0:1906":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6802:10008":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:1533:7961":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7559:10145":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"11:809:2859":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:15624:9639":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:7061:10045":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:8858:8467":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"6:6691:11806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:13363:9071":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"20:620:2894":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"4:10952:10602":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:3661:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"14:31:10300":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:2469:18232":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:3318:38642":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:11033:7987":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5462:11551":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:7448:11951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:8508:8026":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:373:10423":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:10395:7224":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:11048:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:2612:12647":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"21:228:2584":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"1:47075:10899":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:43441:8183":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:8008:12039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:4882:9861":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:7610:7079":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:11928:8015":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"6:6740:11822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:10710:8342":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:15678:9659":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:6374:36052":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:8259:10112":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:5682:11641":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:43449:8184":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"15:0:2801":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:1395:10317":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:8240:10515":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:4743:9856":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:7604:7911":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"14:202:2813":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12353:8979":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:8479:10453":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"11:102:11024":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"11:854:10311":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:43934:8551":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:6461:10474":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:22590:17988":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:1539:11135":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:23008:10677":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:10358:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:5019:11385":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:46744:10861":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4:1259":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"16:6948:7905":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"13:110:38875":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:8340:18278":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:1614:7967":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:5507:11569":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:44624:12845":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"15:327:7923":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:15383:9559":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:45899:10793":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:6493:11709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:12056:8955":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:8319:12068":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:4325:8460":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5044:11398":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:47017:10897":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:7057:2866":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:8852:7961":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:43855:8544":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13455:9090":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:708:7967":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:7695:10150":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:14475:9295":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:9807:25461":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:16176:9782":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:4468:9848":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:12966:2822":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:7650:18196":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:46694:10859":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"4:2313:138":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"11:2559:11029":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"4:4201:18293":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:9153:7961":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:898:10398":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"22:636:8308":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"4:4139:18289":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:2636:9817":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:7563:12017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10720:38897":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6976:7907":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:5324:10639":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"4:11692:10498":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11227:8865":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:44724:10775":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"11:1888:2814":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:2073:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3265:12683":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:8308:12064":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:1564:24476":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:5981:12087":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:735:10397":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:7919:36028":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:30781:2853":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:40639:7146":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:14051:9209":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:6317:9940":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:4802:9858":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:15608:9635":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:3473:8373":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:7633:38880":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:15222:9516":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:5562:11588":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:14246:9256":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:47096:10900":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13064:9022":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:21935:18247":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:2003:7357":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:22552:17987":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:11392:8357":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:44341:7203":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:11706:10500":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11038:18247":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:42366:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:22952:8042":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"11:0:2798":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:42782:8178":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:40889:8491":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:46449:10850":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:47268:10912":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:42108:10457":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:43159:10179":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:5151:11417":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:5093:7137":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:39876:10712":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:3935:2814":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12289:8969":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:22223:17905":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"0:118:2347":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"1:23024:29728":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:8644:11926":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:798:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:44271:7200":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:1727:11249":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:7888:10164":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7355:10092":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:42074:29720":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:6977:12108":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"4:5289:10465":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5722:9831":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:5415:9871":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:6599:11771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15151:9499":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:11189:7986":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:44117:7194":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13899:9187":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:5635:11622":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:12491:10656":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:10524:8338":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:8273:12056":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:38311:12691":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"21:259:38949":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"17:14311:9263":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:7823:25417":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"11:2440:2814":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"5:3095:38641":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:2780:10444":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:8555:18285":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"5:3716:7961":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:10384:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:23285:10704":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"11:364:8415":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:8175:10211":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:47117:10901":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:15426:9569":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:16198:9784":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:4730:10636":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:2478:9810":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:11506:8560":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:7085:10046":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:8069:18218":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"16:7306:38885":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:11213:33557":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:3463:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:14847:9422":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:8021:8924":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:10500:36461":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:12768:25458":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:256:8735":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:16259:9075":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:6672:11801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"18:573:8706":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10982:25489":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:4976:9864":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:7842:2860":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:44332:7204":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:2303:24518":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:1674:38871":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:21690:31196":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:5846:9883":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:1794:38505":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:5708:10473":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"16:2355:7835":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:8550:8458":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:41374:8526":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:12507:7183":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:7590:7910":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:515:8703":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12443:8983":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:2660:9818":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:9405:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:5006:9865":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"4:9219:18379":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:14489:9296":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:735:29657":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5186:11420":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:16093:9759":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"11:2228:7933":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"4:10964:10453":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:6606:8392":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:13909:10671":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5341:11489":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:15266:9527":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:7475:2857":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:40585:7143":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:5588:10466":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"11:123:7928":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:42301:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:568:18169":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"16:7549:10144":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:1132:38505":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:44849:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"5:2182:10404":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:8247:12767":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:13753:9163":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11915:25575":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:39634:12710":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:3065:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:4487:10459":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:42887:7222":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:11851:10455":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:6876:11860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6991:38882":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:10184:7243":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:656:7358":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:41908:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:5367:25404":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12808:9007":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"20:201:2580":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"5:7584:2862":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:1410:10315":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:1223:8434":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:40688:7141":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:5648:11628":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13437:9082":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:4819:11939":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:11244:7195":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:11001:10473":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"4:953:7968":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:586:11107":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:3095:7361":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"16:5700:9829":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4976:11362":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13855:9179":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:32931:10068":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7741:7917":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:7524:10415":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"4:902:7964":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:14131:9218":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6962:7906":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:4937:11345":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:2275:10405":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:6506:18384":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13814:9175":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4792:11255":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:3067:137":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:1897:8451":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:46943:10895":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12824:25480":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13116:9029":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"4:7325:36049":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:4672:18315":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11730:8905":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:9108:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"11:2400:7962":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"18:623:38903":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:7052:10042":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12150:8960":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:30802:7232":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:5098:18335":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:2708:9820":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"11:2380:7961":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"4:11016:33576":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:14449:9293":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:14025:9205":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:5622:11616":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:47134:10902":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4842:11292":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:2315:10439":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:46898:10894":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:42894:7224":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:23086:12110":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:3313:8429":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:39746:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:10185:7791":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:1005:10055":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:4821:11941":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:14575:7805":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:5319:11484":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:40809:8487":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"11:685:7962":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:42468:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:39826:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:5450:11542":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:3094:7960":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:465:8424":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:3656:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:30787:7264":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:6790:11840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11214:8353":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"0:22:2506":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"4:8470:8009":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:44008:7188":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:44313:7192":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"22:449:38993":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"1:44481:10762":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}