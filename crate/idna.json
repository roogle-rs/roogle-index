{"root":"0:0:1824","crate_version":"0.5.0","includes_private":false,"index":{"0:116-0:155:1803":{"id":"0:116-0:155:1803","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1803","glob":false}}},"1:12982:36750":{"id":"1:12982:36750","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12991:33213":{"id":"1:12991:33213","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2746-0:161:1801":{"id":"b:1:2746-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2749:2152"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[704,0],"end":[712,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:742"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12950:36739":{"id":"1:12950:36739","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12558:2297","`DoubleEndedIterator`":"1:7942:128","prim@char":"4:12068:447","str::rmatch_indices":"1:12953:36740"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44325:6654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1822":{"id":"0:119:1822","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:690:28719":{"id":"5:690:28719","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1967":{"id":"0:22:1967","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32777:234-0:170:1802":{"id":"a:1:32777:234-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2443-0:170:1802":{"id":"b:1:2443-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2437:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2445:2187"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2750-0:155:1803":{"id":"b:1:2750-0:155:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2752:742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115-0:170:1802":{"id":"0:115-0:170:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1802","glob":false}}},"1:12867:36729":{"id":"1:12867:36729","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12893:10397":{"id":"1:12893:10397","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12068:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44151:2371","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2797:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12938:34110":{"id":"1:12938:34110","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12993:34002":{"id":"1:12993:34002","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:912:38645"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2760:1620":{"id":"1:2760:1620","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:161:1801":{"id":"0:114-0:161:1801","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1801","glob":false}}},"1:12874:36732":{"id":"1:12874:36732","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[538,0],"end":[583,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1815","0:96:2079","0:97:1816","0:98:2114","0:99:2083","0:100:1811","0:102:1823"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12958:36742":{"id":"1:12958:36742","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2746-0:170:1802":{"id":"b:1:2746-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2749:2152"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12906:2116":{"id":"1:12906:2116","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2750-0:161:1801":{"id":"b:1:2750-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2752:742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:88:1811":{"id":"0:88:1811","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12865:872":{"id":"1:12865:872","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12068:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2756-0:155:1803":{"id":"b:1:2756-0:155:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2726:254","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2759:135","1:2760:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12889:34100":{"id":"1:12889:34100","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:12890:34101"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12895:29290":{"id":"1:12895:29290","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12896:29286"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44449:6644","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12890:34101":{"id":"1:12890:34101","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:12889:34100"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12903:2115":{"id":"1:12903:2115","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12929:36737":{"id":"1:12929:36737","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12558:2297","str::split":"1:12917:2136","prim@char":"4:12068:447","str::split_terminator":"1:12926:36736"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44243:6647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32834:2422-0:155:1803":{"id":"a:1:32834:2422-0:155:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32834:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12979:36749":{"id":"1:12979:36749","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12995:36752":{"id":"1:12995:36752","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4740:36752"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44474:6602","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42413:2441-0:170:1802":{"id":"a:1:42413:2441-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42413:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12963:36745":{"id":"1:12963:36745","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12997:12239":{"id":"1:12997:12239","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4741:12239"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44483:6601","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12883:29144":{"id":"1:12883:29144","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12870:36731":{"id":"1:12870:36731","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12868:36730"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12923:34104":{"id":"1:12923:34104","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12558:2297","`DoubleEndedIterator`":"1:7942:128","prim@char":"4:12068:447","str::split":"1:12917:2136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44193:6646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1809":{"id":"0:117:1809","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1803":{"id":"0:155:1803","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:32777:234-0:155:1803","a:1:2968:243-0:155:1803","a:1:32834:2422-0:155:1803","a:1:42413:2441-0:155:1803","a:1:42412:2442-0:155:1803","b:1:2746-0:155:1803","b:1:2756-0:155:1803","b:1:2750-0:155:1803","b:1:2761-0:155:1803","b:1:2443-0:155:1803","b:1:3560-0:155:1803","b:1:2446-0:155:1803","0:159"]}}},"0:168:451":{"id":"0:168:451","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:653":{"id":"0:46:653","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[229,0],"end":[237,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[522,0],"end":[536,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2797:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12953:36740":{"id":"1:12953:36740","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12558:2297","`DoubleEndedIterator`":"1:7942:128","prim@char":"4:12068:447","str::match_indices":"1:12950:36739"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44343:6655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12960:36743":{"id":"1:12960:36743","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2142":{"id":"0:87:2142","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1038","0:87:2142","0:88:1811","0:91:1823"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99:2083":{"id":"0:99:2083","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[564,4],"end":[567,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2761-0:155:1803":{"id":"b:1:2761-0:155:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2764:135","1:2765:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2756-0:170:1802":{"id":"b:1:2756-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2726:254","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2759:135","1:2760:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12935:34108":{"id":"1:12935:34108","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12068:447","str::splitn":"1:12932:34106","self::pattern":"1:12558:2297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44297:6650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12990:33212":{"id":"1:12990:33212","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12970:2138":{"id":"1:12970:2138","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12900:29723":{"id":"1:12900:29723","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:2144":{"id":"5:5556:2144","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:691:28720":{"id":"5:691:28720","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2446-0:170:1802":{"id":"b:1:2446-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2440:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2448:28717"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2752:742":{"id":"1:2752:742","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12875:329":{"id":"1:12875:329","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12876:34077","`u8`":"4:12085:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2446-0:155:1803":{"id":"b:1:2446-0:155:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2440:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2448:28717"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12962:36744":{"id":"1:12962:36744","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1823":{"id":"0:102:1823","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[577,4],"end":[582,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7:1799":{"id":"0:7:1799","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[328,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1967","0:24:582","0:44:2012","0:46:653"],"is_stripped":false}}},"a:1:42413:2441-0:155:1803":{"id":"a:1:42413:2441-0:155:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42413:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12876:34077":{"id":"1:12876:34077","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12085:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12888:34097":{"id":"1:12888:34097","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12887:34096","str::split_at_mut_checked":"1:12890:34101"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12894:1989":{"id":"1:12894:1989","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44161:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32777:234-0:155:1803":{"id":"a:1:32777:234-0:155:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12896:29286":{"id":"1:12896:29286","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12895:29290"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44458:6657","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2445:2187":{"id":"1:2445:2187","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12887:34096":{"id":"1:12887:34096","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:12889:34100","str::split_at_mut":"1:12888:34097"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12881:29143":{"id":"1:12881:29143","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5562:37441":{"id":"5:5562:37441","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42412:2442-0:155:1803":{"id":"a:1:42412:2442-0:155:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42412:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:98:2114":{"id":"0:98:2114","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[558,4],"end":[561,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2459:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12868:36730":{"id":"1:12868:36730","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12877:2006":{"id":"1:12877:2006","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42290:188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5570:37442":{"id":"5:5570:37442","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2079":{"id":"0:96:2079","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[546,4],"end":[549,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12989:33211":{"id":"1:12989:33211","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12913:1982":{"id":"1:12913:1982","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42290:188","prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1815":{"id":"0:95:1815","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[540,4],"end":[543,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2968:243-0:170:1802":{"id":"a:1:2968:243-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5559:37440":{"id":"5:5559:37440","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12988:33998":{"id":"1:12988:33998","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40261:28773","Self::is_ascii":"1:12987:1984"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40261:28773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2797:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24:582":{"id":"0:24:582","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6994:259","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2759:135":{"id":"1:2759:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:2448:28717":{"id":"1:2448:28717","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12947:36738":{"id":"1:12947:36738","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12558:2297","`DoubleEndedIterator`":"1:7942:128","prim@char":"4:12068:447","str::matches":"1:12944:2090"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44397:6653","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12987:1984":{"id":"1:12987:1984","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2764:135":{"id":"1:2764:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32707:10633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12909:6563":{"id":"1:12909:6563","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42290:188","prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3560-0:170:1802":{"id":"b:1:3560-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3562:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2756-0:161:1801":{"id":"b:1:2756-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2726:254","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2759:135","1:2760:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12898:36735":{"id":"1:12898:36735","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44439:6645","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12973:34112":{"id":"1:12973:34112","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12866:2120":{"id":"1:12866:2120","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12892:1969":{"id":"1:12892:1969","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12068:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44145:2005","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5571:37443":{"id":"5:5571:37443","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2287","`String`":"5:7571:240"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2287","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3560-0:155:1803":{"id":"b:1:3560-0:155:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3562:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2761-0:161:1801":{"id":"b:1:2761-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2764:135","1:2765:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[715,0],"end":[715,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","source","type_id","provide","description"],"trait":{"name":"Error","id":"1:2808:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2968:243-0:155:1803":{"id":"a:1:2968:243-0:155:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2765:1618":{"id":"1:2765:1618","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:715":{"id":"0:112:715","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[718,4],"end":[720,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9951:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:715":{"id":"0:107:715","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[650,4],"end":[701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9951:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[523,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1814":{"id":"0:118:1814","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12967:36747":{"id":"1:12967:36747","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5828-0:170:1802":{"id":"b:5:5828-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10000:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5826:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5830:1595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3560-0:161:1801":{"id":"b:1:3560-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3562:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:1801":{"id":"0:161:1801","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[513,0],"end":[519,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:32777:234-0:161:1801","a:1:2968:243-0:161:1801","a:1:32834:2422-0:161:1801","a:1:42413:2441-0:161:1801","a:1:42412:2442-0:161:1801","b:1:2746-0:161:1801","b:1:2756-0:161:1801","b:1:2750-0:161:1801","b:1:2761-0:161:1801","b:1:2443-0:161:1801","b:1:3560-0:161:1801","b:1:2446-0:161:1801","b:5:687-0:161:1801","0:92","0:167","0:169"]}}},"0:170:1802":{"id":"0:170:1802","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[603,0],"end":[616,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32777:234-0:170:1802","a:1:2968:243-0:170:1802","a:1:32834:2422-0:170:1802","a:1:42413:2441-0:170:1802","a:1:42412:2442-0:170:1802","b:1:2746-0:170:1802","b:1:2756-0:170:1802","b:1:2750-0:170:1802","b:1:2761-0:170:1802","b:1:2443-0:170:1802","b:1:3560-0:170:1802","b:1:2446-0:170:1802","b:5:5828-0:170:1802","0:106","0:110","0:183","0:108","0:111"]}}},"1:12864":{"id":"1:12864","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12865:872","1:12866:2120","1:12867:36729","1:12868:36730","1:12870:36731","1:12873:32604","1:12874:36732","1:12875:329","1:12876:34077","1:12877:2006","1:12879:29142","1:12881:29143","1:12883:29144","1:12885:36733","1:12886:36734","1:12887:34096","1:12888:34097","1:12889:34100","1:12890:34101","1:12892:1969","1:12893:10397","1:12894:1989","1:12895:29290","1:12896:29286","1:12897:7987","1:12898:36735","1:12899:29234","1:12900:29723","1:12903:2115","1:12906:2116","1:12909:6563","1:12913:1982","1:12917:2136","1:12920:29278","1:12923:34104","1:12926:36736","1:12929:36737","1:12932:34106","1:12935:34108","1:12938:34110","1:12941:34111","1:12944:2090","1:12947:36738","1:12950:36739","1:12953:36740","1:12956:36741","1:12958:36742","1:12960:36743","1:12962:36744","1:12963:36745","1:12964:36746","1:12967:36747","1:12970:2138","1:12973:34112","1:12976:36748","1:12979:36749","1:12982:36750","1:12985:36751","1:12987:1984","1:12988:33998","1:12989:33211","1:12990:33212","1:12991:33213","1:12992:34001","1:12993:34002","1:12994:34003","1:12995:36752","1:12997:12239","1:12998:36753"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5574:33210":{"id":"5:5574:33210","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12991:33213"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12998:36753":{"id":"1:12998:36753","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4738:36753"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44492:6600","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2746-0:155:1803":{"id":"b:1:2746-0:155:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2749:2152"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12897:7987":{"id":"1:12897:7987","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44429:6643","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12886:36734":{"id":"1:12886:36734","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12074:1538","crate::ops::IndexMut":"1:3222:2284","str::slice_unchecked":"1:12885:36733"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1038":{"id":"0:86:1038","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1823":{"id":"0:91:1823","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2749:2152":{"id":"1:2749:2152","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2723:142"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2963:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12932:34106":{"id":"1:12932:34106","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12068:447","self::pattern":"1:12558:2297","str::rsplitn":"1:12935:34108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44279:6651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12956:36741":{"id":"1:12956:36741","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3562:1633":{"id":"1:3562:1633","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40075:10355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12873:32604":{"id":"1:12873:32604","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12106:6636"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[649,0],"end":[702,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5555:37439":{"id":"5:5555:37439","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2287","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2287","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5573:33209":{"id":"5:5573:33209","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12990:33212"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1824":{"id":"0:0:1824","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1799","0:114-0:161:1801","0:115-0:170:1802","0:116-0:155:1803","0:117:1809","0:118:1814","0:119:1822"],"is_stripped":false}}},"1:12885:36733":{"id":"1:12885:36733","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12074:1538","str::slice_mut_unchecked":"1:12886:36734","crate::ops::Index":"1:39907:2283"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12926:36736":{"id":"1:12926:36736","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12558:2297","str::split":"1:12917:2136","prim@char":"4:12068:447","`DoubleEndedIterator`":"1:7942:128","str::rsplit_terminator":"1:12929:36737"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44225:6649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1811":{"id":"0:100:1811","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[570,4],"end":[574,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2761-0:170:1802":{"id":"b:1:2761-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2764:135","1:2765:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42412:2442-0:161:1801":{"id":"a:1:42412:2442-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42412:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5572:2036":{"id":"5:5572:2036","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:7691":{"id":"5:689:7691","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:5:687-0:161:1801":{"id":"b:5:687-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2459:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:7691","5:690:28719","5:691:28720"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42412:2442-0:170:1802":{"id":"a:1:42412:2442-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42412:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12920:29278":{"id":"1:12920:29278","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12374:6658","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12941:34111":{"id":"1:12941:34111","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32834:2422-0:170:1802":{"id":"a:1:32834:2422-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32834:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32834:2422-0:161:1801":{"id":"a:1:32834:2422-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32834:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5830:1595":{"id":"5:5830:1595","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2443-0:155:1803":{"id":"b:1:2443-0:155:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2437:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2445:2187"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12917:2136":{"id":"1:12917:2136","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12558:2297","`DoubleEndedIterator`":"1:7942:128","prim@char":"4:12068:447","str::split_whitespace":"1:12895:29290","str::rsplit":"1:12923:34104"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44175:6648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554":{"id":"5:5554","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5555:37439","5:5556:2144","5:5559:37440","5:5562:37441","5:5570:37442","5:5571:37443","5:5572:2036","5:5573:33209","5:5574:33210"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2968:243-0:161:1801":{"id":"a:1:2968:243-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12985:36751":{"id":"1:12985:36751","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12519:134","`FromStr`":"1:12518:2292"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12518:2292","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12518:2292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2443-0:161:1801":{"id":"b:1:2443-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2437:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2445:2187"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12879:29142":{"id":"1:12879:29142","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42290:188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2012":{"id":"0:44:2012","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[223,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2446-0:161:1801":{"id":"b:1:2446-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2440:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2448:28717"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12899:29234":{"id":"1:12899:29234","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44467:6656","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12944:2090":{"id":"1:12944:2090","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12558:2297","`DoubleEndedIterator`":"1:7942:128","prim@char":"4:12068:447","str::rmatches":"1:12947:36738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44379:6652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12994:34003":{"id":"1:12994:34003","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:912:38645"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42413:2441-0:161:1801":{"id":"a:1:42413:2441-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42413:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[717,0],"end":[721,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10000:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2750-0:170:1802":{"id":"b:1:2750-0:170:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2752:742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12976:36748":{"id":"1:12976:36748","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12992:34001":{"id":"1:12992:34001","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:912:38645"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32777:234-0:161:1801":{"id":"a:1:32777:234-0:161:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:97:1816":{"id":"0:97:1816","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[552,4],"end":[555,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:742":{"id":"0:109:742","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[705,4],"end":[711,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12964:36746":{"id":"1:12964:36746","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12068:447","self::pattern":"1:12558:2297"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12583:6632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:8245:17754":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"18:754:8299":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:12087:1640":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:22388:17502":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"11:1910:8008":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:5897:24431":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"11:673:7692":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:33254:9630":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:9472:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:46908:10450":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:8012:9777":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:21339:29756":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:903:2321":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:4556:10977":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:39827:12227":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:44759:10402":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:44101:8120":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4616:11006":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:7103:37661":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:4375:10877":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:15799:9250":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:8399:10104":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11256:8432":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:41487:8092":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:790:7333":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:14235:8818":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:4776:11043":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:4844:9426":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:4426:7354":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:11631:7729":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"16:7294:9694":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13235:8621":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:6590:11658":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:44782:6635":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:4764:11036":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:33440:9627":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:7397:8090":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:725:17755":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"4:9014:10124":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8360:2277":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6059:11359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:9232:32608":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:4488:10948":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:46877:10449":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"20:319:17755":{"crate_id":20,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"1:33919:12205":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:15635:9208":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6692:9585":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:13344:7561":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:5652:17875":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:8360:17820":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:483:10647":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9633:715":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"5:1790:2321":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:44899:6627":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:6737:7597":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:9152:232":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13946:8757":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:0:2265":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7376:9708":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:4184:10298":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:15266:9092":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:46262:10429":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11000:6646":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:39998:211":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:11080:33161":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:1456:2324":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13173:8605":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:2196:7698":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:7900:143":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13473:8655":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:5033:11171":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:7221:8040":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:5298:24428":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11227:8431":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:16198:9349":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:14271:8823":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:1691:10838":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"11:2151:9879":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"4:4784:17821":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11115:7933":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:4550:17821":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:11141:159":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"4:8010:7721":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4989:11148":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:11426:8043":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"11:2403:7693":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:10661:7925":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:12051:32614":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:41041:7746":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:2678:11968":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:44492:6600":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:1939:6810":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:8951:10123":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:41516:8096":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:9938:24499":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:8295:6643":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:1590:8007":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:4519:7433":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:42431:223":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"10:44:7665":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:6227:7398":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:475:8004":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:40673:6601":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:8222:7723":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:41128:8080":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4884:11089":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:14516:8864":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:3354:10000":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:7946:10050":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"6:4860:11082":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:48519:10481":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:42414:6672":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15616:9203":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:7375:2324":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:46733:10445":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"15:394:23533":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:10431:7446":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:3522:10002":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:14436:8856":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:10866:10020":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"20:457:2358":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"1:40716:6607":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4583:6689":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:6595:7441":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:13797:8736":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:2203:7945":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:10241:112":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:12388:8545":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"4:7729:9981":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:1797:631":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:11595:7534":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:7227:6537":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:415:182":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:1824:8017":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:13785:8734":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:3187:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:4312:10008":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:4825:17813":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:22125:17414":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:5865:7975":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:1710:10845":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:6621:10030":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:1302:9877":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:4881:214":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:2849:6815":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"6:1514:10724":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:48504:10480":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:7343:11590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:14091:8778":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10251:7529":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:9119:7726":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"9:501:9943":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:2319:9367":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:11812:8480":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:12789:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:8523:10382":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:6431:7638":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:2990:11629":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:14038:8771":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:4480:10946":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:893:2274":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:3234:35894":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:42110:7763":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:42354:7693":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:918:7697":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:527:10675":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:46280:10430":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:1207:7936":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:11241:10155":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:6870:2327":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:4955:11123":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:15151:9063":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:3814:10005":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:7616:11607":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6599:9570":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:8611:7692":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:40690:6608":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:8458:17857":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:2284:23542":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:3190:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:47135:10454":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:40088:8240":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13387:8639":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"21:145:2045":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"17:10284:7530":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:4529:6688":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:4733:9422":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:726:7503":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:1024:7330":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:495:10653":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12724:24503":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5955:11303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:48121:10465":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:48183:10466":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:48329:10469":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:10006:6677":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:2720:160":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"16:7335:9398":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:41152:8083":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12342:8539":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:15313:9102":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:21341:29761":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"21:259:37738":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"5:2487:11632":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:5941:11292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6700:11466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:7383:207":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6045:203":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12328:8535":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:46132:10424":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:1478:7694":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:481:8269":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5104:11206":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:875:9875":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:46657:10442":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"14:165:23506":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:42637:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:15957:9275":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:14147:8787":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:3356:10001":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:42423:10316":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:2112:10169":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:4649:9419":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13272:8634":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2459:9374":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"11:837:9870":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:39978:212":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:10068:24484":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:1487:7695":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:9457:136":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"11:2469:2321":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:43528:7768":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:44907:6629":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:4381:260":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6408:9532":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:44591:10395":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:6646:9583":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:45084:147":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:12090:10320":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"14:160:9862":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:14025:8769":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:21695:7753":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:2723:142":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:45186:9890":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:6584:8075":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:5123:11215":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:4378:6687":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:7800:17694":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:7152:9654":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:8109:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:569:10698":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:687:7693":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:4572:17822":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:0:2264":{"crate_id":17,"path":["object"],"kind":"module"},"11:1582:9884":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:651:8271":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"20:642:2358":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"1:43920:8107":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:2968:243":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:5992:11317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:2979:9400":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:12078:689":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"16:6134:7596":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:5360:7330":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:42834:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:4807:6595":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:13455:8654":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11688:8466":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:32707:10633":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:15778:9247":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:12093:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"11:2569:2288":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:659:7916":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"9:446:23421":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"7:31:23407":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:3206:8008":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:16105:9326":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:4821:7969":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:3597:7959":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:123:7318":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"4:5209:201":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"20:667:2360":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"1:48451:10477":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:10258:32914":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:7038:7377":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:7371:11593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:15463:9142":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10905:7929":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:14868:8996":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"10:0:2258":{"crate_id":10,"path":["adler"],"kind":"module"},"17:11392:7941":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:40818:6599":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:4455:10300":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:41510:8095":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:1591:10771":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"21:290:37737":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"1:47089:10453":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:4131:17804":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10137:24478":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:10498:7418":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:47585:10461":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:40038:12218":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:15760:9241":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:7974:126":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6803:9593":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"9:481:23420":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12516:8557":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:44081:8118":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:15748:9239":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:5713:7611":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"11:364:7320":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:14372:8837":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:15289:9095":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:1131:36116":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:4986:7970":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:2617:9381":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:735:28682":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:2167:9962":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:11702:8467":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"18:598:37673":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:42402:2439":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:15301:9101":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:42050:10308":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:4968:9430":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:30984:6685":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"22:534:7897":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"1:41525:7442":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:7610:11606":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6030:9496":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6348:7636":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:22615:10329":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11877:7537":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:15582:9191":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:1576:10759":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:7669:2322":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:6631:2324":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12711:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"4:1040:9617":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:14051:8773":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:13412:8644":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:588:10708":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:43999:8112":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:2717:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"18:613:37674":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:3315:208":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:3561:6613":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:14131:8782":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"20:511:2362":{"crate_id":20,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"20:306:2341":{"crate_id":20,"path":["unicode_bidi","TextSource"],"kind":"trait"},"15:0:2262":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:31553:7761":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13375:8638":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:3609:7692":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11313:8438":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:30963:2316":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:1607:8010":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:198:2411":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"13:0:2255":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:3399:12220":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12408:7540":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:14463:8858":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:10963:7422":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:6804:11502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12371:8574":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:12043:8517":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:635:8287":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:46066:10421":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:4095:7354":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:7702:11627":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:15102:9052":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:4657:447":{"crate_id":1,"path":["core","char"],"kind":"module"},"4:4718:11488":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:7333:12287":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:5759:9457":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:16235:9358":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:13594:8688":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11443:8446":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:3709:9404":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:7984:9776":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:3240:8007":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"9:0:2257":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:11854:7429":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:867:7694":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:14876:8997":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:9886:24497":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:7548:9978":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:4461:10933":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:4304:7738":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:15116:9053":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:12092:1248":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"11:1883:7692":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:15521:9184":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"7:78:23414":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:2343:632":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:7521:29235":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13553:8677":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6610:9571":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:3010:8313":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:5009:11159":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:46311:10431":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"20:611:8261":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"17:12707:7974":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"4:3504:10097":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"6:7622:11608":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:46156:10425":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:15390:9125":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:9737:24479":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:6120:11384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:8275:8086":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:43305:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"4:9099:32615":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:11841:7954":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:8002:10053":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:7452:24439":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:12374:6658":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:48414:10474":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:718:8293":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:10858:10048":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"4:12081:793":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"5:1528:207":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5829:11228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7998:7656":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:14575:7541":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:596:10712":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:9142:184":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:4702:9421":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:7584:2275":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11730:8470":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:11514:10004":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11634:8462":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:11214:7937":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:14402:8843":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:2749:9387":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:2982:7391":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:1142:9882":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4543:10972":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:3199:7692":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4932:11113":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:4035:2274":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12929:8574":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:2509:9376":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:11639:8122":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:13356:114":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:4446:218":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:46465:10437":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:15944:8620":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"4:8601:8032":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:45138:10414":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:46563:10440":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:4240:8029":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:43971:8108":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:10012:6679":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:5462:10013":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"11:299:7992":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:10350:8036":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:32768:8048":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:11128:8399":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:8912:7692":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:14298:8826":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"4:5389:127":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:12353:8543":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"22:1034:28710":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"4:4119:17801":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:4491:9415":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:9671:24480":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:10167:11901":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:11063:8425":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4450:10299":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:9984:24500":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:15426:9134":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:1578:2324":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"22:752:7309":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"22:879:28708":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"17:14529:8865":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:3260:9401":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:40799:6606":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:6151:7396":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5044:11177":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:2963:116":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"16:7225:24438":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:11016:7930":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:9952:6613":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:12494:8552":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:3856:9408":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10534:37663":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:7068:11940":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:40:2320":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5910:11273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:10758:33167":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:4335:7739":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:2961:6504":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:16121:9331":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:4893:11092":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4516:10959":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:4650:17839":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:11420:8042":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:4283:9410":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12768:24482":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:6978:7409":{"crate_id":4,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:10419:7533":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:8369:12282":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:5068:11184":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:2438:17744":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:26377:262":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10612:7924":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:7492:7358":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:40068:10354":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:9210:10133":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"6:4998:11154":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"9:329:10637":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:42346:7692":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12887:7545":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13024:24506":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4523:10962":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:6691:7407":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:3015:223":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:11331:7423":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:9995:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:7684:9726":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5885:11268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12107:7511":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:1570:10757":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6555:9558":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:21312:29751":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"4:3275:9997":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:44976:12369":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:22448:17494":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"1:44941:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:4610:11004":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:1664:10825":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:5020:7354":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:1703:10842":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13437:8646":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7507:207":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:2496:2193":{"crate_id":4,"path":["std","io"],"kind":"module"},"17:12089:8521":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13089:8587":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:4232:8028":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:573:8271":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"20:424:8248":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"16:7932:9769":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:3596:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:10458:10000":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"11:800:2274":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4800:11051":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9807:24485":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"7:0:1687":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:39907:2283":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:951:9876":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:3600:8318":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:15434:9135":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:11657:10038":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:5278:9434":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:8978:17893":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:5521:9395":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:7598:11604":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11121:8126":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:7508:9973":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:513:8304":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13325:7554":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:5238:9433":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:6394:7977":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"11:1087:37652":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:1686:7330":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:2440:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:5023:11165":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10759:7511":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"14:220:9869":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:1063:9879":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12238:8531":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:43024:6677":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11674:8465":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:6221:7634":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:1826:8018":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"6:6263:11435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"20:542:2043":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"4:7665:7412":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:42912:7764":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12300:24623":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:7863:12284":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:13214:202":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:574:10700":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:2994:37516":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:2375:9370":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:11089:7932":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:16138:9333":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:14177:8806":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:507:10658":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:22733:29274":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:1425:7692":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:45146:10416":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:3014:2278":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"16:149:7315":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:12066:397":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"16:7914:9767":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:501:10655":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:41027:8063":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:11093:6650":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:32761:6688":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"16:6362:7637":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:16187:9348":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"4:7980:7705":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:1710:7354":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:44622:10399":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:1639:10806":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:2718:11635":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:2789:9389":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:7111:7410":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:34752:9636":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:43017:6675":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:5834:10027":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:14788:8934":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6773:7642":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:10399:6642":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:10000:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"16:3993:9409":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:5408:17932":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:830:7336":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:2355:12172":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:5085:11192":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:1674:10831":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"18:680:8288":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:44903:6631":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:3399:17782":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:6292:9522":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:849:7693":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:1051:9879":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:42362:2324":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:43331:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:12067:1034":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"5:0:303":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:2835:9391":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:40989:8056":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:2511:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"16:2883:23569":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:6071:11366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:7536:9976":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:2266:136":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:12085:1642":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"9:391:23422":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:914:7696":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:3046:12216":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:48581:10483":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:14012:8768":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:11354:8039":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:39938:207":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:11075:7523":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:44175:6648":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:5896:2274":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:9032:114":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:1072:9883":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:1925:10166":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:3177:9366":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:6741:11493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4428:10920":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:42028:168":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"12:0:2260":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:32747:9674":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:14260:8822":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:6898:11559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:3473:7958":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4854:11079":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:41494:8093":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:41543:8099":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:42479:7693":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"5:1506:7696":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:44891:6626":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13116:8593":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:32777:234":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:47325:10457":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:9193:10132":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:11056:7708":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:4716:11486":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:12071:1152":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"11:1903:8007":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:8546:10116":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:47165:10455":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:5601:24429":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11051:8423":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:22:729":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:1596:8008":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:7679:11621":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:491:8270":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:9027:7711":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:4878:11088":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:45097:224":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12792:8377":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6961:11584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:6012:7363":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:11348:7716":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:2730:253":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:48043:10464":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:765:28683":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:6819:11506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:46400:10435":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:7651:11615":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:5140:11219":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:41103:7747":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:2529:9377":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:7653:2321":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:2175:24557":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:34579:12208":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12808:8571":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:42412:2442":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4595:10997":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12659:8562":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:43537:154":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:22123:17755":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:7366:9399":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4724:11022":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:2249:36047":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4628:11015":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:14311:8827":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13538:8671":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:4902:17809":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:16151:9339":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:5066:853":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:5146:11221":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:15342:9110":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4755:11031":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:2769:9388":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6882:9608":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:6275:7715":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:1585:2321":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:40929:8054":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"9:356:23436":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:32866:113":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:44748:12363":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:836:7692":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:21684:17755":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10828:37671":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:6547:7406":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:12089:1638":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"6:1558:10749":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:13239:10326":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:2593:9380":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:4518:9416":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:44965:10411":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:43314:6685":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"20:8:2365":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"17:11715:8468":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:4506:10956":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:15176:9071":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:14414:8845":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"4:4261:8030":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9916:24498":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4922:11107":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6152:7627":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:14341:8832":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:3741:9405":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"4:2657:7388":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:43520:7767":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:1697:10841":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:742:7697":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6215:7632":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:10185:7527":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:2506:198":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:44121:2290":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"4:4821:17810":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:10641:17755":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:42413:2441":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:7752:10041":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:9078:7724":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:12572:6634":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4351:10860":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:10524:7922":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:234:223":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:44605:10398":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:44397:6653":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:15333:9109":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"22:0:2385":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"4:7958:137":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:10393:7417":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"21:266:2396":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"11:2326:9877":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:43352:6686":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13064:8586":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4401:10897":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11405:8445":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:44923:7752":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:44697:10324":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11621:7520":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:2074:9961":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"4:8993:17895":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:44151:2371":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:10887:37665":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7332:12286":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:5015:11160":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:1604:10778":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"20:482:2360":{"crate_id":20,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"1:22211:17498":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"4:2032:195":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:6116:9504":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:4210:8027":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:4781:17848":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:2443:2274":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:46418:10436":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:21514:17416":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:8288:6648":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:13526:8668":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:8934:10022":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:40836:10360":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"20:496:2361":{"crate_id":20,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"4:8963:17894":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:555:10690":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:33626:12201":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4364:10869":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:22477:17495":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:3019:12007":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:261:8301":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:3222:2284":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:15058:7562":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:2355:9369":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:11419:7511":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:39960:209":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13986:8765":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10457:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:6378:217":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:12088:1641":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:11853:8484":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4473:10942":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:15814:9251":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:3702:7330":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"14:31:9862":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:14079:8777":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5928:11283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:928:17707":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:12362:8544":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:2641:9382":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:42066:10310":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:945:9875":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"20:470:2359":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"8:0:2256":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:11554:10005":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:44911:6630":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:5568:9446":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:44325:6654":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11269:24531":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"4:5496:10018":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:10170:7508":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:10087:10135":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:2553:9378":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:44555:12362":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:4572:9418":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6282:9521":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:1025:9877":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:22747:10331":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7706:24441":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:44919:6625":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:11643:33190":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:41071:8073":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10573:37668":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:9296:8020":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"20:681:2361":{"crate_id":20,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"4:4996:17847":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:3159:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"15:306:7986":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:3833:2321":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:212:7328":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:10687:10049":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:44887:6623":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:8233:10003":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:40847:29235":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:7331:2274":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:7361:36036":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"9:237:10382":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:11680:6639":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:10044:24501":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:533:10678":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:8282:6642":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:6725:230":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:4172:10297":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:44243:6647":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:4871:9427":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:47435:10460":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:700:2324":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"4:10452:9996":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"4:1054:9877":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:43771:8102":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:2726:254":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"16:5499:9393":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11915:24599":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:4987:30308":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:4879:7392":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:2035:194":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:5555:9441":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:7551:7653":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:5776:7354":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:16249:9359":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:32835:6510":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:1916:11655":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:12074:12327":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:10721:137":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"20:696:2362":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"4:7936:7720":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:41501:8094":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7324:9703":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:6248:11424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:4396:7356":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:45087:216":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"16:7270:7593":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:6868:11542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11510:8449":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:7645:11614":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:6052:7402":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:3317:9999":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:8355:11637":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:1834:1189":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:7820:17726":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"20:632:2357":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"20:599:37680":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"1:32778:2421":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:40766:6602":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:1581:2274":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:10946:7420":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:8265:7740":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"14:202:2273":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:538:7497":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:13406:149":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:119:18025":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:44895:6628":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:9038:10125":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:3183:2419":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4676:11018":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:21971:17755":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"18:643:8271":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:22833:11659":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6422:7317":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:14545:8867":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:4574:7434":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:44091:8119":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:42288:191":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"16:7523:7650":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:21302:7761":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:14475:8859":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:48367:10470":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:15168:9068":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:6908:9614":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6320:9524":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:48291:10468":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:75:1640":{"crate_id":1,"path":["core","u32"],"kind":"module"},"21:301:2409":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"4:5906:7394":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11102:8427":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11605:7535":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:6691:11465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:41277:8086":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4566:10984":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:5581:10020":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:10002:6675":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:5974:11305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:10010:203":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:34096:12204":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:48542:10482":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:2399:9371":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11583:8458":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:15701:9225":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12969:8576":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:44915:6624":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"14:214:9867":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:47933:10463":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:12260:6662":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:46830:10448":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:44429:6643":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:40831:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:13308:7552":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10259:7751":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:7614:8305":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:1501:10718":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:7994:10052":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:357:9979":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"15:327:7658":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:15138:9057":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11242:7938":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"4:12079:691":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"9:177:7681":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2437:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:14356:8836":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13497:8659":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:11650:10038":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"11:2548:7991":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:7388:11602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4455:10930":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:4109:17800":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:1115:8012":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:46611:10441":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:5726:9450":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:40750:6600":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:9039:2440":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:10818:7927":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:13165:162":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:3418:29439":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:10898:7709":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13766:8729":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3388:250":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:13972:8490":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:8891:10122":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:1887:8021":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11647:8463":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:7365:11591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:44297:6650":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:7565:9713":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:15190:9074":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:22683:7733":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:2709:9385":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:1734:10854":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:15931:8606":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:14560:8871":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"11:1891:2274":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:1885:8020":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:15368:9120":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:14599:8881":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:43559:7769":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5867:11255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13738:8722":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:8628:10121":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:5052:11179":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6244:24433":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:4392:10009":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:42496:193":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:22562:10328":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:2548:199":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4908:11099":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6913:11566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:12518:2292":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:41018:8061":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:2369:9888":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:40018:213":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11467:8447":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:1107:9881":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:1913:19376":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:2450:17750":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:23977:233":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6724:9589":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:44145:2005":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:5111:11209":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:10957:7421":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:16050:8634":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:4219:12240":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:14111:8781":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:1602:8009":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:6994:259":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:6047:11354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:40999:7744":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:706:6634":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:4686:11019":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:46779:10447":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:8213:7722":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"17:12127:8523":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:7619:7722":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:15197:9076":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:10796:7692":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:3315:9998":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12189:7960":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:201:2042":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"1:41009:8058":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:8878:7708":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"11:434:8000":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:15023:9044":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:10018:24481":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:3017:135":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:4630:6690":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:33978:12203":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:7414:7647":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:6137:7354":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:903:7692":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:5645:9447":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:4399:9412":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:2353:12171":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:11865:7955":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:34037:12202":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"4:5527:112":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:44343:6655":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:4227:7354":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:5541:9437":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:15456:9140":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:581:7761":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4449:10928":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"10:36:10636":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:42337:171":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:10219:154":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:2063:9960":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:39911:8049":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:43010:6676":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:1902:12184":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"22:948:28709":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"4:7814:17695":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14723:8883":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:6222:11409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6445:9533":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"0:7:1799":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"16:7355:9707":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13877:8750":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:0:1530":{"crate_id":4,"path":["std"],"kind":"module"},"17:13753:8727":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:45175:10419":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:9073:7714":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:6033:17945":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:5025:10303":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:11764:8475":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:32864:6509":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:8617:8035":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:12289:8533":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:40971:7741":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"13:226:7662":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:548:10687":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:640:9985":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:15596:9197":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:10463:7451":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"11:787:7695":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:8088:17785":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:7904:163":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:9970:141":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4738:11023":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:9175:10033":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:43260:6685":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:11381:10034":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:15608:9200":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:608:8282":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:15356:9117":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11293:24532":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:6713:7330":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:6718:11475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4698:11020":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13999:8766":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:32754:10352":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:7869:9763":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:6107:11380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13146:8597":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"11:2383:7692":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:13844:8742":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:1718:10849":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:6114:11381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"21:276:2408":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"17:12454:8548":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"4:3442:8096":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:40922:10363":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"4:9086:10130":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:15126:9054":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:5152:11224":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:8083:7719":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:15569:9185":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:42194:29283":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:12040:17696":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:15376:9123":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:46110:10423":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:16212:9353":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"4:3570:32763":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:4238:12241":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:11189:8429":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:7419:2324":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:1521:10726":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:11898:8485":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4710:11021":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:1574:7692":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:2588:9993":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:3273:9996":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"20:197:2370":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"4:5132:10012":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4902:11098":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:2140:9877":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10769:37670":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11497:7949":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:654:18384":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"4:6330:7402":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"0:22:1967":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"1:39923:210":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:4603:6512":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4549:10974":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"14:40:8621":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:2677:17755":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:21573:17415":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:44474:6602":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:6136:11389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:7194:37658":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:4061:17797":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:728:187":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:4462:9414":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:43989:8111":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:1992:186":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:21565:17755":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:5921:11281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6889:11556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:80:7908":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:351:7996":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:12863:8573":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:12320:6661":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:1517:7697":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:6230:9515":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:5662:24430":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:16069:9319":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:12584:7927":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"5:5980:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:6086:11368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"14:7:9862":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6849:9604":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12572:7511":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"4:4987:17846":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:2536:10630":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:563:7499":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:15400:9128":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6781:11495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:22334:17501":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:12993:24505":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:2819:9390":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:430:7999":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4388:10887":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:22668:7755":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:40862:10361":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4841:11074":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:7728:17755":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:909:8006":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:14386:8839":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:6798:11500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4440:10923":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:10014:6680":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:41142:8081":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:1596:10773":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:22864:12020":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:6503:2274":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:15410:9131":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:4065:7330":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7311:2324":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:12056:8519":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:6658:11442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:7835:10048":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:1507:10721":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:2440:17745":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:40792:6605":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:1537:10734":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:9654:29574":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4830:11066":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"18:96:7911":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"11:2562:10634":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:437:8303":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:6201:7630":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:5669:2327":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:15039:9047":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:3010:6508":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:4075:17799":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:3753:7721":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:33860:2279":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:9147:231":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6077:7612":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:41287:8087":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:21370:29754":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:5006:9431":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:12485:24625":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:5404:17931":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:12106:6636":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10350:7532":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:14986:9037":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12543:8559":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:6929:9616":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13922:8756":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:16269:8644":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:4966:415":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:12671:7972":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"11:102:10629":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:46511:10438":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4847:11077":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10622:37669":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:8301:8024":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:7449:12273":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"9:423:23423":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"11:710:7696":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:9799:6696":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:10004:6676":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:44193:6646":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12508:8555":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:5825:7579":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:3916:10006":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4824:11063":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:1917:8009":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:2797:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:3141:12223":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:2729:9386":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:3768:9960":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7619:24440":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"20:534:7906":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"16:5346:9435":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:939:9873":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:21356:29759":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10218:7528":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:48405:10473":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"0:44:2012":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"1:0:529":{"crate_id":1,"path":["core"],"kind":"module"},"15:288:7981":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6837:11516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:8475:10113":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"5:6549:7330":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:3003:6506":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:4578:10990":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:883:9876":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:6788:37657":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:5512:10019":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:12084:791":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:12091:1697":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:30995:29279":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12076:8520":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:531:8272":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:3393:144":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:46541:10439":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:1271:9617":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:8051:176":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:637:9983":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:47401:10459":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:1682:10832":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13568:8683":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7306:9695":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11537:8450":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:2336:7571":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:13367:7398":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:40902:10362":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:13292:7548":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:3472:7354":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"11:832:8006":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:8407:29537":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:10888:6658":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:15324:9106":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:557:9982":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:40980:7743":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11153:7927":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12251:7964":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12851:7544":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:363:9980":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:2304:23568":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:15:2232":{"crate_id":1,"path":["core","write"],"kind":"macro"},"16:7609:9714":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:14994:9038":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12683:7973":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:38559:12210":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:40261:28773":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:2998:37517":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4496:10950":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:1537:8014":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:14587:8874":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12478:8550":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:8366:10101":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:5826:247":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:634:9957":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:10730:126":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:7345:9706":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:5706:217":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:12629:12356":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:6677:17890":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:43980:8109":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:31052:29251":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:5982:11310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:8861:8036":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9858:24496":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5878:7585":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4789:11047":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:10365:7444":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:2037:7942":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:44059:8116":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:6012:11333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5130:11218":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:12072:328":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:43549:10382":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:5681:7354":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:4977:11139":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"4:588:17689":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13252:8624":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:46381:10434":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:14968:9032":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12695:8563":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:6759:7641":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:40701:29282":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:7466:2288":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12030:7956":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"22:728:7299":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"16:4355:9411":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"22:43:28706":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"1:6395:8071":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:47011:10452":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:21512:17755":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:6100:11379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:15222:9081":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:8928:2324":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:4706:17799":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"11:0:2259":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:2419:9372":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:1496:10716":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:1066:23500":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:14189:8808":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:42873:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:6511:10029":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:7913:2420":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:2573:9379":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:8920:8038":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:11123:11646":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"11:2554:37651":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:7889:9764":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:4787:9424":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"11:811:2321":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:12083:795":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:4584:10993":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5969:11304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:5045:17853":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:11743:8471":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:6188:9514":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4647:11016":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:12069:1658":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:44449:6644":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11341:7940":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:2733:9995":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:32834:2422":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:10700:10149":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"4:11575:10006":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:42371:2438":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"11:1160:9883":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:5485:7600":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:4761:9423":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:6462:24434":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"21:228:2046":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"16:3773:9406":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:5616:7601":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13899:8751":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:3051:12217":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"4:6243:7401":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:5075:11187":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:30701:11969":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:7639:11613":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"11:2352:9879":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:10915:37667":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:3237:33043":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:5163:10012":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:8382:10102":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:2542:192":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:4907:9428":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:5713:7402":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:3579:17753":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:12583:6632":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:1546:10740":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12824:24504":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:14489:8860":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:4017:17794":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12530:7968":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13723:8718":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:12035:7730":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:15646:9209":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:2689:9384":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:15383:9124":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:8904:7709":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:7929:10049":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:6370:17898":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:6682:11459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5630:7604":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:7319:8011":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:403:8302":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:0:2263":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:48466:10478":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:16259:8639":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:6099:9501":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:6331:9525":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:13959:8760":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:482:7382":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:4197:7354":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:1316:9883":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:2459:111":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:12336:6663":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:7867:12283":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:40773:6603":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:42082:12293":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:21324:29751":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:12086:1639":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:4720:11490":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:3232:8009":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:7633:11612":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13581:8687":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4745:11024":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:22722:10330":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:542:10684":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:22295:17500":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"16:6895:9611":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:22806:29280":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6128:11386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:10677:11642":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"0:118:1814":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"1:22256:17499":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:13363:8635":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:22348:12171":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"4:9045:32628":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:41112:8078":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:40958:7740":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:12558:2297":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"14:187:23513":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:10711:7720":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"20:520:7903":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"16:6268:7635":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:10455:9998":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:14933:9031":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:38504:12209":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:123:18026":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:9951:223":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"4:1975:702":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:42793:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4814:11057":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:15822:9254":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:8348:10007":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:844:17707":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:11395:10035":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:16165:9342":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:7919:8182":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:32743:10351":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"16:4545:9417":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:4464:10010":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"3:0:2254":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:21358:29748":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10317:7531":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:7391:7703":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:10740:10003":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"4:2276:17737":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:46086:10422":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6927:11575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:1650:10814":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:22346:28917":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:8022:24442":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"20:705:2363":{"crate_id":20,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"4:3811:10004":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:3830:9407":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10720:37666":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:16093:9324":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"20:449:135":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"5:5170:7363":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:12068:447":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:44483:6601":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:8097:9784":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:14325:8830":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:11491:7425":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:1896:2321":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:10066:8019":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:6079:11367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:533:7383":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:13399:8642":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:13461:2318":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:14066:8776":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:16079:9320":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"4:5321:200":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"16:2917:23570":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:9469:7416":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:3193:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:42676:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:40679:10356":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:48489:10479":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:5720:10021":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:43767:11734":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:44046:8054":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"11:1923:8010":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"4:10682:11644":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:22433:17755":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:11557:8452":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:2973:2314":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11026:24514":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:8078:10054":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:22755:10332":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:580:10703":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:21586:7753":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"0:46:653":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"1:4196:108":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:16176:9347":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:22840:10343":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"22:636:7898":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"6:4947:11118":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:2049:7721":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:266:7330":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:46240:10428":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:43752:10386":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:5966:7745":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:7429:37656":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11574:7664":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11166:8428":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:11825:8482":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6669:9584":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:12019:10161":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:12563:2285":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:12578:6633":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6169:11398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11755:8474":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:3622:7693":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:15836:9257":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10439:7509":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:12075:1623":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:2234:7948":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:7595:7654":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:38614:12211":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:7995:2009":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:7482:9711":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4666:11017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:4813:9425":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5891:11271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:6764:11494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:47371:10458":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"20:432:2366":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"4:12080:796":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"5:281:2287":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:597:8305":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:683:246":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6254:9518":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:6811:24436":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:621:6812":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:6941:24437":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"21:319:8244":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"17:15010:9039":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:689:8290":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:8374:8024":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:4937:9429":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9659:7748":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:7411:2324":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:40075:10355":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:7692:11625":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:6438:183":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13855:8743":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6666:11447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"22:669:7493":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"0:0:1824":{"crate_id":0,"path":["idna"],"kind":"module"},"11:2304:9617":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"4:4823:17812":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10671:37664":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:11788:8479":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:4069:17798":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:4248:17819":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:7537:7652":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:7556:11603":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:5331:7508":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:12264:8532":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:7668:11620":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13424:8645":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"13:110:37653":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4603:11002":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:44020:8114":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11547:8357":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13674:8693":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3405:12222":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:10845:6648":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:42487:2324":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"16:5959:23541":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"22:386:7315":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"4:880:7695":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:2489:9375":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:7560:7364":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:47247:10456":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:42598:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:13832:8740":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:7951:9772":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:7477:17706":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:7684:7414":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:3378:12219":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:3245:36243":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7444:9710":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11524:7950":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:14855:8989":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:43512:7765":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"0:119:1822":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"17:3264:7957":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"4:4123:17802":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:4459:7356":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:46687:10443":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:2714:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:4968:11133":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:4674:9420":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:32779:241":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"21:67:2044":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"1:40739:6610":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:11661:8464":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:15769:9245":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12422:7966":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:48385:10471":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4529:10964":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:4011:17795":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12621:8561":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:6159:11395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:46931:10451":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5897:11272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:3667:2274":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:3029:9631":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:3558:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:41535:8097":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:7302:2319":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:6711:11471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:7386:7645":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:44072:8117":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:6934:11578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10710:7926":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"11:1566:23501":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:8425:10011":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"9:52:7666":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:5649:11396":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:15078:9048":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:521:28684":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:8363:12281":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:726:12008":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:44439:6645":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:9157:159":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:7118:2438":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:39248:12213":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"22:470:7303":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"4:922:9870":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13046:8583":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5117:11212":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:2988:37603":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:10155:7507":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:43277:29248":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"22:966:7314":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"22:449:7299":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"4:2671:7386":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11493:8448":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:39863:12224":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"11:2231:7664":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:7679:7395":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12433:7541":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:6228:11410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:886:7338":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:6068:217":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:9961:10373":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:41301:8088":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:41080:8074":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:44670:10400":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:22853:10344":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:30969:6718":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:7747:10039":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:44134:6641":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"4:8403:11475":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:11038:8106":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"0:24:582":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"17:12900:7547":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:15473:9147":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:42754:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:44734:10401":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:3358:2321":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:16032:8624":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:15418:9132":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13211:8620":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:31526:193":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3801:2324":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:11301:9940":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:5696:7606":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:10085:8047":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:14912:9026":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:42228:10007":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"18:698:7502":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:12074:1538":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:44576:10390":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:36628:9637":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14977:9036":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:7985:7704":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"4:6624:17888":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:45105:204":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:42559:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:46363:10433":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:14212:8817":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:7625:10158":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12399:8546":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:5794:9460":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"21:0:1826":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"4:9066:10129":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"4:5476:10017":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:22771:29273":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6141:37659":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:2124:9617":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:30931:2315":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:515:8268":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:1440:7693":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"11:396:7322":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:8055:9674":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:3170:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:46178:10426":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:10965:8105":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:4047:17796":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"11:1603:9885":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:15720:9230":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:2987:7691":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:42250:10311":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:22402:12171":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"5:7594:2276":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:12073:1505":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:42520:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"4:12090:847":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:6892:17897":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:44458:6657":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:11567:8453":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:12150:8524":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:2422:11657":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:44225:6649":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:15206:9077":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:45198:10420":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:48425:10475":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:5846:9466":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1528:10729":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7400:7646":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:12949:8306":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:46709:10444":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10092:24502":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:12318:8306":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:9781:24495":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:21976:17418":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"11:1676:7324":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:12297:6664":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:44467:6656":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:7604:11605":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:1446:153":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:2269:7701":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:774:7694":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:40892:7435":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:14284:8825":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:12443:8547":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:2665:9383":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:14503:8863":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12225:7963":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"23:0:2386":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"17:14449:8857":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:1496:8006":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"20:655:2359":{"crate_id":20,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"6:1632:10802":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12464:24624":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:1968:6811":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"16:5580:9394":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13187:8606":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:1804:6716":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:5861:7710":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:113:7914":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:3470:12226":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:3266:8010":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:11042:8422":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:15734:9232":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:21693:17413":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:14847:8986":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:536:7583":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:14752:8903":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:2424:17740":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:44009:8113":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:40729:6609":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4808:11055":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12201:8530":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:4870:11085":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:22319:17755":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:13485:8658":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:2271:7381":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:48245:10467":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"19:0:1132":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:13606:8691":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6943:11581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:11069:10122":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6965:10130":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13509:8660":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13774:8731":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:15992:9305":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:42216:10376":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"18:623:37675":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:45159:178":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:15214:9079":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:1098:7935":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12597:8560":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:4433:9413":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:21567:17412":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10997:8421":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:44161:6642":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:9464:8022":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:42715:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4434:10921":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:2157:7347":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"11:1007:9617":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:40949:8055":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"11:2423:2324":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"14:0:2261":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:5859:11253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:10008:6678":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:1287:9879":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13814:8739":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:41050:8066":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11324:8440":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:11107:8125":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:6546:9557":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:7491:9712":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:4:1115":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"11:2542:10631":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:48394:10472":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:14246:8820":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:3406:9402":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:7063:7380":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"20:0:1825":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"1:44279:6651":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:10211:150":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:9467:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:46755:10446":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:10927:8104":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:44379:6652":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"21:312:2410":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"2:0:474":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:40874:12257":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"11:1887:2324":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"22:1122:8240":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"1:10820:7693":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"11:856:9873":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10448:7386":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:42268:10313":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:34406:12207":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:44800:2286":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:2859:9392":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:5827:10024":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6062:9499":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:13187:29407":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:7772:7418":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:40758:6601":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6813:11505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6376:9526":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:62:17971":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"4:8561:17870":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:5038:9432":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:16223:9355":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"4:7465:35449":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"5:3211:36244":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:10254:12321":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:1388:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:3749:17793":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:7653:9722":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12557:7523":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:11773:8476":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:7971:9773":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:6858:9607":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:4783:11044":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:489:10650":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:7657:11616":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:9150:2285":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3433:12225":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:7351:9972":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:7942:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4535:10967":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:15655:9211":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12647:7971":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:9755:24477":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:6903:2329":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"18:507:8271":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:3545:9403":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"0:117:1809":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"16:6745:7640":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:15624:9204":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13015:7541":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:22482:17493":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:15273:9093":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:1151:8013":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10877:7928":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:5852:8062":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6579:24435":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:43567:7770":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:1809:655":{"crate_id":4,"path":["std","env"],"kind":"module"},"11:328:7995":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:4914:11102":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"20:527:7905":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"5:7341:7341":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:645:17691":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:46341:10432":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:22791:29254":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:256:8300":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:504:7347":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:15445:9139":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:48440:10476":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:8307:8026":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:670:7921":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:40785:6604":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11799:7951":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:4939:1102":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:41093:8076":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:7176:37660":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:3240:33056":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:2693:9994":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:6893:2328":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:10651:236":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:859:2324":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:15249:9085":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:46210:10427":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12175:8526":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:43289:9741":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:5004:11157":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:11171:11647":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:43031:6678":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:2995:23571":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:11088:7752":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:42471:7692":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"16:5316:7507":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:34233:12206":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:15678:9224":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10954:24512":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"20:620:2356":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"17:10982:24513":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12278:7965":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:11106:10033":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"4:11409:10037":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11606:8121":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:3172:12214":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:44769:10406":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:563:10695":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:1862:8019":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:3589:17774":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:6507:8094":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"16:5919:24432":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:15092:9051":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:7924:8022":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:2439:9373":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11142:7511":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:22001:7754":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:8867:196":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:38669:12212":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:723:151":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:22013:29746":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:4267:7692":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:3041:12215":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:7571:240":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:43250:11726":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:31157:29297":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:41059:8067":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:22699:7756":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:10749:33164":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:15281:9094":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:47791:10462":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:2268:9992":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"18:589:8275":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:2808:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:10658:10144":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:11354:8443":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:11079:6651":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:8312:17792":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"4:10881:32617":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:3082:9632":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:12082:794":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"5:4107:7693":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12213:7962":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11367:7523":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}