{"root":"0:0:1695","crate_version":"0.4.0","includes_private":false,"index":{"b:1:2549-0:161:1672":{"id":"b:1:2549-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2552:128","1:2553:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12159:1951":{"id":"1:12159:1951","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11784:2155","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11986:419","str::rmatches":"1:12162:37822"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43760:6485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12168:37824":{"id":"1:12168:37824","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11784:2155","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11986:419","str::match_indices":"1:12165:37823"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43724:6488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1685":{"id":"0:118:1685","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3321:1509":{"id":"1:3321:1509","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39426:9490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:38491":{"id":"5:5528:38491","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2146","`String`":"5:7451:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2146","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2557:128":{"id":"1:2557:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32105:9909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[703,0],"end":[711,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:86:948":{"id":"0:86:948","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12124:6397":{"id":"1:12124:6397","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41597:179","prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12111:29393":{"id":"1:12111:29393","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12110:29382"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43839:6490","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12188:34278":{"id":"1:12188:34278","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12194:37833":{"id":"1:12194:37833","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2251:2049":{"id":"1:2251:2049","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12104:37816":{"id":"1:12104:37816","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11992:1415","crate::ops::IndexMut":"1:2984:2142","str::slice_unchecked":"1:12103:37815"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2554-0:170:1673":{"id":"b:1:2554-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2557:128","1:2558:1495"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2549-0:155:1674":{"id":"b:1:2549-0:155:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2552:128","1:2553:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12197:37834":{"id":"1:12197:37834","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12206:34155":{"id":"1:12206:34155","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12171:37825":{"id":"1:12171:37825","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2543-0:155:1674":{"id":"b:1:2543-0:155:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2545:699"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5773-0:170:1673":{"id":"b:5:5773-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9220:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5771:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5775:1473"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2590:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:98:1975":{"id":"0:98:1975","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[557,4],"end":[560,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1674":{"id":"0:116-0:155:1674","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1674","glob":false}}},"1:12083:820":{"id":"1:12083:820","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11986:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12108:9658":{"id":"1:12108:9658","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11986:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43532:6475","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12113:37817":{"id":"1:12113:37817","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43820:6478","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12200:37835":{"id":"1:12200:37835","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11745:127","`FromStr`":"1:11744:2151"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11744:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11744:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[537,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1686","0:96:1940","0:97:1687","0:98:1975","0:99:1944","0:100:1682","0:102:1694"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5530:35384":{"id":"5:5530:35384","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12205:34154"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115-0:170:1673":{"id":"0:115-0:170:1673","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1673","glob":false}}},"1:12165:37823":{"id":"1:12165:37823","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11784:2155","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11986:419","str::rmatch_indices":"1:12168:37824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43706:6487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12121:1977":{"id":"1:12121:1977","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12109:1856":{"id":"1:12109:1856","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43542:6474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12202:1851":{"id":"1:12202:1851","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:1881":{"id":"0:44:1881","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2700:228-0:155:1674":{"id":"a:1:2700:228-0:155:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2558:1495":{"id":"1:2558:1495","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2740:2261-0:170:1673":{"id":"a:1:2740:2261-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:170:1673":{"id":"0:170:1673","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[602,0],"end":[615,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8321:2286-0:170:1673","a:1:8322:2285-0:170:1673","a:1:2683:220-0:170:1673","a:1:2740:2261-0:170:1673","a:1:2700:228-0:170:1673","b:1:2554-0:170:1673","b:1:2543-0:170:1673","b:1:2252-0:170:1673","b:1:2539-0:170:1673","b:1:2609-0:170:1673","b:1:2249-0:170:1673","b:1:2549-0:170:1673","b:1:3319-0:170:1673","b:5:5773-0:170:1673","0:183","0:111","0:110","0:106","0:108"]}}},"b:1:2539-0:161:1672":{"id":"b:1:2539-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2542:2014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119:1693":{"id":"0:119:1693","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2683:220-0:170:1673":{"id":"a:1:2683:220-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12088:37813":{"id":"1:12088:37813","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12086:37812"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12185:1999":{"id":"1:12185:1999","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5512:38487":{"id":"5:5512:38487","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2146","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2146","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12205:34154":{"id":"1:12205:34154","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1686":{"id":"0:95:1686","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[539,4],"end":[542,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516:38488":{"id":"5:5516:38488","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12209:11429":{"id":"1:12209:11429","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4539:11429"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43864:6435","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2549-0:170:1673":{"id":"b:1:2549-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2552:128","1:2553:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2740:2261-0:161:1672":{"id":"a:1:2740:2261-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[521,0],"end":[535,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2590:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:87:2004":{"id":"0:87:2004","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511":{"id":"5:5511","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5512:38487","5:5513:2006","5:5516:38488","5:5519:38489","5:5527:38490","5:5528:38491","5:5529:2212","5:5530:35384","5:5531:35385"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:100:1682":{"id":"0:100:1682","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[569,4],"end":[573,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:948","0:87:2004","0:88:1682","0:91:1694"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8321:2286-0:161:1672":{"id":"a:1:8321:2286-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8321:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3319-0:170:1673":{"id":"b:1:3319-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1509"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:117:1680":{"id":"0:117:1680","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12118:1976":{"id":"1:12118:1976","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:28143":{"id":"5:684:28143","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:38489":{"id":"5:5519:38489","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5513:2006":{"id":"5:5513:2006","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12099:33541":{"id":"1:12099:33541","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1694":{"id":"0:91:1694","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12097:33540":{"id":"1:12097:33540","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41597:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1695":{"id":"0:0:1695","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1670","0:114-0:161:1672","0:115-0:170:1673","0:116-0:155:1674","0:117:1680","0:118:1685","0:119:1693"],"is_stripped":false}}},"0:161:1672":{"id":"0:161:1672","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[512,0],"end":[518,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:8321:2286-0:161:1672","a:1:8322:2285-0:161:1672","a:1:2683:220-0:161:1672","a:1:2740:2261-0:161:1672","a:1:2700:228-0:161:1672","b:1:2554-0:161:1672","b:1:2543-0:161:1672","b:1:2252-0:161:1672","b:1:2539-0:161:1672","b:1:2249-0:161:1672","b:1:2549-0:161:1672","b:1:3319-0:161:1672","b:5:680-0:161:1672","0:167","0:92","0:169"]}}},"b:1:2543-0:161:1672":{"id":"b:1:2543-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2545:699"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2700:228-0:170:1673":{"id":"a:1:2700:228-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12094:314":{"id":"1:12094:314","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12003:1518"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2683:220-0:155:1674":{"id":"a:1:2683:220-0:155:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2249-0:155:1674":{"id":"b:1:2249-0:155:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2251:2049"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:22:1835":{"id":"0:22:1835","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8322:2285-0:155:1674":{"id":"a:1:8322:2285-0:155:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8322:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12191:37832":{"id":"1:12191:37832","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12156:37821":{"id":"1:12156:37821","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12207:37836":{"id":"1:12207:37836","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4538:37836"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43855:6436","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12179:37830":{"id":"1:12179:37830","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11809:6466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1687":{"id":"0:97:1687","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[551,4],"end":[554,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1682":{"id":"0:88:1682","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2543-0:170:1673":{"id":"b:1:2543-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2545:699"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2252-0:170:1673":{"id":"b:1:2252-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2254:27973"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12107:1837":{"id":"1:12107:1837","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11986:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43526:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12110:29382":{"id":"1:12110:29382","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12111:29393"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43830:6477","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2249-0:170:1673":{"id":"b:1:2249-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2251:2049"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12141:37818":{"id":"1:12141:37818","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11784:2155","str::split":"1:12132:1997","prim@char":"4:11986:419","`DoubleEndedIterator`":"1:7306:121","str::rsplit_terminator":"1:12144:37819"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43606:6482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5531:35385":{"id":"5:5531:35385","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12206:34155"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:673":{"id":"0:112:673","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[717,4],"end":[719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9190:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9179:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12095:1875":{"id":"1:12095:1875","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41597:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:423":{"id":"0:168:423","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2740:2261-0:155:1674":{"id":"a:1:2740:2261-0:155:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:24:541":{"id":"0:24:541","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6888:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12175:37827":{"id":"1:12175:37827","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:610":{"id":"0:46:610","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[226,0],"end":[231,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7:1670":{"id":"0:7:1670","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[316,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1835","0:24:541","0:44:1881","0:46:610"],"is_stripped":false}}},"0:99:1944":{"id":"0:99:1944","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[563,4],"end":[566,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2590:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:109:699":{"id":"0:109:699","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[704,4],"end":[710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12101:33542":{"id":"1:12101:33542","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12114:29388":{"id":"1:12114:29388","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43848:6489","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12150:34276":{"id":"1:12150:34276","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11986:419","str::splitn":"1:12147:34274","self::pattern":"1:11784:2155"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43678:6483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12204:34153":{"id":"1:12204:34153","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2545:699":{"id":"1:2545:699","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12177:37828":{"id":"1:12177:37828","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12178:37829":{"id":"1:12178:37829","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2542:2014":{"id":"1:2542:2014","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2516:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12182:37831":{"id":"1:12182:37831","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12085:37811":{"id":"1:12085:37811","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:155:1674":{"id":"b:1:3319-0:155:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1509"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2249-0:161:1672":{"id":"b:1:2249-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2251:2049"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2539-0:170:1673":{"id":"b:1:2539-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2542:2014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[714,0],"end":[714,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12093:315":{"id":"1:12093:315","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12094:314","`u8`":"4:12003:1518"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2611:11151":{"id":"1:2611:11151","crate_id":1,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"1:3385:9437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[522,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12103:37815":{"id":"1:12103:37815","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11992:1415","str::slice_mut_unchecked":"1:12104:37816","crate::ops::Index":"1:2980:2141"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2539-0:155:1674":{"id":"b:1:2539-0:155:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2542:2014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12147:34274":{"id":"1:12147:34274","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:2155","str::rsplitn":"1:12150:34276"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43660:6484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8322:2285-0:170:1673":{"id":"a:1:8322:2285-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8322:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8321:2286-0:170:1673":{"id":"a:1:8321:2286-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8321:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12132:1997":{"id":"1:12132:1997","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11784:2155","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11986:419","str::split_whitespace":"1:12110:29382","str::rsplit":"1:12138:34272"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43556:6481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:7163":{"id":"5:682:7163","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:114-0:161:1672":{"id":"0:114-0:161:1672","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1672","glob":false}}},"1:12173:37826":{"id":"1:12173:37826","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2553:1496":{"id":"1:2553:1496","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2252-0:155:1674":{"id":"b:1:2252-0:155:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2254:27973"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[648,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9215:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:673"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8322:2285-0:161:1672":{"id":"a:1:8322:2285-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8322:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12086:37812":{"id":"1:12086:37812","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12082":{"id":"1:12082","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12083:820","1:12084:1981","1:12085:37811","1:12086:37812","1:12088:37813","1:12091:35366","1:12092:37814","1:12093:315","1:12094:314","1:12095:1875","1:12097:33540","1:12099:33541","1:12101:33542","1:12103:37815","1:12104:37816","1:12105:34262","1:12106:34263","1:12107:1837","1:12108:9658","1:12109:1856","1:12110:29382","1:12111:29393","1:12112:7359","1:12113:37817","1:12114:29388","1:12115:30855","1:12118:1976","1:12121:1977","1:12124:6397","1:12128:1850","1:12132:1997","1:12135:29372","1:12138:34272","1:12141:37818","1:12144:37819","1:12147:34274","1:12150:34276","1:12153:37820","1:12156:37821","1:12159:1951","1:12162:37822","1:12165:37823","1:12168:37824","1:12171:37825","1:12173:37826","1:12175:37827","1:12177:37828","1:12178:37829","1:12179:37830","1:12182:37831","1:12185:1999","1:12188:34278","1:12191:37832","1:12194:37833","1:12197:37834","1:12200:37835","1:12202:1851","1:12203:34151","1:12204:34153","1:12205:34154","1:12206:34155","1:12207:37836","1:12209:11429","1:12210:37837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:1694":{"id":"0:102:1694","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5775:1473":{"id":"5:5775:1473","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2252-0:161:1672":{"id":"b:1:2252-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2254:27973"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12084:1981":{"id":"1:12084:1981","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:28142":{"id":"5:683:28142","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2554-0:161:1672":{"id":"b:1:2554-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2557:128","1:2558:1495"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12091:35366":{"id":"1:12091:35366","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11352:6470"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12112:7359":{"id":"1:12112:7359","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43810:6476","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2554-0:155:1674":{"id":"b:1:2554-0:155:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2557:128","1:2558:1495"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12144:37819":{"id":"1:12144:37819","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11784:2155","str::split":"1:12132:1997","prim@char":"4:11986:419","str::split_terminator":"1:12141:37818"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43624:6480","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12162:37822":{"id":"1:12162:37822","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11784:2155","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11986:419","str::matches":"1:12159:1951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43778:6486","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12106:34263":{"id":"1:12106:34263","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12105:34262"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2552:128":{"id":"1:2552:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:1:3319-0:161:1672":{"id":"b:1:3319-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1509"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12115:30855":{"id":"1:12115:30855","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12128:1850":{"id":"1:12128:1850","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41597:179","prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2254:27973":{"id":"1:2254:27973","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8321:2286-0:155:1674":{"id":"a:1:8321:2286-0:155:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8321:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:96:1940":{"id":"0:96:1940","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[545,4],"end":[548,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:38490":{"id":"5:5527:38490","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:161:1672":{"id":"b:5:680-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:7163","5:683:28142","5:684:28143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2609-0:170:1673":{"id":"b:1:2609-0:170:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3373:11382","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2611:11151"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"1:12138:34272":{"id":"1:12138:34272","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11784:2155","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11986:419","str::split":"1:12132:1997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43574:6479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[716,0],"end":[720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9220:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:673"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:155:1674":{"id":"0:155:1674","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:8321:2286-0:155:1674","a:1:8322:2285-0:155:1674","a:1:2683:220-0:155:1674","a:1:2740:2261-0:155:1674","a:1:2700:228-0:155:1674","b:1:2554-0:155:1674","b:1:2543-0:155:1674","b:1:2252-0:155:1674","b:1:2539-0:155:1674","b:1:2249-0:155:1674","b:1:2549-0:155:1674","b:1:3319-0:155:1674","0:159"]}}},"1:12105:34262":{"id":"1:12105:34262","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12106:34263"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12092:37814":{"id":"1:12092:37814","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:673":{"id":"0:107:673","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[649,4],"end":[700,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9190:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9179:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12135:29372":{"id":"1:12135:29372","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:2155"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11608:6491","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12203:34151":{"id":"1:12203:34151","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39634:28818","Self::is_ascii":"1:12202:1851"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39634:28818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:2212":{"id":"5:5529:2212","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12210:37837":{"id":"1:12210:37837","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4536:37837"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43873:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12153:37820":{"id":"1:12153:37820","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2700:228-0:161:1672":{"id":"a:1:2700:228-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2683:220-0:161:1672":{"id":"a:1:2683:220-0:161:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"4:8288:17010":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:531:7652":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:1430:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:4592:8683":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13882:8462":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:4606:10294":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"19:0:1040":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:2791:11389":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:22624:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:2572:6860":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11250:7921":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:40037:6435":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:14227:8570":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:6805:10831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:898:2132":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:9875:7797":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5074:10492":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"22:449:6778":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"5:3330:2180":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:43820:6478":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:5890:10581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:22360:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:11559:37444":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:6463:6881":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:11098:7906":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:5799:10542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:5972:7058":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:10038:7315":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:9149:9401":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:32105:9909":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:42027:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6571:23541":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:44303:6458":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:2962:11406":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:2850:11398":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2510:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:5967:10630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:494:9929":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13303:8244":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:44482:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:9850:23619":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:2740:2261":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"5:7440:6842":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13964:8485":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:6639:6809":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:6625:10747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:43839:6490":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:43334:7477":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:6800:2188":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:45612:9685":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:8771:23600":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:3168:11405":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9188:7002":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12982:8204":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:22657:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:12891:8188":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:43848:6489":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:2133:7323":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:1732:11377":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:40080:6441":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4456:10236":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12711:8143":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:7661:11478":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:40397:7431":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:10345:7494":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:9188:36475":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:30445:28829":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:4908:10410":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:6077:10670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"22:636:7281":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"1:40043:9619":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11144:7914":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:22049:28797":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:5408:9280":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"11:1501:22610":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9614:39159":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:12004:1515":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:5121:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:12424:8103":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:12174:8049":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4862:10384":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:4628:10758":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:48061:9744":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:39447:9491":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"21:259:39188":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"21:145:1906":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"6:6067:10667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:40337:7210":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:6063:6872":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:40132:6436":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:4868:8691":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:4965:8694":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7240:39146":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6332:8779":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:11266:7409":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:8949:23606":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:5793:7084":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4704:10313":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:6573:10719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:7854:7392":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13055:8220":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:1603:10055":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:9409:39161":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:2980:2141":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:6554:8797":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:728:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:1442:2183":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:8328:9370":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7592:23546":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:22426:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:7414:9235":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:1574:7377":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:113:7292":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:1273:9143":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8428:2144":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:5382:6982":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12815:8179":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:2212:9251":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:9913:7310":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:8659:23597":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:47931:9738":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:39419:9489":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7855:23548":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:21995:9468":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:41798:2183":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:4791:6866":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6303:7103":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:2186:39141":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13894:8463":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:11935:9428":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:40506:7448":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:8547:7164":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"16:4620:8684":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:10013:7803":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:40481:7217":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:44056:9661":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:582:16885":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:1820:2176":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:630:7164":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10430:7832":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:3998:9438":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:8294:9367":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:2164:11362":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:7255:2282":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:42614:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:4564:8682":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:7384:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:9130:9297":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:11056:23727":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:8252:9048":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:21960:9466":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13787:8438":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:3965:16986":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"20:231:2207":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"17:14026:8500":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:8537:7402":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"16:5689:7074":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:30949:7234":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13719:8418":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"9:357:22545":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:4113:7208":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:13574:8399":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:11044:6897":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:10453:6892":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:7022:6885":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:40406:7433":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:4041:16992":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:2838:11395":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14236:8572":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:4128:7397":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:9443:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:878:6817":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:14395:8612":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:4010:9439":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:7576:6887":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:9840:7308":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:10581:7849":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:7474:8663":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5829:10552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:2962:22678":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13604:8405":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:43283:7476":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"11:2060:9143":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2767:8891":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:12161:8048":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4664:10299":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5836:10554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:2795:11388":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"4:11566:9302":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:11992:1415":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:9777:23617":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:793:7376":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6688:10767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"11:1611:6803":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:7329:1878":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11371:7932":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4992:10456":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4770:10343":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:22099:9480":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:6289:8778":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:681:7668":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10293:7816":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:8210:8938":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:9744:39152":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13803:8442":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:43532:6475":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:43830:6477":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:9971:9635":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:1709:10122":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:22033:28803":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:12007:1514":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:11979:8003":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:1500:9995":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:2495:9252":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:9952:7774":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6160:8763":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:2885:6865":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:14216:8569":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12077:8020":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:11187:9296":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:434:7683":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"18:699:6977":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"20:369:2203":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"16:7445:8959":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:12380:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:6939:23543":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:7525:7118":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:6156:10696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8323:2284":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:8899:23604":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:7595:6889":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4810:10362":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7622:8975":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:4335:6517":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:41832:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"4:5374:9275":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:21557:7225":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:895:7164":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:9153:7001":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:5793:10539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:46259:9708":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:7679:7125":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:6044:10661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:5051:10486":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:1492:7168":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:2826:8900":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13757:8432":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:1845:7378":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:123:17216":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:12966:8200":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13016:8217":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4395:10207":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:4626:10296":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:10075:7389":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:8150:7193":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:20615:7234":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:2243:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:43500:2149":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:6648:10765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:6787:7458":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:3178:7378":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:10034:7164":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12118:8032":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:3186:36268":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:9234:6511":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:7227:11480":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:47905:9736":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:4587:10293":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"9:393:22531":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:10961:9391":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:1302:9147":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:41444:9448":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:9399:7300":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:2799:11390":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:6888:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:22078:10930":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:21460:16616":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"4:9071:7196":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"11:119:6797":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:3373:11382":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"4:5388:9279":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:11789:2144":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:40660:7454":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:4254:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:44145:9663":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"20:383:2204":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"4:8209:6474":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"6:4848:10376":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12354:8092":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:0:2123":{"crate_id":17,"path":["object"],"kind":"module"},"16:7313:39148":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:562:9971":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:46727:9717":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:7398:28802":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:9228:6509":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:3894:8674":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:42224:7237":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:7833:8990":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:3519:7337":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:39634:28818":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:42906:7243":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:41404:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:7505:8664":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:9806:23618":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:5068:10490":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:40490:7446":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"11:817:9137":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:4037:16991":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:1103:9146":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:10981:7341":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:4841:8690":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:7463:8967":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:690:7670":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11272:7346":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2737:6345":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"5:35:2179":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:8138:9040":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:6720:10777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:10051:7805":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12646:8137":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:4764:389":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:885:7167":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:4382:9272":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:40458:7443":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:6308:17088":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:4735:17002":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:14359:8608":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:671:7299":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:43091:9647":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:3777:8671":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:5015:10464":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:11338:9456":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:12618:8132":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:1928:658":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"4:8798:7406":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:14417:8618":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12579:8127":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:6592:17080":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:43343:7478":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:3186:7335":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:6900:7115":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:40231:9624":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:10126:6491":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:4618:16989":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:40368:7426":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:44295:6463":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:8332:10747":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:2318:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"16:4396:8677":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:44168:6469":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:21798:9464":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"11:1831:2180":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:10144:9404":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"4:5740:9286":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:8893:9392":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:5567:8658":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:8455:9643":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:5900:10588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:2634:9254":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:11007:7342":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:5368:17122":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:6744:10788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4304:10146":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:8872:23603":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6347:23540":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5008:10461":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"9:0:2116":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:43435:7486":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:41871:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4973:10448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13999:8493":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:3734:9267":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:2364:16934":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:12010:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6834:10847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4616:10295":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:5737:23537":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:3295:8667":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13167:8235":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:20859:28209":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:3647:2183":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:20675:33254":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:4027:16990":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:7099:9399":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:4987:6833":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:1590:10048":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10080:7806":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"20:336:2200":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"4:3512:16947":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:9442:39158":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5882:10576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:6834:11470":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:6713:8834":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:6396:8786":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:44575:9151":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:45590:9684":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13991:8492":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:46167:9704":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:6536:9293":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:11388:23609":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:14054:8508":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:5737:10499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:3238:7380":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:4:1023":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"16:7539:7119":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:40350:7211":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:11323:9301":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6872:7113":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:5233:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:10799:7884":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:9278:7390":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:1776:2180":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:7263:7175":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:22492:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:6470:7110":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6516:8796":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:11220:23728":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"15:306:7358":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"11:1822:2183":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:10361:7008":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:1973:7320":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:10511:7841":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:44155:9667":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:3156:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:7859:9314":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:4186:6516":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:41807:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:1818:7389":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:14403:8615":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:3222:9258":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:10798:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:7525:7685":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:6290:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:7684:6893":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:7061:8880":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:3346:16972":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:7494:8971":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:10818:37130":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:21216:16610":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:10633:7010":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10444:7833":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:21244:7223":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:8152:7129":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:10609:7851":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:7201:7381":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:46388:9711":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4291:10137":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:7384:9232":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:44546:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:12006:1517":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"16:2314:8632":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:9887:7799":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:30551:28834":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6667:8822":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4794:10356":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:3494:6447":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:41731:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:5617:6868":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:564:6974":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:2897:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12394:8100":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:5414:8701":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:8215:6481":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:4310:9271":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:9274:6474":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:9655:7305":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:7339:2147":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:40919:7466":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:4733:17000":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:43706:6487":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:11804:6467":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:7586:10893":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14177:8558":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:62:17161":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:7799:8986":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:22012:28809":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:9223:7003":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13749:8429":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:1138:7383":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:6539:17078":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"0:44:1881":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"1:43526:1873":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"5:3183:39104":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:2737:8650":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:2390:16944":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:12952:8198":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:6214:8768":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:5959:7347":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:9876:16949":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:9096:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:40203:9623":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:4328:10164":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:5531:7432":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:14197:8564":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:5925:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:3151:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:6675:9291":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"4:10558:6893":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:1733:10131":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:315:39171":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"4:3935:16984":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:11547:7199":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"6:5818:10544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:14037:8501":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"21:228:1907":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"1:47065:9722":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:352:9238":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4944:10434":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:1536:10011":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:5807:8716":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:41533:9638":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:2962:10901":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:311:7367":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:47523:9725":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:2759:8651":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:2966:38615":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:8916:7218":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:4996:8695":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"18:80:7286":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:1818:7164":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"11:2168:9906":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:41671:2183":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:615:6644":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:3395:7336":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:6171:10707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:6386:9291":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:10253:7327":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10223:7813":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:956:9140":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:261:6809":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:4506:8680":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:7765:9313":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"4:11769:6904":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:8804:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:9220:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:11600:23611":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:5398:6983":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:9028:7194":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:7367:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:40885:7462":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:261:7681":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:21972:28820":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:8816:9389":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:2519:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"5:1473:7167":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11118:7911":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:5843:8723":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:10512:9258":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:7547:2181":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:10515:9260":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:5977:17135":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:46213:9706":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:8906:17084":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:43352:7480":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:46491:9713":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:13914:8470":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:1503:7169":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"11:365:6801":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:42851:7238":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:45791:9692":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4818:10365":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:14044:8503":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:632:9242":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:7427:9237":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:22085:9479":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:44490:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:3113:9255":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"4:12001:750":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:11997:647":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"6:4556:10283":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11498:7935":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6018:23539":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:41461:11489":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5363:23535":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:515:7648":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:1631:10079":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12826:8181":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"20:257:1904":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"16:5626:8707":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:43864:6435":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:39365:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:32232:6350":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:39387:11401":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"4:11429:9266":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:46805:9718":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:2141:9222":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:9939:7311":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:44533:9677":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:2783:2137":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:1917:9436":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"12:0:2119":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:1118:38604":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:46310:9709":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:32145:7418":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:3744:8670":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:7866:7190":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:42586:10997":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:9368:9455":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"4:11987:1534":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:20847:16617":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:11290:23607":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"4:3503:36465":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5767:10524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:673:16888":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:4409:6351":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"22:0:2226":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"1:22393:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13905:8467":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:2921:2262":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:6441:2132":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5044:10483":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:10165:7473":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:9899:7005":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11767:7967":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4895:10400":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6796:10828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:5301:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"6:4469:10241":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"10:44:7137":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:9101:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:10568:7847":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10520:7842":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:41427:9446":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:4562:17029":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4568:10292":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13548:8393":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"14:40:7982":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:4380:6909":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:7738:7176":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:12346:8090":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:42360:6508":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:1755:9433":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6427:8788":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:6456:7109":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:30921:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6775:10814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13125:8228":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:4535:10274":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:5818:6870":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:9016:6982":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:20809:16949":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:6931:8857":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:42185:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:47663:9727":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:4900:8692":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:40198:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:3437:9363":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:640:16887":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:9190:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:2470:16949":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:32141:9313":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:5805:10543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:23170:7232":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:8711:23598":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:4737:17003":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:11293:9298":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4842:10375":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:644:7651":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:8961:9393":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:7552:10886":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13778:8437":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:2246:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:256:7680":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:574:7651":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:1523:7384":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:10877:7491":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"14:160:9126":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"21:266:2237":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"1:40909:6916":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6864:7070":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:6651:6371":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:21112:16611":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:582:7685":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11967:8000":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:1636:6603":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:47601:9726":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:44351:9672":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:4824:10366":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:1527:10006":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:6081:6833":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:8911:28313":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4496:10254":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:41790:7165":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:9475:7392":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:7223:6820":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11264:7924":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"20:97:1903":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"6:541:9960":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:40388:7428":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:11998:751":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:7698:28271":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:3058:7693":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:9179:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"4:6242:6868":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"4:12011:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:42867:7241":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:8105:9036":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:276:2146":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4887:10395":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:20811:16615":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:11027:6895":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:10931:9283":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"18:609:7662":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:10390:7829":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:6036:10658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:6896:6884":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:10203:7474":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:7038:8878":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:46137:9703":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:532:9954":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11992:8005":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:12552:7857":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:1843:7391":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:10330:7822":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:2690:10907":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:2663:8647":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"11:667:7168":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:42898:7242":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:5553:10668":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"5:1482:7376":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:8239:16982":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:20673:33256":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"11:1858:7380":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11791:7981":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:5720:8713":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1506:9998":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:11260:7186":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:5916:7052":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8748:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:10766:9418":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"0:118:1685":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"4:7727:16890":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7753:8978":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"20:8:2206":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"6:6705:10772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4518:10267":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:9926:7801":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:7914:9317":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13368:8295":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10654:7852":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:13732:8424":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:9485:39157":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"20:249:128":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"4:5624:6869":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:4380:10200":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:2035:7191":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:20994:11361":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"5:5956:6841":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:12402:33869":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"9:177:7153":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:30357:6605":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:45566:9683":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4764:10340":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:41546:9269":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:7277:2266":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:2693:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:1638:10083":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:11150:9297":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12566:8126":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:8922:17083":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:3224:9259":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:986:9141":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:0:2124":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:4441:8678":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:42353:6506":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:5028:8696":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:5553:7073":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11234:7919":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:40094:6443":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:40184:6433":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"11:695:7169":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:45945:9698":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"11:844:9140":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"18:707:6468":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:20980:16618":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:4236:7164":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:45636:9686":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:6932:6851":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"0:0:1695":{"crate_id":0,"path":["idna"],"kind":"module"},"16:7553:7120":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10994:7898":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:3264:9261":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:7745:16920":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:11744:2151":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:2832:8901":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:8310:9368":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:6540:7111":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12792:8178":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:2925:2263":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:10518:9262":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:13069:8221":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:653:17573":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:11428:7934":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:11406:6900":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:43962:9651":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:2752:2136":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:10094:7417":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"11:0:2118":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"4:7639:9240":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:6711:10774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:11210:7917":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"4:8405:9379":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:47847:9731":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:332:6799":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:11534:6497":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:7331:39147":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:5424:9281":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:7130:7410":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:39246:7419":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:43383:7483":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:43372:7482":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2516:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:2690:2260":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:2471:11190":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:44588:9681":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:43810:6476":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:8542:23585":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:39343:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:8192:7210":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:10945:7338":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:4076:7165":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"7:79:22523":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9706:7306":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"11:1852:7379":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7693:7126":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:1059:9141":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:46411:9712":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:5610:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:9518:7303":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:5773:7180":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4483:10249":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10323:7819":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:4428:6835":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:7712:16889":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13109:8226":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:11984:372":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"16:5639:8712":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:3217:39105":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:7463:10875":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:6560:2183":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:5044:9274":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14259:8585":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4374:10198":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:8740:23599":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:7476:2134":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:3233:11409":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:8043:9028":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:914:7376":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:4144:7209":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:20628:33143":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:2748:6349":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:22558:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:6155:6877":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:6771:2186":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:1543:6833":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:4166:6833":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:8176:23549":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4638:10297":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:21681:16612":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:40900:7465":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:47771:9729":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:8000:9319":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:45690:9688":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:9682:6860":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"20:93:2211":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"4:11123:37134":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:1782:7388":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"5:1426:7165":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:40530:7451":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:4263:9441":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:1257:8881":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:7284:2183":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:40064:28830":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:11074:7686":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"4:7663:9305":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"6:7540:10884":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:3580:8669":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:8234:7396":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:644:7165":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:7295:10874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10097:7318":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:41595:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:2265:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:43873:6434":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:3141:11402":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:12864:8186":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:42367:6509":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10351:7007":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:2695:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:40245:11444":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"17:13862:8455":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:9468:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:21066:16609":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"4:12003:1518":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"16:6915:39145":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4489:10251":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:1591:7380":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:7517:10878":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:11573:6496":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:4323:8676":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12017:8007":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:21987:9467":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:1102:7382":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:4957:17043":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:9166:9402":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"10:36:9912":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:40878:7461":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:12254:8054":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:1048:39140":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:498:6826":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"21:313:2251":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"16:8166:9041":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:5493:9283":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:13096:8225":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:41569:9449":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:43464:7489":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"10:0:2117":{"crate_id":10,"path":["adler"],"kind":"module"},"16:2352:8634":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"14:7:9126":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:21110:16949":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:8868:2183":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:11341:7413":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:4785:8688":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:2567:8643":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:8010:16975":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:47865:9732":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:5612:8703":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:7529:10880":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11241:23729":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:5987:10638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:47999:9742":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:25980:7233":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:39454:6517":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"17:12133:8038":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12053:8016":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:2900:8657":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:43574:6479":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:3934:6833":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:47809:9730":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:8228:7394":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:11753:7966":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:6957:6854":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:2842:11396":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10529:7843":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:45861:9695":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:39160:11410":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:2180:7363":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:526:9951":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10671:23702":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:4814:16999":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:10458:7834":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:3802:2180":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:5342:8700":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:5614:2186":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:12622:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:923:7169":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:2465:8639":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12851:8184":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:30126:11191":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:30351:2174":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:822:6815":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:12677:2177":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:2705:2172":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:12574:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"11:1517:9148":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:8993:33911":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:41680:2282":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"18:736:27560":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11199:7916":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6763:8847":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:2223:39095":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:43855:6436":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10266:7815":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:6187:7185":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:927:9134":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:11996:645":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"6:6618:10743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12878:8187":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12333:8088":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:22723:9484":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:2602:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:40215:28802":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6607:10738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:7739:7127":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6008:10650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:2513:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:9665:39160":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10417:7831":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:8021:9027":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:11470:9267":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"11:97:9905":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:6427:9292":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:41739:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:21920:7203":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:13179:8242":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:2594:9253":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:13620:8408":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:599:39165":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3162:11403":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:48022:9743":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"4:2215:6855":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:3262:9260":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:3929:16985":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12089:8021":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:2743:6347":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:9106:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:2541:8642":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:8841:23602":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:4463:419":{"crate_id":1,"path":["core","char"],"kind":"module"},"1:21465:16624":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"4:527:6857":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:2691:6343":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"0:119:1693":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"1:43660:6484":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:1586:7379":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:4258:9440":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:1921:6643":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:11642:7947":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:47894:9735":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:4724:8686":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:49867:16626":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4833:10369":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:5364:17121":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4984:10454":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:6868:10856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:7073:23544":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:40104:6444":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:4476:8679":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:1411:7164":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13043:8219":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:43977:9656":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:6850:8853":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:44008:9660":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:10410:7406":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:13155:7014":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:4536:8681":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:43454:7488":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"14:165:22615":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:1557:10026":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:46645:9716":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:8171:16948":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:30317:2173":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:4468:17011":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:22591:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4800:10359":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:551:9241":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:6350:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:4696:17011":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:1629:589":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:8276:9269":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:12605:8130":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11591:7014":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:5590:8660":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:6372:7108":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:3212:7377":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4754:10334":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:5320:6809":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4716:10320":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4315:10154":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:2378:16938":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:10249:7814":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:3810:8672":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:12905:8191":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:14350:8606":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:1673:10108":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:9296:7004":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:530:7056":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:4150:7398":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:4004:2132":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:4179:7400":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:9215:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:11189:7014":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:660:7294":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:10322:36100":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:5025:10469":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11155:7915":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:10906:7891":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:5301:8699":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"11:736:7167":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10110:7809":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:4436:6519":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:4955:10437":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:11999:748":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:43606:6482":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:7876:9315":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"16:2611:8645":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:8986:9394":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12106:8029":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11568:23610":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:4698:8685":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:46189:9705":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:9716:39155":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:3635:7697":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:4045:11430":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9083:6999":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:5651:8659":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:1717:10126":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"22:470:6782":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:44188:2145":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:42859:7240":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:410:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10499:7838":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:3519:16967":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"16:2293:22651":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10377:6995":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:9222:6506":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:45898:9697":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:8874:9284":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:6850:10853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13957:8484":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:6726:10778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:4365:6835":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13854:8454":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:10922:9201":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:9821:7794":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"21:302:2250":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"17:13981:8489":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:11131:7222":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"4:8860:7408":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:4389:10205":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:3078:2143":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:507:7651":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:1892:6642":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:2984:2142":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:7233:39101":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:2355:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:11986:419":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:3183:37420":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:43106:11005":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:21679:16949":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:6057:22650":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:12367:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"18:636:7667":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"22:966:6793":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"4:7922:9318":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:6598:10737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:14189:8561":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:11991:1385":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"16:2874:8656":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:7906:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:46043:9701":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:7407:7066":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:44330:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:11491:9268":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:5955:10625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:3979:16987":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12365:8095":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:2105:23660":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:5589:7215":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:285:7364":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13949:8481":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5058:10489":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:7575:10892":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:10844:7490":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:5383:6833":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:47271:9723":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:2443:8638":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:7043:6871":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:12429:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:43991:9659":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:554:9966":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:7658:9303":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:43422:7485":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:12002:746":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:11542:7937":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"15:288:7353":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:7505:10876":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:21:686":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:40449:7442":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10199:7812":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:7631:8976":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:44525:9675":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:3455:9264":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11467:7020":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:3303:9263":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:8302:7394":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:474:7374":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:14205:8565":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:872:7166":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4879:1010":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"21:198:2252":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"16:5067:8697":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:12585:6874":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:8890:673":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"6:1663:10102":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:3441:8668":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:7451:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"22:534:7280":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"5:7184:2178":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4678:10300":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:2846:11397":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:2131:6826":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:20656:33251":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:20643:33143":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:4368:10197":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:6790:2187":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:3993:16989":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:14341:8602":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:6487:6809":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12148:8044":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"15:327:7131":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:5439:9282":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:3987:16988":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:21235:16949":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:2821:11394":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:2152:590":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:40052:6442":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:10331:6483":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:40308:7424":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:5075:9274":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:1562:2183":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:1765:612":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:40438:7437":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:2170:7170":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:635:9244":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:11985:945":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:400:7682":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:6658:8821":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:11038:6896":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:42146:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:2689:8648":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:4389:6518":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:11815:7982":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:482:9923":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:10943:36095":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:2926:22677":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:44563:9680":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:7289:8918":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:11416:7017":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:8387:17047":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"14:187:22622":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:14282:8586":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:8830:9390":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4428:10225":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"4:1068:9143":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10957:7897":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:4049:16994":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:40520:7449":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:506:9934":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:7264:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10066:7316":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:3867:8673":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:43110:7471":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12435:8104":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:14015:8496":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:11243:6898":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:44275:6457":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:43678:6483":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:6015:10652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:45880:9696":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4938:10431":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:2928:2264":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:3583:7164":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:42669:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:4413:10219":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:2332:7044":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:1575:10036":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12377:8097":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"20:356:2202":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:9180:6447":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:8068:9031":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:1565:2132":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:1841:7390":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"18:766:27561":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11520:7686":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:6028:10656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12769:8169":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:1068:9145":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:9232:6510":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:44299:6464":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:1288:9141":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:8143:7192":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:9050:35957":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:7568:39149":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:4034:6809":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:4632:10762":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:11809:6466":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6589:10731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:40674:7455":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4917:10416":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:2507:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"22:43:27582":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"4:11952:7200":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13795:8440":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4341:10174":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:55:9018":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:3317:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"6:4723:10321":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:40420:7216":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1911:18564":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:1580:7378":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:7849:7552":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:9111:9296":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"18:719:7673":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:4695:10308":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:20903:16622":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:41663:7165":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"16:5673:23536":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:6724:8835":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:9990:7802":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13513:8392":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10883:7890":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:7531:2180":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:3737:9221":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12065:8019":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:9665:6921":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:10303:7734":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:5920:10604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:7511:10877":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:2762:8894":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:11798:6468":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6502:7349":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:42105:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:11669:7948":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:798:9134":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"22:1122:7623":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"1:2787:11391":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:47969:9740":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:3171:7164":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:568:9974":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:234:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:7012:8872":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:2523:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2773:11387":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:2219:16931":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"11:723:7166":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:3669:16983":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:7654:2135":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:10317:6484":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:9604:6986":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:207:6807":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:11573:9302":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4524:10270":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:14:2092":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:4650:10298":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:12008:796":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:39261:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:7193:2183":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:6640:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:41988:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4463:10239":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:2243:7173":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:45821:9693":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:1520:10003":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13492:8387":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:6484:8790":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:5964:6868":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10931:7893":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:2970:38617":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:2461:10904":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:42876:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10845:7888":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"14:215:9131":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:7465:2133":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:7761:9312":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10148:7319":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:2174:9907":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6175:7085":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:45742:9690":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:9036:9399":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:4929:10425":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:4032:8675":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:2590:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:4230:9270":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:11993:1499":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:4022:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:42642:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:2373:8635":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:12936:8197":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:41782:7164":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:13870:8456":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10969:7340":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7763:23547":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4729:10324":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11905:7027":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:2637:8646":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:6250:7100":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:12457:8111":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:20658:33253":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:2405:6536":{"crate_id":4,"path":["std","io"],"kind":"module"},"18:481:7649":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:20861:11361":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"4:2380:16939":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:10083:6481":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:9483:7221":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:7609:10899":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"21:291:39187":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"16:3220:8666":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"4:8202:7454":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:44363:11566":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:7351:16900":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11352:6470":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:2920:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"18:614:39163":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:40124:6435":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:2421:8637":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:41949:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:47413:9724":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:46091:9702":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:10743:10918":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:10832:7887":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:3189:36272":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:6977:8868":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:5990:7440":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"21:276:2249":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"4:2558:6862":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:21118:16613":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12502:8117":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"9:237:9643":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:590:7655":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"22:752:6788":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"1:44291:6465":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:9478:11517":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"11:749:2132":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4446:10233":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"15:394:22642":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:7255:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:14163:8552":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"9:507:9204":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"22:728:6778":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"0:24:541":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"17:11832:7985":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4781:10351":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:44283:6462":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:1595:10050":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:21242:16619":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:7515:8972":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:42346:6507":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:4490:17012":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:1672:6809":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:11322:11523":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:40871:7460":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4550:10281":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:5130:6841":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:624:39164":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:4811:802":{"crate_id":1,"path":["core","iter"],"kind":"module"},"16:2803:8653":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"20:348:2201":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"6:0:825":{"crate_id":6,"path":["libc"],"kind":"module"},"4:5556:17065":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:2349:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:2922:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:9048:6998":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:2816:11393":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:5704:7077":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:5940:8732":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:1746:10927":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:13830:8446":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:47725:9728":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13566:8398":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11454:7018":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:9866:7795":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10123:7005":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13937:8478":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"13:0:2114":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:1538:9149":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:11855:11553":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:4605:6429":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:477:6856":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:1495:9993":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:1558:7164":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:43362:7481":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:43444:7487":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:43624:6480":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:14315:8593":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12631:8134":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"11:2049:9141":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:40927:7468":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:21211:16949":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:39321:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12592:8129":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:47920:9737":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:2201:2147":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"23:0:2227":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"16:6323:7107":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:22690:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"8:0:2115":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"22:669:6968":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"17:10863:6986":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"9:450:22530":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:10280:7328":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:7546:10885":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:44134:11560":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3385:9437":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"17:11872:7021":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:2855:11399":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:7306:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"14:31:9126":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:9734:7307":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12526:8118":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13427:8347":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:4630:10760":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:6531:6796":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:7250:10862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:43940:11559":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:119:17215":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"3:0:2113":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"14:221:9133":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:8322:2285":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:8975:7181":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"4:4908:17037":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13591:8400":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:39301:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4787:10354":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:10058:7165":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:11608:6491":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:8924:23605":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10486:7837":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:7433:8958":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:44083:9460":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:6740:11483":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5877:10575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:2857:8655":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:1121:9147":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:755:7679":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:6671:10766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13029:8218":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11623:7944":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5979:10637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"11:403:7369":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:12005:1516":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:20947:16623":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:13683:8413":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:1696:10118":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:45658:9687":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:5882:8726":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10555:7329":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:9528:39153":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:950:9139":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:21132:7223":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4420:10223":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12479:8112":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4685:10301":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6692:23542":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:8321:2286":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12539:8121":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2779:8895":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:0:443":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:11696:7954":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"4:908:2180":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:11020:7899":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"0:7:1670":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"0:46:610":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"16:5100:8698":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:4753:8687":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:9480:6891":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:41510:28796":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:8997:23584":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:0:497":{"crate_id":1,"path":["core"],"kind":"module"},"1:40328:7425":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:6139:6874":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"14:202:2131":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11354:7754":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:7665:7123":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:42888:9643":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:10339:7825":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:10234:11136":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10313:7818":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:4196:6833":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:47885:9734":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:760:2180":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:21936:7227":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"11:805:16901":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:12010:1138":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:9886:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5775:7079":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:2825:8654":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11034:7343":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"18:582:7234":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6136:10682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:44287:6461":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:40359:7213":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:21569:33146":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:11308:9299":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:12009:1572":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:2164:7326":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:504:7684":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:2162:11361":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:13448:8357":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:9435:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:12840:8183":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"22:948:27585":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"17:13659:8409":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:1666:1096":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:11726:7958":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:46881:9720":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12004:8006":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:8005:7189":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"16:6386:8785":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:39199:11407":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"14:0:2120":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6197:8765":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6022:10653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:3731:9266":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:40378:7214":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:7657:11477":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:21050:16949":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:6317:7105":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:12318:8083":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:8605:23583":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13707:8415":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:11990:312":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:5841:2132":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:9561:7304":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:41655:7164":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:43542:6474":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:1982:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:11943:7996":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:9023:7184":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:14102:8545":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:41490:7236":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"15:0:2121":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:7523:10879":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:6820:10838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10597:7332":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:4785:28611":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"11:836:9139":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:40151:6438":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:8938:17085":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12186:8052":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:1075:7313":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:864:2183":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:10276:7475":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:11968:36098":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"20:327:7635":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"17:13456:8358":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13435:8350":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:1979:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:21033:16614":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:2589:8644":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:1464:7166":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:2931:2265":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:1690:10115":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:10788:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:21904:7226":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5775:10526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:5747:9289":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"0:117:1680":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"16:7362:23545":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:7638:16949":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"13:110:39142":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:5771:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:8125:9037":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:41722:6503":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:14301:8591":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:43724:6488":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:0:1407":{"crate_id":4,"path":["std"],"kind":"module"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"18:491:7650":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"0:22:1835":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"4:8844:9391":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:9318:6984":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:4543:10279":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"9:426:22532":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:6565:10714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:7564:10888":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11924:7034":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:3513:2132":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:6128:8760":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:43556:6481":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:40288:9625":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:40471:7444":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:46851:9719":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:7231:11479":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:10808:9265":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:2313:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:4693:17038":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:22459:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:39426:9490":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:30387:28780":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:10786:7334":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:43760:6485":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12727:8148":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:854:7165":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:10621:7333":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12303:8079":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11084:7902":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:7247:2183":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4748:10332":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:10359:7495":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:11989:1058":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:8980:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:5994:23538":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:3409:6833":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:40429:7436":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:3196:11408":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:11111:9390":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:40894:7463":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11888:7025":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:2781:8652":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:46569:9714":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:11168:10922":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"4:919:7168":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:4166:17009":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:44311:7222":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12035:8015":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:40116:6434":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:573:9976":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:10724:9413":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:5980:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6815:8849":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7484:8970":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:12454:9462":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10471:7835":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:4436:10227":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:579:9979":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"7:32:22516":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:2910:11400":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:547:9963":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13083:8224":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:9571:39156":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:2497:8640":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12757:8167":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:6130:10681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:41646:1874":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"13:226:7135":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:8115:9357":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"4:4899:17036":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:2033:8881":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:3181:29858":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:8553:7405":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:3301:9262":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:39277:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:7374:36847":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"21:0:1697":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"9:330:9913":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:22525:6448":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:43409:7424":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1702:10119":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:6423:7462":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"5:7292:2183":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:8852:7164":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6986:8871":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:3204:7379":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"22:879:27584":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"4:10778:7190":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:1545:10017":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:9230:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"16:6232:7069":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:841:7164":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:41910:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:9475:7302":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:7278:10865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1681:10109":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4872:10390":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:399:7368":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:2959:7163":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:10175:6986":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:45720:9689":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:13923:8471":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:39461:7623":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:8478:9382":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:11497:6495":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:4814:8689":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:3042:22679":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:9016:9398":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"4:8564:9388":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:4928:8693":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:10161:7811":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:46021:9700":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:45843:9694":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:2715:8649":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:727:6978":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"7:0:1562":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:43778:6486":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:47984:9741":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:3596:7165":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:652:7651":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11109:7910":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"20:223:7631":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"1:2694:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"11:657:2183":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:46235:9707":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"11:1826:2132":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"11:968:8881":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:1569:10034":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:2362:10929":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:2811:11392":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:42691:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:40278:6910":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:6606:6882":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:10748:10920":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:41713:2283":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:40165:6440":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:9118:7000":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4854:10379":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:47874:9733":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:7025:8875":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13771:8435":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:2210:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:1569:2180":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:10918:9312":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:5994:10639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:8222:6476":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"11:1838:7377":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:9344:39154":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"4:933:16901":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:46357:9710":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:2745:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"21:67:1905":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"6:1513:10001":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10812:7886":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:47946:9739":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:521:27562":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:9697:6926":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:2519:8641":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13971:8486":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:782:6812":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5849:10563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:42626:9005":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:13697:8414":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11329:23608":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6438:8789":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:13557:8397":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:6789:8848":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:44472:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:7599:10897":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:73:1516":{"crate_id":1,"path":["core","u32"],"kind":"module"},"4:3379:7465":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"16:7707:8977":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:6983:7192":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"22:1034:27586":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"11:2194:9910":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:4740:10328":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:4325:6908":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:8354:9273":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:4949:10436":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11852:7995":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:10753:9314":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:13847:8453":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:41581:9451":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:46615:9715":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:5471:6833":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:14007:8495":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:8283:10909":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:44279:6460":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"11:1027:22609":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:8086:9033":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:8743:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:1780:7387":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:39440:8938":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"5:4395:6833":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:44120:9662":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:43514:6473":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13673:8412":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:629:9218":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:6357:8782":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:22111:11224":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:45991:9699":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:7733:7177":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"4:4158:7399":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:9198:10914":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:10305:9282":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:9224:6507":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:1649:10091":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:3025:8665":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:358:9239":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:2049:9221":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:7889:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"18:96:7289":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:6811:17087":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:45760:9691":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:595:9989":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:12000:749":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:14150:8546":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:7930:7191":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:9226:6508":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6886:7114":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:1077:9147":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10403:7830":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13639:7035":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:2399:8636":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"18:538:6972":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"21:320:7627":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"1:11784:2155":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:0:2122":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:2757:11223":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:3836:9268":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:7558:10887":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:3671:6809":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:42651:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11955:7999":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:14329:8600":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:7213:2132":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:8495:17060":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:2683:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:7536:9425":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:9977:7305":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:944:9137":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:40158:6439":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"11:1012:9143":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4475:10244":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12691:8142":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:587:9984":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:500:9931":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:9032:6983":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:1011:6809":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11178:7344":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:40688:7456":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"9:52:7138":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4963:10442":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13140:8232":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12921:8193":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:9599:6918":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:46915:9721":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:6841:10850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:21851:9465":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5080:10495":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:42596:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:488:9926":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:1045:8881":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6239:39150":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:11045:7900":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:3722:7191":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:40139:6437":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:8794:23601":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:7272:10863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12659:8138":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11127:7935":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:2960:38616":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11557:6494":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:5863:10574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"22:386:6794":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"4:11335:7412":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"20:0:1696":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"17:10544:7846":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:2700:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"17:13332:8264":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:8159:9265":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:30373:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:7268:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:8632:23596":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:1184:7314":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:2804:8896":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:149:6794":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:12671:8139":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:9966:6986":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:14380:8611":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:42066:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:11957:16891":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:12412:8101":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:11099:9389":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"9:486:22529":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12994:8206":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7584:8974":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:45546:9682":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4506:10261":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4401:10210":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:10238:6479":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11164:7013":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:6980:11175":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:44307:6459":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}