{"root":"0:0:1649","crate_version":"0.3.0","includes_private":false,"index":{"b:2:2538-0:157:1626":{"id":"b:2:2538-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2249:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:164:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2595-0:166:1627":{"id":"b:2:2595-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3376:16346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2597:6492"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"5:5319:37962":{"id":"5:5319:37962","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:599":{"id":"0:39:599","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[225,0],"end":[230,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89:59":{"id":"0:89:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[520,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[646,0],"end":[699,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:0:1649":{"id":"0:0:1649","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[74,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3:1624","0:110-0:157:1626","0:111-0:166:1627","0:112-0:151:1628","0:113:1634","0:114:1639","0:115:1647"],"is_stripped":false}},"b:5:672-0:157:1626":{"id":"b:5:672-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2249:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:668:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:674:6375","5:675:6376","5:676:6377"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11933:37299":{"id":"2:11933:37299","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11552:6291","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::rmatch_indices":"2:11936:37300"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42801:6441","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8186:2236-0:151:1628":{"id":"a:2:8186:2236-0:151:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8186:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:96:1636":{"id":"0:96:1636","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[567,4],"end":[571,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2527-0:151:1628":{"id":"b:2:2527-0:151:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8185:2237-0:166:1627":{"id":"a:2:8185:2237-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8185:2237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11867:29132":{"id":"2:11867:29132","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:86:1648":{"id":"0:86:1648","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[500,4],"end":[506,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:1801":{"id":"2:11877:1801","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42637:6432","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11860:37290":{"id":"2:11860:37290","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11959:37308":{"id":"2:11959:37308","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2732:2201-0:157:1626":{"id":"a:2:2732:2201-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2233-0:157:1626":{"id":"b:2:2233-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2227:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2235:2091"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11856:37289":{"id":"2:11856:37289","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11854:37288"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115:1647":{"id":"0:115:1647","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11889:1923":{"id":"2:11889:1923","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11965:37310":{"id":"2:11965:37310","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:675:6376":{"id":"5:675:6376","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11854:37288":{"id":"2:11854:37288","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2527-0:166:1627":{"id":"b:2:2527-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2236-0:157:1626":{"id":"b:2:2236-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2230:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:27480"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11850":{"id":"2:11850","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11851:802","2:11852:1927","2:11853:37287","2:11854:37288","2:11856:37289","2:11859:28776","2:11860:37290","2:11861:312","2:11862:29134","2:11863:1820","2:11865:29131","2:11867:29132","2:11869:29133","2:11871:37291","2:11872:37292","2:11873:29157","2:11874:29158","2:11875:1782","2:11876:9192","2:11877:1801","2:11878:34254","2:11879:34267","2:11880:7219","2:11881:37293","2:11882:34266","2:11883:29174","2:11886:1922","2:11889:1923","2:11892:6354","2:11896:1795","2:11900:1943","2:11903:29166","2:11906:29168","2:11909:37294","2:11912:37295","2:11915:29170","2:11918:29172","2:11921:37296","2:11924:37297","2:11927:1898","2:11930:37298","2:11933:37299","2:11936:37300","2:11939:37301","2:11941:37302","2:11943:37303","2:11945:37304","2:11946:37305","2:11947:37306","2:11950:37307","2:11953:1945","2:11956:29175","2:11959:37308","2:11962:37309","2:11965:37310","2:11968:37311","2:11970:1796","2:11971:29078","2:11972:29079","2:11973:29080","2:11974:37312","2:11976:10951","2:11977:37313"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:17:533":{"id":"0:17:533","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[54,0],"end":[56,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6622:242","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2235:2091":{"id":"2:2235:2091","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2574:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2233-0:166:1627":{"id":"b:2:2233-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2227:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2235:2091"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2533-0:151:1628":{"id":"b:2:2533-0:151:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11879:34267":{"id":"2:11879:34267","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11878:34254"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42934:6427","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2533-0:166:1627":{"id":"b:2:2533-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11875:1782":{"id":"2:11875:1782","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11910:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42621:1818","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2529:685":{"id":"2:2529:685","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11883:29174":{"id":"2:11883:29174","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92:1887":{"id":"0:92:1887","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[543,4],"end":[546,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11974:37312":{"id":"2:11974:37312","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4514:37312"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42950:6403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:659":{"id":"0:103:659","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[647,4],"end":[698,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2533-0:157:1626":{"id":"b:2:2533-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11861:312":{"id":"2:11861:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11862:29134","`u8`":"1:11927:1476"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:37300":{"id":"2:11936:37300","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11552:6291","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::match_indices":"2:11933:37299"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42819:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5575-0:166:1627":{"id":"b:5:5575-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5573:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5577:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11946:37305":{"id":"2:11946:37305","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:166:1627":{"id":"0:166:1627","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[600,0],"end":[613,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8185:2237-0:166:1627","a:2:2732:2201-0:166:1627","a:2:2682:226-0:166:1627","a:2:2668:218-0:166:1627","a:2:8186:2236-0:166:1627","b:2:2236-0:166:1627","b:2:2595-0:166:1627","b:2:2538-0:166:1627","b:2:2233-0:166:1627","b:2:2527-0:166:1627","b:2:2523-0:166:1627","b:2:3327-0:166:1627","b:2:2533-0:166:1627","b:5:5575-0:166:1627","0:102","0:107","0:104","0:106","0:179"]}},"0:81:1950":{"id":"0:81:1950","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[448,4],"end":[474,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3327-0:166:1627":{"id":"b:2:3327-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1468"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3327-0:151:1628":{"id":"b:2:3327-0:151:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1468"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:164:416":{"id":"0:164:416","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11912:37295":{"id":"2:11912:37295","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11552:6291","str::split":"2:11900:1943","prim@char":"1:11910:412","str::split_terminator":"2:11909:37294"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42719:6449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:29168":{"id":"2:11906:29168","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11552:6291","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::split":"2:11900:1943"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42669:6445","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151:1628":{"id":"0:151:1628","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[433,0],"end":[437,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:79","a:2:8185:2237-0:151:1628","a:2:2732:2201-0:151:1628","a:2:2682:226-0:151:1628","a:2:2668:218-0:151:1628","a:2:8186:2236-0:151:1628","b:2:2236-0:151:1628","b:2:2538-0:151:1628","b:2:2233-0:151:1628","b:2:2527-0:151:1628","b:2:2523-0:151:1628","b:2:3327-0:151:1628","b:2:2533-0:151:1628","0:155"]}},"2:11876:9192":{"id":"2:11876:9192","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11910:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42627:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[519,0],"end":[533,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2574:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5334:30360":{"id":"5:5334:30360","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11973:29080"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1780":{"id":"0:15:1780","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[45,0],"end":[47,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11950:37307":{"id":"2:11950:37307","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8186:2236-0:166:1627":{"id":"a:2:8186:2236-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8186:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:94:1921":{"id":"0:94:1921","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[555,4],"end":[558,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11853:37287":{"id":"2:11853:37287","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:1943":{"id":"2:11900:1943","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11552:6291","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::split_whitespace":"2:11878:34254","str::rsplit":"2:11906:29168"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42651:6446","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:29170":{"id":"2:11915:29170","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:6291","str::rsplitn":"2:11918:29172"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42755:6448","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[535,0],"end":[580,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:91:1640","0:92:1887","0:93:1641","0:94:1921","0:95:1891","0:96:1636","0:98:1648"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2682:226-0:157:1626":{"id":"a:2:2682:226-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11971:29078":{"id":"2:11971:29078","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11956:29175":{"id":"2:11956:29175","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:1927":{"id":"2:11852:1927","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:93:1641":{"id":"0:93:1641","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[549,4],"end":[552,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:166:1627":{"id":"b:2:2523-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:1960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2233-0:151:1628":{"id":"b:2:2233-0:151:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2227:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2235:2091"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11869:29133":{"id":"2:11869:29133","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:157:1626":{"id":"0:157:1626","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[510,0],"end":[516,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:90","a:2:8185:2237-0:157:1626","a:2:2732:2201-0:157:1626","a:2:2682:226-0:157:1626","a:2:2668:218-0:157:1626","a:2:8186:2236-0:157:1626","b:2:2236-0:157:1626","b:2:2538-0:157:1626","b:2:2233-0:157:1626","b:2:2527-0:157:1626","b:2:2523-0:157:1626","b:2:3327-0:157:1626","b:2:2533-0:157:1626","b:5:672-0:157:1626","0:163","0:165","0:88"]}},"2:11924:37297":{"id":"2:11924:37297","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:1898":{"id":"2:11927:1898","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11552:6291","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::matches":"2:11927:1898"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42855:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:29172":{"id":"2:11918:29172","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11910:412","str::splitn":"2:11915:29170","self::pattern":"2:11552:6291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42773:6447","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11953:1945":{"id":"2:11953:1945","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:37294":{"id":"2:11909:37294","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11552:6291","str::split":"2:11900:1943","prim@char":"1:11910:412","`DoubleEndedIterator`":"2:7174:120","str::rsplit_terminator":"2:11912:37295"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42701:6450","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11962:37309":{"id":"2:11962:37309","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:37293":{"id":"2:11881:37293","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42915:6440","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2574:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:180:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5314":{"id":"5:5314","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5315:37961","5:5316:1952","5:5319:37962","5:5322:37963","5:5330:37964","5:5331:37965","5:5332:2152","5:5333:30359","5:5334:30360"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2542:1454":{"id":"2:2542:1454","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2732:2201-0:166:1627":{"id":"a:2:2732:2201-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2537:1455":{"id":"2:2537:1455","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:218-0:151:1628":{"id":"a:2:2668:218-0:151:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2526:1960":{"id":"2:2526:1960","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2500:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:114:1639":{"id":"0:114:1639","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[57,0],"end":[62,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:6354":{"id":"2:11892:6354","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40661:177","prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:29166":{"id":"2:11903:29166","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11376:6428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37:1826":{"id":"0:37:1826","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[216,0],"end":[219,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:113:1634":{"id":"0:113:1634","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[51,0],"end":[53,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8185:2237-0:157:1626":{"id":"a:2:8185:2237-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8185:2237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2238:27480":{"id":"2:2238:27480","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:166:1627":{"id":"b:2:2538-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5577:1433":{"id":"5:5577:1433","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:37292":{"id":"2:11872:37292","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11916:1379","crate::ops::IndexMut":"2:2993:10984","str::slice_unchecked":"2:11871:37291"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11865:29131":{"id":"2:11865:29131","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40661:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2597:6492":{"id":"2:2597:6492","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3388:9084","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2236-0:151:1628":{"id":"b:2:2236-0:151:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2230:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:27480"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11886:1922":{"id":"2:11886:1922","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:218-0:166:1627":{"id":"a:2:2668:218-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11972:29079":{"id":"2:11972:29079","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:218-0:157:1626":{"id":"a:2:2668:218-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2682:226-0:166:1627":{"id":"a:2:2682:226-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11878:34254":{"id":"2:11878:34254","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11879:34267"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42925:6429","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:7219":{"id":"2:11880:7219","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42905:6439","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:151:1628":{"id":"b:2:2538-0:151:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:108:659":{"id":"0:108:659","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[714,4],"end":[716,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:37296":{"id":"2:11921:37296","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180:59":{"id":"0:180:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11862:29134":{"id":"2:11862:29134","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11927:1476"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2536:127":{"id":"2:2536:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"5:5330:37964":{"id":"5:5330:37964","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3327-0:157:1626":{"id":"b:2:3327-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1468"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2541:127":{"id":"2:2541:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31759:9632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:156:59":{"id":"0:156:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11968:37311":{"id":"2:11968:37311","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11514:126","`FromStr`":"2:11513:6437"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11513:6437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11513:6437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5316:1952":{"id":"5:5316:1952","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11859:28776":{"id":"2:11859:28776","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11120:6430"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,16],"end":[509,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2680:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11896:1795":{"id":"2:11896:1795","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40661:177","prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82:1636":{"id":"0:82:1636","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[478,4],"end":[496,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2682:226-0:151:1628":{"id":"a:2:2682:226-0:151:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11874:29158":{"id":"2:11874:29158","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11873:29157"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:34266":{"id":"2:11882:34266","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42943:6426","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:37304":{"id":"2:11945:37304","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[711,0],"end":[711,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","cause","description"],"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5331:37965":{"id":"5:5331:37965","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:2207","`String`":"5:7179:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:6559","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2527-0:157:1626":{"id":"b:2:2527-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3:1624":{"id":"0:3:1624","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[315,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:15:1780","0:17:533","0:37:1826","0:39:599"],"is_stripped":false}},"a:2:8185:2237-0:151:1628":{"id":"a:2:8185:2237-0:151:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8185:2237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:111-0:166:1627":{"id":"0:111-0:166:1627","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,31],"end":[42,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Errors","name":"Errors","id":"0:166:1627","glob":false}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[713,0],"end":[717,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5315:37961":{"id":"5:5315:37961","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:6559","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2207","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:6559","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:30359":{"id":"5:5333:30359","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11972:29079"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:674:6375":{"id":"5:674:6375","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:2523-0:151:1628":{"id":"b:2:2523-0:151:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:1960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:105:685":{"id":"0:105:685","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[702,4],"end":[708,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110-0:157:1626":{"id":"0:110-0:157:1626","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,23],"end":[42,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Config","name":"Config","id":"0:157:1626","glob":false}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[701,0],"end":[709,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:105:685"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2732:2201-0:151:1628":{"id":"a:2:2732:2201-0:151:1628","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:2201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:91:1640":{"id":"0:91:1640","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[537,4],"end":[540,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1648":{"id":"0:98:1648","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[574,4],"end":[579,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:157:1626":{"id":"b:2:2523-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:1960"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:112-0:151:1628":{"id":"0:112-0:151:1628","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,39],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Idna","name":"Idna","id":"0:151:1628","glob":false}},"2:11851:802":{"id":"2:11851:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11910:412"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:37302":{"id":"2:11941:37302","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11947:37306":{"id":"2:11947:37306","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:6291"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11577:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:1796":{"id":"2:11970:1796","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11930:37298":{"id":"2:11930:37298","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11552:6291","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::matches":"2:11927:1898"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42873:6444","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5322:37963":{"id":"5:5322:37963","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2236-0:166:1627":{"id":"b:2:2236-0:166:1627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2230:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:27480"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11939:37301":{"id":"2:11939:37301","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11871:37291":{"id":"2:11871:37291","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11916:1379","str::slice_mut_unchecked":"2:11872:37292","crate::ops::Index":"2:2989:10983"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11863:1820":{"id":"2:11863:1820","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40661:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5332:2152":{"id":"5:5332:2152","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:29157":{"id":"2:11873:29157","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11874:29158"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:80:929":{"id":"0:80:929","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[440,4],"end":[446,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["config",{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[439,0],"end":[507,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:929","0:81:1950","0:82:1636","0:86:1648"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:676:6377":{"id":"5:676:6377","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:37303":{"id":"2:11943:37303","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:29080":{"id":"2:11973:29080","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95:1891":{"id":"0:95:1891","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[561,4],"end":[564,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11977:37313":{"id":"2:11977:37313","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4512:37313"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42968:6399","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:10951":{"id":"2:11976:10951","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4515:10951"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42959:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3329:1468":{"id":"2:3329:1468","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:38987:9147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8186:2236-0:157:1626":{"id":"a:2:8186:2236-0:157:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8186:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"paths":{"17:13211:8268":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:4071:7334":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:20683:11216":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:7546:6785":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"14:160:8965":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:7086:10968":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:5998:23171":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:4101:7336":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11770:7914":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:41698:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:1589:9759":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5752:10273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:48569:11251":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:7136:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:11090:7779":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"18:599:38481":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4697:10065":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:1074:8981":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:12134:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:5450:7261":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:10187:7322":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:46687:9274":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:8241:11111":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:38822:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:4872:8530":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:3063:7549":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"22:728:6635":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"16:2786:8491":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4952:10189":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:39942:7290":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:11355:6894":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:2830:16534":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:44840:9236":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:5834:6699":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:31799:7245":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:3899:8513":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:7489:9467":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:8858:6872":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"22:0:2166":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"6:5741:10265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:3437:2131":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:5643:8551":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:38838:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:11923:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"9:52:7006":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:1083:8985":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10660:6883":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:42719:6449":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:7411:6935":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"14:7:8965":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5000:10216":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:3815:8511":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:8974:9444":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:9946:7675":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:30603:7075":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:3058:9303":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:8063:9404":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:9453:23252":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:2931:22312":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:2385:2006":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:7859:23181":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:7807:9361":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"0:113:1634":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"6:1571:9749":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"15:198:7218":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:1824:7326":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:4573:10481":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:21448:9115":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:7478:8502":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:11012:9435":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:10045:7302":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:22808:7073":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:10118:7303":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:4253:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12536:8056":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12592:8063":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:7149:9073":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:1550:9734":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:8155:7283":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:44423:9222":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:10637:9457":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:2574:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11859:9470":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:2757:6305":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:5305:8538":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11924:7946":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:40574:35352":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:8757:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:7958:11071":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:3907:6694":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:567:9697":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13376:8309":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:1541:9729":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:644:7507":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5630:8546":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:3504:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8933:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:38926:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:561:9694":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:7824:9362":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:3398:9311":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:2804:16529":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:29971:6515":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:20414:35853":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6535:6653":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:1927:2129":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:3980:11091":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:5910:10359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:11225:9347":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:44445:9223":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:20564:11222":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:9683:7659":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:2904:37165":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:11063:9344":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12563:8060":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:9853:7188":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4361:9949":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:2900:37164":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:7000:7041":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13181:8257":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4274:9898":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:5123:6672":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:660:7154":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13135:8251":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:4721:10958":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:13625:8391":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:46608:9269":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:6628:10493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:11914:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:44546:9227":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:10951:6791":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:538:6842":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:48965:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12607:8067":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:8788:6870":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:2177:7040":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:1514:9718":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6764:10571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:1580:7235":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:7193:9076":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4687:10059":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:1451:7242":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:6854:8693":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:2776:8731":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10015:7682":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11422:7834":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6390:8625":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13015:8228":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:10026:7189":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7757:8819":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5823:10309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10589:7747":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:30205:35378":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:10844:9330":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:13240:8276":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:985:8721":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:9895:7671":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:8168:6446":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4334:9934":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:9228:38472":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:5367:22284":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:42429:7305":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11800:7923":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:6930:6559":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:42934:6427":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:11544:7855":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"11:1044:22250":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:3455:11044":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:4636:11139":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:4969:8533":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6743:10559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:9075:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:11154:6793":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"22:669:6838":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"2:40659:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:11502:7850":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:21637:9118":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:9148:38478":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13499:8340":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:2678:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:8263:9415":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:11876:7112":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:4268:6701":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:3127:31425":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:6634:10495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"11:1852:7235":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:4433:11113":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6819:8689":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:10656:10720":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:7509:8503":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:11258:7349":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:2792:11209":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12358:8023":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:39551:7255":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:7797:7408":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:40508:9095":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:8247:9414":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6791:10577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:20833:11101":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:42517:7313":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:6970:37224":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4841:10135":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:13821:8447":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11520:7851":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"21:291:38506":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"2:2800:16530":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9748:6856":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:6336:8618":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"9:388:22173":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:4596:8522":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:7814:7103":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:10316:7724":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:48939:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1604:9771":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:42637:6432":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:1988:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:2491:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:7259:2233":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4549:10020":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10598:7771":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:41975:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13324:8294":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:42627:6433":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11220:7801":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:2502:8479":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:39268:6410":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:2694:8487":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11909:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:6351:23173":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:9577:7652":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:39673:7275":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:2841:8741":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10761:23240":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:41096:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:2771:8734":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:553:9689":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"11:1003:8980":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:8979:38470":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"21:0:1651":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"5:7119:9070":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:20730:7064":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:2940:2205":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:10080:6445":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4261:9888":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:80:7146":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12331:8021":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:44249:9215":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:40610:9316":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4369:9952":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:7693:11004":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:2742:8489":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:3177:16364":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:39973:6737":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:38721:16363":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10465:7734":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"0:17:533":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"5:5417:6709":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"11:659:6322":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:43374:10707":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:2157:37217":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:5171:6425":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:20814:11215":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:2075:9059":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:2209:9299":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:9201:9102":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"22:752:6645":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"2:40854:7032":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:50279:9284":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:4818:8528":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:7027:6322":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:73:1474":{"crate_id":2,"path":["core","u32"],"kind":"module"},"5:6293:6322":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:0:2000":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:3585:8508":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:9382:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:2893:6375":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:1046:37191":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10823:7609":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:43628:9211":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"22:43:27108":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"1:6327:9338":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:119:16928":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"9:352:22187":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12799:8099":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:45194:9246":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:1866:7237":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42438:7306":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10080:7687":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10679:9462":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:588:10950":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:43057:9185":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5800:10296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:9065:6473":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:4387:6307":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:920:7234":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7711:8818":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11234:7802":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:2470:8478":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:6691:6724":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:49004:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:12355:6753":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:4139:7031":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4649:10045":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:2342:10629":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:6992:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:8598:23239":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:1978:7186":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:11917:1458":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:4988:10211":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:8124:11045":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:4505:11130":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2934:2203":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:9546:6748":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:12835:8130":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6671:8662":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:5500:11156":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"18:582:7075":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8914:9439":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:9933:6864":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:8420:23233":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:1583:9757":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:1518:22251":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6361:8622":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:10661:10722":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:43390:10711":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4820:10120":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:11710:6801":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:2867:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"12:0:1995":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13385:8310":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:7434:10598":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:43263:6451":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:5032:8535":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:44724:9233":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:7686:7091":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:7743:6995":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7449:8800":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:30027:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:5920:6921":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"18:690:7526":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6460:6977":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:6876:6981":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4805:10115":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:8408:9177":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"9:502:9041":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:5745:6707":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:9008:27797":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:3462:11063":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:638:9290":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4743:10087":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:11922:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:9275:38473":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:6106:6713":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"11:274:7224":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"21:276:2189":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"5:4664:659":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:7095:16519":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:44269:9216":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:5402:6853":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"21:313:2191":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"17:10705:7755":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:7074:9069":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11861:7935":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:681:7524":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:38862:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:1401:7034":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4583:10023":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:43458:16651":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:44892:9238":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12388:8028":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:2080:8981":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:6477:9340":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:208:6670":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:7487:10609":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12403:8032":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"0:115:1647":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"16:8025:8868":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:505:6688":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:41016:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:5693:6943":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:4795:10109":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6442:8629":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:41997:7083":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:46512:9263":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:6023:11252":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:4850:10141":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:13399:8317":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11395:9314":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:1747:9854":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13041:8234":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:2642:8485":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:5352:9327":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4379:9958":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:39288:6400":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:12902:8185":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10257:7194":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:9080:9343":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"13:0:1989":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:13763:8430":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:7077:23177":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:21662:35366":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:1704:6660":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:5890:10351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:3656:9058":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:45272:9247":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:1787:7180":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:22208:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:39991:7296":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:31759:9632":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:5573:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:3225:8505":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:43398:10713":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:1649:1074":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:5959:10379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:4568:8521":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:3247:9310":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:320:7483":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"2:4241:9088":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11037:23243":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:9545:7629":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:3325:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5938:10373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:11921:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:2680:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:10039:7683":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:11177:7345":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"11:738:7034":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:4742:35565":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:6832:6795":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"6:6719:10549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11556:7856":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:5071:8536":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:6404:6778":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:929:7036":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:7132:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9188:38475":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:1652:9806":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6935:8697":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:44648:9231":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:1442:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4416:9974":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:6521:10458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:5368:9328":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6376:6976":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:2230:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:39021:6481":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:42205:10705":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:3087:10985":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13219:8271":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:2339:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12072:7965":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:1520:9721":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"20:0:1650":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"2:30005:6516":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:4678:11103":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:45430:9250":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:8195:23218":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:6053:10402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6571:10486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:43151:9195":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:9514:6742":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11935:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:39603:7054":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:40871:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10555:7738":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:7386:10596":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:6851:7056":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:531:7508":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:46577:9266":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:7519:8813":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:39327:6403":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:2687:6298":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:6254:6968":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:5616:8542":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"11:861:8979":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:7709:9360":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:11933:1529":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:6649:10499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:4676:11100":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:1687:9831":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:3206:9307":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:43567:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"18:507:7507":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:8517:9434":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:300:7227":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:4468:9999":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10967:7771":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:8683:6867":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:1710:9841":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:950:8976":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:39542:7051":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:3117:38347":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:39654:7273":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:1836:6322":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13612:8385":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:11925:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:1592:7237":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:45348:9249":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:9986:7678":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4637:10038":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:9557:6856":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:473:7232":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:5245:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:7039:7346":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:6541:10464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:3171:16365":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:2937:2204":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:2820:16532":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4322:9929":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13516:8347":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:43402:10714":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:262:6672":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:1786:7324":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:39964:7293":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:7469:10606":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10857:23242":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:6327:6975":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:6544:6979":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:43370:10706":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:10626:7751":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"20:369:2143":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"11:1845:6660":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:11459:7840":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:2862:8494":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:62:16874":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:1677:9825":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"14:221:8972":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10283:7722":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:2864:16539":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:44916:9239":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:3674:9313":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:1872:7238":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:4703:10068":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:12344:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:9063:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:4851:11138":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:3640:6322":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1339:7031":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2906:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6488:8630":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:7244:38469":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:12386:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"11:0:1994":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:9512:7170":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:3047:22314":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:6080:6753":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:9839:7665":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:11339:6890":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4224:9861":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7529:6986":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11515:9350":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:6372:6672":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:578:9702":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13744:8425":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:39612:7265":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:2104:7037":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:1832:7031":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12194:7983":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4429:9979":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:3190:36064":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:2679:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13803:8441":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:8162:6432":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:10569:7742":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:8358:9426":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:8928:7094":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:5716:10260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:3245:9309":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:2500:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:40525:11080":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:2302:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"10:44:7005":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:11566:6422":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:9055:6469":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:7557:6988":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:8981:7097":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:6890:6982":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13488:8339":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:10052:7685":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:43240:9197":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11434:7835":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:3030:8504":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:2333:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:38904:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:6981:8708":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:11915:1349":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:9322:38476":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:7335:38466":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:3208:9308":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:43072:9190":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12318:8019":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:1849:7328":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:4093:7335":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:1600:6672":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:21699:35365":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6512:10452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11721:7889":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:7478:7541":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:3138:7237":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:4751:10090":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:13879:8457":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:39935:7289":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11319:7830":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:7162:9075":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:11210:9346":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13419:8323":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:5571:8497":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:4253:9318":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:39381:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:4:1001":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:22043:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:7837:8831":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:41790:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:3151:38348":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10743:7206":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:7588:8815":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:7522:6413":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:9138:7163":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8431:9429":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8175:6439":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:2497:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:7174:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:41256:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13721:8424":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:43178:9111":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:4702:8524":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:2594:8483":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:5000:8534":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"18:652:7507":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:4900:2225":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:851:6680":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10701:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"21:228:1854":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"20:327:7491":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"5:6534:6721":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:8769:9435":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:4346:9943":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:2989:10983":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:44583:9229":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:22340:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:12576:8061":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"14:187:22263":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:20367:7075":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:387:7228":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:242:7536":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:42559:7317":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:1919:23279":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:2065:6688":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8797:9437":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:11927:1476":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:11932:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:4932:8532":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:4445:8517":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:39028:7479":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4733:10084":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:2249:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:39334:6404":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:9061:6472":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:44962:9241":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:4768:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:10429:9309":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:962:8979":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:7446:10600":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:39632:7271":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:2298:22286":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:21728:10630":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:42549:7316":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:4164:6480":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:4367:6482":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:13411:8320":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:6524:6719":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:21610:9117":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:20395:35787":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:13667:8404":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"10:0:1993":{"crate_id":10,"path":["adler"],"kind":"module"},"6:6000:10391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11136:7783":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:7837:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:8187:2235":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:8521:23236":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12158:7977":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:3130:33844":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:11331:6797":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:21097:11242":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:11522:9350":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:21645:9119":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4945:10186":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:7145:2206":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4422:9976":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:6594:10487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:9566:7165":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13033:8233":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4994:10213":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:1370:6322":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:7173:10583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:46649:9272":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:9312:7166":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:39014:9148":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:11171:7099":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:7102:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12059:7964":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5963:7207":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:3878:11084":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:7525:10972":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12236:8004":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:3172:7238":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:22307:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11258:7816":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:8185:2237":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:562:7541":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:6667:10509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:12147:16381":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:39664:7055":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:771:6675":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:20627:11224":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:7543:6987":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6575:23174":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:3376:16346":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:1509:9716":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:2503:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:2933:7195":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:10874:9437":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"14:40:7817":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:6174:6694":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:10835:9038":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:558:9289":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:914:6660":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"18:96:7149":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:2455:16376":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:2616:8484":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"20:8:2146":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"20:356:2142":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"1:11934:1111":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:6505:6709":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12033:7961":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9443:7168":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:9038:38471":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:5886:8565":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:8753:6869":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"22:449:6635":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"1:4173:9317":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:1695:9832":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:21357:11217":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12138:7974":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:3644:7104":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:564:6844":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11299:7820":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:755:7535":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4396:9964":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:6655:7287":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:40597:9172":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:7572:38465":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:8548:23237":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"11:697:7036":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:3908:11086":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:487:7540":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:621:2130":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:1628:6666":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:22241:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12046:7962":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:2344:11031":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3150:16540":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:39703:7278":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:12372:8026":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:42925:6429":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:3970:11090":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:9469:7645":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:11044:7063":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:4109:11110":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:42005:7084":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"22:636:7141":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"17:10491:7735":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:5332:9326":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11446:7838":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:8109:8877":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9498:6874":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"20:93:2151":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"17:12085:7967":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:7655:10955":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:878:7033":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:5594:8499":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:3782:8510":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:4069:6699":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:20435:35852":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13443:8328":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:38882:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:8827:9331":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13292:8285":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:9822:7664":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:10216:9329":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13169:8254":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:8448:11151":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12282:8014":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:4327:8515":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"0:114:1639":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"1:1564:7031":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:586:9707":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:21092:11219":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:22142:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4301:9921":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:46597:9268":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:847:7031":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:7488:8811":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:4561:11089":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10000:7679":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13101:6904":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10416:7198":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:11354:9313":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12496:8053":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:7440:10599":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11069:23244":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:6496:10440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:43215:9196":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:13453:8331":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:45091:9244":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:43406:7063":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4681:10057":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:8813:7344":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:6004:6770":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2745:6302":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:10615:7750":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:20380:35787":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"18:515:7504":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:9723:11101":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:7259:6660":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:7862:9364":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:42378:7304":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:7854:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:4967:6707":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:11585:7867":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:546:9686":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13194:8263":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:2796:11211":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:41668:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:4358:6730":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:4331:6701":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13791:8439":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:44339:9219":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:8170:8882":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:30099:35379":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:10731:27976":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:43620:9209":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:11109:7782":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10402:7729":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11193:7793":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:8651:6852":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:39280:6399":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:2830:6763":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:4828:10125":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:4024:16290":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3977:9085":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:481:7505":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:46366:9260":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12980:8227":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:43577:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:9534:7171":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7669:6991":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:2971:16293":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:668:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:45584:9253":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:10505:7203":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:3713:6660":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"11:751:6694":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:534:6756":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:3872:11085":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8255:7331":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:46672:9273":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:39511:7254":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:21761:11083":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:11926:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"11:834:8976":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4639:11112":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:43250:9201":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4900:10172":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:3612:11081":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:7670:10956":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:4232:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"20:223:7487":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"2:48952:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:540:9683":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:5760:6768":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:40846:7031":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:9409:23251":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:44870:9237":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:904:6694":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:39311:6402":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"5:1969:7104":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:8443:23234":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:9989:7326":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:6728:10552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12483:8052":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:1030:7240":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:5761:16848":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:2624:10624":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:50300:9285":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:40727:7032":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:9067:6474":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4451:9992":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:39216:6408":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:11341:9110":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:11060:6883":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13698:8411":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:46634:9271":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:45768:9255":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:2830:8493":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:11325:9109":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:42950:6403":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:10711:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:5951:10377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:2227:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:10686:7318":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:9653:7656":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:20433:35850":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8236:10715":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:9192:7327":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:1230:8985":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:4540:8520":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:2859:16538":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:1586:7236":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11969:7952":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:8823:6871":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:4571:10479":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:43382:10709":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:3264:6660":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"18:719:7529":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11946:7947":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:8072:8872":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:22076:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:154:6651":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:699:6847":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:8281:9417":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:3242:16292":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:42609:6436":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:3446:31086":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6506:7209":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:8307:9320":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:10712:23348":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:10469:6461":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:22109:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:11891:7938":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:10856:27987":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:42905:6439":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:39201:6401":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:46304:9259":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:7029:8715":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4218:9860":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:2847:16535":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13053:8239":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:4480:8518":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:44463:9224":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:7293:8758":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:3992:11094":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:41136:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:3922:11087":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:2719:6300":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:39398:35347":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:7179:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:2548:6743":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:55:8859":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"22:1122:7479":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"2:42478:7311":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:8573:23238":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:8909:6432":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:7218:10595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13265:8281":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:48926:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11372:6896":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:45554:9252":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:1788:7325":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:8192:11079":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:5905:6766":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:1983:9058":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:2675:2200":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:11832:7930":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:5346:8539":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:499:9654":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:2546:8481":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:2813:8736":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:39958:7291":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:8859:11175":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:6364:6459":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:6236:6938":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:21261:35790":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:6757:10568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:9432:6739":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:39533:7050":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:2788:8735":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:5976:6927":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:8187:7333":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:41176:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:9099:9344":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:6059:10403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4483:10006":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:10670:7752":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:3300:8506":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:636:7523":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13842:8450":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:2337:6913":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"13:110:38462":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"22:470:6639":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:8229:9316":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:7878:7104":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:8846:9438":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:4750:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:925:7035":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:12467:10986":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"14:202:16326":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:481:9646":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:21355:11101":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:4882:10161":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8506:7341":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:9973:7677":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:1034:7174":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:42968:6399":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:2855:16537":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"18:727:6848":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6243:38467":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12522:8055":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:43425:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:975:7173":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6201:8604":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:10719:7319":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:1613:580":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"9:0:1992":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:12622:6883":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:9316:7062":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:10233:28215":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"21:266:2177":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"2:44315:9218":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:4662:10049":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"13:226:7003":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:574:7507":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:3595:6672":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4402:9966":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5772:10284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:9876:7031":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:11265:9105":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:11274:6795":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:4611:10025":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:7197:1823":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:6488:10435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:5418:8540":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:2216:11028":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:10440:7200":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"22:1034:27112":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"6:4929:10181":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:5847:8562":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:8285:10468":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:41418:6470":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:8142:8881":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:42773:6447":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5967:10382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:777:6665":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:10377:7727":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:39580:7260":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:8360:23231":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9028:7160":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:8821:6322":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:43283:6452":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12923:8193":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12634:8070":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:487:9649":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:31795:9141":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:22373:9136":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"7:0:1519":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:6231:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:6218:8607":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:2732:2201":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:8047:8869":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:4628:10033":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:11240:9349":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:43670:8989":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:10159:6448":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:12195:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13233:8274":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:7589:11101":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:6984:6322":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:386:7538":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10104:6879":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6293:8617":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:42530:7314":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:572:9699":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:11081:10724":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:9340:7167":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:21749:9131":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:2319:8471":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:39428:11015":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"18:766:27087":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:679:10954":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:40710:1819":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:653:17286":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:41216:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:1354:7032":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10923:6887":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"21:259:38505":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"1:1847:7327":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:7606:9353":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:669:7035":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:7713:9141":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:2524:8480":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:7201:10586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:5697:36448":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:2448:8477":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:1555:8987":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:40896:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2682:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"9:445:22172":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:6368:9339":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7016:8712":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:4789:8527":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:4400:8516":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:8156:6997":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:10721:9312":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:3515:7031":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:46725:9276":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7596:23179":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:621:9055":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:21735:9130":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:40862:6322":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:13024:8232":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:2297:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:5177:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:44564:9228":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7635:8817":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:4728:8525":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:7521:10616":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6868:6939":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11484:7842":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4237:9870":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:1985:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:7601:9351":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:10957:6792":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:44694:9232":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:736:27086":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4871:10156":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:4413:6483":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:1947:7183":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:42467:7310":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:4988:9321":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:42669:6445":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:48978:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:2720:8488":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12433:8035":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:5878:10346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:39348:6406":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:8774:35854":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12510:8054":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:7870:9365":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:39491:7253":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:46764:9277":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12646:8077":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:40633:9096":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:10691:7103":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:1899:18267":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:0:1998":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:21586:7068":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:39561:7052":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10428:7733":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"11:1120:8984":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"11:60:7223":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:10145:10863":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:5717:7093":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:531:9677":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10580:7746":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:41056:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:9057:6470":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:803:6678":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:4122:7337":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13639:8397":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:7428:10597":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:8490:7338":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:4680:11104":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:2205:9069":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:1620:6512":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:6702:16513":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:6696:23175":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:2572:9301":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"11:1840:6694":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:10173:6447":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:39228:35350":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:7953:7102":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13433:8325":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:3266:7197":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:39367:6398":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:8214:8779":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7437:8799":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:4328:9931":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:5437:9330":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:10831:9360":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:2993:10984":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:98:9628":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:40719:7031":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:5639:6694":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6990:8711":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:42209:7299":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:609:7518":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"9:481:22171":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:0:1371":{"crate_id":1,"path":["std"],"kind":"module"},"17:13865:8454":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"7:79:22165":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:11120:6430":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4539:10019":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:42504:7253":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:11844:7932":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9523:7651":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:2404:8475":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10516:7736":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:521:27088":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:11924:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:8632:23217":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:4236:9087":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"14:0:1996":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6717:8674":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:40554:7077":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:13659:8403":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:1392:7033":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:6581:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4307:9922":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:42915:6440":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:39752:7285":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5728:10264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10334:6856":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:35:6668":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4981:10208":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:20681:11101":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:2668:8486":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:2426:8476":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"20:249:127":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"1:11908:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:393:7229":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:6773:10574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:8180:23182":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"11:2198:9633":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:1066:7241":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6474:6978":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:5660:10220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:6911:6769":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:2668:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:11916:1379":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:29782:11082":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:44794:9235":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:1716:9842":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:43446:9206":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:646:10953":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:10545:7542":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:45013:9242":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12224:8002":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4520:10018":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:2896:10618":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:21622:35346":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:12307:8018":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:2612:9302":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:12168:35632":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:8931:6873":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:46623:9270":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:6931:6781":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:20412:35848":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11532:7854":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:3640:7553":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:9059:6471":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12345:8022":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:41958:7081":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:8103:7105":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11628:7883":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:20601:11223":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:413:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:0:1999":{"crate_id":17,"path":["object"],"kind":"module"},"2:41716:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:5386:6852":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5690:10245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:1896:9083":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:257:1851":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:860:7032":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2782:16528":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:7529:16517":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12461:8041":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7683:6993":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"11:2069:8980":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:2494:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:2761:11208":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:39621:7266":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:21570:7042":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6179:6953":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6079:10417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:6662:8661":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:6183:6766":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:39414:9158":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:13651:8400":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:4845:8529":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:40976:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10936:6889":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:5691:9336":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:1771:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11911:1492":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:6793:8688":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:11572:6421":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6904:6983":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11910:412":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:9029:7108":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:5677:23169":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"18:113:7152":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:1597:7238":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"22:966:6650":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"9:421:22174":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:12412:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:3205:16291":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:38980:9146":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"11:1138:8985":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:2378:8474":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:42447:7308":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:1065:8980":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4489:10008":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13678:8408":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:2905:8496":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:11552:6291":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:9053:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:4714:10076":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4439:9986":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4781:10101":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:20652:11214":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:5383:9329":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4624:8523":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8939:9440":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4656:10046":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:870:6322":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11653:7887":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:42873:6444":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9118:9447":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6919:38464":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:3380:9410":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:7366:23178":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:11302:9108":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:4122:7048":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"9:325:9636":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4559:10021":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:8256:23216":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:43394:10712":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"11:2053:8721":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:39471:9159":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:4313:6481":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:3142:7196":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"11:762:6660":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:39007:8779":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:4921:10179":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11813:7925":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3353:6699":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:9734:7661":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7767:23180":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13249:8277":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:38948:10962":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12915:8192":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6321:6973":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5902:10358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:8310:23230":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:11573:7864":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:7467:8808":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"15:0:1997":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:9488:7649":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:6530:10459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:40735:6322":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"11:1029:8981":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:6480:11169":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:8953:6854":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6132:8599":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:1714:16562":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:1051:8721":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:40795:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:9617:7175":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:2930:2202":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11490:10725":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:43585:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:11920:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:3749:8509":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"20:231:2147":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"6:505:9657":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:9059:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4313:9924":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:8718:6868":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:10681:7753":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:1431:7036":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:9866:7666":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"0:37:1826":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"11:119:6654":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10635:6882":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:1802:9082":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:3166:9305":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:3779:9315":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:4092:7047":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:1420:7035":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:590:7511":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13812:8445":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:42651:6446":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:10201:7323":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:10142:23321":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:9178:7164":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:10125:7688":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:44601:9230":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12894:8182":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:4757:8526":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4787:10104":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:43386:10710":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"8:0:1991":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:3112:7236":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:9670:7178":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:3979:7032":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:6889:10900":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:4303:6729":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"21:198:2192":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"1:1575:6660":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:11993:7953":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"15:180:7213":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:10058:9448":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:1527:9724":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:6533:11171":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:11623:16318":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:20809:11101":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12959:8222":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:43086:9193":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4476:10004":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"11:2184:9630":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:4904:8531":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13356:8302":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:8340:2229":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:2395:10621":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10527:23346":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:2879:8495":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:42595:6438":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13367:8306":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:13426:8324":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:3146:7235":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:8112:9312":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:1529:6699":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:5786:10295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:6943:23176":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:8783:9436":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:9925:6446":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:7280:33872":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:8779:7057":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"20:315:38488":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"6:1617:9778":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:4597:10024":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:1568:6322":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:2851:16536":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:11090:16610":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:5561:6766":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:11929:1474":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"0:0:1649":{"crate_id":0,"path":["idna"],"kind":"module"},"0:39:599":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"23:0:2167":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"2:22175:9135":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:40786:16604":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13066:8244":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:9531:6743":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12098:7969":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:9886:7668":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:3105:7031":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:46226:9258":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"21:145:1853":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"17:10354:7726":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:7627:6461":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:7802:7329":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:5568:6767":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:13309:8292":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"22:386:6651":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"6:6611:10488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:7099:16518":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:39713:7280":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:5684:9333":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:22274:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:41425:6469":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:1410:7234":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:707:6422":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:9389:7329":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12770:8079":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7590:9288":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:38807:7247":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:7498:8812":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:41296:7078":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13257:8279":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10478:7202":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:45974:9256":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:2212:6725":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10649:7204":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:5917:10360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:12006:7956":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:1559:9740":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:9007:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:5019:9321":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:10008:7352":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:6945:7239":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4890:10166":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:1645:9802":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:42755:6448":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:46588:9267":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:5527:7053":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:2360:11036":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:933:8973":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:9394:6787":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:39386:9157":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:25618:7074":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"16:8256:8889":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:42457:7309":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:7252:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:1704:9838":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13461:8332":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:8667:6853":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:9596:7653":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5931:10371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:535:6925":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:2454:11101":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:43658:9214":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10666:9361":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:2507:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4862:10150":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:39983:7294":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:40645:9098":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:11282:7817":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:44746:9234":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7948:9366":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11163:7789":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:247:7537":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:3168:9306":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:43035:16324":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:1731:9849":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10303:7723":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13332:8295":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4775:10100":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:320:6656":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:6220:6672":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:42190:9181":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:43378:10708":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:6558:8637":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:45060:9243":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:9265:7165":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:6096:6774":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"10:36:9635":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:45114:9245":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:11471:7841":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:7566:35855":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:355:9286":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:42621:1818":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:11577:6419":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:9268:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:4575:10483":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"20:97:1850":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"2:46428:9261":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:7204:9077":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:4411:11112":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"11:1534:8986":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"0:3:1624":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"2:3989:9086":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"21:67:1852":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"16:5655:8498":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12419:8033":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:3677:9314":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:277:2207":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:7463:10605":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:11100:9343":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:11879:7936":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:9380:23250":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:2825:16533":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:491:7506":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:4577:6394":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:6431:8628":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7803:8827":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:6608:16521":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:8606:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:5990:10388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:2370:11041":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:5724:8552":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:11376:6428":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:3528:7032":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9959:7676":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:7021:6322":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:40936:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4408:9969":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:8986:7106":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:7452:10601":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:4298:6699":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:41950:7079":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:3930:11088":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:8129:8878":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:2894:38297":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:123:16929":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:9885:9169":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:9772:7662":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:41966:7082":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8951:27805":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:4099:6699":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:13344:8301":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12019:7693":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11472:7111":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:39341:6405":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"11:2190:38460":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"21:302:2190":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"2:3505:6694":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:41738:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:4877:10159":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"22:948:27111":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"16:6164:8602":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:594:9712":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"18:624:38483":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:12220:9113":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:8096:7056":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:956:8978":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:4037:8514":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:11892:27963":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10798:23241":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:22010:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:30011:6517":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:3937:6672":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:444:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:361:9287":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:40744:2233":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:39589:7262":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:1723:9845":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"9:174:7021":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:8875:11174":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5945:10374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:810:7234":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:3732:6672":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:3872:8512":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:3936:11089":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:1571:6694":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:9628:7655":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:9696:6874":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:2357:8473":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:30041:35377":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4766:10094":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4389:9961":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:5921:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:5944:8571":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:45318:9248":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:44293:9217":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"11:725:7033":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:6519:6328":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10691:23347":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:21683:35344":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:614:38480":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:4440:412":{"crate_id":2,"path":["core","char"],"kind":"module"},"6:5843:10325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:891:7034":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6022:23172":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:1663:9814":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:4510:8519":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:2919:10973":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:9968:6428":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"20:336:2140":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"17:9098:7162":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:4248:9878":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:5557:6942":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:21249:7066":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:6752:11212":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8751:7342":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:41686:109":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:6767:8687":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:41439:6472":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:9048:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:484:6755":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:7317:38468":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:6643:10498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:1728:10627":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:9478:7647":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10840:7768":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:44393:9221":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:5698:10247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:39461:6731":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:2676:6297":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:42701:6450":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:7511:10614":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:3932:6699":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:1859:7236":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:6939:6322":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:868:7031":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:10364:6788":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:2588:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:6616:9338":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:10721:7757":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:7676:7092":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:5167:6424":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5759:10275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4910:10173":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:8994:9445":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:10068:7192":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:9108:38477":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:13564:8384":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:8389:23232":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13689:8409":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:1085:8983":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9917:6877":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:6547:6779":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:9900:7032":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"11:353:6658":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"9:234:9177":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:44524:9226":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:14:2108":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:30575:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"15:219:6999":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13469:8334":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13316:8293":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8145:7049":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:46568:9265":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:5921:7269":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11641:7884":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:45618:9254":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:11930:1475":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:9721:7179":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5811:8555":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:2131:581":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4673:10053":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:11615:7879":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:4757:11099":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:2808:16531":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:2538:6760":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:10940:6790":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:10426:9307":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:7475:10607":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:41658:10697":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"20:383:2144":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"16:6400:8626":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:525:9674":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:20689:11218":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:7481:10608":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"11:632:7031":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"14:165:22256":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:13145:8252":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:11252:7348":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:11106:9103":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"20:348:2141":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"2:44938:9240":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"7:32:22158":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:3133:33848":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:9796:7663":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:2808:8492":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6728:8675":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"22:879:27110":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"6:4757:10091":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:9311:16383":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:39949:6459":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"11:2178:9629":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:939:10969":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:39571:7257":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:42943:6426":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:40803:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:9907:6876":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:1681:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:8611:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:21501:9116":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:8283:23229":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:9218:6856":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:8186:2236":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:39305:6401":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:9826:7187":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:5104:8537":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4812:989":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:39207:9149":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:5065:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:5708:6946":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12449:8039":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:46550:9264":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:11416:9315":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4618:10026":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:3388:9084":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:4325:9319":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:5497:10389":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:10321:7342":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:493:9652":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:1216:8980":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:7133:35347":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:7195:10584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:9126:28836":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:40491:9093":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:1534:9726":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:9876:7589":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:43103:9194":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:13477:8335":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:1609:9773":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:11513:6437":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12259:8013":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11011:7773":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9350:38479":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:3446:8507":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"14:215:8970":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:41432:6471":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:7527:6783":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:42959:6401":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:11024:9436":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5722:10263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:39724:7283":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:7103:9445":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:5318:9322":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:5797:6952":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:43641:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:44361:9220":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:4842:11137":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:5813:10302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:42801:6441":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"11:822:10969":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:6962:6683":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:9276:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:5741:23170":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:45508:9251":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:39738:7284":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11785:7918":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:13857:8451":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:2207:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:11913:1036":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:46116:9257":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:39258:6409":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:7697:6994":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12178:7978":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4501:10017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:41987:9177":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:46702:9275":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13121:8248":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11600:7873":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:11931:1472":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:7498:10613":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13506:8342":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13777:8432":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:42539:7315":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:7276:6716":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:9424:7644":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:8996:208":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:8891:11176":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7042:8718":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13159:8253":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11821:7927":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:8090:8874":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:20640:11101":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:40468:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"19:0:1018":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:38987:9147":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:6954:6694":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4457:9995":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2967:22313":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5779:6948":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:2764:8490":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:5725:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11902:7939":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:41774:6479":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:641:9292":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11391:6903":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:420:7539":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:6622:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:10092:7193":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:7626:8816":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6307:6971":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:815:8973":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:1201:8981":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:5554:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11928:1473":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:4720:10079":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:3984:11092":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:2766:11210":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13082:8247":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:1898:2128":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10897:7770":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:9641:7176":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:31808:6306":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:42855:6443":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:8292:6420":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:8490:23235":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:39689:7277":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"22:534:7140":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"14:31:8965":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:3290:11068":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"0:15:1780":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"18:671:7159":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:40777:2234":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:48991:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6291:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8805:7031":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:6128:7098":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:39641:7272":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:11778:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:4734:6764":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:11036:27973":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:43229:16325":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:39244:6407":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:6094:10428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6061:22285":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:39520:7049":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:3323:7293":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:20840:11220":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:42819:6442":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:5805:10297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:20842:7064":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:11881:10957":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:44494:9225":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:10007:7301":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12126:7973":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:951:6672":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4571:10022":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:6548:10468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10989:7542":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:38760:16294":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:10423:9305":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:2572:8482":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:9070:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:2865:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:1185:8721":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10735:7760":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:21554:7067":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6520:8636":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:46474:9262":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8181:7331":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12113:7972":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:2835:8740":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"11:1065:38461":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:11557:6420":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12550:8059":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:10452:7201":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:3160:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:1737:9079":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4962:10194":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:4727:10081":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:6698:10535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:0:1990":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10885:6886":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:9733:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11410:7831":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"11:853:8978":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:7065:8720":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:8500:7031":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:4846:6699":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:9068:38474":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10270:7720":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:8997:2131":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:2475:9300":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"11:646:7032":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4353:9947":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:6666:6713":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:2358:11035":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12293:8016":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}