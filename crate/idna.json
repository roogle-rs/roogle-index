{"root":"0:0:1700","crate_version":"0.4.0","includes_private":false,"index":{"b:1:3323-0:161:1677":{"id":"b:1:3323-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3321:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3325:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:99:1950":{"id":"0:99:1950","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[563,4],"end":[566,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12179:28082":{"id":"1:12179:28082","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12178:28112"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43915:6496","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1687":{"id":"0:100:1687","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[569,4],"end":[573,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1685":{"id":"0:117:1685","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12183:31144":{"id":"1:12183:31144","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[703,0],"end":[711,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2520:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:702"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2704:228-0:170:1678":{"id":"a:1:2704:228-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2704:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:680-0:161:1677":{"id":"b:5:680-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:7169","5:683:27909","5:684:27910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:1887":{"id":"0:44:1887","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1691":{"id":"0:95:1691","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[539,4],"end":[542,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12268:35610":{"id":"1:12268:35610","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11813:127","`FromStr`":"1:11812:2157"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11812:2157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11812:2157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2687:220-0:155:1679":{"id":"a:1:2687:220-0:155:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2687:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5510:36268":{"id":"5:5510:36268","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2152","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2152","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12173:33083":{"id":"1:12173:33083","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12174:33084"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2594:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12243:35602":{"id":"1:12243:35602","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:155:1679":{"id":"b:1:2553-0:155:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2523:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2556:128","1:2557:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12181:35592":{"id":"1:12181:35592","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43896:6484","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12165:31345":{"id":"1:12165:31345","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[537,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1691","0:96:1946","0:97:1692","0:98:1981","0:99:1950","0:100:1687","0:102:1699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:119:1698":{"id":"0:119:1698","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12174:33084":{"id":"1:12174:33084","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12173:33083"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12278:35612":{"id":"1:12278:35612","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4540:35612"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43949:6440","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12171:35590":{"id":"1:12171:35590","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12036:1420","str::slice_mut_unchecked":"1:12172:35591","crate::ops::Index":"1:2984:2147"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2562:1500":{"id":"1:2562:1500","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:702":{"id":"0:109:702","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[704,4],"end":[710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12196:1856":{"id":"1:12196:1856","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41673:179","prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:613":{"id":"0:46:613","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[226,0],"end":[231,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1841":{"id":"0:22:1841","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2558-0:170:1678":{"id":"b:1:2558-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2561:128","1:2562:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12239:35600":{"id":"1:12239:35600","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12270:1857":{"id":"1:12270:1857","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1690":{"id":"0:118:1690","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12178:28112":{"id":"1:12178:28112","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12179:28082"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43906:6483","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:36268","5:5511:2012","5:5514:36269","5:5517:36270","5:5525:36271","5:5526:36272","5:5527:2218","5:5528:31950","5:5529:31951"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12262:35608":{"id":"1:12262:35608","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:425":{"id":"0:168:425","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3325:1514":{"id":"1:3325:1514","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39494:9482","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1699":{"id":"0:91:1699","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2547-0:161:1677":{"id":"b:1:2547-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2549:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3323-0:170:1678":{"id":"b:1:3323-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3321:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3325:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8387:2292-0:155:1679":{"id":"a:1:8387:2292-0:155:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8387:2292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:87:2010":{"id":"0:87:2010","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:170:1678":{"id":"b:1:2553-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2523:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2556:128","1:2557:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:1700":{"id":"0:0:1700","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1675","0:114-0:161:1677","0:115-0:170:1678","0:116-0:155:1679","0:117:1685","0:118:1690","0:119:1698"],"is_stripped":false}}},"1:12182:28102":{"id":"1:12182:28102","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43924:6495","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:31950":{"id":"5:5528:31950","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12273:31953"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7:1675":{"id":"0:7:1675","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[316,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1841","0:24:544","0:44:1887","0:46:613"],"is_stripped":false}}},"a:1:8388:2291-0:161:1677":{"id":"a:1:8388:2291-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8388:2291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[521,0],"end":[535,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2594:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2687:220-0:170:1678":{"id":"a:1:2687:220-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2687:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:951","0:87:2010","0:88:1687","0:91:1699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2543-0:155:1679":{"id":"b:1:2543-0:155:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2546:2020"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2547-0:155:1679":{"id":"b:1:2547-0:155:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2549:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2256-0:170:1678":{"id":"b:1:2256-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:27739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:112:676":{"id":"0:112:676","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[717,4],"end":[719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9256:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9245:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12209:35593":{"id":"1:12209:35593","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11852:2161","str::split":"1:12200:2003","prim@char":"4:12030:421","`DoubleEndedIterator`":"1:7310:121","str::rsplit_terminator":"1:12212:35594"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43682:6488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2744:2267-0:155:1679":{"id":"a:1:2744:2267-0:155:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2744:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5771-0:170:1678":{"id":"b:5:5771-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9286:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5769:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5773:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12246:35604":{"id":"1:12246:35604","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3323-0:155:1679":{"id":"b:1:3323-0:155:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3321:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3325:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12167:31346":{"id":"1:12167:31346","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12160:35589":{"id":"1:12160:35589","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:161:1677":{"id":"b:1:2553-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2523:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2556:128","1:2557:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:114-0:161:1677":{"id":"0:114-0:161:1677","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1677","glob":false}}},"5:5514:36269":{"id":"5:5514:36269","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12259:35607":{"id":"1:12259:35607","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12277:11405":{"id":"1:12277:11405","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4543:11405"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43940:6441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:36270":{"id":"5:5517:36270","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12192:6403":{"id":"1:12192:6403","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41673:179","prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12153:35586":{"id":"1:12153:35586","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8388:2291-0:155:1679":{"id":"a:1:8388:2291-0:155:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8388:2291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2615:11127":{"id":"1:2615:11127","crate_id":1,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"1:3389:9430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12230:35597":{"id":"1:12230:35597","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11852:2161","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::matches":"1:12227:1957"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43854:6492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12206:33093":{"id":"1:12206:33093","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11852:2161","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::split":"1:12200:2003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43650:6485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2556:128":{"id":"1:2556:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:161:1677":{"id":"0:161:1677","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[512,0],"end":[518,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:2704:228-0:161:1677","a:1:8388:2291-0:161:1677","a:1:2687:220-0:161:1677","a:1:2744:2267-0:161:1677","a:1:8387:2292-0:161:1677","b:1:2256-0:161:1677","b:1:2253-0:161:1677","b:1:2558-0:161:1677","b:1:2543-0:161:1677","b:1:2547-0:161:1677","b:1:3323-0:161:1677","b:1:2553-0:161:1677","b:5:680-0:161:1677","0:92","0:167","0:169"]}}},"b:1:2253-0:155:1679":{"id":"b:1:2253-0:155:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2255:2055"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12162:315":{"id":"1:12162:315","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:1946":{"id":"0:96:1946","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[545,4],"end":[548,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12241:35601":{"id":"1:12241:35601","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2557:1501":{"id":"1:2557:1501","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12245:35603":{"id":"1:12245:35603","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12250:35606":{"id":"1:12250:35606","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12275:35611":{"id":"1:12275:35611","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4542:35611"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43931:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2543-0:170:1678":{"id":"b:1:2543-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2546:2020"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12272:31952":{"id":"1:12272:31952","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12156:35588":{"id":"1:12156:35588","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12154:35587"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12253:2005":{"id":"1:12253:2005","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12163:1881":{"id":"1:12163:1881","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1679":{"id":"0:116-0:155:1679","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1679","glob":false}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2594:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24:544":{"id":"0:24:544","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6886:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:7169":{"id":"5:682:7169","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:2549:702":{"id":"1:2549:702","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1699":{"id":"0:102:1699","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2744:2267-0:161:1677":{"id":"a:1:2744:2267-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2744:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:684:27910":{"id":"5:684:27910","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2543-0:161:1677":{"id":"b:1:2543-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2546:2020"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8387:2292-0:170:1678":{"id":"a:1:8387:2292-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8387:2292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12172:35591":{"id":"1:12172:35591","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12036:1420","crate::ops::IndexMut":"1:2988:2148","str::slice_unchecked":"1:12171:35590"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12175:1843":{"id":"1:12175:1843","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43602:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12203:28100":{"id":"1:12203:28100","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11668:6497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:31951":{"id":"5:5529:31951","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12274:31954"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12233:35598":{"id":"1:12233:35598","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11852:2161","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::rmatch_indices":"1:12236:35599"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43782:6493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2255:2055":{"id":"1:2255:2055","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:951":{"id":"0:86:951","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5773:1478":{"id":"5:5773:1478","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2558-0:155:1679":{"id":"b:1:2558-0:155:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2561:128","1:2562:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2547-0:170:1678":{"id":"b:1:2547-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2549:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2258:27739":{"id":"1:2258:27739","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2744:2267-0:170:1678":{"id":"a:1:2744:2267-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2744:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[714,0],"end":[714,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","type_id","provide","source","description"],"trait":{"name":"Error","id":"1:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12189:1983":{"id":"1:12189:1983","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2558-0:161:1677":{"id":"b:1:2558-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2561:128","1:2562:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:88:1687":{"id":"0:88:1687","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[522,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12152:1987":{"id":"1:12152:1987","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12273:31953":{"id":"1:12273:31953","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:155:1679":{"id":"b:1:2256-0:155:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:27739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8388:2291-0:170:1678":{"id":"a:1:8388:2291-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8388:2291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12215:33095":{"id":"1:12215:33095","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:2161","str::rsplitn":"1:12218:33097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43736:6490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1679":{"id":"0:155:1679","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:2704:228-0:155:1679","a:1:8388:2291-0:155:1679","a:1:2687:220-0:155:1679","a:1:2744:2267-0:155:1679","a:1:8387:2292-0:155:1679","b:1:2256-0:155:1679","b:1:2253-0:155:1679","b:1:2558-0:155:1679","b:1:2543-0:155:1679","b:1:2547-0:155:1679","b:1:3323-0:155:1679","b:1:2553-0:155:1679","0:159"]}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:27909":{"id":"5:683:27909","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:1678":{"id":"0:170:1678","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[602,0],"end":[615,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2704:228-0:170:1678","a:1:8388:2291-0:170:1678","a:1:2687:220-0:170:1678","a:1:2744:2267-0:170:1678","a:1:8387:2292-0:170:1678","b:1:2256-0:170:1678","b:1:2253-0:170:1678","b:1:2558-0:170:1678","b:1:2613-0:170:1678","b:1:2543-0:170:1678","b:1:2547-0:170:1678","b:1:3323-0:170:1678","b:1:2553-0:170:1678","b:5:5771-0:170:1678","0:111","0:106","0:110","0:183","0:108"]}}},"0:98:1981":{"id":"0:98:1981","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[557,4],"end":[560,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12271:34186":{"id":"1:12271:34186","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39702:27988","Self::is_ascii":"1:12270:1857"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39702:27988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12236:35599":{"id":"1:12236:35599","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11852:2161","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::match_indices":"1:12233:35598"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43800:6494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2699:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12154:35587":{"id":"1:12154:35587","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:676":{"id":"0:107:676","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[649,4],"end":[700,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9256:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9245:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[648,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9281:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12161:316":{"id":"1:12161:316","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12162:315","`u8`":"4:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12224:35596":{"id":"1:12224:35596","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:36272":{"id":"5:5526:36272","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2152","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2152","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12200:2003":{"id":"1:12200:2003","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11852:2161","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::split_whitespace":"1:12178:28112","str::rsplit":"1:12206:33093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43632:6487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2687:220-0:161:1677":{"id":"a:1:2687:220-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2687:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12212:35594":{"id":"1:12212:35594","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11852:2161","str::split":"1:12200:2003","prim@char":"4:12030:421","str::split_terminator":"1:12209:35593"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43700:6486","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12265:35609":{"id":"1:12265:35609","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:36271":{"id":"5:5525:36271","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2546:2020":{"id":"1:2546:2020","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2520:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2704:228-0:155:1679":{"id":"a:1:2704:228-0:155:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2704:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8387:2292-0:161:1677":{"id":"a:1:8387:2292-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8387:2292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12218:33097":{"id":"1:12218:33097","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12030:421","str::splitn":"1:12215:33095","self::pattern":"1:11852:2161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43754:6489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12151:823":{"id":"1:12151:823","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12030:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12150":{"id":"1:12150","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12151:823","1:12152:1987","1:12153:35586","1:12154:35587","1:12156:35588","1:12159:32415","1:12160:35589","1:12161:316","1:12162:315","1:12163:1881","1:12165:31345","1:12167:31346","1:12169:31347","1:12171:35590","1:12172:35591","1:12173:33083","1:12174:33084","1:12175:1843","1:12176:9650","1:12177:1862","1:12178:28112","1:12179:28082","1:12180:7366","1:12181:35592","1:12182:28102","1:12183:31144","1:12186:1982","1:12189:1983","1:12192:6403","1:12196:1856","1:12200:2003","1:12203:28100","1:12206:33093","1:12209:35593","1:12212:35594","1:12215:33095","1:12218:33097","1:12221:35595","1:12224:35596","1:12227:1957","1:12230:35597","1:12233:35598","1:12236:35599","1:12239:35600","1:12241:35601","1:12243:35602","1:12245:35603","1:12246:35604","1:12247:35605","1:12250:35606","1:12253:2005","1:12256:33099","1:12259:35607","1:12262:35608","1:12265:35609","1:12268:35610","1:12270:1857","1:12271:34186","1:12272:31952","1:12273:31953","1:12274:31954","1:12275:35611","1:12277:11405","1:12278:35612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12177:1862":{"id":"1:12177:1862","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43618:6480","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12227:1957":{"id":"1:12227:1957","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11852:2161","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::rmatches":"1:12230:35597"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43836:6491","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12256:33099":{"id":"1:12256:33099","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12274:31954":{"id":"1:12274:31954","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:2012":{"id":"5:5511:2012","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2561:128":{"id":"1:2561:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32173:9886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12180:7366":{"id":"1:12180:7366","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43886:6482","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12159:32415":{"id":"1:12159:32415","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11412:6476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12169:31347":{"id":"1:12169:31347","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[716,0],"end":[720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9286:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2256-0:161:1677":{"id":"b:1:2256-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:27739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97:1692":{"id":"0:97:1692","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[551,4],"end":[554,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2253-0:161:1677":{"id":"b:1:2253-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2255:2055"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115-0:170:1678":{"id":"0:115-0:170:1678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1678","glob":false}}},"b:1:2253-0:170:1678":{"id":"b:1:2253-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2255:2055"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12221:35595":{"id":"1:12221:35595","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2704:228-0:161:1677":{"id":"a:1:2704:228-0:161:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2704:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12247:35605":{"id":"1:12247:35605","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11877:6472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2613-0:170:1678":{"id":"b:1:2613-0:170:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3377:11358","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2615:11127"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"1:12186:1982":{"id":"1:12186:1982","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:2161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2218":{"id":"5:5527:2218","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12176:9650":{"id":"1:12176:9650","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43608:6481","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:8872:2189":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:8204:7461":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:10825:9259":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:6554:8791":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"20:97:1909":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"17:11767:7961":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10671:23679":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:2766:8888":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4463:10216":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:14044:8497":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14417:8612":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:8794:23578":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"14:187:22599":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13870:8450":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:2966:11382":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:9655:7312":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7584:8968":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:9571:36573":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:7337:2153":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:1138:7390":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6841:10827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:10082:7396":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:7191:2189":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:5413:9274":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:41789:2289":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:7463:10852":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:2929:2269":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:9054:32146":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:12631:8128":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:3739:9261":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"19:0:1043":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:2850:11373":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"10:0:2123":{"crate_id":10,"path":["adler"],"kind":"module"},"1:4815:805":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:44210:11536":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13125:8222":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:45836:9683":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4917:10393":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11992:7999":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:43896:6484":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:2917:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"6:4475:10221":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:8979:7187":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:21048:16594":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:850:7171":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:13055:8214":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:2704:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:40588:7456":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4781:10328":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:482:9900":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:10427:7413":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:40995:7475":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10654:7846":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:22659:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:12470:30221":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:43359:7483":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:3934:16962":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"20:383:2210":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"4:6193:7191":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4550:10258":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:5793:7090":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:10799:7878":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:10391:6489":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:9887:7793":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:9540:11493":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:6022:10630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:2293:22628":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"4:11044:6902":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:40219:6444":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:5387:6839":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:45642:9675":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:12042:754":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:45766:9680":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6775:10791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:488:9903":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:2781:8646":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:2474:16926":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:123:17193":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:10444:7827":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:7529:10857":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:5393:9273":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:9939:7318":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:9952:7768":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:46067:9691":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:43700:6486":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:14350:8600":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:2761:11199":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:21533:16600":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:5793:10516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6820:10815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:4032:8669":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:1814:7396":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:10532:9254":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:42982:7250":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:40162:6449":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10038:7322":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:6289:8772":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:44053:9648":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:8210:8932":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6692:23519":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12552:7851":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13697:8408":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:9290:6513":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:6805:10808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:9192:32420":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:42142:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:47599:9717":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:2361:16911":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:8924:23582":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:8389:17024":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:276:2152":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:4049:11406":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:43448:7489":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:43590:6479":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"4:1558:2189":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:4387:9266":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:0:828":{"crate_id":6,"path":["libc"],"kind":"module"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:1513:9978":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:3736:9260":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:4467:421":{"crate_id":1,"path":["core","char"],"kind":"module"},"4:12029:948":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:9318:6990":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:12526:8112":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:4234:7170":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:43602:1879":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:3395:7343":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4606:10271":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:4742:16980":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:3970:16963":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:46721:9708":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13673:8406":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:39515:9483":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:4685:10278":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"11:1501:22587":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13604:8399":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:8334:10724":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:40120:6448":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:10322:9276":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"4:12030:421":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"9:426:22509":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"0:46:613":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"16:4323:8670":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:5074:10469":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:46335:9700":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10148:7326":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:4701:16988":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:2164:7333":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:41645:9442":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:6531:6802":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:9806:23595":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:723:7172":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:9188:7008":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:1837:7397":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:10405:7501":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11250:7915":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11234:7913":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:755:7673":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:10783:9411":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:1075:7320":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13029:8212":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:10834:32407":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:13937:8472":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4518:10244":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10994:7892":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:9744:36576":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:2170:7176":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"18:491:7644":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10529:7837":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:8285:10886":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:4635:10737":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:10361:7014":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:11852:7989":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2900:8651":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:21180:16587":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:3984:16964":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:41622:9263":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:6573:10696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:41858:7170":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"14:202:2137":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:4002:9431":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:40233:6446":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:2465:8633":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:9083:7005":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:39228:11386":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:40987:7473":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:8407:9372":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:46386:9701":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:31017:7241":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13914:8464":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"20:93:2217":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"6:4862:10361":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:5775:10503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:9296:7010":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:44363:6467":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:0:446":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"11:285:7371":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:40356:9617":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"11:399:7375":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:7250:10839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:7874:9308":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:11857:2150":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6303:7109":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:481:6862":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:9256:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7679:7131":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:8086:9027":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:7864:7196":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:7998:9312":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:573:9953":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13448:8351":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:11304:7192":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"21:320:7621":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"1:8814:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:42443:6515":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:21747:16926":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:4473:16988":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:44367:6471":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13707:8409":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"14:0:2126":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:5558:10645":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:11594:6503":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:42767:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12186:8046":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:1570:7384":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:46991:9713":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:2247:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:4819:16976":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:5752:9283":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:2857:8649":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:21062:11337":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"4:7661:9298":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:11633:6502":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:4267:9434":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:4155:7405":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:4724:8680":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:530:7062":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:22692:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"9:357:22522":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:3800:2186":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:8304:7401":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:582:7679":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:40271:9615":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:47801:9720":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11943:7990":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:3389:9430":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:21284:16586":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:532:9931":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:42964:9635":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:3261:9255":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6658:8815":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:39433:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:40446:7221":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11074:7680":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"4:9100:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7622:8969":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:8982:7225":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:21186:16589":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:40598:7458":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:14301:8585":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:32209:9306":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:4506:10238":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:46119:9693":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:1523:7391":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:9744:6866":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:10883:7884":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:3674:16960":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:44439:11542":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:42943:7248":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:7739:7133":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:4913:17014":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:8848:9383":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:43428:7487":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:2637:8640":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4420:10200":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9475:7309":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:32213:7425":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"9:0:2122":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:47489:9716":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:6769:2192":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"12:0:2125":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"22:1122:7617":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"16:8105:9030":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:10123:7011":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:39522:6523":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:41807:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:10904:7497":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:9913:7317":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:10597:7339":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:5612:8697":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:40946:7468":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:46311:9699":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2854:11374":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:22179:11200":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:7038:8872":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"21:313:2257":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"5:2690:10884":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:2663:8641":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:20741:28694":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:7047:6877":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:4184:7407":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:2421:8631":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:12497:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11034:7350":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"11:1068:9139":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:5058:10466":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6386:8779":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:3237:11385":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:11141:7200":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6197:8759":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6688:10744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4992:10433":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:5342:8694":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:2131:6832":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:2049:9215":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:11352:9292":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:40226:6445":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4395:10184":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:3635:7691":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6396:8780":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:40962:7470":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:5651:8653":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12133:8032":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12303:8073":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9048:7004":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:7523:7679":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:9105:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:5126:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:11164:7019":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4973:10425":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11753:7960":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"11:332:6805":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:21972:7233":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:10298:6485":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"11:644:7171":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:3894:8668":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:2166:11337":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:7833:8984":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:12034:313":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:43632:6487":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:8236:7403":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:9482:7399":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:11144:7908":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:10225:7480":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:40418:7218":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:2694:2266":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:9032:6989":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"18:766:27538":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12579:8121":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:6465:6887":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:7295:10851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:2799:11364":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4833:10346":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:46803:9709":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:1838:7384":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"20:231:2213":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"3:0:2119":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10555:7336":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:30385:2179":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:2049:9135":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3145:11378":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:12412:8095":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:6372:7114":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:504:7678":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:822:6821":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:4841:8684":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11199:7910":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"14:160:9120":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:4441:8672":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:8003:7195":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"16:2589:8638":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:5429:9275":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:7920:9311":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:1517:9142":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:4032:16967":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:8549:7170":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"5:7245:2189":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:12757:8161":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:14395:8606":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:6642:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:22791:9476":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:2966:36537":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14189:8555":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:923:9128":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:21310:16595":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:20726:28698":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:26048:7240":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:0:1412":{"crate_id":4,"path":["std"],"kind":"module"},"1:12435:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"11:1048:36557":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:4032:6815":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4026:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"14:221:9127":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13620:8402":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11600:23588":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10969:7347":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:14163:8546":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:4235:9264":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"22:669:6974":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"1:11412:6476":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:41520:9441":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:11852:2161":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:4626:10273":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:1681:10086":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:5615:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:11642:7941":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:6648:10742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:7511:10854":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:3221:9253":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10161:7805":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10066:7323":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:43618:6480":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:10223:7807":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11354:7748":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:4428:10202":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:43485:7431":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5836:10531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"11:749:2138":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:35:2185":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:7852:7399":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:9545:7228":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13854:8448":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11045:7894":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:587:9961":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7799:8980":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:5067:8691":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6939:23520":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:8771:23577":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:1826:2138":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:9966:6992":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6214:8762":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:5986:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6239:36566":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10080:7800":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:1917:6649":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"5:3183:35203":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6618:10720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:14236:8566":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12077:8014":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"22:728:6784":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"4:1041:8875":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:6607:10715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:4868:8685":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:7682:6899":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:9170:9394":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:2497:8634":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:2808:8890":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:10760:10895":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:41739:7171":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"11:0:2124":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:6720:10754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:14403:8609":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:1569:10011":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:1554:7170":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12792:8172":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:21528:16592":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:2932:2270":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:8711:23575":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:6439:2138":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:44016:11535":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:5379:9269":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:4854:10356":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"9:237:9635":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:22146:10907":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11591:7020":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:22593:6454":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:3580:8663":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"22:948:27562":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"1:2984:2147":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:9528:36571":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:2209:9245":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10339:7819":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:6161:6883":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:21118:16926":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10499:7832":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:868:7172":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:12051:1519":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"18:609:7656":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:44558:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"5:5128:6847":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:2803:8647":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4524:10247":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4496:10231":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:11398:9448":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4908:10387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:6077:10647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:3519:7344":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:2105:23637":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:4329:6914":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:40132:28508":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:43836:6491":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:1506:9975":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:7494:8965":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:3155:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:48045:9732":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:6625:10724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"23:0:2233":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"1:2523:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:11084:7896":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:7855:23525":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7099:9391":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:10323:7813":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:10805:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4754:10311":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12966:8194":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4304:10123":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:629:9212":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:10186:6497":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:538:6978":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:635:9236":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2314:8626":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:4785:8682":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:44664:9673":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:4456:10213":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:12048:1520":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:21749:16588":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11888:7031":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:21625:7232":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:8990:9386":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:9294:6515":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:8539:7409":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"16:6872:7119":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:7362:23522":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5414:8695":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:8356:9267":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:14026:8494":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"9:330:9890":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:6744:11459":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"11:986:9135":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:39314:7426":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:9245:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:10978:11351":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:22063:9460":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:10863:6992":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13140:8226":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:1667:1099":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"16:2519:8635":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:40517:7449":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"4:8296:9360":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"11:2168:9883":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4929:10402":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:45818:9682":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:1747:10904":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:3186:7342":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:2737:8644":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:719:7667":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:41480:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"22:449:6784":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"6:547:9940":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13513:8386":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:2695:6349":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"18:707:6474":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:798:9128":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:10947:9195":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:40968:7472":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:8125:9031":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:6427:8782":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:10303:7728":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:1495:9970":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:44196:9654":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:20743:28699":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7255:2288":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:48137:9736":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12457:8105":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:2960:36542":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:48007:9730":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5015:10441":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:2402:6542":{"crate_id":4,"path":["std","io"],"kind":"module"},"17:12377:8091":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:929:16878":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:2759:8645":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:2988:2148":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:4996:8689":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13557:8391":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:6357:8776":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:356:9232":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:21178:16926":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:3025:8659":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:7599:10874":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:2803:11366":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4872:10367":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:4194:6839":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:8194:7217":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:4879:1013":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:817:9131":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12346:8084":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:9118:7006":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:4567:17006":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:910:7383":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"15:288:7360":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:11167:32411":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:3185:30504":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:9282:7397":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"20:315:36587":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"17:11178:7351":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:40728:7461":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:8387:2292":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:10535:9256":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:12994:8200":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"4:8150:7199":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:39702:27988":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"4:10101:7424":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"11:793:7383":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:45666:9676":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:10957:7891":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14150:8540":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:2815:11368":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13732:8418":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:5805:10520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:10251:11112":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"11:695:7175":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13964:8479":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:6456:7115":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:1756:9426":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:12052:799":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:9296:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:44359:6468":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:10945:7345":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:554:9943":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:3042:22656":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:4495:16989":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5829:10529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:2709:2178":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:11382:11499":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:0:2129":{"crate_id":17,"path":["object"],"kind":"module"},"18:507:7645":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5882:10553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:8800:7413":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"0:22:1841":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"1:43511:7493":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10471:7829":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:40756:7463":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:1733:11353":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:3744:8664":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:3735:9215":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:3330:2186":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:14380:8605":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12605:8124":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:12769:8163":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4678:10277":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:10094:7170":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:4328:10141":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:8740:23576":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11098:7900":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11220:23705":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:2492:9246":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:3186:31883":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:7546:10862":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:9716:36577":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:6608:6888":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:1500:9972":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:10937:7498":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:40283:28513":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:7540:10861":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:43576:2155":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:48098:9735":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"11:1818:7170":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:42727:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2250:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:48060:9733":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10845:7882":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:6044:10638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:4440:6525":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:12031:1539":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:11056:23704":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"4:8141:7198":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:5028:8690":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:6788:2193":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:6156:10673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:2825:11370":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:643:16863":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:9518:7310":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:2747:6353":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:4014:9432":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:42300:7244":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:10377:7001":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"4:8480:9375":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"7:79:22500":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9850:23596":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:40313:11420":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"17:12174:8043":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:8984:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:7534:9418":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"4:10161:9397":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:434:7677":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"10:36:9889":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:2970:36538":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13847:8447":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:43949:6440":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13957:8478":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:4592:8677":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"22:0:2232":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"6:506:9911":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:46691:9707":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"9:52:7144":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"9:450:22507":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:7463:2139":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"8:0:2121":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"13:0:2120":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:8632:23573":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:43782:6493":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:2207:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"5:7282:2189":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:4895:10377":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:4315:9265":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:9505:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:14315:8587":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"9:177:7159":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:14:2098":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:45622:9674":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:47739:9719":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:43167:9639":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12815:8173":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:10765:10897":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"4:638:9238":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:2443:8632":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:1663:10079":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"22:752:6794":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"6:1603:10032":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13492:8381":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:4046:16969":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:3343:16949":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:10511:7835":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"20:8:2212":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"17:10110:7803":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:7363:1884":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:39487:9481":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:3058:7687":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:12043:751":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:4054:16971":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:5704:7083":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7433:8952":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12891:8182":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:9016:6988":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"20:249:128":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"6:500:9908":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:6796:10805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5818:10521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1595:10027":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:4117:7215":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:46213:9695":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:11979:9421":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:8997:23561":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:3524:16944":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"18:80:7293":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:8043:9022":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:13179:8236":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:22527:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:3499:6453":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:39529:7617":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:481:7643":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"20:327:7629":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"5:5954:6847":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:1776:2186":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:10419:7502":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:2375:16915":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"11:1012:9137":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:12539:8115":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:22117:28523":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:9075:7203":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:11428:7928":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"13:110:36558":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:7545:2187":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:919:7175":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:4753:8681":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13803:8436":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4401:10187":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:11450:6906":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:4965:8688":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6864:7076":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:1831:2186":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:12054:1143":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:12047:1523":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"6:4374:10175":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:8278:9263":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:9399:7307":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12502:8111":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4704:10290":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:1442:2189":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:44383:6465":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:2689:8642":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:1503:7175":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"22:470:6788":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"11:1611:6809":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:1545:9994":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:6637:6815":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7331:36564":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:5593:7222":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:5051:10463":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:2269:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:1979:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7693:7132":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"21:291:36621":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"17:11815:7976":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:8818:7200":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"5:5975:17112":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:4796:6872":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"21:67:1911":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"6:7552:10863":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:44639:9672":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:42261:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:9946:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:574:7645":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:494:9906":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:526:9928":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:2935:2271":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:44601:9667":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:2511:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:13862:8449":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:10175:6992":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4664:10276":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:21134:16585":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:1426:7171":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:8841:23579":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4824:10343":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:690:7664":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:20696:28544":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:2836:8895":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12691:8136":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"18:636:7661":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"21:228:1913":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"17:13109:8220":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:4620:8678":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:6705:10749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:11872:6473":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:5863:10551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"11:1852:7386":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7592:23523":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:8312:9361":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:45974:9689":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:5839:2138":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4446:10210":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:4489:10228":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:7231:11456":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:4564:8676":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:40939:7467":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:3300:9257":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:7574:6893":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"11:1538:9143":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:7718:2141":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12592:8123":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:1473:7173":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:9281:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:2697:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:11514:9261":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:878:6823":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13427:8341":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:6502:7356":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:5553:7079":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10458:7828":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:5775:7085":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11454:7024":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:4163:7406":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:5382:6988":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:5535:7439":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:46927:9711":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:7474:8657":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4380:10177":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:3212:7384":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13795:8434":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:5639:8706":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:7743:16897":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"5:3171:7170":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:11194:9290":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:10906:7885":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:3998:16966":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:7736:7182":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:8021:9021":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:40405:7217":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:11979:7997":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:1302:9141":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:1073:9141":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:4633:10735":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:6317:7111":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:11923:11529":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:5745:9280":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:2322:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:12354:8086":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4469:10218":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:41671:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:1918:9429":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:356:2208":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"4:2919:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"16:6160:8757":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:11337:9291":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:12050:1522":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:12448:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:5025:10446":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11955:7993":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10544:7840":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:13999:8487":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:5900:10565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"22:43:27559":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"4:5824:6876":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:1839:7398":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:47885:9722":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4770:10320":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10568:7841":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4748:10309":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:4476:8673":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:13083:8218":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:9223:7009":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:2216:16908":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:7762:28735":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:12118:8026":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:7278:10842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1690:10092":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"21:276:2255":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"17:11290:23584":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:2033:8875":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:0:500":{"crate_id":1,"path":["core"],"kind":"module"},"1:20683:7241":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12394:8094":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4794:10333":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:45734:9679":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:8389:2290":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:10266:7809":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:7313:36567":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"22:879:27561":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"4:11212:10899":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:7763:23524":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:44427:9664":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:2842:11371":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2475:11166":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:8872:23580":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:12045:753":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:1973:7327":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:2156:593":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:1845:7385":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:502:6832":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:20711:28544":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"4:6429:9285":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:43608:6481":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:43906:6483":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:2687:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:40526:7450":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:3220:8660":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:9288:6512":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:9298:6516":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11264:7918":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:6671:10743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"11:365:6807":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:30194:11167":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:10981:7348":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:5366:17099":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12435:8098":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:9821:7788":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:3200:11384":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:44038:9643":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11669:7942":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:47941:9724":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:40192:6441":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:40539:7451":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4543:10256":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4944:10411":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:5301:8693":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:256:7674":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:41586:28527":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:39494:9482":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:4698:17015":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:2699:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:43650:6485":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"20:0:1701":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"1:40742:7462":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:44159:9452":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:6838:11446":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:5238:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:2777:11363":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"15:0:2127":{"crate_id":15,"path":["addr2line"],"kind":"module"},"4:8997:32153":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:9734:7314":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:4:1026":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:12053:8010":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:12078:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:4814:8683":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13167:8229":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:2882:6871":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:2783:8889":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:3508:32532":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:2715:8643":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:2243:7179":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:40266:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7505:8658":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:474:7381":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:7593:6895":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:13303:8238":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:8949:23583":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5068:10467":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:2141:9216":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:2514:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"11:403:7376":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:12522:9454":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:14007:8489":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:7847:7559":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:21637:28548":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:8138:9034":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:8173:16925":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"5:4002:2138":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:10377:6490":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:42222:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:42927:7245":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:7418:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:2317:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:7517:10855":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5877:10552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:11996:7207":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"20:348:2207":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"16:2874:8650":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:1702:10096":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:11617:9295":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:3259:9254":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:11050:6903":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:42974:7249":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:6018:23516":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10249:7808":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:3777:8665":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:41609:9630":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:5561:17042":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"11:1822:2189":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:1590:10025":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:9497:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:9759:6932":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:4164:6839":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"4:2387:16921":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:7904:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:2749:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:22428:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:8834:9382":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10390:7823":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:8497:17037":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:6438:8783":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:47847:9721":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5967:10607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12727:8142":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:4985:6839":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"11:97:9882":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:43498:7492":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:14197:8558":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9840:7315":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7631:8970":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12106:8023":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:30455:28505":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:14205:8559":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11872:7027":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:1924:661":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"5:207:6813":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6008:10627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11924:7040":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10609:7845":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:6594:17057":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:1520:9980":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:7928:7197":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:47677:9718":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12921:8187":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:10118:7171":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:3441:8662":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:12044:752":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:13971:8480":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:5720:8707":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:736:27537":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:13771:8429":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"9:393:22508":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:41874:2189":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"16:7407:7072":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:6894:6890":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:11127:7929":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:10968:32142":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:6541:17055":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:7310:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4535:10251":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11967:7994":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:4393:6839":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:41537:11465":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11568:23587":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:8211:6480":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"5:261:6815":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6713:8828":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:44387:7229":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:2555:6868":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12982:8198":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"14:215:9125":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:44406:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:9665:36570":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:400:7676":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:2377:16916":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:1426:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:13749:8423":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:149:6800":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:7289:8912":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:43438:7488":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"11:2194:9887":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:5475:6839":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:11388:23586":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:9409:36575":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10786:7341":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:2901:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4436:10204":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:5049:9268":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4963:10419":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"4:12028:374":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"17:11905:7033":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:12745:2183":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4984:10431":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:6868:10833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:2698:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:12479:8106":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:2520:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:5673:23513":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:12012:32141":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:44355:6466":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12148:8038":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:5799:10519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:45867:9684":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:7412:9229":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:9487:6897":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:44371:6469":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:1273:9137":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:40497:7443":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:43940:6441":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12161:8042":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12318:8077":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:1257:8875":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:586:16861":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:41947:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4483:10226":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:7382:9226":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:20971:16598":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"11:760:2186":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:10575:6899":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"4:8942:17062":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6886:7120":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:5767:10501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:7061:8874":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:3517:2138":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11118:7905":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11542:7931":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13332:8258":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6036:10635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"11:657:2189":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"7:32:22493":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:590:7649":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:5622:6874":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:1184:7321":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:43520:7494":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:782:6818":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:46487:9704":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4315:10131":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:40207:6443":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"4:9110:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"15:327:7137":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:12254:8048":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11498:7929":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:3178:7385":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:10986:9383":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5920:10581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:9661:6924":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:4413:6357":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"14:165:22592":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:7211:2138":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:2168:11338":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:541:9937":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:14177:8552":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:21866:9456":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:44231:9659":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:11155:9382":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6470:7116":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:20879:16591":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:7721:11453":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:8566:9381":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:681:7662":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7073:23521":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:11591:7206":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:41883:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:8224:6482":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"6:4695:10285":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:2752:6355":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:8241:16959":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:8977:28734":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2359:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:7529:2186":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:6079:6839":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:4413:10196":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:2332:7050":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"11:667:7174":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:3321:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:10520:7836":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10313:7812":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:6425:7469":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"16:6057:22627":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:6726:10755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:1631:10056":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"20:369:2209":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"6:4616:10272":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"21:0:1702":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"6:7609:10876":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:311:7374":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:644:7645":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:11812:2157":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:2787:2143":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:2962:10878":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:7586:10870":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:41798:6509":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"0:44:1887":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"17:12878:8181":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13548:8387":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:619:6650":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:8910:17061":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:73:1521":{"crate_id":1,"path":["core","u32"],"kind":"module"},"1:40299:9616":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:43182:10982":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:40436:7433":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:1858:7387":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:2914:11376":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10351:7013":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:13659:8403":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:4738:16977":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:40506:7444":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6598:10714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5737:10476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:40488:7223":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:940:9131":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:4396:8671":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:6711:10751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:12035:1390":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"0:118:1690":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"4:5080:9268":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12642:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"11:630:7170":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"4:1888:6648":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:904:2186":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:30419:2180":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:5843:8717":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:3867:8667":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:5567:8652":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:1527:9983":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:11535:9262":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:22153:9471":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:3669:6815":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:46243:9696":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:1482:7383":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:45688:9677":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12035:8009":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:2212:6861":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"5:6798:2194":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4650:10275":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:5779:7186":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:8068:9025":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:7505:10853":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:564:6980":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:20927:28176":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:44084:9652":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:40184:6440":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13456:8352":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4949:10413":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"21:259:36620":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"4:4904:17013":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:4171:16986":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:9926:7795":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:1288:9135":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:12036:1420":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:12089:8015":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:9274:6480":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:2859:11375":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:44566:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6332:8773":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:6069:6878":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:6791:7465":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13778:8431":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:40977:6922":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:5972:7064":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:45712:9678":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10253:7334":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:1638:10060":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:6558:2189":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"9:486:22506":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:22004:7234":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:6171:10684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:46167:9694":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:3460:9258":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12333:8082":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:6977:8862":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:13069:8215":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4556:10260":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:30619:28516":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:10815:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:531:6863":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:7656:9296":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:5444:9276":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:12004:8000":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:55:9012":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:234:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:9866:7789":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:9115:9289":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:41908:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:6175:7091":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6015:10629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:96:7296":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:12905:8185":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:2741:6351":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:9153:7007":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:44622:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:11371:7926":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6724:8829":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:2594:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:4262:9433":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:7272:10840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14359:8602":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:624:36580":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"18:671:7306":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:8864:7415":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:9727:6927":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13923:8465":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:47923:9723":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:46097:9692":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10199:7806":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:43530:7495":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:261:7675":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:8113:9350":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:11007:7349":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7012:8866":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:4900:8686":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:7182:2184":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13043:8213":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"11:2060:9137":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:8252:9042":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:6930:6857":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:3160:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:46464:9703":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:42025:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13639:7041":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:30441:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:2756:2142":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13591:8394":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:2035:7197":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:2830:8894":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:43924:6495":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:4133:7404":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:9344:36569":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:2791:11367":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:6589:10708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:11813:6910":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:9706:7313":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:6128:8754":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12566:8120":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:42935:7247":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:3581:7170":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6484:8784":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:39345:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:12365:8089":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:6028:10633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:42702:8999":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:43410:7484":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:10051:7799":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"0:0:1700":{"crate_id":0,"path":["idna"],"kind":"module"},"4:12040:648":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:1587:7387":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6232:7075":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:9978:9627":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:1630:592":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"5:7474:2140":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:11668:6497":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7261:7181":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6789:8842":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:7731:7183":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:2373:8629":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:20915:16593":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:44351:6463":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"5:3238:7387":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:8965:9385":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:40574:7455":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:5970:6874":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10013:7797":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:22040:28520":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:3992:16965":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:0:2130":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:1733:10108":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:48022:9731":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:1776:7394":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:14341:8596":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:21015:16599":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:3810:8666":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:4341:10151":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:10103:9396":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"4:8290:16987":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:9899:7011":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:1121:9141":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:9153:9393":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5080:10472":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:2959:7169":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:7857:9307":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:5807:8710":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11210:7911":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"4:946:9133":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:43459:7490":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:40465:7438":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:113:7299":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:5629:6875":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:43682:6488":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:3938:6839":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"16:5689:7080":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:7445:8953":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:599:36578":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7240:36565":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11241:23706":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:40252:6439":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:5882:8720":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:21279:16926":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"4:9202:10891":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:5612:2192":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"22:386:6800":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"17:13155:7020":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:39369:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6323:7113":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:10633:7016":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:3940:16961":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:2399:8630":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:8899:23581":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:5363:23512":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:49943:16602":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4810:10339":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:21312:7230":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:22494:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:4789:28769":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:952:9134":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:5100:8692":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:2223:35184":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:30513:28515":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:40346:6916":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:12049:1521":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"16:7515:8966":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11696:7948":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"4:11175:7229":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"4:11603:32585":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:5979:10614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:4962:17020":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"6:7523:10856":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10280:7335":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:9292:6514":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:47981:9728":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:42745:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:6538:9286":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"22:636:7288":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"4:4042:16968":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6250:7106":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10812:7880":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:12046:749":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:4148:7216":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:10621:7340":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:5626:8701":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:8230:7401":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"0:117:1685":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"1:7272:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:5987:10615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:5994:23515":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:2744:2267":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:9040:9391":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"4:7020:6891":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:1411:7170":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:9032:7201":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:12041:650":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"5:7221:6826":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:11367:9294":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:5916:7058":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:7199:7388":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:6978:11151":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:4384:6915":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7525:7124":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:10956:9277":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12864:8180":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:39411:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:42181:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:13787:8432":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:2569:6866":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:5306:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:14227:8564":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"14:31:9120":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"0:7:1675":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"1:3172:11381":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6067:10644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"21:198:2258":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"4:7759:9305":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"20:257:1910":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"17:13574:8393":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:41722:1880":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:7710:16866":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:41566:7243":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:8388:2291":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4568:10269":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:653:17550":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12017:8001":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:3298:9256":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:2359:10906":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:43931:6442":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:4363:6841":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:9442:36568":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:4637:10739":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:7396:28513":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:579:9956":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13096:8219":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:22758:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"4:7912:9310":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11617:6500":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:42103:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4887:10372":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:13757:8426":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:5044:10460":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:40953:7469":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7553:7126":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"14:7:9120":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:6850:10830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:12826:8175":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:14329:8594":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:9936:16926":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:42064:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:7349:16877":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:3377:11358":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"6:4764:10317":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:3414:6839":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:10293:7810":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:9134:9290":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"18:531:7646":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:10843:32414":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:22080:28521":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:42429:6512":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:9300:6517":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:1102:7389":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13882:8456":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:9614:36572":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:7637:9234":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:14216:8563":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:32300:6356":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:40427:7220":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:8878:9278":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11791:7975":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:362:9233":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:46265:9697":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10417:7825":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6347:23517":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:40456:7435":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:46289:9698":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4389:10182":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:7568:36562":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:22028:9458":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:1118:35163":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:6571:23518":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:43854:6492":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:1544:6839":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"11:2201:2153":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:6145:6880":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:9286:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:40474:7440":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4638:10274":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11155:7909":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:22725:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:1821:2182":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:40558:7453":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:2825:8648":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:555:9235":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:8555:7412":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:11416:7023":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12646:8131":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:46645:9706":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:2926:22654":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:6987:7198":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:5737:23514":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:3720:7197":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:41986:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:881:7173":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:3295:8661":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"4:7636:16926":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11877:6472":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:6815:8843":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:40396:7432":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:13016:8211":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:7425:9231":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:43540:7496":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"4:9020:9390":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:8166:9035":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13368:8289":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:30425:6611":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:4258:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:7558:10864":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:13905:8461":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:12001:16868":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"22:1034:27563":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"6:4787:10331":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:22101:28522":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:7725:11454":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:3180:32819":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6900:7121":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:2352:8628":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:8856:7170":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:11866:6474":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:3386:7472":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"15:394:22619":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"11:836:9133":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:2567:8637":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:10430:7826":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:11231:9289":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:2517:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:20929:11337":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:5398:6989":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8956:676":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:2820:11369":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:3082:2149":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:4768:391":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"14:40:7976":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11329:23585":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:8926:17060":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:43186:7478":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:40376:7431":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:894:2138":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:44264:2151":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:8542:23562":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:5994:10616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:44067:9651":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:3594:7171":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"15:306:7365":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:5362:17098":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:7665:7129":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:2795:11365":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:6516:8790":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:1672:6815":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:42952:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:44132:9653":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:44609:9669":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:11272:7353":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10336:7482":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"11:805:16878":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11520:7680":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:39508:8932":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:11832:7979":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:3183:31888":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12936:8191":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:9475:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:6136:10659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:8457:9635":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:1673:10085":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"0:24:544":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"1:7281:2272":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:40111:9611":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10832:7881":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"11:2186:36556":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:1557:10003":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10097:7325":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:414:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:47996:9729":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:3110:9249":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"4:11287:6904":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:46021:9690":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:2606:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:44244:6475":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:4800:10336":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4587:10270":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:915:7174":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:21303:16926":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:41815:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:11310:7416":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"21:145:1912":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"4:2631:9248":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:7128:7417":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:45897:9685":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:8494:2150":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:6485:6815":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:14037:8495":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13894:8457":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:12037:1504":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:22626:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:582:7241":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:10943:9305":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:5959:7354":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:9485:36574":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:6955:6860":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:47961:9726":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:7539:7125":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:2541:8636":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:2353:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"5:4426:6841":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13991:8486":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:40172:6450":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"20:336:2206":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"1:43915:6496":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:724:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:44375:6470":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:62:17138":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:8809:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"18:699:6983":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:7372:32273":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:39267:11383":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"4:8897:9384":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:4074:7171":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:22167:9472":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:47347:9715":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:41731:7170":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:860:2189":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:4818:10342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:13981:8483":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:21101:16590":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"21:302:2256":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"4:6248:6874":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:43419:7485":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6850:8847":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4848:10353":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:41747:2189":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:1717:10103":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:47950:9725":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13683:8407":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:1976:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:4536:8675":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:1709:10099":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:8008:16952":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11557:6501":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:9977:7312":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:7707:8971":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:837:7170":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:21:689":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:7484:8964":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:40148:6447":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:12653:6880":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:14259:8579":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:1582:7386":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:2962:22655":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"7:0:1567":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:1011:6815":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:46957:9712":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:11385:7420":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"9:507:9198":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5890:10558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:1561:2138":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:10741:9406":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:7725:16867":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5590:8654":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:6565:10691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:8152:7135":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:5849:10540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:9777:23594":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:595:9966":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:1649:10068":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:3219:9252":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:4190:6522":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:20724:28696":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:10470:6898":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:21200:7230":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4740:10305":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:39329:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:44651:9145":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:5498:9277":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"16:6986:8865":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:7290:2189":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:45937:9687":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"11:2180:7370":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:7887:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:4393:6524":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:3841:9262":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11467:7026":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:7564:10865":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:119:6803":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"4:1565:2186":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:4698:8679":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:2611:8639":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:9604:6992":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:1761:615":{"crate_id":4,"path":["std","env"],"kind":"module"},"17:14054:8502":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13566:8392":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5008:10438":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:42718:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:43754:6489":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13719:8412":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12851:8178":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:14102:8539":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:8605:23560":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:6809:17064":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:10143:6487":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"16:5940:8726":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:21919:9457":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:42422:6513":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:5318:6815":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:4928:8687":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:41503:9439":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12840:8177":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:3442:9356":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:40105:6441":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:2591:9247":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:6306:17065":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:22560:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"4:3517:16924":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:11610:9295":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:1637:6609":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:3166:11379":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:1696:10095":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:41657:9444":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:43736:6490":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:40549:7224":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:4955:10414":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"22:966:6799":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"4:10339:32530":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:10581:7843":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:46567:9705":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:6130:10658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6744:10765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:1536:9988":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:7235:11455":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4716:10297":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:6296:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:10403:7824":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:41866:7171":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"5:7231:35185":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:568:9951":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:10263:7481":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:41756:2288":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:11623:7938":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"22:534:7287":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"6:4729:10301":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:9561:7311":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:12033:1061":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"16:7025:8869":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4842:10352":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6834:10824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"20:223:7625":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"1:44221:9655":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:614:36579":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12424:8097":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:44548:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:7575:10869":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:46881:9710":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:5994:7447":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:4339:6523":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:47141:9714":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:23238:7239":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:44379:6464":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:2925:2268":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:12618:8126":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:521:27539":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:10770:9307":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4938:10408":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:13830:8440":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:9990:7796":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:562:9948":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:2846:11372":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:119:17192":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:14015:8490":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:6667:8816":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:6763:8841":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11189:7020":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:43800:6494":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"0:119:1698":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"4:9027:7190":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:22461:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:8330:9363":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:4723:10298":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:3204:7386":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:736:7173":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:12053:1577":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"16:6931:8851":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12952:8192":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13949:8475":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:10529:9252":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"11:1103:9140":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:7463:8961":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6540:7117":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:2133:7330":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:48075:9734":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:1576:7385":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4291:10114":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:8161:9259":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:39455:11377":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:0:2128":{"crate_id":16,"path":["gimli"],"kind":"module"},"4:4623:16966":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:11020:7893":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:10795:7196":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:21988:7210":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:1575:10013":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:11379:7419":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:7268:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:3651:2189":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:4740:16979":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:39389:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13435:8344":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:12055:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:47970:9727":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:7438:6848":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"11:1027:22586":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"18:727:6984":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:9875:7791":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"21:266:2243":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"5:1492:7174":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:3217:35202":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12659:8132":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:40200:6442":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:14282:8580":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:11473:9260":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10330:7816":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:2771:8885":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10486:7831":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:6356:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:11033:6901":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:968:8875":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:6655:6377":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:4506:8674":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4368:10174":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:12690:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:45796:9681":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11726:7952":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:45919:9686":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:8659:23574":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12065:8013":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"18:660:7301":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11109:7904":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:1464:7172":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:1911:18541":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:8217:6487":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:42662:10974":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:8176:23526":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:1778:7395":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:20877:16926":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"10:44:7143":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"18:515:7642":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:8806:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"16:7753:8972":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:46433:9702":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10931:7887":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:7763:9306":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"4:1064:9137":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:43886:6482":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:42436:6514":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:22055:9459":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6915:36561":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12711:8137":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:42672:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:5955:10602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:42690:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"18:652:7645":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"11:844:9134":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:4609:6435":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12671:8133":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:30989:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:2461:10881":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:895:7170":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"13:226:7141":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:9246:6453":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"11:2174:9884":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:2527:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:45956:9688":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:32173:9886":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:1055:9135":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}